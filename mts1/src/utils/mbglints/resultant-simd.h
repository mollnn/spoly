// 
#pragma once

#include <atomic>
#include <chrono>
#include <cstdio>
#include <cstdlib>
#include <fstream>
#include <immintrin.h>
#include <ios>
#include <iostream>
#include <vector>
#include <tuple>
#include <array>
#include "chrono_def.h"
#include "opt_onebounce6x6.h"

namespace resultant_simd {

constexpr size_t N_DEGREE = 4;
constexpr size_t N_POLY = 9;
constexpr size_t N_MAT = N_DEGREE + 1;

constexpr size_t UNIPOLYMAT_MAX_DEG = 8; // cannot be modify

int global_poly_cutoff = N_POLY - 1;
double global_poly_cutoff_eps = 1e-9;
int global_method_mask = 0;

constexpr size_t BVP_ADD_SIZE(size_t bvp_1_size, size_t bvp_2_size) {
  return std::max(bvp_1_size, bvp_2_size);
}

constexpr size_t BVP_MUL_SIZE(size_t bvp_1_size, size_t bvp_2_size) {
  return bvp_1_size + bvp_2_size - 1;
}

template <size_t Size> struct UnivariatePolyMatrix {

  UnivariatePolyMatrix<Size>() {
    for (int i = 0; i < Size; ++i)
      for (int j = 0; j < Size; ++j) {
        for (int k = 0; k < UNIPOLYMAT_MAX_DEG; ++k) {
          matrix[i][j][k] = _mm256_setzero_pd();
        }
      }
  }

  __m256d matrix[Size][Size][UNIPOLYMAT_MAX_DEG];

std::vector<
      Resultant::UnivariatePolynomial>
  determinant() const {
    printf(
        "No general implementation -- UnivariatePolyMatrix::determinant()\n");
  }
};

template <size_t Size> struct BVP {
public:
  BVP() { printf("No general implementation -- BVP<%ld>()\n", Size); }

  explicit BVP(const double d) { coeffs[0][0] = _mm256_broadcast_sd(&d); }

  explicit BVP(const double *_coeffs) {
    printf("No general implementation -- BVP<%ld>()\n", Size);
  }

  template <size_t Other_Size, size_t Res_size = BVP_ADD_SIZE(Size, Other_Size)>
  BVP<Res_size> operator+(const BVP<Other_Size> &other) const {
    printf("No general implementation -- BVP<%ld>+()\n", Size);
  }

  template <size_t Other_Size, size_t Res_size = BVP_ADD_SIZE(Size, Other_Size)>
  BVP<Res_size> operator-(const BVP<Other_Size> &other) const {
    printf("No general implementation -- BVP<%ld>-()\n", Size);
  }

  template <size_t Other_Size, size_t Res_size = BVP_MUL_SIZE(Size, Other_Size)>
  BVP<Res_size> operator*(const BVP<Other_Size> &other) const {
    printf("No general implementation -- BVP<%ld>*()\n", Size);
  }

  BVP<Size> operator*(const double) const {
    printf("No general implementation -- BVP<%ld>*(double)\n", Size);
  }

  void print() const {
    printf("No general implementation -- BVP<%ld>print()\n", Size);
  }

public:
  __m256d coeffs[Size][Size];
};

template <size_t Size> struct BVP3 {

public:
  BVP3() {}

  BVP3(const double *_x, const double *_y, const double *_z)
      : x(_x), y(_y), z(_z) {}

  BVP3(const BVP<Size> &_x, const BVP<Size> &_y, const BVP<Size> &_z)
      : x(_x), y(_y), z(_z) {}

  template <size_t Other_Size, size_t Res_Size = BVP_MUL_SIZE(Size, Other_Size)>
  BVP<Res_Size> dot(const BVP3<Other_Size> &other) const {
    return x * other.x + y * other.y + z * other.z;
  }

  template <size_t Other_Size, size_t Res_size = BVP_MUL_SIZE(Size, Other_Size)>
  BVP3<Res_size> cross(const BVP3<Other_Size> &other) const {
    return {
        y * other.z - z * other.y, //
        z * other.x - x * other.z, //
        x * other.y - y * other.x  //
    };
  }

  template <size_t Other_Size, size_t Res_Size = BVP_MUL_SIZE(Size, Other_Size)>
  BVP3<Res_Size> operator*(const BVP3<Other_Size> &other) const {
    return {x * other.x, y * other.y, z * other.z};
  }

  template <size_t Other_Size, size_t Res_Size = BVP_MUL_SIZE(Size, Other_Size)>
  BVP3<Res_Size> operator*(const BVP<Other_Size> &other) const {
    return {x * other, y * other, z * other};
  }

  template <size_t Other_Size, size_t Res_Size = BVP_ADD_SIZE(Size, Other_Size)>
  BVP3<Res_Size> operator-(const BVP3<Other_Size> &other) const {
    return {x - other.x, y - other.y, z - other.z};
  }

    template <size_t Other_Size, size_t Res_Size = BVP_ADD_SIZE(Size, Other_Size)>
  BVP3<Res_Size> operator+(const BVP3<Other_Size> &other) const {
    return {x + other.x, y + other.y, z + other.z};
  }

  BVP3<Size> operator*(const double d) const { return {x * d, y * d, z * d}; }

  void print() const {
    x.print();
    y.print();
    z.print();
  }

public:
  BVP<Size> x, y, z;
};

template <size_t Poly1_Size, size_t Poly2_Size, size_t Matrix_Size>
UnivariatePolyMatrix<Matrix_Size> bezout_matrix(const BVP<Poly1_Size> &poly1,
                                                const BVP<Poly2_Size> &poly2) {
  printf("No general implementation -- bezout_matrix<%ld. %ld, %ld>()\n",
         Poly1_Size, Poly2_Size, Matrix_Size);
}

}; // namespace resultant_simd

namespace resultant_simd {
/**
 * Size = 1 Specification
 */
template <> BVP<1ul>::BVP() { coeffs[0][0] = _mm256_setzero_pd(); }

template <> BVP<1ul>::BVP(const double *_coeffs) {
  coeffs[0][0] = _mm256_load_pd(&_coeffs[0]);
}

template <>
template <>
BVP<1ul> BVP<1ul>::operator-(const BVP<1ul> &other) const {
  BVP<1ul> result;
  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  return result;
}

/**
 * Size = 2 Specification
 */

template <> BVP<2ul>::BVP() {
  coeffs[0][0] = _mm256_setzero_pd();
  coeffs[0][1] = _mm256_setzero_pd();
  coeffs[1][0] = _mm256_setzero_pd();
}

//! loadu_pd ???
template <> BVP<2ul>::BVP(const double *_coeffs) {
  coeffs[0][0] = _mm256_load_pd(&_coeffs[0]);
  coeffs[0][1] = _mm256_load_pd(&_coeffs[4]);
  coeffs[1][0] = _mm256_load_pd(&_coeffs[8]);
}

template <>
template <>
BVP<2ul> BVP<1ul>::operator-(const BVP<2ul> &other) const {

  BVP<2ul> result;

  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_sub_pd(result.coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[1][0] = _mm256_sub_pd(result.coeffs[1][0], other.coeffs[1][0]);

  return result;
};

template <>
template <>
BVP<2ul> BVP<2ul>::operator-(const BVP<2ul> &other) const {
  BVP<2ul> res;
  res.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  res.coeffs[0][1] = _mm256_sub_pd(coeffs[0][1], other.coeffs[0][1]);
  res.coeffs[1][0] = _mm256_sub_pd(coeffs[1][0], other.coeffs[1][0]);
  return res;
}

template <>
template <>
BVP<2ul> BVP<2ul>::operator*(const BVP<1ul> &other) const {

  BVP<2ul> result;

  /**
   * result.coeffs[0][0] += coeffs[0][0] * other.coeffs[0][0];
   */
  result.coeffs[0][0] = _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]);

  /**
   * result.coeffs[0][1] += coeffs[0][1] * other.coeffs[0][0];
   */

  result.coeffs[0][1] = _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]);

  /**
   * result.coeffs[1][0] += coeffs[1][0] * other.coeffs[0][0];
   */
  result.coeffs[1][0] = _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]);

  return result;
}

template <>
template <>
BVP<2ul> BVP<2ul>::operator-(const BVP<1ul> &other) const {
  BVP<2ul> result;

  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = coeffs[0][1];
  result.coeffs[1][0] = coeffs[1][0];

  return result;
}

/**
 * Size = 3 Specification
 */

template <> BVP<3ul>::BVP() {
  coeffs[0][0] = _mm256_setzero_pd();
  coeffs[0][1] = _mm256_setzero_pd();
  coeffs[0][2] = _mm256_setzero_pd();
  coeffs[1][0] = _mm256_setzero_pd();
  coeffs[1][1] = _mm256_setzero_pd();
  coeffs[2][0] = _mm256_setzero_pd();
}

template <> BVP<3ul>::BVP(const double *_coeffs) {
  coeffs[0][0] = _mm256_load_pd(&_coeffs[0]);
  coeffs[0][1] = _mm256_load_pd(&_coeffs[4]);
  coeffs[0][2] = _mm256_load_pd(&_coeffs[8]);
  coeffs[1][0] = _mm256_load_pd(&_coeffs[12]);
  coeffs[1][1] = _mm256_load_pd(&_coeffs[16]);
  coeffs[2][0] = _mm256_load_pd(&_coeffs[20]);
}

template <>
template <>
BVP<3ul> BVP<3ul>::operator+(const BVP<3ul> &other) const {
  BVP<3ul> res;
  res.coeffs[0][0] = _mm256_add_pd(coeffs[0][0], other.coeffs[0][0]);
  res.coeffs[0][1] = _mm256_add_pd(coeffs[0][1], other.coeffs[0][1]);
  res.coeffs[0][2] = _mm256_add_pd(coeffs[0][2], other.coeffs[0][2]);
  res.coeffs[1][0] = _mm256_add_pd(coeffs[1][0], other.coeffs[1][0]);
  res.coeffs[1][1] = _mm256_add_pd(coeffs[1][1], other.coeffs[1][1]);
  res.coeffs[2][0] = _mm256_add_pd(coeffs[2][0], other.coeffs[2][0]);
  return res;
}

template <>
template <>
BVP<3ul> BVP<3ul>::operator-(const BVP<3ul> &other) const {
  BVP<3ul> res;
  res.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  res.coeffs[0][1] = _mm256_sub_pd(coeffs[0][1], other.coeffs[0][1]);
  res.coeffs[0][2] = _mm256_sub_pd(coeffs[0][2], other.coeffs[0][2]);
  res.coeffs[1][0] = _mm256_sub_pd(coeffs[1][0], other.coeffs[1][0]);
  res.coeffs[1][1] = _mm256_sub_pd(coeffs[1][1], other.coeffs[1][1]);
  res.coeffs[2][0] = _mm256_sub_pd(coeffs[2][0], other.coeffs[2][0]);
  return res;
}

template <> void BVP<3ul>::print() const {
  double pd[4];
  for (int y = 0; y < 3; ++y) {
    for (int x = 0; x < 3; ++x) {
      _mm256_store_pd(pd, coeffs[y][x]);

      printf("%.2lf ", pd[0]);
    }
    printf("\n");
  }
  printf("\n");
}

template <>
template <>
BVP<3ul> BVP<2ul>::operator*(const BVP<2ul> &other) const {

  BVP<3ul> result;

  /**
   * result.coeffs[0][0] += coeffs[0][0] * other.coeffs[0][0];
   */
  result.coeffs[0][0] = _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]);

  /**
   * result.coeffs[0][1] += coeffs[0][0] * other.coeffs[0][1];
   * result.coeffs[0][1] += coeffs[0][1] * other.coeffs[0][0];
   */
  __m256d tmp1 = _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]);
  __m256d tmp2 = _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_add_pd(tmp1, tmp2);

  /**
   *   result.coeffs[0][2] += coeffs[0][1] * other.coeffs[0][1];
   */
  result.coeffs[0][2] = _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]);

  /**
   * result.coeffs[1][0] += coeffs[0][0] * other.coeffs[1][0];
   * result.coeffs[1][0] += coeffs[1][0] * other.coeffs[0][0];
   */
  tmp1 = _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]);
  tmp2 = _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]);
  result.coeffs[1][0] = _mm256_add_pd(tmp1, tmp2);

  /**
   * result.coeffs[1][1] += coeffs[0][1] * other.coeffs[1][0];
   * result.coeffs[1][1] += coeffs[1][0] * other.coeffs[0][1];
   */
  tmp1 = _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]);
  tmp2 = _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]);
  result.coeffs[1][1] = _mm256_add_pd(tmp1, tmp2);

  /**
   *   result.coeffs[2][0] += coeffs[1][0] * other.coeffs[1][0];
   */

  result.coeffs[2][0] = _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]);

  return result;
}

/**
 * Size = 5 Specification
 */

template <> BVP<5ul>::BVP() {
  coeffs[0][0] = _mm256_setzero_pd();
  coeffs[0][1] = _mm256_setzero_pd();
  coeffs[0][2] = _mm256_setzero_pd();
  coeffs[0][3] = _mm256_setzero_pd();
  coeffs[0][4] = _mm256_setzero_pd();
  coeffs[1][0] = _mm256_setzero_pd();
  coeffs[1][1] = _mm256_setzero_pd();
  coeffs[1][2] = _mm256_setzero_pd();
  coeffs[1][3] = _mm256_setzero_pd();
  coeffs[2][0] = _mm256_setzero_pd();
  coeffs[2][1] = _mm256_setzero_pd();
  coeffs[2][2] = _mm256_setzero_pd();
  coeffs[3][0] = _mm256_setzero_pd();
  coeffs[3][1] = _mm256_setzero_pd();
  coeffs[4][0] = _mm256_setzero_pd();
}

template <> BVP<5ul>::BVP(const double *_coeffs) {
  coeffs[0][0] = _mm256_load_pd(&_coeffs[0]);
  coeffs[0][1] = _mm256_load_pd(&_coeffs[4]);
  coeffs[0][2] = _mm256_load_pd(&_coeffs[8]);
  coeffs[0][3] = _mm256_load_pd(&_coeffs[12]);
  coeffs[0][4] = _mm256_load_pd(&_coeffs[16]);
  coeffs[1][0] = _mm256_load_pd(&_coeffs[20]);
  coeffs[1][1] = _mm256_load_pd(&_coeffs[24]);
  coeffs[1][2] = _mm256_load_pd(&_coeffs[28]);
  coeffs[1][3] = _mm256_load_pd(&_coeffs[32]);
  coeffs[2][0] = _mm256_load_pd(&_coeffs[36]);
  coeffs[2][1] = _mm256_load_pd(&_coeffs[40]);
  coeffs[2][2] = _mm256_load_pd(&_coeffs[44]);
  coeffs[3][0] = _mm256_load_pd(&_coeffs[48]);
  coeffs[3][1] = _mm256_load_pd(&_coeffs[52]);
  coeffs[4][0] = _mm256_load_pd(&_coeffs[56]);
}

template <>
template <>
BVP<5ul> BVP<5ul>::operator+(const BVP<5ul> &other) const {
  BVP<5ul> res;
  res.coeffs[0][0] = _mm256_add_pd(coeffs[0][0], other.coeffs[0][0]);
  res.coeffs[0][1] = _mm256_add_pd(coeffs[0][1], other.coeffs[0][1]);
  res.coeffs[0][2] = _mm256_add_pd(coeffs[0][2], other.coeffs[0][2]);
  res.coeffs[0][3] = _mm256_add_pd(coeffs[0][3], other.coeffs[0][3]);
  res.coeffs[0][4] = _mm256_add_pd(coeffs[0][4], other.coeffs[0][4]);
  res.coeffs[1][0] = _mm256_add_pd(coeffs[1][0], other.coeffs[1][0]);
  res.coeffs[1][1] = _mm256_add_pd(coeffs[1][1], other.coeffs[1][1]);
  res.coeffs[1][2] = _mm256_add_pd(coeffs[1][2], other.coeffs[1][2]);
  res.coeffs[1][3] = _mm256_add_pd(coeffs[1][3], other.coeffs[1][3]);
  res.coeffs[2][0] = _mm256_add_pd(coeffs[2][0], other.coeffs[2][0]);
  res.coeffs[2][1] = _mm256_add_pd(coeffs[2][1], other.coeffs[2][1]);
  res.coeffs[2][2] = _mm256_add_pd(coeffs[2][2], other.coeffs[2][2]);
  res.coeffs[3][0] = _mm256_add_pd(coeffs[3][0], other.coeffs[3][0]);
  res.coeffs[3][1] = _mm256_add_pd(coeffs[3][1], other.coeffs[3][1]);
  res.coeffs[4][0] = _mm256_add_pd(coeffs[4][0], other.coeffs[4][0]);
  return res;
}

template <>
template <>
BVP<5ul> BVP<3ul>::operator*(const BVP<3ul> &other) const {

  BVP<5ul> result;

  /**
   * result.coeffs[0][0] += coeffs[0][0] * other.coeffs[0][0];
   */
  result.coeffs[0][0] = _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]);

  {
    /**
     * result.coeffs[0][1] += coeffs[0][0] * other.coeffs[0][1];
     * result.coeffs[0][1] += coeffs[0][1] * other.coeffs[0][0];
     */
    __m256d tmp1 = _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]);
    result.coeffs[0][1] = _mm256_add_pd(tmp1, tmp2);
  }

  {
    //   result.coeffs[0][2] += coeffs[0][0] * other.coeffs[0][2];
    //   result.coeffs[0][2] += coeffs[0][1] * other.coeffs[0][1];
    //   result.coeffs[0][2] += coeffs[0][2] * other.coeffs[0][0];

    __m256d tmp1 = _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]);
    tmp1 = _mm256_add_pd(tmp1, tmp2);
    result.coeffs[0][2] = _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]);
    result.coeffs[0][2] = _mm256_add_pd(result.coeffs[0][2], tmp1);
  }

  {
    //   result.coeffs[0][3] += coeffs[0][1] * other.coeffs[0][2];
    //   result.coeffs[0][3] += coeffs[0][2] * other.coeffs[0][1];
    __m256d tmp1 = _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]);
    result.coeffs[0][3] = _mm256_add_pd(tmp1, tmp2);
  }

  //   result.coeffs[0][4] += coeffs[0][2] * other.coeffs[0][2];
  result.coeffs[0][4] = _mm256_mul_pd(coeffs[0][2], other.coeffs[0][2]);

  {
    //   result.coeffs[1][0] += coeffs[0][0] * other.coeffs[1][0];
    //   result.coeffs[1][0] += coeffs[1][0] * other.coeffs[0][0];
    __m256d tmp1 = _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]);
    result.coeffs[1][0] = _mm256_add_pd(tmp1, tmp2);
  }
  {
    //   result.coeffs[1][1] += coeffs[0][0] * other.coeffs[1][1];
    //   result.coeffs[1][1] += coeffs[0][1] * other.coeffs[1][0];
    //   result.coeffs[1][1] += coeffs[1][0] * other.coeffs[0][1];
    //   result.coeffs[1][1] += coeffs[1][1] * other.coeffs[0][0];
    __m256d tmp1 = _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]);
    tmp1 = _mm256_add_pd(tmp1, tmp2);

    __m256d tmp3 = _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]);
    __m256d tmp4 = _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]);
    tmp3 = _mm256_add_pd(tmp3, tmp4);

    result.coeffs[1][1] = _mm256_add_pd(tmp1, tmp3);
  }

  {
    //   result.coeffs[1][2] += coeffs[0][1] * other.coeffs[1][1];
    //   result.coeffs[1][2] += coeffs[0][2] * other.coeffs[1][0];
    //   result.coeffs[1][2] += coeffs[1][0] * other.coeffs[0][2];
    //   result.coeffs[1][2] += coeffs[1][1] * other.coeffs[0][1];

    __m256d tmp1 = _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]);
    tmp1 = _mm256_add_pd(tmp1, tmp2);

    __m256d tmp3 = _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]);
    __m256d tmp4 = _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]);
    tmp3 = _mm256_add_pd(tmp3, tmp4);

    result.coeffs[1][2] = _mm256_add_pd(tmp1, tmp3);
  }

  {
    //   result.coeffs[1][3] += coeffs[0][2] * other.coeffs[1][1];
    //   result.coeffs[1][3] += coeffs[1][1] * other.coeffs[0][2];

    __m256d tmp1 = _mm256_mul_pd(coeffs[0][2], other.coeffs[1][1]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[1][1], other.coeffs[0][2]);
    result.coeffs[1][3] = _mm256_add_pd(tmp1, tmp2);
  }

  {
    //   result.coeffs[2][0] += coeffs[0][0] * other.coeffs[2][0];
    //   result.coeffs[2][0] += coeffs[1][0] * other.coeffs[1][0];
    //   result.coeffs[2][0] += coeffs[2][0] * other.coeffs[0][0];

    __m256d tmp1 = _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]);
    tmp1 = _mm256_add_pd(tmp1, tmp2);
    result.coeffs[2][0] = _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]);
    result.coeffs[2][0] = _mm256_add_pd(result.coeffs[2][0], tmp1);
  }

  {
    //   result.coeffs[2][1] += coeffs[0][1] * other.coeffs[2][0];
    //   result.coeffs[2][1] += coeffs[1][0] * other.coeffs[1][1];
    //   result.coeffs[2][1] += coeffs[1][1] * other.coeffs[1][0];
    //   result.coeffs[2][1] += coeffs[2][0] * other.coeffs[0][1];

    __m256d tmp1 = _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]);
    tmp1 = _mm256_add_pd(tmp1, tmp2);

    __m256d tmp3 = _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]);
    __m256d tmp4 = _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]);
    tmp3 = _mm256_add_pd(tmp3, tmp4);

    result.coeffs[2][1] = _mm256_add_pd(tmp1, tmp3);
  }

  {
    //   result.coeffs[2][2] += coeffs[0][2] * other.coeffs[2][0];
    //   result.coeffs[2][2] += coeffs[1][1] * other.coeffs[1][1];
    //   result.coeffs[2][2] += coeffs[2][0] * other.coeffs[0][2];

    __m256d tmp1 = _mm256_mul_pd(coeffs[0][2], other.coeffs[2][0]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[1][1], other.coeffs[1][1]);
    tmp1 = _mm256_add_pd(tmp1, tmp2);
    result.coeffs[2][2] = _mm256_mul_pd(coeffs[2][0], other.coeffs[0][2]);
    result.coeffs[2][2] = _mm256_add_pd(result.coeffs[2][2], tmp1);
  }

  {
    //   result.coeffs[3][0] += coeffs[1][0] * other.coeffs[2][0];
    //   result.coeffs[3][0] += coeffs[2][0] * other.coeffs[1][0];

    __m256d tmp1 = _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]);
    result.coeffs[3][0] = _mm256_add_pd(tmp1, tmp2);
  }

  {
    //   result.coeffs[3][1] += coeffs[1][1] * other.coeffs[2][0];
    //   result.coeffs[3][1] += coeffs[2][0] * other.coeffs[1][1];

    __m256d tmp1 = _mm256_mul_pd(coeffs[1][1], other.coeffs[2][0]);
    __m256d tmp2 = _mm256_mul_pd(coeffs[2][0], other.coeffs[1][1]);
    result.coeffs[3][1] = _mm256_add_pd(tmp1, tmp2);
  }

  //   result.coeffs[4][0] += coeffs[2][0] * other.coeffs[2][0];

  result.coeffs[4][0] = _mm256_mul_pd(coeffs[2][0], other.coeffs[2][0]);

  return result;
}

template<>
BVP<7ul>::BVP() {
  coeffs[0][0] = _mm256_setzero_pd();
  coeffs[0][1] = _mm256_setzero_pd();
  coeffs[0][2] = _mm256_setzero_pd();
  coeffs[0][3] = _mm256_setzero_pd();
  coeffs[0][4] = _mm256_setzero_pd();
  coeffs[0][5] = _mm256_setzero_pd();
  coeffs[0][6] = _mm256_setzero_pd();

  coeffs[1][0] = _mm256_setzero_pd();
  coeffs[1][1] = _mm256_setzero_pd();
  coeffs[1][2] = _mm256_setzero_pd();
  coeffs[1][3] = _mm256_setzero_pd();
  coeffs[1][4] = _mm256_setzero_pd();
  coeffs[1][5] = _mm256_setzero_pd();

  coeffs[2][0] = _mm256_setzero_pd();
  coeffs[2][1] = _mm256_setzero_pd();
  coeffs[2][2] = _mm256_setzero_pd();
  coeffs[2][3] = _mm256_setzero_pd();
  coeffs[2][4] = _mm256_setzero_pd();

  coeffs[3][0] = _mm256_setzero_pd();
  coeffs[3][1] = _mm256_setzero_pd();
  coeffs[3][2] = _mm256_setzero_pd();
  coeffs[3][3] = _mm256_setzero_pd();
 
  coeffs[4][0] = _mm256_setzero_pd();
  coeffs[4][1] = _mm256_setzero_pd();
  coeffs[4][2] = _mm256_setzero_pd();
 
  coeffs[5][0] = _mm256_setzero_pd();
  coeffs[5][1] = _mm256_setzero_pd();

  coeffs[6][0] = _mm256_setzero_pd();
}

template <>
template <>
BVP<7ul> BVP<5ul>::operator*(const BVP<3ul> &other) const {
  BVP<7ul> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][1]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][2]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][0]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][1]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][2]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][0]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][1]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][2]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][2]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][1]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][2]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][2]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][2]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][1]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][1]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][2]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][2]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][1]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][1]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][0]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][2]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][1]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][0]));

  return result;
}

template <>
template <>
BVP<7ul> BVP<7ul>::operator-(const BVP<7ul> &other) const {
  BVP<7ul> result;

  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_sub_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_sub_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_sub_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_sub_pd(coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[0][5] = _mm256_sub_pd(coeffs[0][5], other.coeffs[0][5]);
  result.coeffs[0][6] = _mm256_sub_pd(coeffs[0][6], other.coeffs[0][6]);
  result.coeffs[1][0] = _mm256_sub_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_sub_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_sub_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_sub_pd(coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[1][4] = _mm256_sub_pd(coeffs[1][4], other.coeffs[1][4]);
  result.coeffs[1][5] = _mm256_sub_pd(coeffs[1][5], other.coeffs[1][5]);
  result.coeffs[2][0] = _mm256_sub_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_sub_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_sub_pd(coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[2][3] = _mm256_sub_pd(coeffs[2][3], other.coeffs[2][3]);
  result.coeffs[2][4] = _mm256_sub_pd(coeffs[2][4], other.coeffs[2][4]);
  result.coeffs[3][0] = _mm256_sub_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_sub_pd(coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[3][2] = _mm256_sub_pd(coeffs[3][2], other.coeffs[3][2]);
  result.coeffs[3][3] = _mm256_sub_pd(coeffs[3][3], other.coeffs[3][3]);
  result.coeffs[4][0] = _mm256_sub_pd(coeffs[4][0], other.coeffs[4][0]);
  result.coeffs[4][1] = _mm256_sub_pd(coeffs[4][1], other.coeffs[4][1]);
  result.coeffs[4][2] = _mm256_sub_pd(coeffs[4][2], other.coeffs[4][2]);
  result.coeffs[5][0] = _mm256_sub_pd(coeffs[5][0], other.coeffs[5][0]);
  result.coeffs[5][1] = _mm256_sub_pd(coeffs[5][1], other.coeffs[5][1]);
  result.coeffs[6][0] = _mm256_sub_pd(coeffs[6][0], other.coeffs[6][0]);

  return result;
}

template <> BVP<7ul> BVP<7ul>::operator*(const double d) const {
  BVP<7ul> result;

  __m256d scalar = _mm256_broadcast_sd(&d);

  result.coeffs[0][0] = _mm256_mul_pd(coeffs[0][0], scalar);
  result.coeffs[0][1] = _mm256_mul_pd(coeffs[0][1], scalar);
  result.coeffs[0][2] = _mm256_mul_pd(coeffs[0][2], scalar);
  result.coeffs[0][3] = _mm256_mul_pd(coeffs[0][3], scalar);
  result.coeffs[0][4] = _mm256_mul_pd(coeffs[0][4], scalar);
  result.coeffs[0][5] = _mm256_mul_pd(coeffs[0][5], scalar);
  result.coeffs[0][6] = _mm256_mul_pd(coeffs[0][6], scalar);
  result.coeffs[1][0] = _mm256_mul_pd(coeffs[1][0], scalar);
  result.coeffs[1][1] = _mm256_mul_pd(coeffs[1][1], scalar);
  result.coeffs[1][2] = _mm256_mul_pd(coeffs[1][2], scalar);
  result.coeffs[1][3] = _mm256_mul_pd(coeffs[1][3], scalar);
  result.coeffs[1][4] = _mm256_mul_pd(coeffs[1][4], scalar);
  result.coeffs[1][5] = _mm256_mul_pd(coeffs[1][5], scalar);
  result.coeffs[2][0] = _mm256_mul_pd(coeffs[2][0], scalar);
  result.coeffs[2][1] = _mm256_mul_pd(coeffs[2][1], scalar);
  result.coeffs[2][2] = _mm256_mul_pd(coeffs[2][2], scalar);
  result.coeffs[2][3] = _mm256_mul_pd(coeffs[2][3], scalar);
  result.coeffs[2][4] = _mm256_mul_pd(coeffs[2][4], scalar);
  result.coeffs[3][0] = _mm256_mul_pd(coeffs[3][0], scalar);
  result.coeffs[3][1] = _mm256_mul_pd(coeffs[3][1], scalar);
  result.coeffs[3][2] = _mm256_mul_pd(coeffs[3][2], scalar);
  result.coeffs[3][3] = _mm256_mul_pd(coeffs[3][3], scalar);
  result.coeffs[4][0] = _mm256_mul_pd(coeffs[4][0], scalar);
  result.coeffs[4][1] = _mm256_mul_pd(coeffs[4][1], scalar);
  result.coeffs[4][2] = _mm256_mul_pd(coeffs[4][2], scalar);
  result.coeffs[5][0] = _mm256_mul_pd(coeffs[5][0], scalar);
  result.coeffs[5][1] = _mm256_mul_pd(coeffs[5][1], scalar);
  result.coeffs[6][0] = _mm256_mul_pd(coeffs[6][0], scalar);
  return result;
}

template <> BVP<4ul>::BVP() {
    coeffs[0][0] = _mm256_setzero_pd();
    coeffs[0][1] = _mm256_setzero_pd();
    coeffs[0][2] = _mm256_setzero_pd();
    coeffs[0][3] = _mm256_setzero_pd();

    coeffs[1][0] = _mm256_setzero_pd();
    coeffs[1][1] = _mm256_setzero_pd();
    coeffs[1][2] = _mm256_setzero_pd();

    coeffs[2][0] = _mm256_setzero_pd();
    coeffs[2][1] = _mm256_setzero_pd();

    coeffs[3][0] = _mm256_setzero_pd();
}

template <> BVP<6ul>::BVP() {
    coeffs[0][0] = _mm256_setzero_pd();
    coeffs[0][1] = _mm256_setzero_pd();
    coeffs[0][2] = _mm256_setzero_pd();
    coeffs[0][3] = _mm256_setzero_pd();
    coeffs[0][4] = _mm256_setzero_pd();
    coeffs[0][5] = _mm256_setzero_pd();

    coeffs[1][0] = _mm256_setzero_pd();
    coeffs[1][1] = _mm256_setzero_pd();
    coeffs[1][2] = _mm256_setzero_pd();
    coeffs[1][3] = _mm256_setzero_pd();
    coeffs[1][4] = _mm256_setzero_pd();

    coeffs[2][0] = _mm256_setzero_pd();
    coeffs[2][1] = _mm256_setzero_pd();
    coeffs[2][2] = _mm256_setzero_pd();
    coeffs[2][3] = _mm256_setzero_pd();

    coeffs[3][0] = _mm256_setzero_pd();
    coeffs[3][1] = _mm256_setzero_pd();
    coeffs[3][2] = _mm256_setzero_pd();

    coeffs[4][0] = _mm256_setzero_pd();
    coeffs[4][1] = _mm256_setzero_pd();

    coeffs[5][0] = _mm256_setzero_pd();
}

template <> BVP<8ul>::BVP() {
    coeffs[0][0] = _mm256_setzero_pd();
    coeffs[0][1] = _mm256_setzero_pd();
    coeffs[0][2] = _mm256_setzero_pd();
    coeffs[0][3] = _mm256_setzero_pd();
    coeffs[0][4] = _mm256_setzero_pd();
    coeffs[0][5] = _mm256_setzero_pd();
    coeffs[0][6] = _mm256_setzero_pd();
    coeffs[0][7] = _mm256_setzero_pd();

    coeffs[1][0] = _mm256_setzero_pd();
    coeffs[1][1] = _mm256_setzero_pd();
    coeffs[1][2] = _mm256_setzero_pd();
    coeffs[1][3] = _mm256_setzero_pd();
    coeffs[1][4] = _mm256_setzero_pd();
    coeffs[1][5] = _mm256_setzero_pd();
    coeffs[1][6] = _mm256_setzero_pd();

    coeffs[2][0] = _mm256_setzero_pd();
    coeffs[2][1] = _mm256_setzero_pd();
    coeffs[2][2] = _mm256_setzero_pd();
    coeffs[2][3] = _mm256_setzero_pd();
    coeffs[2][4] = _mm256_setzero_pd();
    coeffs[2][5] = _mm256_setzero_pd();

    coeffs[3][0] = _mm256_setzero_pd();
    coeffs[3][1] = _mm256_setzero_pd();
    coeffs[3][2] = _mm256_setzero_pd();
    coeffs[3][3] = _mm256_setzero_pd();
    coeffs[3][4] = _mm256_setzero_pd();

    coeffs[4][0] = _mm256_setzero_pd();
    coeffs[4][1] = _mm256_setzero_pd();
    coeffs[4][2] = _mm256_setzero_pd();
    coeffs[4][3] = _mm256_setzero_pd();

    coeffs[5][0] = _mm256_setzero_pd();
    coeffs[5][1] = _mm256_setzero_pd();
    coeffs[5][2] = _mm256_setzero_pd();

    coeffs[6][0] = _mm256_setzero_pd();
    coeffs[6][1] = _mm256_setzero_pd();

    coeffs[7][0] = _mm256_setzero_pd();
}

template <> BVP<9ul>::BVP() {
    coeffs[0][0] = _mm256_setzero_pd();
    coeffs[0][1] = _mm256_setzero_pd();
    coeffs[0][2] = _mm256_setzero_pd();
    coeffs[0][3] = _mm256_setzero_pd();
    coeffs[0][4] = _mm256_setzero_pd();
    coeffs[0][5] = _mm256_setzero_pd();
    coeffs[0][6] = _mm256_setzero_pd();
    coeffs[0][7] = _mm256_setzero_pd();
    coeffs[0][8] = _mm256_setzero_pd();

    coeffs[1][0] = _mm256_setzero_pd();
    coeffs[1][1] = _mm256_setzero_pd();
    coeffs[1][2] = _mm256_setzero_pd();
    coeffs[1][3] = _mm256_setzero_pd();
    coeffs[1][4] = _mm256_setzero_pd();
    coeffs[1][5] = _mm256_setzero_pd();
    coeffs[1][6] = _mm256_setzero_pd();
    coeffs[1][7] = _mm256_setzero_pd();

    coeffs[2][0] = _mm256_setzero_pd();
    coeffs[2][1] = _mm256_setzero_pd();
    coeffs[2][2] = _mm256_setzero_pd();
    coeffs[2][3] = _mm256_setzero_pd();
    coeffs[2][4] = _mm256_setzero_pd();
    coeffs[2][5] = _mm256_setzero_pd();
    coeffs[2][6] = _mm256_setzero_pd();

    coeffs[3][0] = _mm256_setzero_pd();
    coeffs[3][1] = _mm256_setzero_pd();
    coeffs[3][2] = _mm256_setzero_pd();
    coeffs[3][3] = _mm256_setzero_pd();
    coeffs[3][4] = _mm256_setzero_pd();
    coeffs[3][5] = _mm256_setzero_pd();

    coeffs[4][0] = _mm256_setzero_pd();
    coeffs[4][1] = _mm256_setzero_pd();
    coeffs[4][2] = _mm256_setzero_pd();
    coeffs[4][3] = _mm256_setzero_pd();
    coeffs[4][4] = _mm256_setzero_pd();

    coeffs[5][0] = _mm256_setzero_pd();
    coeffs[5][1] = _mm256_setzero_pd();
    coeffs[5][2] = _mm256_setzero_pd();
    coeffs[5][3] = _mm256_setzero_pd();

    coeffs[6][0] = _mm256_setzero_pd();
    coeffs[6][1] = _mm256_setzero_pd();
    coeffs[6][2] = _mm256_setzero_pd();

    coeffs[7][0] = _mm256_setzero_pd();
    coeffs[7][1] = _mm256_setzero_pd();

    coeffs[8][0] = _mm256_setzero_pd();
}

template <> BVP<11ul>::BVP() {
    coeffs[0][0] = _mm256_setzero_pd();
    coeffs[0][1] = _mm256_setzero_pd();
    coeffs[0][2] = _mm256_setzero_pd();
    coeffs[0][3] = _mm256_setzero_pd();
    coeffs[0][4] = _mm256_setzero_pd();
    coeffs[0][5] = _mm256_setzero_pd();
    coeffs[0][6] = _mm256_setzero_pd();
    coeffs[0][7] = _mm256_setzero_pd();
    coeffs[0][8] = _mm256_setzero_pd();
    coeffs[0][9] = _mm256_setzero_pd();
    coeffs[0][10] = _mm256_setzero_pd();

    coeffs[1][0] = _mm256_setzero_pd();
    coeffs[1][1] = _mm256_setzero_pd();
    coeffs[1][2] = _mm256_setzero_pd();
    coeffs[1][3] = _mm256_setzero_pd();
    coeffs[1][4] = _mm256_setzero_pd();
    coeffs[1][5] = _mm256_setzero_pd();
    coeffs[1][6] = _mm256_setzero_pd();
    coeffs[1][7] = _mm256_setzero_pd();
    coeffs[1][8] = _mm256_setzero_pd();
    coeffs[1][9] = _mm256_setzero_pd();

    coeffs[2][0] = _mm256_setzero_pd();
    coeffs[2][1] = _mm256_setzero_pd();
    coeffs[2][2] = _mm256_setzero_pd();
    coeffs[2][3] = _mm256_setzero_pd();
    coeffs[2][4] = _mm256_setzero_pd();
    coeffs[2][5] = _mm256_setzero_pd();
    coeffs[2][6] = _mm256_setzero_pd();
    coeffs[2][7] = _mm256_setzero_pd();
    coeffs[2][8] = _mm256_setzero_pd();

    coeffs[3][0] = _mm256_setzero_pd();
    coeffs[3][1] = _mm256_setzero_pd();
    coeffs[3][2] = _mm256_setzero_pd();
    coeffs[3][3] = _mm256_setzero_pd();
    coeffs[3][4] = _mm256_setzero_pd();
    coeffs[3][5] = _mm256_setzero_pd();
    coeffs[3][6] = _mm256_setzero_pd();
    coeffs[3][7] = _mm256_setzero_pd();

    coeffs[4][0] = _mm256_setzero_pd();
    coeffs[4][1] = _mm256_setzero_pd();
    coeffs[4][2] = _mm256_setzero_pd();
    coeffs[4][3] = _mm256_setzero_pd();
    coeffs[4][4] = _mm256_setzero_pd();
    coeffs[4][5] = _mm256_setzero_pd();
    coeffs[4][6] = _mm256_setzero_pd();

    coeffs[5][0] = _mm256_setzero_pd();
    coeffs[5][1] = _mm256_setzero_pd();
    coeffs[5][2] = _mm256_setzero_pd();
    coeffs[5][3] = _mm256_setzero_pd();
    coeffs[5][4] = _mm256_setzero_pd();
    coeffs[5][5] = _mm256_setzero_pd();

    coeffs[6][0] = _mm256_setzero_pd();
    coeffs[6][1] = _mm256_setzero_pd();
    coeffs[6][2] = _mm256_setzero_pd();
    coeffs[6][3] = _mm256_setzero_pd();
    coeffs[6][4] = _mm256_setzero_pd();

    coeffs[7][0] = _mm256_setzero_pd();
    coeffs[7][1] = _mm256_setzero_pd();
    coeffs[7][2] = _mm256_setzero_pd();
    coeffs[7][3] = _mm256_setzero_pd();

    coeffs[8][0] = _mm256_setzero_pd();
    coeffs[8][1] = _mm256_setzero_pd();
    coeffs[8][2] = _mm256_setzero_pd();

    coeffs[9][0] = _mm256_setzero_pd();
    coeffs[9][1] = _mm256_setzero_pd();

    coeffs[10][0] = _mm256_setzero_pd();
}

template <> BVP<16ul>::BVP() {
    coeffs[0][0] = _mm256_setzero_pd();
    coeffs[0][1] = _mm256_setzero_pd();
    coeffs[0][2] = _mm256_setzero_pd();
    coeffs[0][3] = _mm256_setzero_pd();
    coeffs[0][4] = _mm256_setzero_pd();
    coeffs[0][5] = _mm256_setzero_pd();
    coeffs[0][6] = _mm256_setzero_pd();
    coeffs[0][7] = _mm256_setzero_pd();
    coeffs[0][8] = _mm256_setzero_pd();
    coeffs[0][9] = _mm256_setzero_pd();
    coeffs[0][10] = _mm256_setzero_pd();
    coeffs[0][11] = _mm256_setzero_pd();
    coeffs[0][12] = _mm256_setzero_pd();
    coeffs[0][13] = _mm256_setzero_pd();
    coeffs[0][14] = _mm256_setzero_pd();
    coeffs[0][15] = _mm256_setzero_pd();

    coeffs[1][0] = _mm256_setzero_pd();
    coeffs[1][1] = _mm256_setzero_pd();
    coeffs[1][2] = _mm256_setzero_pd();
    coeffs[1][3] = _mm256_setzero_pd();
    coeffs[1][4] = _mm256_setzero_pd();
    coeffs[1][5] = _mm256_setzero_pd();
    coeffs[1][6] = _mm256_setzero_pd();
    coeffs[1][7] = _mm256_setzero_pd();
    coeffs[1][8] = _mm256_setzero_pd();
    coeffs[1][9] = _mm256_setzero_pd();
    coeffs[1][10] = _mm256_setzero_pd();
    coeffs[1][11] = _mm256_setzero_pd();
    coeffs[1][12] = _mm256_setzero_pd();
    coeffs[1][13] = _mm256_setzero_pd();
    coeffs[1][14] = _mm256_setzero_pd();

    coeffs[2][0] = _mm256_setzero_pd();
    coeffs[2][1] = _mm256_setzero_pd();
    coeffs[2][2] = _mm256_setzero_pd();
    coeffs[2][3] = _mm256_setzero_pd();
    coeffs[2][4] = _mm256_setzero_pd();
    coeffs[2][5] = _mm256_setzero_pd();
    coeffs[2][6] = _mm256_setzero_pd();
    coeffs[2][7] = _mm256_setzero_pd();
    coeffs[2][8] = _mm256_setzero_pd();
    coeffs[2][9] = _mm256_setzero_pd();
    coeffs[2][10] = _mm256_setzero_pd();
    coeffs[2][11] = _mm256_setzero_pd();
    coeffs[2][12] = _mm256_setzero_pd();
    coeffs[2][13] = _mm256_setzero_pd();

    coeffs[3][0] = _mm256_setzero_pd();
    coeffs[3][1] = _mm256_setzero_pd();
    coeffs[3][2] = _mm256_setzero_pd();
    coeffs[3][3] = _mm256_setzero_pd();
    coeffs[3][4] = _mm256_setzero_pd();
    coeffs[3][5] = _mm256_setzero_pd();
    coeffs[3][6] = _mm256_setzero_pd();
    coeffs[3][7] = _mm256_setzero_pd();
    coeffs[3][8] = _mm256_setzero_pd();
    coeffs[3][9] = _mm256_setzero_pd();
    coeffs[3][10] = _mm256_setzero_pd();
    coeffs[3][11] = _mm256_setzero_pd();
    coeffs[3][12] = _mm256_setzero_pd();

    coeffs[4][0] = _mm256_setzero_pd();
    coeffs[4][1] = _mm256_setzero_pd();
    coeffs[4][2] = _mm256_setzero_pd();
    coeffs[4][3] = _mm256_setzero_pd();
    coeffs[4][4] = _mm256_setzero_pd();
    coeffs[4][5] = _mm256_setzero_pd();
    coeffs[4][6] = _mm256_setzero_pd();
    coeffs[4][7] = _mm256_setzero_pd();
    coeffs[4][8] = _mm256_setzero_pd();
    coeffs[4][9] = _mm256_setzero_pd();
    coeffs[4][10] = _mm256_setzero_pd();
    coeffs[4][11] = _mm256_setzero_pd();

    coeffs[5][0] = _mm256_setzero_pd();
    coeffs[5][1] = _mm256_setzero_pd();
    coeffs[5][2] = _mm256_setzero_pd();
    coeffs[5][3] = _mm256_setzero_pd();
    coeffs[5][4] = _mm256_setzero_pd();
    coeffs[5][5] = _mm256_setzero_pd();
    coeffs[5][6] = _mm256_setzero_pd();
    coeffs[5][7] = _mm256_setzero_pd();
    coeffs[5][8] = _mm256_setzero_pd();
    coeffs[5][9] = _mm256_setzero_pd();
    coeffs[5][10] = _mm256_setzero_pd();

    coeffs[6][0] = _mm256_setzero_pd();
    coeffs[6][1] = _mm256_setzero_pd();
    coeffs[6][2] = _mm256_setzero_pd();
    coeffs[6][3] = _mm256_setzero_pd();
    coeffs[6][4] = _mm256_setzero_pd();
    coeffs[6][5] = _mm256_setzero_pd();
    coeffs[6][6] = _mm256_setzero_pd();
    coeffs[6][7] = _mm256_setzero_pd();
    coeffs[6][8] = _mm256_setzero_pd();
    coeffs[6][9] = _mm256_setzero_pd();

    coeffs[7][0] = _mm256_setzero_pd();
    coeffs[7][1] = _mm256_setzero_pd();
    coeffs[7][2] = _mm256_setzero_pd();
    coeffs[7][3] = _mm256_setzero_pd();
    coeffs[7][4] = _mm256_setzero_pd();
    coeffs[7][5] = _mm256_setzero_pd();
    coeffs[7][6] = _mm256_setzero_pd();
    coeffs[7][7] = _mm256_setzero_pd();
    coeffs[7][8] = _mm256_setzero_pd();

    coeffs[8][0] = _mm256_setzero_pd();
    coeffs[8][1] = _mm256_setzero_pd();
    coeffs[8][2] = _mm256_setzero_pd();
    coeffs[8][3] = _mm256_setzero_pd();
    coeffs[8][4] = _mm256_setzero_pd();
    coeffs[8][5] = _mm256_setzero_pd();
    coeffs[8][6] = _mm256_setzero_pd();
    coeffs[8][7] = _mm256_setzero_pd();

    coeffs[9][0] = _mm256_setzero_pd();
    coeffs[9][1] = _mm256_setzero_pd();
    coeffs[9][2] = _mm256_setzero_pd();
    coeffs[9][3] = _mm256_setzero_pd();
    coeffs[9][4] = _mm256_setzero_pd();
    coeffs[9][5] = _mm256_setzero_pd();
    coeffs[9][6] = _mm256_setzero_pd();

    coeffs[10][0] = _mm256_setzero_pd();
    coeffs[10][1] = _mm256_setzero_pd();
    coeffs[10][2] = _mm256_setzero_pd();
    coeffs[10][3] = _mm256_setzero_pd();
    coeffs[10][4] = _mm256_setzero_pd();
    coeffs[10][5] = _mm256_setzero_pd();

    coeffs[11][0] = _mm256_setzero_pd();
    coeffs[11][1] = _mm256_setzero_pd();
    coeffs[11][2] = _mm256_setzero_pd();
    coeffs[11][3] = _mm256_setzero_pd();
    coeffs[11][4] = _mm256_setzero_pd();

    coeffs[12][0] = _mm256_setzero_pd();
    coeffs[12][1] = _mm256_setzero_pd();
    coeffs[12][2] = _mm256_setzero_pd();
    coeffs[12][3] = _mm256_setzero_pd();

    coeffs[13][0] = _mm256_setzero_pd();
    coeffs[13][1] = _mm256_setzero_pd();
    coeffs[13][2] = _mm256_setzero_pd();

    coeffs[14][0] = _mm256_setzero_pd();
    coeffs[14][1] = _mm256_setzero_pd();

    coeffs[15][0] = _mm256_setzero_pd();
}

template <size_t Size>
void depack_bvp(const BVP<Size> &bvp_packed,
                Resultant::BivariatePolynomial *bvp_4) {
  printf("No general implementation -- depack_bvp<%ld>()\n", Size);
}

template <>
void depack_bvp(const BVP<3ul> &bvp_packed,
                Resultant::BivariatePolynomial *bvp_4) {
  //
  double coeff_00[4];
  double coeff_01[4];
  double coeff_02[4];
  double coeff_10[4];
  double coeff_11[4];
  double coeff_20[4];

  _mm256_store_pd(coeff_00, bvp_packed.coeffs[0][0]);
  _mm256_store_pd(coeff_01, bvp_packed.coeffs[0][1]);
  _mm256_store_pd(coeff_02, bvp_packed.coeffs[0][2]);
  _mm256_store_pd(coeff_10, bvp_packed.coeffs[1][0]);
  _mm256_store_pd(coeff_11, bvp_packed.coeffs[1][1]);
  _mm256_store_pd(coeff_20, bvp_packed.coeffs[2][0]);

  for (int i = 0; i < 4; ++i) {
    std::vector<std::vector<double>> coefs(3);

    coefs[0] = {coeff_00[i], coeff_01[i], coeff_02[i]};
    coefs[1] = {coeff_10[i], coeff_11[i], 0.0};
    coefs[2] = {coeff_20[i], 0.0, 0.0};

    bvp_4[i] = Resultant::BivariatePolynomial(coefs);
  }
}

template <>
void depack_bvp(const BVP<4ul> &bvp_packed,
                Resultant::BivariatePolynomial *bvp_4) {
    double coeff_00[4];
    double coeff_01[4];
    double coeff_02[4];
    double coeff_03[4];

    double coeff_10[4];
    double coeff_11[4];
    double coeff_12[4];

    double coeff_20[4];
    double coeff_21[4];

    double coeff_30[4];

    _mm256_store_pd(coeff_00, bvp_packed.coeffs[0][0]);
    _mm256_store_pd(coeff_01, bvp_packed.coeffs[0][1]);
    _mm256_store_pd(coeff_02, bvp_packed.coeffs[0][2]);
    _mm256_store_pd(coeff_03, bvp_packed.coeffs[0][3]);

    _mm256_store_pd(coeff_10, bvp_packed.coeffs[1][0]);
    _mm256_store_pd(coeff_11, bvp_packed.coeffs[1][1]);
    _mm256_store_pd(coeff_12, bvp_packed.coeffs[1][2]);

    _mm256_store_pd(coeff_20, bvp_packed.coeffs[2][0]);
    _mm256_store_pd(coeff_21, bvp_packed.coeffs[2][1]);

    _mm256_store_pd(coeff_30, bvp_packed.coeffs[3][0]);

    for (int i = 0; i < 4; ++i) {
      std::vector<std::vector<double>> coefs(4);

      coefs[0] = {coeff_00[i], coeff_01[i], coeff_02[i], coeff_03[i]};
      coefs[1] = {coeff_10[i], coeff_11[i], coeff_12[i], 0.0};
      coefs[2] = {coeff_20[i], coeff_21[i], 0.0, 0.0};
      coefs[3] = {coeff_30[i], 0.0, 0.0, 0.0};

      bvp_4[i] = Resultant::BivariatePolynomial(coefs);
    }
}

template <>
void depack_bvp(const BVP<5ul> &bvp_packed,
                Resultant::BivariatePolynomial *bvp_4) {
  double coeff_00[4];
  double coeff_01[4];
  double coeff_02[4];
  double coeff_03[4];
  double coeff_04[4];

  double coeff_10[4];
  double coeff_11[4];
  double coeff_12[4];
  double coeff_13[4];

  double coeff_20[4];
  double coeff_21[4];
  double coeff_22[4];

  double coeff_30[4];
  double coeff_31[4];

  double coeff_40[4];

  _mm256_store_pd(coeff_00, bvp_packed.coeffs[0][0]);
  _mm256_store_pd(coeff_01, bvp_packed.coeffs[0][1]);
  _mm256_store_pd(coeff_02, bvp_packed.coeffs[0][2]);
  _mm256_store_pd(coeff_03, bvp_packed.coeffs[0][3]);
  _mm256_store_pd(coeff_04, bvp_packed.coeffs[0][4]);

  _mm256_store_pd(coeff_10, bvp_packed.coeffs[1][0]);
  _mm256_store_pd(coeff_11, bvp_packed.coeffs[1][1]);
  _mm256_store_pd(coeff_12, bvp_packed.coeffs[1][2]);
  _mm256_store_pd(coeff_13, bvp_packed.coeffs[1][3]);

  _mm256_store_pd(coeff_20, bvp_packed.coeffs[2][0]);
  _mm256_store_pd(coeff_21, bvp_packed.coeffs[2][1]);
  _mm256_store_pd(coeff_22, bvp_packed.coeffs[2][2]);

  _mm256_store_pd(coeff_30, bvp_packed.coeffs[3][0]);
  _mm256_store_pd(coeff_31, bvp_packed.coeffs[3][1]);

  _mm256_store_pd(coeff_40, bvp_packed.coeffs[4][0]);

  for (int i = 0; i < 4; ++i) {
    std::vector<std::vector<double>> coefs(5);

    coefs[0] = {coeff_00[i], coeff_01[i], coeff_02[i], coeff_03[i],
                coeff_04[i]};
    coefs[1] = {coeff_10[i], coeff_11[i], coeff_12[i], coeff_13[i], 0.0};
    coefs[2] = {coeff_20[i], coeff_21[i], coeff_22[i], 0.0, 0.0};
    coefs[3] = {coeff_30[i], coeff_31[i], 0.0, 0.0, 0.0};
    coefs[4] = {coeff_40[i], 0.0, 0.0, 0.0, 0.0};

    bvp_4[i] = Resultant::BivariatePolynomial(coefs);
  }
}

template <>
void depack_bvp(const BVP<11ul> &bvp_packed,
                Resultant::BivariatePolynomial *bvp_4) {
  double coeff_00[4];
  double coeff_01[4];
  double coeff_02[4];
  double coeff_03[4];
  double coeff_04[4];
  double coeff_05[4];
  double coeff_06[4];
  double coeff_07[4];
  double coeff_08[4];
  double coeff_09[4];
  double coeff_0X[4];

  double coeff_10[4];
  double coeff_11[4];
  double coeff_12[4];
  double coeff_13[4];
  double coeff_14[4];
  double coeff_15[4];
  double coeff_16[4];
  double coeff_17[4];
  double coeff_18[4];
  double coeff_19[4];

  double coeff_20[4];
  double coeff_21[4];
  double coeff_22[4];
  double coeff_23[4];
  double coeff_24[4];
  double coeff_25[4];
  double coeff_26[4];
  double coeff_27[4];
  double coeff_28[4];

  double coeff_30[4];
  double coeff_31[4];
  double coeff_32[4];
  double coeff_33[4];
  double coeff_34[4];
  double coeff_35[4];
  double coeff_36[4];
  double coeff_37[4];

  double coeff_40[4];
  double coeff_41[4];
  double coeff_42[4];
  double coeff_43[4];
  double coeff_44[4];
  double coeff_45[4];
  double coeff_46[4];

  double coeff_50[4];
  double coeff_51[4];
  double coeff_52[4];
  double coeff_53[4];
  double coeff_54[4];
  double coeff_55[4];

  double coeff_60[4];
  double coeff_61[4];
  double coeff_62[4];
  double coeff_63[4];
  double coeff_64[4];

  double coeff_70[4];
  double coeff_71[4];
  double coeff_72[4];
  double coeff_73[4];

  double coeff_80[4];
  double coeff_81[4];
  double coeff_82[4];

  double coeff_90[4];
  double coeff_91[4];

  double coeff_X0[4];

  _mm256_store_pd(coeff_00, bvp_packed.coeffs[0][0]);
  _mm256_store_pd(coeff_01, bvp_packed.coeffs[0][1]);
  _mm256_store_pd(coeff_02, bvp_packed.coeffs[0][2]);
  _mm256_store_pd(coeff_03, bvp_packed.coeffs[0][3]);
  _mm256_store_pd(coeff_04, bvp_packed.coeffs[0][4]);
  _mm256_store_pd(coeff_05, bvp_packed.coeffs[0][5]);
  _mm256_store_pd(coeff_06, bvp_packed.coeffs[0][6]);
  _mm256_store_pd(coeff_07, bvp_packed.coeffs[0][7]);
  _mm256_store_pd(coeff_08, bvp_packed.coeffs[0][8]);
  _mm256_store_pd(coeff_09, bvp_packed.coeffs[0][9]);
  _mm256_store_pd(coeff_0X, bvp_packed.coeffs[0][10]);

  _mm256_store_pd(coeff_10, bvp_packed.coeffs[1][0]);
  _mm256_store_pd(coeff_11, bvp_packed.coeffs[1][1]);
  _mm256_store_pd(coeff_12, bvp_packed.coeffs[1][2]);
  _mm256_store_pd(coeff_13, bvp_packed.coeffs[1][3]);
  _mm256_store_pd(coeff_14, bvp_packed.coeffs[1][4]);
  _mm256_store_pd(coeff_15, bvp_packed.coeffs[1][5]);
  _mm256_store_pd(coeff_16, bvp_packed.coeffs[1][6]);
  _mm256_store_pd(coeff_17, bvp_packed.coeffs[1][7]);
  _mm256_store_pd(coeff_18, bvp_packed.coeffs[1][8]);
  _mm256_store_pd(coeff_19, bvp_packed.coeffs[1][9]);

  _mm256_store_pd(coeff_20, bvp_packed.coeffs[2][0]);
  _mm256_store_pd(coeff_21, bvp_packed.coeffs[2][1]);
  _mm256_store_pd(coeff_22, bvp_packed.coeffs[2][2]);
  _mm256_store_pd(coeff_23, bvp_packed.coeffs[2][3]);
  _mm256_store_pd(coeff_24, bvp_packed.coeffs[2][4]);
  _mm256_store_pd(coeff_25, bvp_packed.coeffs[2][5]);
  _mm256_store_pd(coeff_26, bvp_packed.coeffs[2][6]);
  _mm256_store_pd(coeff_27, bvp_packed.coeffs[2][7]);
  _mm256_store_pd(coeff_28, bvp_packed.coeffs[2][8]);

  _mm256_store_pd(coeff_30, bvp_packed.coeffs[3][0]);
  _mm256_store_pd(coeff_31, bvp_packed.coeffs[3][1]);
  _mm256_store_pd(coeff_32, bvp_packed.coeffs[3][2]);
  _mm256_store_pd(coeff_33, bvp_packed.coeffs[3][3]);
  _mm256_store_pd(coeff_34, bvp_packed.coeffs[3][4]);
  _mm256_store_pd(coeff_35, bvp_packed.coeffs[3][5]);
  _mm256_store_pd(coeff_36, bvp_packed.coeffs[3][6]);
  _mm256_store_pd(coeff_37, bvp_packed.coeffs[3][7]);

  _mm256_store_pd(coeff_40, bvp_packed.coeffs[4][0]);
  _mm256_store_pd(coeff_41, bvp_packed.coeffs[4][1]);
  _mm256_store_pd(coeff_42, bvp_packed.coeffs[4][2]);
  _mm256_store_pd(coeff_43, bvp_packed.coeffs[4][3]);
  _mm256_store_pd(coeff_44, bvp_packed.coeffs[4][4]);
  _mm256_store_pd(coeff_45, bvp_packed.coeffs[4][5]);
  _mm256_store_pd(coeff_46, bvp_packed.coeffs[4][6]);

  _mm256_store_pd(coeff_50, bvp_packed.coeffs[5][0]);
  _mm256_store_pd(coeff_51, bvp_packed.coeffs[5][1]);
  _mm256_store_pd(coeff_52, bvp_packed.coeffs[5][2]);
  _mm256_store_pd(coeff_53, bvp_packed.coeffs[5][3]);
  _mm256_store_pd(coeff_54, bvp_packed.coeffs[5][4]);
  _mm256_store_pd(coeff_55, bvp_packed.coeffs[5][5]);

  _mm256_store_pd(coeff_60, bvp_packed.coeffs[6][0]);
  _mm256_store_pd(coeff_61, bvp_packed.coeffs[6][1]);
  _mm256_store_pd(coeff_62, bvp_packed.coeffs[6][2]);
  _mm256_store_pd(coeff_63, bvp_packed.coeffs[6][3]);
  _mm256_store_pd(coeff_64, bvp_packed.coeffs[6][4]);

  _mm256_store_pd(coeff_70, bvp_packed.coeffs[7][0]);
  _mm256_store_pd(coeff_71, bvp_packed.coeffs[7][1]);
  _mm256_store_pd(coeff_72, bvp_packed.coeffs[7][2]);
  _mm256_store_pd(coeff_73, bvp_packed.coeffs[7][3]);

  _mm256_store_pd(coeff_80, bvp_packed.coeffs[8][0]);
  _mm256_store_pd(coeff_81, bvp_packed.coeffs[8][1]);
  _mm256_store_pd(coeff_82, bvp_packed.coeffs[8][2]);

  _mm256_store_pd(coeff_90, bvp_packed.coeffs[9][0]);
  _mm256_store_pd(coeff_91, bvp_packed.coeffs[9][1]);

  _mm256_store_pd(coeff_X0, bvp_packed.coeffs[10][0]);

  for (int i = 0; i < 4; ++i) {
    std::vector<std::vector<double>> coefs(11);

    coefs[0] = {coeff_00[i], coeff_01[i], coeff_02[i], coeff_03[i],
                coeff_04[i], coeff_05[i], coeff_06[i], coeff_07[i],
                coeff_08[i], coeff_09[i], coeff_0X[i]};
    coefs[1] = {coeff_10[i], coeff_11[i], coeff_12[i], coeff_13[i],
                coeff_14[i], coeff_15[i], coeff_16[i], coeff_17[i],
                coeff_18[i], coeff_19[i], 0.0};
    coefs[2] = {coeff_20[i], coeff_21[i], coeff_22[i], coeff_23[i],
                coeff_24[i], coeff_25[i], coeff_26[i], coeff_27[i],
                coeff_28[i], 0.0, 0.0};
    coefs[3] = {coeff_30[i], coeff_31[i], coeff_32[i], coeff_33[i],
                coeff_34[i], coeff_35[i], coeff_36[i], coeff_37[i],
                0.0, 0.0, 0.0};
    coefs[4] = {coeff_40[i], coeff_41[i], coeff_42[i], coeff_43[i],
                coeff_44[i], coeff_45[i], coeff_46[i], 0.0, 0.0, 0.0, 0.0};
    coefs[5] = {coeff_50[i], coeff_51[i], coeff_52[i], coeff_53[i],
                coeff_54[i], coeff_55[i], 0.0, 0.0, 0.0, 0.0, 0.0};
    coefs[6] = {coeff_60[i], coeff_61[i], coeff_62[i], coeff_63[i],
                coeff_64[i], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    coefs[7] = {coeff_70[i], coeff_71[i], coeff_72[i], coeff_73[i],
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    coefs[8] = {coeff_80[i], coeff_81[i], coeff_82[i], 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0};
    coefs[9] = {coeff_90[i], coeff_91[i], 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0};
    coefs[10] = {coeff_X0[i], 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0, 0.0, 0.0, 0.0, 0.0};

    bvp_4[i] = Resultant::BivariatePolynomial(coefs);
  }
}

template <size_t Size>
void depack_uvpm(const UnivariatePolyMatrix<Size> &uvpm_packed,
                Resultant::UnivariatePolynomialMatrix *uvpm_4) {
  printf("No general implementation -- depack_uvpm<%ld>()\n", Size);
}

template <>
void depack_uvpm(const UnivariatePolyMatrix<4ul> &uvpm_packed,
                Resultant::UnivariatePolynomialMatrix *uvpm_4) { // degree 8
    uvpm_4[0].resize(4); uvpm_4[1].resize(4); uvpm_4[2].resize(4); uvpm_4[3].resize(4);
    for (int i = 0; i < 4; i++) {
        uvpm_4[0][i].resize(4); uvpm_4[1][i].resize(4); uvpm_4[2][i].resize(4); uvpm_4[3][i].resize(4);
        for (int j = 0; j < 4; j++) {
            std::vector<double> uvpm0_coefs(8), uvpm1_coefs(8), uvpm2_coefs(8), uvpm3_coefs(8);
            for (int k = 0; k < 8; k++) {
                double coefs[4];
                _mm256_store_pd(coefs, uvpm_packed.matrix[i][j][k]);
                uvpm0_coefs[k] = coefs[0];
                uvpm1_coefs[k] = coefs[1];
                uvpm2_coefs[k] = coefs[2];
                uvpm3_coefs[k] = coefs[3];
            }
            uvpm_4[0][i][j] = Resultant::UnivariatePolynomial(uvpm0_coefs);
            uvpm_4[1][i][j] = Resultant::UnivariatePolynomial(uvpm1_coefs);
            uvpm_4[2][i][j] = Resultant::UnivariatePolynomial(uvpm2_coefs);
            uvpm_4[3][i][j] = Resultant::UnivariatePolynomial(uvpm3_coefs);
        }
    }
}

template <>
void depack_uvpm(const UnivariatePolyMatrix<6ul> &uvpm_packed,
                Resultant::UnivariatePolynomialMatrix *uvpm_4) { //degree 12
    uvpm_4[0].resize(6); uvpm_4[1].resize(6); uvpm_4[2].resize(6); uvpm_4[3].resize(6);
    for (int i = 0; i < 6; i++) {
        uvpm_4[0][i].resize(6); uvpm_4[1][i].resize(6); uvpm_4[2][i].resize(6); uvpm_4[3][i].resize(6);
        for (int j = 0; j < 6; j++) {
            std::vector<double> uvpm0_coefs(12), uvpm1_coefs(12), uvpm2_coefs(12), uvpm3_coefs(12);
            for (int k = 0; k < 12; k++) {
                double coefs[4];
                _mm256_store_pd(coefs, uvpm_packed.matrix[i][j][k]);
                uvpm0_coefs[k] = coefs[0];
                uvpm1_coefs[k] = coefs[1];
                uvpm2_coefs[k] = coefs[2];
                uvpm3_coefs[k] = coefs[3];
            }
            uvpm_4[0][i][j] = Resultant::UnivariatePolynomial(uvpm0_coefs);
            uvpm_4[1][i][j] = Resultant::UnivariatePolynomial(uvpm1_coefs);
            uvpm_4[2][i][j] = Resultant::UnivariatePolynomial(uvpm2_coefs);
            uvpm_4[3][i][j] = Resultant::UnivariatePolynomial(uvpm3_coefs);
        }
    }
}

template <>
void depack_uvpm(const UnivariatePolyMatrix<15ul> &uvpm_packed,
                Resultant::UnivariatePolynomialMatrix *uvpm_4) { //degree UNIPOLYMAT_MAX_DEG
    uvpm_4[0].resize(15); uvpm_4[1].resize(15); uvpm_4[2].resize(15); uvpm_4[3].resize(15);
    for (int i = 0; i < 15; i++) {
        uvpm_4[0][i].resize(15); uvpm_4[1][i].resize(15); uvpm_4[2][i].resize(15); uvpm_4[3][i].resize(15);
        for (int j = 0; j < 15; j++) {
            std::vector<double> uvpm0_coefs(UNIPOLYMAT_MAX_DEG), uvpm1_coefs(UNIPOLYMAT_MAX_DEG), uvpm2_coefs(UNIPOLYMAT_MAX_DEG), uvpm3_coefs(UNIPOLYMAT_MAX_DEG);
            for (int k = 0; k < UNIPOLYMAT_MAX_DEG; k++) {
                double coefs[4];
                _mm256_store_pd(coefs, uvpm_packed.matrix[i][j][k]);
                uvpm0_coefs[k] = coefs[0];
                uvpm1_coefs[k] = coefs[1];
                uvpm2_coefs[k] = coefs[2];
                uvpm3_coefs[k] = coefs[3];
            }
            uvpm_4[0][i][j] = Resultant::UnivariatePolynomial(uvpm0_coefs);
            uvpm_4[1][i][j] = Resultant::UnivariatePolynomial(uvpm1_coefs);
            uvpm_4[2][i][j] = Resultant::UnivariatePolynomial(uvpm2_coefs);
            uvpm_4[3][i][j] = Resultant::UnivariatePolynomial(uvpm3_coefs);
        }
    }
}

template <size_t X_INDEX, size_t Y_INDEX>
void reflection_unipoly_cross(const BVP<5ul> &poly1, const BVP<3ul> &poly2,
                              UnivariatePolyMatrix<4ul> *bezout_matrix) {
  printf("No general implementation -- reflection_unipoly_cross<%ld, %ld>*()\n",
         X_INDEX, Y_INDEX);
}

template <>
void reflection_unipoly_cross<0ul, 0ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {
  bezout_matrix->matrix[0][0][0] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][0]));
  bezout_matrix->matrix[0][0][1] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][1]));
  bezout_matrix->matrix[0][0][1] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][0]));
  bezout_matrix->matrix[0][0][2] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][1]));
  bezout_matrix->matrix[0][0][2] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][0]));
  bezout_matrix->matrix[0][0][3] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][1]));
  bezout_matrix->matrix[0][0][3] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][0]));
  bezout_matrix->matrix[0][0][4] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][1]));
  bezout_matrix->matrix[0][0][4] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][0]));
  bezout_matrix->matrix[0][0][5] =
      _mm256_add_pd(bezout_matrix->matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][1]));
  bezout_matrix->matrix[0][0][0] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][0],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[1][0]));
  bezout_matrix->matrix[0][0][1] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][1],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[1][1]));
  bezout_matrix->matrix[0][0][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][2],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[1][2]));
  bezout_matrix->matrix[0][0][3] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][3],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[1][3]));
  bezout_matrix->matrix[0][0][1] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][1],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[1][0]));
  bezout_matrix->matrix[0][0][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][2],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[1][1]));
  bezout_matrix->matrix[0][0][3] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][3],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[1][2]));
  bezout_matrix->matrix[0][0][4] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][4],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[1][3]));
  bezout_matrix->matrix[0][0][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][2],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[1][0]));
  bezout_matrix->matrix[0][0][3] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][3],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[1][1]));
  bezout_matrix->matrix[0][0][4] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][4],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[1][2]));
  bezout_matrix->matrix[0][0][5] =
      _mm256_sub_pd(bezout_matrix->matrix[0][0][5],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[1][3]));
}

template <>
void reflection_unipoly_cross<0ul, 1ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {
  bezout_matrix->matrix[0][1][0] =
      _mm256_add_pd(bezout_matrix->matrix[0][1][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][0]));
  bezout_matrix->matrix[0][1][1] =
      _mm256_add_pd(bezout_matrix->matrix[0][1][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][0]));
  bezout_matrix->matrix[0][1][2] =
      _mm256_add_pd(bezout_matrix->matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][0]));
  bezout_matrix->matrix[0][1][3] =
      _mm256_add_pd(bezout_matrix->matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][0]));
  bezout_matrix->matrix[0][1][4] =
      _mm256_add_pd(bezout_matrix->matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][0]));
  bezout_matrix->matrix[0][1][0] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][0],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[2][0]));
  bezout_matrix->matrix[0][1][1] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][1],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[2][1]));
  bezout_matrix->matrix[0][1][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][2],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[2][2]));
  bezout_matrix->matrix[0][1][1] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][1],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[2][0]));
  bezout_matrix->matrix[0][1][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][2],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[2][1]));
  bezout_matrix->matrix[0][1][3] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][3],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[2][2]));
  bezout_matrix->matrix[0][1][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][2],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[2][0]));
  bezout_matrix->matrix[0][1][3] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][3],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[2][1]));
  bezout_matrix->matrix[0][1][4] =
      _mm256_sub_pd(bezout_matrix->matrix[0][1][4],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[2][2]));
}

template <>
void reflection_unipoly_cross<0ul, 2ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {
  bezout_matrix->matrix[0][2][0] =
      _mm256_sub_pd(bezout_matrix->matrix[0][2][0],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[3][0]));
  bezout_matrix->matrix[0][2][1] =
      _mm256_sub_pd(bezout_matrix->matrix[0][2][1],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[3][1]));
  bezout_matrix->matrix[0][2][1] =
      _mm256_sub_pd(bezout_matrix->matrix[0][2][1],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[3][0]));
  bezout_matrix->matrix[0][2][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][2][2],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[3][1]));
  bezout_matrix->matrix[0][2][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][2][2],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[3][0]));
  bezout_matrix->matrix[0][2][3] =
      _mm256_sub_pd(bezout_matrix->matrix[0][2][3],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[3][1]));
}

template <>
void reflection_unipoly_cross<0ul, 3ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {
  bezout_matrix->matrix[0][3][0] =
      _mm256_sub_pd(bezout_matrix->matrix[0][3][0],
                    _mm256_mul_pd(poly2.coeffs[0][0], poly1.coeffs[4][0]));
  bezout_matrix->matrix[0][3][1] =
      _mm256_sub_pd(bezout_matrix->matrix[0][3][1],
                    _mm256_mul_pd(poly2.coeffs[0][1], poly1.coeffs[4][0]));
  bezout_matrix->matrix[0][3][2] =
      _mm256_sub_pd(bezout_matrix->matrix[0][3][2],
                    _mm256_mul_pd(poly2.coeffs[0][2], poly1.coeffs[4][0]));
}

template <>
void reflection_unipoly_cross<1ul, 1ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {

  bezout_matrix->matrix[1][1][0] =
      _mm256_add_pd(bezout_matrix->matrix[1][1][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][0]));
  bezout_matrix->matrix[1][1][1] =
      _mm256_add_pd(bezout_matrix->matrix[1][1][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][0]));
  bezout_matrix->matrix[1][1][2] =
      _mm256_add_pd(bezout_matrix->matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][0]));
  bezout_matrix->matrix[1][1][3] =
      _mm256_add_pd(bezout_matrix->matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][0]));
  bezout_matrix->matrix[1][1][0] =
      _mm256_sub_pd(bezout_matrix->matrix[1][1][0],
                    _mm256_mul_pd(poly2.coeffs[1][0], poly1.coeffs[2][0]));
  bezout_matrix->matrix[1][1][1] =
      _mm256_sub_pd(bezout_matrix->matrix[1][1][1],
                    _mm256_mul_pd(poly2.coeffs[1][0], poly1.coeffs[2][1]));
  bezout_matrix->matrix[1][1][2] =
      _mm256_sub_pd(bezout_matrix->matrix[1][1][2],
                    _mm256_mul_pd(poly2.coeffs[1][0], poly1.coeffs[2][2]));
  bezout_matrix->matrix[1][1][1] =
      _mm256_sub_pd(bezout_matrix->matrix[1][1][1],
                    _mm256_mul_pd(poly2.coeffs[1][1], poly1.coeffs[2][0]));
  bezout_matrix->matrix[1][1][2] =
      _mm256_sub_pd(bezout_matrix->matrix[1][1][2],
                    _mm256_mul_pd(poly2.coeffs[1][1], poly1.coeffs[2][1]));
  bezout_matrix->matrix[1][1][3] =
      _mm256_sub_pd(bezout_matrix->matrix[1][1][3],
                    _mm256_mul_pd(poly2.coeffs[1][1], poly1.coeffs[2][2]));
}

template <>
void reflection_unipoly_cross<1ul, 2ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {

  bezout_matrix->matrix[1][2][0] =
      _mm256_sub_pd(bezout_matrix->matrix[1][2][0],
                    _mm256_mul_pd(poly2.coeffs[1][0], poly1.coeffs[3][0]));
  bezout_matrix->matrix[1][2][1] =
      _mm256_sub_pd(bezout_matrix->matrix[1][2][1],
                    _mm256_mul_pd(poly2.coeffs[1][0], poly1.coeffs[3][1]));
  bezout_matrix->matrix[1][2][1] =
      _mm256_sub_pd(bezout_matrix->matrix[1][2][1],
                    _mm256_mul_pd(poly2.coeffs[1][1], poly1.coeffs[3][0]));
  bezout_matrix->matrix[1][2][2] =
      _mm256_sub_pd(bezout_matrix->matrix[1][2][2],
                    _mm256_mul_pd(poly2.coeffs[1][1], poly1.coeffs[3][1]));
}

template <>
void reflection_unipoly_cross<1ul, 3ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {
  bezout_matrix->matrix[1][3][0] =
      _mm256_sub_pd(bezout_matrix->matrix[1][3][0],
                    _mm256_mul_pd(poly2.coeffs[1][0], poly1.coeffs[4][0]));
  bezout_matrix->matrix[1][3][1] =
      _mm256_sub_pd(bezout_matrix->matrix[1][3][1],
                    _mm256_mul_pd(poly2.coeffs[1][1], poly1.coeffs[4][0]));
}

template <>
void reflection_unipoly_cross<2ul, 2ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {
  bezout_matrix->matrix[2][2][0] =
      _mm256_sub_pd(bezout_matrix->matrix[2][2][0],
                    _mm256_mul_pd(poly2.coeffs[2][0], poly1.coeffs[3][0]));
  bezout_matrix->matrix[2][2][1] =
      _mm256_sub_pd(bezout_matrix->matrix[2][2][1],
                    _mm256_mul_pd(poly2.coeffs[2][0], poly1.coeffs[3][1]));
}

template <>
void reflection_unipoly_cross<2ul, 3ul>(
    const BVP<5UL> &poly1, const BVP<3UL> &poly2,
    UnivariatePolyMatrix<4UL> *bezout_matrix) {
  bezout_matrix->matrix[2][3][0] =
      _mm256_sub_pd(bezout_matrix->matrix[2][3][0],
                    _mm256_mul_pd(poly2.coeffs[2][0], poly1.coeffs[4][0]));
}

/**
 * The two polys with degree 4 and 2, thus the bezout matrix is 4x4,
 * see the paper
 */
template <>
UnivariatePolyMatrix<4ul> bezout_matrix<5ul, 3ul, 4ul>(const BVP<5ul> &poly1,
                                                       const BVP<3ul> &poly2) {

  UnivariatePolyMatrix<4ul> matrix;

  // f[0][0] = a[0] * b[1] - b[0] * a[1];
  reflection_unipoly_cross<0ul, 0ul>(poly1, poly2, &matrix);

  // f[0][1] = a[0] * b[2] - b[0] * a[2];
  reflection_unipoly_cross<0ul, 1ul>(poly1, poly2, &matrix);

  // f[0][2] = -b[0] * a[3];
  reflection_unipoly_cross<0ul, 2ul>(poly1, poly2, &matrix);

  // f[0][3] = -b[0] * a[4];
  reflection_unipoly_cross<0ul, 3ul>(poly1, poly2, &matrix);

  // f[1][1] = a[1] * b[2] - b[1] * a[2];
  reflection_unipoly_cross<1ul, 1ul>(poly1, poly2, &matrix);

  // f[1][2] = -b[1] * a[3];
  reflection_unipoly_cross<1ul, 2ul>(poly1, poly2, &matrix);

  // f[1][3] = -b[1] * a[4];
  reflection_unipoly_cross<1ul, 3ul>(poly1, poly2, &matrix);

  // f[2][2] = -b[2] * a[3];
  reflection_unipoly_cross<2ul, 2ul>(poly1, poly2, &matrix);

  // f[2][3] = -b[2] * a[4];
  reflection_unipoly_cross<2ul, 3ul>(poly1, poly2, &matrix);

  // f[1][1] = f[1][1] + f[0][2];
  matrix.matrix[1][1][0] =
      _mm256_add_pd(matrix.matrix[1][1][0], matrix.matrix[0][2][0]);
  matrix.matrix[1][1][1] =
      _mm256_add_pd(matrix.matrix[1][1][1], matrix.matrix[0][2][1]);
  matrix.matrix[1][1][2] =
      _mm256_add_pd(matrix.matrix[1][1][2], matrix.matrix[0][2][2]);
  matrix.matrix[1][1][3] =
      _mm256_add_pd(matrix.matrix[1][1][3], matrix.matrix[0][2][3]);

  // f[1][2] = f[1][2] + f[0][3];
  matrix.matrix[1][2][0] =
      _mm256_add_pd(matrix.matrix[1][2][0], matrix.matrix[0][3][0]);
  matrix.matrix[1][2][1] =
      _mm256_add_pd(matrix.matrix[1][2][1], matrix.matrix[0][3][1]);
  matrix.matrix[1][2][2] =
      _mm256_add_pd(matrix.matrix[1][2][2], matrix.matrix[0][3][2]);

  // f[2][2] = f[2][2] + f[1][3];
  matrix.matrix[2][2][0] =
      _mm256_add_pd(matrix.matrix[2][2][0], matrix.matrix[1][3][0]);
  matrix.matrix[2][2][1] =
      _mm256_add_pd(matrix.matrix[2][2][1], matrix.matrix[1][3][1]);

  // f[1][0] = f[0][1];
  matrix.matrix[1][0][0] = matrix.matrix[0][1][0];
  matrix.matrix[1][0][1] = matrix.matrix[0][1][1];
  matrix.matrix[1][0][2] = matrix.matrix[0][1][2];
  matrix.matrix[1][0][3] = matrix.matrix[0][1][3];
  matrix.matrix[1][0][4] = matrix.matrix[0][1][4];

  // f[2][0] = f[0][2];
  matrix.matrix[2][0][0] = matrix.matrix[0][2][0];
  matrix.matrix[2][0][1] = matrix.matrix[0][2][1];
  matrix.matrix[2][0][2] = matrix.matrix[0][2][2];
  matrix.matrix[2][0][3] = matrix.matrix[0][2][3];

  // f[2][1] = f[1][2];
  matrix.matrix[2][1][0] = matrix.matrix[1][2][0];
  matrix.matrix[2][1][1] = matrix.matrix[1][2][1];
  matrix.matrix[2][1][2] = matrix.matrix[1][2][2];

  // f[3][0] = f[0][3];
  matrix.matrix[3][0][0] = matrix.matrix[0][3][0];
  matrix.matrix[3][0][1] = matrix.matrix[0][3][1];
  matrix.matrix[3][0][2] = matrix.matrix[0][3][2];

  // f[3][1] = f[1][3];
  matrix.matrix[3][1][0] = matrix.matrix[1][3][0];
  matrix.matrix[3][1][1] = matrix.matrix[1][3][1];

  // f[3][2] = f[2][3];
  matrix.matrix[3][2][0] = matrix.matrix[2][3][0];

  return matrix;
}

/**
 * Bezout matrix in single refraction case, the matrix is 6x6,
 * see the paper
 */
template<>
UnivariatePolyMatrix<6ul> bezout_matrix<7ul, 3ul, 6ul>(const BVP<7ul> &poly1, const BVP<3ul> &poly2) {
  UnivariatePolyMatrix<6ul> matrix;

  matrix.matrix[0][0][0] =
      _mm256_add_pd(matrix.matrix[0][0][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][0]));
  matrix.matrix[0][0][1] =
      _mm256_add_pd(matrix.matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][1]));
  matrix.matrix[0][0][1] =
      _mm256_add_pd(matrix.matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][0]));
  matrix.matrix[0][0][2] =
      _mm256_add_pd(matrix.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][1]));
  matrix.matrix[0][0][2] =
      _mm256_add_pd(matrix.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][0]));
  matrix.matrix[0][0][3] =
      _mm256_add_pd(matrix.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][1]));
  matrix.matrix[0][0][3] =
      _mm256_add_pd(matrix.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][0]));
  matrix.matrix[0][0][4] =
      _mm256_add_pd(matrix.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][1]));
  matrix.matrix[0][0][4] =
      _mm256_add_pd(matrix.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][0]));
  matrix.matrix[0][0][5] =
      _mm256_add_pd(matrix.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][1]));
  matrix.matrix[0][0][5] =
      _mm256_add_pd(matrix.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][0]));
  matrix.matrix[0][0][6] =
      _mm256_add_pd(matrix.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][1]));
  matrix.matrix[0][0][6] =
      _mm256_add_pd(matrix.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][0]));
  matrix.matrix[0][0][7] =
      _mm256_add_pd(matrix.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][1]));
  matrix.matrix[0][0][0] =
      _mm256_sub_pd(matrix.matrix[0][0][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][0]));
  matrix.matrix[0][0][1] =
      _mm256_sub_pd(matrix.matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][0]));
  matrix.matrix[0][0][2] =
      _mm256_sub_pd(matrix.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][0]));
  matrix.matrix[0][0][3] =
      _mm256_sub_pd(matrix.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][0]));
  matrix.matrix[0][0][4] =
      _mm256_sub_pd(matrix.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][0]));
  matrix.matrix[0][0][5] =
      _mm256_sub_pd(matrix.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][0]));
  matrix.matrix[0][0][1] =
      _mm256_sub_pd(matrix.matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][1]));
  matrix.matrix[0][0][2] =
      _mm256_sub_pd(matrix.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][1]));
  matrix.matrix[0][0][3] =
      _mm256_sub_pd(matrix.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][1]));
  matrix.matrix[0][0][4] =
      _mm256_sub_pd(matrix.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][1]));
  matrix.matrix[0][0][5] =
      _mm256_sub_pd(matrix.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][1]));
  matrix.matrix[0][0][6] =
      _mm256_sub_pd(matrix.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][1]));
  matrix.matrix[0][0][2] =
      _mm256_sub_pd(matrix.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][2]));
  matrix.matrix[0][0][3] =
      _mm256_sub_pd(matrix.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][2]));
  matrix.matrix[0][0][4] =
      _mm256_sub_pd(matrix.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][2]));
  matrix.matrix[0][0][5] =
      _mm256_sub_pd(matrix.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][2]));
  matrix.matrix[0][0][6] =
      _mm256_sub_pd(matrix.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][2]));
  matrix.matrix[0][0][7] =
      _mm256_sub_pd(matrix.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][2]));
  matrix.matrix[0][1][0] =
      _mm256_add_pd(matrix.matrix[0][1][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][0]));
  matrix.matrix[0][1][1] =
      _mm256_add_pd(matrix.matrix[0][1][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][0]));
  matrix.matrix[0][1][2] =
      _mm256_add_pd(matrix.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][0]));
  matrix.matrix[0][1][3] =
      _mm256_add_pd(matrix.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][0]));
  matrix.matrix[0][1][4] =
      _mm256_add_pd(matrix.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][0]));
  matrix.matrix[0][1][5] =
      _mm256_add_pd(matrix.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][0]));
  matrix.matrix[0][1][6] =
      _mm256_add_pd(matrix.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][0]));
  matrix.matrix[0][1][0] =
      _mm256_sub_pd(matrix.matrix[0][1][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][0]));
  matrix.matrix[0][1][1] =
      _mm256_sub_pd(matrix.matrix[0][1][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][0]));
  matrix.matrix[0][1][2] =
      _mm256_sub_pd(matrix.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][0]));
  matrix.matrix[0][1][3] =
      _mm256_sub_pd(matrix.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][0]));
  matrix.matrix[0][1][4] =
      _mm256_sub_pd(matrix.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][0]));
  matrix.matrix[0][1][1] =
      _mm256_sub_pd(matrix.matrix[0][1][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][1]));
  matrix.matrix[0][1][2] =
      _mm256_sub_pd(matrix.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][1]));
  matrix.matrix[0][1][3] =
      _mm256_sub_pd(matrix.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][1]));
  matrix.matrix[0][1][4] =
      _mm256_sub_pd(matrix.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][1]));
  matrix.matrix[0][1][5] =
      _mm256_sub_pd(matrix.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][1]));
  matrix.matrix[0][1][2] =
      _mm256_sub_pd(matrix.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][2]));
  matrix.matrix[0][1][3] =
      _mm256_sub_pd(matrix.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][2]));
  matrix.matrix[0][1][4] =
      _mm256_sub_pd(matrix.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][2]));
  matrix.matrix[0][1][5] =
      _mm256_sub_pd(matrix.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][2]));
  matrix.matrix[0][1][6] =
      _mm256_sub_pd(matrix.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][2]));
  matrix.matrix[0][2][0] =
      _mm256_sub_pd(matrix.matrix[0][2][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][0]));
  matrix.matrix[0][2][1] =
      _mm256_sub_pd(matrix.matrix[0][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][0]));
  matrix.matrix[0][2][2] =
      _mm256_sub_pd(matrix.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][0]));
  matrix.matrix[0][2][3] =
      _mm256_sub_pd(matrix.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][0]));
  matrix.matrix[0][2][1] =
      _mm256_sub_pd(matrix.matrix[0][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][1]));
  matrix.matrix[0][2][2] =
      _mm256_sub_pd(matrix.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][1]));
  matrix.matrix[0][2][3] =
      _mm256_sub_pd(matrix.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][1]));
  matrix.matrix[0][2][4] =
      _mm256_sub_pd(matrix.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][1]));
  matrix.matrix[0][2][2] =
      _mm256_sub_pd(matrix.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][2]));
  matrix.matrix[0][2][3] =
      _mm256_sub_pd(matrix.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][2]));
  matrix.matrix[0][2][4] =
      _mm256_sub_pd(matrix.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][2]));
  matrix.matrix[0][2][5] =
      _mm256_sub_pd(matrix.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][2]));
  matrix.matrix[0][3][0] =
      _mm256_sub_pd(matrix.matrix[0][3][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][0]));
  matrix.matrix[0][3][1] =
      _mm256_sub_pd(matrix.matrix[0][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][0]));
  matrix.matrix[0][3][2] =
      _mm256_sub_pd(matrix.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][0]));
  matrix.matrix[0][3][1] =
      _mm256_sub_pd(matrix.matrix[0][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][1]));
  matrix.matrix[0][3][2] =
      _mm256_sub_pd(matrix.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][1]));
  matrix.matrix[0][3][3] =
      _mm256_sub_pd(matrix.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][1]));
  matrix.matrix[0][3][2] =
      _mm256_sub_pd(matrix.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][2]));
  matrix.matrix[0][3][3] =
      _mm256_sub_pd(matrix.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][2]));
  matrix.matrix[0][3][4] =
      _mm256_sub_pd(matrix.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][2]));
  matrix.matrix[0][4][0] =
      _mm256_sub_pd(matrix.matrix[0][4][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][0]));
  matrix.matrix[0][4][1] =
      _mm256_sub_pd(matrix.matrix[0][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][0]));
  matrix.matrix[0][4][1] =
      _mm256_sub_pd(matrix.matrix[0][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][1]));
  matrix.matrix[0][4][2] =
      _mm256_sub_pd(matrix.matrix[0][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][1]));
  matrix.matrix[0][4][2] =
      _mm256_sub_pd(matrix.matrix[0][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][2]));
  matrix.matrix[0][4][3] =
      _mm256_sub_pd(matrix.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][2]));
  matrix.matrix[0][5][0] =
      _mm256_sub_pd(matrix.matrix[0][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][0]));
  matrix.matrix[0][5][1] =
      _mm256_sub_pd(matrix.matrix[0][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][1]));
  matrix.matrix[0][5][2] =
      _mm256_sub_pd(matrix.matrix[0][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][2]));
  matrix.matrix[1][1][0] =
      _mm256_add_pd(matrix.matrix[1][1][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][0]));
  matrix.matrix[1][1][1] =
      _mm256_add_pd(matrix.matrix[1][1][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][0]));
  matrix.matrix[1][1][2] =
      _mm256_add_pd(matrix.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][0]));
  matrix.matrix[1][1][3] =
      _mm256_add_pd(matrix.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][0]));
  matrix.matrix[1][1][4] =
      _mm256_add_pd(matrix.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][0]));
  matrix.matrix[1][1][5] =
      _mm256_add_pd(matrix.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][0]));
  matrix.matrix[1][1][0] =
      _mm256_sub_pd(matrix.matrix[1][1][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][0]));
  matrix.matrix[1][1][1] =
      _mm256_sub_pd(matrix.matrix[1][1][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][0]));
  matrix.matrix[1][1][2] =
      _mm256_sub_pd(matrix.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][0]));
  matrix.matrix[1][1][3] =
      _mm256_sub_pd(matrix.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][0]));
  matrix.matrix[1][1][4] =
      _mm256_sub_pd(matrix.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][0]));
  matrix.matrix[1][1][1] =
      _mm256_sub_pd(matrix.matrix[1][1][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][1]));
  matrix.matrix[1][1][2] =
      _mm256_sub_pd(matrix.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][1]));
  matrix.matrix[1][1][3] =
      _mm256_sub_pd(matrix.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][1]));
  matrix.matrix[1][1][4] =
      _mm256_sub_pd(matrix.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][1]));
  matrix.matrix[1][1][5] =
      _mm256_sub_pd(matrix.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][1]));
  matrix.matrix[1][2][0] =
      _mm256_sub_pd(matrix.matrix[1][2][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][0]));
  matrix.matrix[1][2][1] =
      _mm256_sub_pd(matrix.matrix[1][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][0]));
  matrix.matrix[1][2][2] =
      _mm256_sub_pd(matrix.matrix[1][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][0]));
  matrix.matrix[1][2][3] =
      _mm256_sub_pd(matrix.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][0]));
  matrix.matrix[1][2][1] =
      _mm256_sub_pd(matrix.matrix[1][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][1]));
  matrix.matrix[1][2][2] =
      _mm256_sub_pd(matrix.matrix[1][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][1]));
  matrix.matrix[1][2][3] =
      _mm256_sub_pd(matrix.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][1]));
  matrix.matrix[1][2][4] =
      _mm256_sub_pd(matrix.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][1]));
  matrix.matrix[1][3][0] =
      _mm256_sub_pd(matrix.matrix[1][3][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][0]));
  matrix.matrix[1][3][1] =
      _mm256_sub_pd(matrix.matrix[1][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][0]));
  matrix.matrix[1][3][2] =
      _mm256_sub_pd(matrix.matrix[1][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][0]));
  matrix.matrix[1][3][1] =
      _mm256_sub_pd(matrix.matrix[1][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][1]));
  matrix.matrix[1][3][2] =
      _mm256_sub_pd(matrix.matrix[1][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][1]));
  matrix.matrix[1][3][3] =
      _mm256_sub_pd(matrix.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][1]));
  matrix.matrix[1][4][0] =
      _mm256_sub_pd(matrix.matrix[1][4][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][0]));
  matrix.matrix[1][4][1] =
      _mm256_sub_pd(matrix.matrix[1][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][0]));
  matrix.matrix[1][4][1] =
      _mm256_sub_pd(matrix.matrix[1][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][1]));
  matrix.matrix[1][4][2] =
      _mm256_sub_pd(matrix.matrix[1][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][1]));
  matrix.matrix[1][5][0] =
      _mm256_sub_pd(matrix.matrix[1][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][0]));
  matrix.matrix[1][5][1] =
      _mm256_sub_pd(matrix.matrix[1][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][1]));
  matrix.matrix[2][2][0] =
      _mm256_sub_pd(matrix.matrix[2][2][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][0]));
  matrix.matrix[2][2][1] =
      _mm256_sub_pd(matrix.matrix[2][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][0]));
  matrix.matrix[2][2][2] =
      _mm256_sub_pd(matrix.matrix[2][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][0]));
  matrix.matrix[2][2][3] =
      _mm256_sub_pd(matrix.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][0]));
  matrix.matrix[2][3][0] =
      _mm256_sub_pd(matrix.matrix[2][3][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][0]));
  matrix.matrix[2][3][1] =
      _mm256_sub_pd(matrix.matrix[2][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][0]));
  matrix.matrix[2][3][2] =
      _mm256_sub_pd(matrix.matrix[2][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][0]));
  matrix.matrix[2][4][0] =
      _mm256_sub_pd(matrix.matrix[2][4][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][0]));
  matrix.matrix[2][4][1] =
      _mm256_sub_pd(matrix.matrix[2][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][0]));
  matrix.matrix[2][5][0] =
      _mm256_sub_pd(matrix.matrix[2][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][0]));
  matrix.matrix[1][1][0] =
      _mm256_add_pd(matrix.matrix[1][1][0], matrix.matrix[0][2][0]);
  matrix.matrix[1][1][1] =
      _mm256_add_pd(matrix.matrix[1][1][1], matrix.matrix[0][2][1]);
  matrix.matrix[1][1][2] =
      _mm256_add_pd(matrix.matrix[1][1][2], matrix.matrix[0][2][2]);
  matrix.matrix[1][1][3] =
      _mm256_add_pd(matrix.matrix[1][1][3], matrix.matrix[0][2][3]);
  matrix.matrix[1][1][4] =
      _mm256_add_pd(matrix.matrix[1][1][4], matrix.matrix[0][2][4]);
  matrix.matrix[1][1][5] =
      _mm256_add_pd(matrix.matrix[1][1][5], matrix.matrix[0][2][5]);
  matrix.matrix[1][1][6] =
      _mm256_add_pd(matrix.matrix[1][1][6], matrix.matrix[0][2][6]);
  matrix.matrix[1][2][0] =
      _mm256_add_pd(matrix.matrix[1][2][0], matrix.matrix[0][3][0]);
  matrix.matrix[1][2][1] =
      _mm256_add_pd(matrix.matrix[1][2][1], matrix.matrix[0][3][1]);
  matrix.matrix[1][2][2] =
      _mm256_add_pd(matrix.matrix[1][2][2], matrix.matrix[0][3][2]);
  matrix.matrix[1][2][3] =
      _mm256_add_pd(matrix.matrix[1][2][3], matrix.matrix[0][3][3]);
  matrix.matrix[1][2][4] =
      _mm256_add_pd(matrix.matrix[1][2][4], matrix.matrix[0][3][4]);
  matrix.matrix[1][2][5] =
      _mm256_add_pd(matrix.matrix[1][2][5], matrix.matrix[0][3][5]);
  matrix.matrix[1][3][0] =
      _mm256_add_pd(matrix.matrix[1][3][0], matrix.matrix[0][4][0]);
  matrix.matrix[1][3][1] =
      _mm256_add_pd(matrix.matrix[1][3][1], matrix.matrix[0][4][1]);
  matrix.matrix[1][3][2] =
      _mm256_add_pd(matrix.matrix[1][3][2], matrix.matrix[0][4][2]);
  matrix.matrix[1][3][3] =
      _mm256_add_pd(matrix.matrix[1][3][3], matrix.matrix[0][4][3]);
  matrix.matrix[1][3][4] =
      _mm256_add_pd(matrix.matrix[1][3][4], matrix.matrix[0][4][4]);
  matrix.matrix[1][4][0] =
      _mm256_add_pd(matrix.matrix[1][4][0], matrix.matrix[0][5][0]);
  matrix.matrix[1][4][1] =
      _mm256_add_pd(matrix.matrix[1][4][1], matrix.matrix[0][5][1]);
  matrix.matrix[1][4][2] =
      _mm256_add_pd(matrix.matrix[1][4][2], matrix.matrix[0][5][2]);
  matrix.matrix[1][4][3] =
      _mm256_add_pd(matrix.matrix[1][4][3], matrix.matrix[0][5][3]);
  matrix.matrix[2][2][0] =
      _mm256_add_pd(matrix.matrix[2][2][0], matrix.matrix[1][3][0]);
  matrix.matrix[2][2][1] =
      _mm256_add_pd(matrix.matrix[2][2][1], matrix.matrix[1][3][1]);
  matrix.matrix[2][2][2] =
      _mm256_add_pd(matrix.matrix[2][2][2], matrix.matrix[1][3][2]);
  matrix.matrix[2][2][3] =
      _mm256_add_pd(matrix.matrix[2][2][3], matrix.matrix[1][3][3]);
  matrix.matrix[2][2][4] =
      _mm256_add_pd(matrix.matrix[2][2][4], matrix.matrix[1][3][4]);
  matrix.matrix[2][3][0] =
      _mm256_add_pd(matrix.matrix[2][3][0], matrix.matrix[1][4][0]);
  matrix.matrix[2][3][1] =
      _mm256_add_pd(matrix.matrix[2][3][1], matrix.matrix[1][4][1]);
  matrix.matrix[2][3][2] =
      _mm256_add_pd(matrix.matrix[2][3][2], matrix.matrix[1][4][2]);
  matrix.matrix[2][3][3] =
      _mm256_add_pd(matrix.matrix[2][3][3], matrix.matrix[1][4][3]);
  matrix.matrix[2][4][0] =
      _mm256_add_pd(matrix.matrix[2][4][0], matrix.matrix[1][5][0]);
  matrix.matrix[2][4][1] =
      _mm256_add_pd(matrix.matrix[2][4][1], matrix.matrix[1][5][1]);
  matrix.matrix[2][4][2] =
      _mm256_add_pd(matrix.matrix[2][4][2], matrix.matrix[1][5][2]);
  matrix.matrix[3][3][0] =
      _mm256_add_pd(matrix.matrix[3][3][0], matrix.matrix[2][4][0]);
  matrix.matrix[3][3][1] =
      _mm256_add_pd(matrix.matrix[3][3][1], matrix.matrix[2][4][1]);
  matrix.matrix[3][3][2] =
      _mm256_add_pd(matrix.matrix[3][3][2], matrix.matrix[2][4][2]);
  matrix.matrix[3][4][0] =
      _mm256_add_pd(matrix.matrix[3][4][0], matrix.matrix[2][5][0]);
  matrix.matrix[3][4][1] =
      _mm256_add_pd(matrix.matrix[3][4][1], matrix.matrix[2][5][1]);
  matrix.matrix[4][4][0] =
      _mm256_add_pd(matrix.matrix[4][4][0], matrix.matrix[3][5][0]);
  matrix.matrix[1][0][0] = matrix.matrix[0][1][0];
  matrix.matrix[1][0][1] = matrix.matrix[0][1][1];
  matrix.matrix[1][0][2] = matrix.matrix[0][1][2];
  matrix.matrix[1][0][3] = matrix.matrix[0][1][3];
  matrix.matrix[1][0][4] = matrix.matrix[0][1][4];
  matrix.matrix[1][0][5] = matrix.matrix[0][1][5];
  matrix.matrix[1][0][6] = matrix.matrix[0][1][6];
  matrix.matrix[1][0][7] = matrix.matrix[0][1][7];
  matrix.matrix[2][0][0] = matrix.matrix[0][2][0];
  matrix.matrix[2][0][1] = matrix.matrix[0][2][1];
  matrix.matrix[2][0][2] = matrix.matrix[0][2][2];
  matrix.matrix[2][0][3] = matrix.matrix[0][2][3];
  matrix.matrix[2][0][4] = matrix.matrix[0][2][4];
  matrix.matrix[2][0][5] = matrix.matrix[0][2][5];
  matrix.matrix[2][0][6] = matrix.matrix[0][2][6];
  matrix.matrix[2][1][0] = matrix.matrix[1][2][0];
  matrix.matrix[2][1][1] = matrix.matrix[1][2][1];
  matrix.matrix[2][1][2] = matrix.matrix[1][2][2];
  matrix.matrix[2][1][3] = matrix.matrix[1][2][3];
  matrix.matrix[2][1][4] = matrix.matrix[1][2][4];
  matrix.matrix[2][1][5] = matrix.matrix[1][2][5];
  matrix.matrix[3][0][0] = matrix.matrix[0][3][0];
  matrix.matrix[3][0][1] = matrix.matrix[0][3][1];
  matrix.matrix[3][0][2] = matrix.matrix[0][3][2];
  matrix.matrix[3][0][3] = matrix.matrix[0][3][3];
  matrix.matrix[3][0][4] = matrix.matrix[0][3][4];
  matrix.matrix[3][0][5] = matrix.matrix[0][3][5];
  matrix.matrix[3][1][0] = matrix.matrix[1][3][0];
  matrix.matrix[3][1][1] = matrix.matrix[1][3][1];
  matrix.matrix[3][1][2] = matrix.matrix[1][3][2];
  matrix.matrix[3][1][3] = matrix.matrix[1][3][3];
  matrix.matrix[3][1][4] = matrix.matrix[1][3][4];
  matrix.matrix[3][2][0] = matrix.matrix[2][3][0];
  matrix.matrix[3][2][1] = matrix.matrix[2][3][1];
  matrix.matrix[3][2][2] = matrix.matrix[2][3][2];
  matrix.matrix[3][2][3] = matrix.matrix[2][3][3];
  matrix.matrix[4][0][0] = matrix.matrix[0][4][0];
  matrix.matrix[4][0][1] = matrix.matrix[0][4][1];
  matrix.matrix[4][0][2] = matrix.matrix[0][4][2];
  matrix.matrix[4][0][3] = matrix.matrix[0][4][3];
  matrix.matrix[4][0][4] = matrix.matrix[0][4][4];
  matrix.matrix[4][1][0] = matrix.matrix[1][4][0];
  matrix.matrix[4][1][1] = matrix.matrix[1][4][1];
  matrix.matrix[4][1][2] = matrix.matrix[1][4][2];
  matrix.matrix[4][1][3] = matrix.matrix[1][4][3];
  matrix.matrix[4][2][0] = matrix.matrix[2][4][0];
  matrix.matrix[4][2][1] = matrix.matrix[2][4][1];
  matrix.matrix[4][2][2] = matrix.matrix[2][4][2];
  matrix.matrix[4][3][0] = matrix.matrix[3][4][0];
  matrix.matrix[4][3][1] = matrix.matrix[3][4][1];
  matrix.matrix[5][0][0] = matrix.matrix[0][5][0];
  matrix.matrix[5][0][1] = matrix.matrix[0][5][1];
  matrix.matrix[5][0][2] = matrix.matrix[0][5][2];
  matrix.matrix[5][0][3] = matrix.matrix[0][5][3];
  matrix.matrix[5][1][0] = matrix.matrix[1][5][0];
  matrix.matrix[5][1][1] = matrix.matrix[1][5][1];
  matrix.matrix[5][1][2] = matrix.matrix[1][5][2];
  matrix.matrix[5][2][0] = matrix.matrix[2][5][0];
  matrix.matrix[5][2][1] = matrix.matrix[2][5][1];
  matrix.matrix[5][3][0] = matrix.matrix[3][5][0];

  return matrix;
}

// ADD
template <>
template <>
BVP<4UL> BVP<4UL>::operator+(const BVP<4UL> &other) const {

  BVP<4> result;
  result.coeffs[0][0] = _mm256_add_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_add_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_add_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_add_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[1][0] = _mm256_add_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_add_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_add_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[2][0] = _mm256_add_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_add_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[3][0] = _mm256_add_pd(coeffs[3][0], other.coeffs[3][0]);

  return result;
}
template <>
template <>
BVP<5UL> BVP<4UL>::operator+(const BVP<5UL> &other) const {
BVP<5> result;
result.coeffs[0][0] = _mm256_add_pd(coeffs[0][0], other.coeffs[0][0]);
result.coeffs[0][1] = _mm256_add_pd(coeffs[0][1], other.coeffs[0][1]);
result.coeffs[0][2] = _mm256_add_pd(coeffs[0][2], other.coeffs[0][2]);
result.coeffs[0][3] = _mm256_add_pd(coeffs[0][3], other.coeffs[0][3]);
result.coeffs[0][4] = other.coeffs[0][4];
result.coeffs[1][0] = _mm256_add_pd(coeffs[1][0], other.coeffs[1][0]);
result.coeffs[1][1] = _mm256_add_pd(coeffs[1][1], other.coeffs[1][1]);
result.coeffs[1][2] = _mm256_add_pd(coeffs[1][2], other.coeffs[1][2]);
result.coeffs[1][3] = other.coeffs[1][3];
result.coeffs[2][0] = _mm256_add_pd(coeffs[2][0], other.coeffs[2][0]);
result.coeffs[2][1] = _mm256_add_pd(coeffs[2][1], other.coeffs[2][1]);
result.coeffs[2][2] = other.coeffs[2][2];
result.coeffs[3][0] = _mm256_add_pd(coeffs[3][0], other.coeffs[3][0]);
result.coeffs[3][1] = other.coeffs[3][1];
result.coeffs[4][0] = other.coeffs[4][0];
return result;
}

template <>
template <>
BVP<8UL> BVP<8UL>::operator+(const BVP<8UL> &other) const {
  BVP<8> result;
  result.coeffs[0][0] = _mm256_add_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_add_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_add_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_add_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_add_pd(coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[0][5] = _mm256_add_pd(coeffs[0][5], other.coeffs[0][5]);
  result.coeffs[0][6] = _mm256_add_pd(coeffs[0][6], other.coeffs[0][6]);
  result.coeffs[0][7] = _mm256_add_pd(coeffs[0][7], other.coeffs[0][7]);
  result.coeffs[1][0] = _mm256_add_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_add_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_add_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_add_pd(coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[1][4] = _mm256_add_pd(coeffs[1][4], other.coeffs[1][4]);
  result.coeffs[1][5] = _mm256_add_pd(coeffs[1][5], other.coeffs[1][5]);
  result.coeffs[1][6] = _mm256_add_pd(coeffs[1][6], other.coeffs[1][6]);
  result.coeffs[2][0] = _mm256_add_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_add_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_add_pd(coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[2][3] = _mm256_add_pd(coeffs[2][3], other.coeffs[2][3]);
  result.coeffs[2][4] = _mm256_add_pd(coeffs[2][4], other.coeffs[2][4]);
  result.coeffs[2][5] = _mm256_add_pd(coeffs[2][5], other.coeffs[2][5]);
  result.coeffs[3][0] = _mm256_add_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_add_pd(coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[3][2] = _mm256_add_pd(coeffs[3][2], other.coeffs[3][2]);
  result.coeffs[3][3] = _mm256_add_pd(coeffs[3][3], other.coeffs[3][3]);
  result.coeffs[3][4] = _mm256_add_pd(coeffs[3][4], other.coeffs[3][4]);
  result.coeffs[4][0] = _mm256_add_pd(coeffs[4][0], other.coeffs[4][0]);
  result.coeffs[4][1] = _mm256_add_pd(coeffs[4][1], other.coeffs[4][1]);
  result.coeffs[4][2] = _mm256_add_pd(coeffs[4][2], other.coeffs[4][2]);
  result.coeffs[4][3] = _mm256_add_pd(coeffs[4][3], other.coeffs[4][3]);
  result.coeffs[5][0] = _mm256_add_pd(coeffs[5][0], other.coeffs[5][0]);
  result.coeffs[5][1] = _mm256_add_pd(coeffs[5][1], other.coeffs[5][1]);
  result.coeffs[5][2] = _mm256_add_pd(coeffs[5][2], other.coeffs[5][2]);
  result.coeffs[6][0] = _mm256_add_pd(coeffs[6][0], other.coeffs[6][0]);
  result.coeffs[6][1] = _mm256_add_pd(coeffs[6][1], other.coeffs[6][1]);
  result.coeffs[7][0] = _mm256_add_pd(coeffs[7][0], other.coeffs[7][0]);
  return result;
}

template <>
template <>
BVP<9UL> BVP<9UL>::operator+(const BVP<9UL> &other) const {
  BVP<9> result;
  result.coeffs[0][0] = _mm256_add_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_add_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_add_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_add_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_add_pd(coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[0][5] = _mm256_add_pd(coeffs[0][5], other.coeffs[0][5]);
  result.coeffs[0][6] = _mm256_add_pd(coeffs[0][6], other.coeffs[0][6]);
  result.coeffs[0][7] = _mm256_add_pd(coeffs[0][7], other.coeffs[0][7]);
  result.coeffs[0][8] = _mm256_add_pd(coeffs[0][8], other.coeffs[0][8]);
  result.coeffs[1][0] = _mm256_add_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_add_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_add_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_add_pd(coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[1][4] = _mm256_add_pd(coeffs[1][4], other.coeffs[1][4]);
  result.coeffs[1][5] = _mm256_add_pd(coeffs[1][5], other.coeffs[1][5]);
  result.coeffs[1][6] = _mm256_add_pd(coeffs[1][6], other.coeffs[1][6]);
  result.coeffs[1][7] = _mm256_add_pd(coeffs[1][7], other.coeffs[1][7]);
  result.coeffs[2][0] = _mm256_add_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_add_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_add_pd(coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[2][3] = _mm256_add_pd(coeffs[2][3], other.coeffs[2][3]);
  result.coeffs[2][4] = _mm256_add_pd(coeffs[2][4], other.coeffs[2][4]);
  result.coeffs[2][5] = _mm256_add_pd(coeffs[2][5], other.coeffs[2][5]);
  result.coeffs[2][6] = _mm256_add_pd(coeffs[2][6], other.coeffs[2][6]);
  result.coeffs[3][0] = _mm256_add_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_add_pd(coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[3][2] = _mm256_add_pd(coeffs[3][2], other.coeffs[3][2]);
  result.coeffs[3][3] = _mm256_add_pd(coeffs[3][3], other.coeffs[3][3]);
  result.coeffs[3][4] = _mm256_add_pd(coeffs[3][4], other.coeffs[3][4]);
  result.coeffs[3][5] = _mm256_add_pd(coeffs[3][5], other.coeffs[3][5]);
  result.coeffs[4][0] = _mm256_add_pd(coeffs[4][0], other.coeffs[4][0]);
  result.coeffs[4][1] = _mm256_add_pd(coeffs[4][1], other.coeffs[4][1]);
  result.coeffs[4][2] = _mm256_add_pd(coeffs[4][2], other.coeffs[4][2]);
  result.coeffs[4][3] = _mm256_add_pd(coeffs[4][3], other.coeffs[4][3]);
  result.coeffs[4][4] = _mm256_add_pd(coeffs[4][4], other.coeffs[4][4]);
  result.coeffs[5][0] = _mm256_add_pd(coeffs[5][0], other.coeffs[5][0]);
  result.coeffs[5][1] = _mm256_add_pd(coeffs[5][1], other.coeffs[5][1]);
  result.coeffs[5][2] = _mm256_add_pd(coeffs[5][2], other.coeffs[5][2]);
  result.coeffs[5][3] = _mm256_add_pd(coeffs[5][3], other.coeffs[5][3]);
  result.coeffs[6][0] = _mm256_add_pd(coeffs[6][0], other.coeffs[6][0]);
  result.coeffs[6][1] = _mm256_add_pd(coeffs[6][1], other.coeffs[6][1]);
  result.coeffs[6][2] = _mm256_add_pd(coeffs[6][2], other.coeffs[6][2]);
  result.coeffs[7][0] = _mm256_add_pd(coeffs[7][0], other.coeffs[7][0]);
  result.coeffs[7][1] = _mm256_add_pd(coeffs[7][1], other.coeffs[7][1]);
  result.coeffs[8][0] = _mm256_add_pd(coeffs[8][0], other.coeffs[8][0]);
  return result;
}

template <>
template <>
BVP<16UL> BVP<16UL>::operator+(const BVP<16UL> &other) const {
  BVP<16> result;
  result.coeffs[0][0] = _mm256_add_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_add_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_add_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_add_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_add_pd(coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[0][5] = _mm256_add_pd(coeffs[0][5], other.coeffs[0][5]);
  result.coeffs[0][6] = _mm256_add_pd(coeffs[0][6], other.coeffs[0][6]);
  result.coeffs[0][7] = _mm256_add_pd(coeffs[0][7], other.coeffs[0][7]);
  result.coeffs[0][8] = _mm256_add_pd(coeffs[0][8], other.coeffs[0][8]);
  result.coeffs[0][9] = _mm256_add_pd(coeffs[0][9], other.coeffs[0][9]);
  result.coeffs[0][10] = _mm256_add_pd(coeffs[0][10], other.coeffs[0][10]);
  result.coeffs[0][11] = _mm256_add_pd(coeffs[0][11], other.coeffs[0][11]);
  result.coeffs[0][12] = _mm256_add_pd(coeffs[0][12], other.coeffs[0][12]);
  result.coeffs[0][13] = _mm256_add_pd(coeffs[0][13], other.coeffs[0][13]);
  result.coeffs[0][14] = _mm256_add_pd(coeffs[0][14], other.coeffs[0][14]);
  result.coeffs[0][15] = _mm256_add_pd(coeffs[0][15], other.coeffs[0][15]);
  result.coeffs[1][0] = _mm256_add_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_add_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_add_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_add_pd(coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[1][4] = _mm256_add_pd(coeffs[1][4], other.coeffs[1][4]);
  result.coeffs[1][5] = _mm256_add_pd(coeffs[1][5], other.coeffs[1][5]);
  result.coeffs[1][6] = _mm256_add_pd(coeffs[1][6], other.coeffs[1][6]);
  result.coeffs[1][7] = _mm256_add_pd(coeffs[1][7], other.coeffs[1][7]);
  result.coeffs[1][8] = _mm256_add_pd(coeffs[1][8], other.coeffs[1][8]);
  result.coeffs[1][9] = _mm256_add_pd(coeffs[1][9], other.coeffs[1][9]);
  result.coeffs[1][10] = _mm256_add_pd(coeffs[1][10], other.coeffs[1][10]);
  result.coeffs[1][11] = _mm256_add_pd(coeffs[1][11], other.coeffs[1][11]);
  result.coeffs[1][12] = _mm256_add_pd(coeffs[1][12], other.coeffs[1][12]);
  result.coeffs[1][13] = _mm256_add_pd(coeffs[1][13], other.coeffs[1][13]);
  result.coeffs[1][14] = _mm256_add_pd(coeffs[1][14], other.coeffs[1][14]);
  result.coeffs[2][0] = _mm256_add_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_add_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_add_pd(coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[2][3] = _mm256_add_pd(coeffs[2][3], other.coeffs[2][3]);
  result.coeffs[2][4] = _mm256_add_pd(coeffs[2][4], other.coeffs[2][4]);
  result.coeffs[2][5] = _mm256_add_pd(coeffs[2][5], other.coeffs[2][5]);
  result.coeffs[2][6] = _mm256_add_pd(coeffs[2][6], other.coeffs[2][6]);
  result.coeffs[2][7] = _mm256_add_pd(coeffs[2][7], other.coeffs[2][7]);
  result.coeffs[2][8] = _mm256_add_pd(coeffs[2][8], other.coeffs[2][8]);
  result.coeffs[2][9] = _mm256_add_pd(coeffs[2][9], other.coeffs[2][9]);
  result.coeffs[2][10] = _mm256_add_pd(coeffs[2][10], other.coeffs[2][10]);
  result.coeffs[2][11] = _mm256_add_pd(coeffs[2][11], other.coeffs[2][11]);
  result.coeffs[2][12] = _mm256_add_pd(coeffs[2][12], other.coeffs[2][12]);
  result.coeffs[2][13] = _mm256_add_pd(coeffs[2][13], other.coeffs[2][13]);
  result.coeffs[3][0] = _mm256_add_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_add_pd(coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[3][2] = _mm256_add_pd(coeffs[3][2], other.coeffs[3][2]);
  result.coeffs[3][3] = _mm256_add_pd(coeffs[3][3], other.coeffs[3][3]);
  result.coeffs[3][4] = _mm256_add_pd(coeffs[3][4], other.coeffs[3][4]);
  result.coeffs[3][5] = _mm256_add_pd(coeffs[3][5], other.coeffs[3][5]);
  result.coeffs[3][6] = _mm256_add_pd(coeffs[3][6], other.coeffs[3][6]);
  result.coeffs[3][7] = _mm256_add_pd(coeffs[3][7], other.coeffs[3][7]);
  result.coeffs[3][8] = _mm256_add_pd(coeffs[3][8], other.coeffs[3][8]);
  result.coeffs[3][9] = _mm256_add_pd(coeffs[3][9], other.coeffs[3][9]);
  result.coeffs[3][10] = _mm256_add_pd(coeffs[3][10], other.coeffs[3][10]);
  result.coeffs[3][11] = _mm256_add_pd(coeffs[3][11], other.coeffs[3][11]);
  result.coeffs[3][12] = _mm256_add_pd(coeffs[3][12], other.coeffs[3][12]);
  result.coeffs[4][0] = _mm256_add_pd(coeffs[4][0], other.coeffs[4][0]);
  result.coeffs[4][1] = _mm256_add_pd(coeffs[4][1], other.coeffs[4][1]);
  result.coeffs[4][2] = _mm256_add_pd(coeffs[4][2], other.coeffs[4][2]);
  result.coeffs[4][3] = _mm256_add_pd(coeffs[4][3], other.coeffs[4][3]);
  result.coeffs[4][4] = _mm256_add_pd(coeffs[4][4], other.coeffs[4][4]);
  result.coeffs[4][5] = _mm256_add_pd(coeffs[4][5], other.coeffs[4][5]);
  result.coeffs[4][6] = _mm256_add_pd(coeffs[4][6], other.coeffs[4][6]);
  result.coeffs[4][7] = _mm256_add_pd(coeffs[4][7], other.coeffs[4][7]);
  result.coeffs[4][8] = _mm256_add_pd(coeffs[4][8], other.coeffs[4][8]);
  result.coeffs[4][9] = _mm256_add_pd(coeffs[4][9], other.coeffs[4][9]);
  result.coeffs[4][10] = _mm256_add_pd(coeffs[4][10], other.coeffs[4][10]);
  result.coeffs[4][11] = _mm256_add_pd(coeffs[4][11], other.coeffs[4][11]);
  result.coeffs[5][0] = _mm256_add_pd(coeffs[5][0], other.coeffs[5][0]);
  result.coeffs[5][1] = _mm256_add_pd(coeffs[5][1], other.coeffs[5][1]);
  result.coeffs[5][2] = _mm256_add_pd(coeffs[5][2], other.coeffs[5][2]);
  result.coeffs[5][3] = _mm256_add_pd(coeffs[5][3], other.coeffs[5][3]);
  result.coeffs[5][4] = _mm256_add_pd(coeffs[5][4], other.coeffs[5][4]);
  result.coeffs[5][5] = _mm256_add_pd(coeffs[5][5], other.coeffs[5][5]);
  result.coeffs[5][6] = _mm256_add_pd(coeffs[5][6], other.coeffs[5][6]);
  result.coeffs[5][7] = _mm256_add_pd(coeffs[5][7], other.coeffs[5][7]);
  result.coeffs[5][8] = _mm256_add_pd(coeffs[5][8], other.coeffs[5][8]);
  result.coeffs[5][9] = _mm256_add_pd(coeffs[5][9], other.coeffs[5][9]);
  result.coeffs[5][10] = _mm256_add_pd(coeffs[5][10], other.coeffs[5][10]);
  result.coeffs[6][0] = _mm256_add_pd(coeffs[6][0], other.coeffs[6][0]);
  result.coeffs[6][1] = _mm256_add_pd(coeffs[6][1], other.coeffs[6][1]);
  result.coeffs[6][2] = _mm256_add_pd(coeffs[6][2], other.coeffs[6][2]);
  result.coeffs[6][3] = _mm256_add_pd(coeffs[6][3], other.coeffs[6][3]);
  result.coeffs[6][4] = _mm256_add_pd(coeffs[6][4], other.coeffs[6][4]);
  result.coeffs[6][5] = _mm256_add_pd(coeffs[6][5], other.coeffs[6][5]);
  result.coeffs[6][6] = _mm256_add_pd(coeffs[6][6], other.coeffs[6][6]);
  result.coeffs[6][7] = _mm256_add_pd(coeffs[6][7], other.coeffs[6][7]);
  result.coeffs[6][8] = _mm256_add_pd(coeffs[6][8], other.coeffs[6][8]);
  result.coeffs[6][9] = _mm256_add_pd(coeffs[6][9], other.coeffs[6][9]);
  result.coeffs[7][0] = _mm256_add_pd(coeffs[7][0], other.coeffs[7][0]);
  result.coeffs[7][1] = _mm256_add_pd(coeffs[7][1], other.coeffs[7][1]);
  result.coeffs[7][2] = _mm256_add_pd(coeffs[7][2], other.coeffs[7][2]);
  result.coeffs[7][3] = _mm256_add_pd(coeffs[7][3], other.coeffs[7][3]);
  result.coeffs[7][4] = _mm256_add_pd(coeffs[7][4], other.coeffs[7][4]);
  result.coeffs[7][5] = _mm256_add_pd(coeffs[7][5], other.coeffs[7][5]);
  result.coeffs[7][6] = _mm256_add_pd(coeffs[7][6], other.coeffs[7][6]);
  result.coeffs[7][7] = _mm256_add_pd(coeffs[7][7], other.coeffs[7][7]);
  result.coeffs[7][8] = _mm256_add_pd(coeffs[7][8], other.coeffs[7][8]);
  result.coeffs[8][0] = _mm256_add_pd(coeffs[8][0], other.coeffs[8][0]);
  result.coeffs[8][1] = _mm256_add_pd(coeffs[8][1], other.coeffs[8][1]);
  result.coeffs[8][2] = _mm256_add_pd(coeffs[8][2], other.coeffs[8][2]);
  result.coeffs[8][3] = _mm256_add_pd(coeffs[8][3], other.coeffs[8][3]);
  result.coeffs[8][4] = _mm256_add_pd(coeffs[8][4], other.coeffs[8][4]);
  result.coeffs[8][5] = _mm256_add_pd(coeffs[8][5], other.coeffs[8][5]);
  result.coeffs[8][6] = _mm256_add_pd(coeffs[8][6], other.coeffs[8][6]);
  result.coeffs[8][7] = _mm256_add_pd(coeffs[8][7], other.coeffs[8][7]);
  result.coeffs[9][0] = _mm256_add_pd(coeffs[9][0], other.coeffs[9][0]);
  result.coeffs[9][1] = _mm256_add_pd(coeffs[9][1], other.coeffs[9][1]);
  result.coeffs[9][2] = _mm256_add_pd(coeffs[9][2], other.coeffs[9][2]);
  result.coeffs[9][3] = _mm256_add_pd(coeffs[9][3], other.coeffs[9][3]);
  result.coeffs[9][4] = _mm256_add_pd(coeffs[9][4], other.coeffs[9][4]);
  result.coeffs[9][5] = _mm256_add_pd(coeffs[9][5], other.coeffs[9][5]);
  result.coeffs[9][6] = _mm256_add_pd(coeffs[9][6], other.coeffs[9][6]);
  result.coeffs[10][0] = _mm256_add_pd(coeffs[10][0], other.coeffs[10][0]);
  result.coeffs[10][1] = _mm256_add_pd(coeffs[10][1], other.coeffs[10][1]);
  result.coeffs[10][2] = _mm256_add_pd(coeffs[10][2], other.coeffs[10][2]);
  result.coeffs[10][3] = _mm256_add_pd(coeffs[10][3], other.coeffs[10][3]);
  result.coeffs[10][4] = _mm256_add_pd(coeffs[10][4], other.coeffs[10][4]);
  result.coeffs[10][5] = _mm256_add_pd(coeffs[10][5], other.coeffs[10][5]);
  result.coeffs[11][0] = _mm256_add_pd(coeffs[11][0], other.coeffs[11][0]);
  result.coeffs[11][1] = _mm256_add_pd(coeffs[11][1], other.coeffs[11][1]);
  result.coeffs[11][2] = _mm256_add_pd(coeffs[11][2], other.coeffs[11][2]);
  result.coeffs[11][3] = _mm256_add_pd(coeffs[11][3], other.coeffs[11][3]);
  result.coeffs[11][4] = _mm256_add_pd(coeffs[11][4], other.coeffs[11][4]);
  result.coeffs[12][0] = _mm256_add_pd(coeffs[12][0], other.coeffs[12][0]);
  result.coeffs[12][1] = _mm256_add_pd(coeffs[12][1], other.coeffs[12][1]);
  result.coeffs[12][2] = _mm256_add_pd(coeffs[12][2], other.coeffs[12][2]);
  result.coeffs[12][3] = _mm256_add_pd(coeffs[12][3], other.coeffs[12][3]);
  result.coeffs[13][0] = _mm256_add_pd(coeffs[13][0], other.coeffs[13][0]);
  result.coeffs[13][1] = _mm256_add_pd(coeffs[13][1], other.coeffs[13][1]);
  result.coeffs[13][2] = _mm256_add_pd(coeffs[13][2], other.coeffs[13][2]);
  result.coeffs[14][0] = _mm256_add_pd(coeffs[14][0], other.coeffs[14][0]);
  result.coeffs[14][1] = _mm256_add_pd(coeffs[14][1], other.coeffs[14][1]);
  result.coeffs[15][0] = _mm256_add_pd(coeffs[15][0], other.coeffs[15][0]);
  return result;
}

template <>
template <>
BVP<11UL> BVP<11UL>::operator+(const BVP<11UL> &other) const {
  BVP<11> result;
  result.coeffs[0][0] = _mm256_add_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_add_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_add_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_add_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_add_pd(coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[0][5] = _mm256_add_pd(coeffs[0][5], other.coeffs[0][5]);
  result.coeffs[0][6] = _mm256_add_pd(coeffs[0][6], other.coeffs[0][6]);
  result.coeffs[0][7] = _mm256_add_pd(coeffs[0][7], other.coeffs[0][7]);
  result.coeffs[0][8] = _mm256_add_pd(coeffs[0][8], other.coeffs[0][8]);
  result.coeffs[0][9] = _mm256_add_pd(coeffs[0][9], other.coeffs[0][9]);
  result.coeffs[0][10] = _mm256_add_pd(coeffs[0][10], other.coeffs[0][10]);
  result.coeffs[1][0] = _mm256_add_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_add_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_add_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_add_pd(coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[1][4] = _mm256_add_pd(coeffs[1][4], other.coeffs[1][4]);
  result.coeffs[1][5] = _mm256_add_pd(coeffs[1][5], other.coeffs[1][5]);
  result.coeffs[1][6] = _mm256_add_pd(coeffs[1][6], other.coeffs[1][6]);
  result.coeffs[1][7] = _mm256_add_pd(coeffs[1][7], other.coeffs[1][7]);
  result.coeffs[1][8] = _mm256_add_pd(coeffs[1][8], other.coeffs[1][8]);
  result.coeffs[1][9] = _mm256_add_pd(coeffs[1][9], other.coeffs[1][9]);
  result.coeffs[2][0] = _mm256_add_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_add_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_add_pd(coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[2][3] = _mm256_add_pd(coeffs[2][3], other.coeffs[2][3]);
  result.coeffs[2][4] = _mm256_add_pd(coeffs[2][4], other.coeffs[2][4]);
  result.coeffs[2][5] = _mm256_add_pd(coeffs[2][5], other.coeffs[2][5]);
  result.coeffs[2][6] = _mm256_add_pd(coeffs[2][6], other.coeffs[2][6]);
  result.coeffs[2][7] = _mm256_add_pd(coeffs[2][7], other.coeffs[2][7]);
  result.coeffs[2][8] = _mm256_add_pd(coeffs[2][8], other.coeffs[2][8]);
  result.coeffs[3][0] = _mm256_add_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_add_pd(coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[3][2] = _mm256_add_pd(coeffs[3][2], other.coeffs[3][2]);
  result.coeffs[3][3] = _mm256_add_pd(coeffs[3][3], other.coeffs[3][3]);
  result.coeffs[3][4] = _mm256_add_pd(coeffs[3][4], other.coeffs[3][4]);
  result.coeffs[3][5] = _mm256_add_pd(coeffs[3][5], other.coeffs[3][5]);
  result.coeffs[3][6] = _mm256_add_pd(coeffs[3][6], other.coeffs[3][6]);
  result.coeffs[3][7] = _mm256_add_pd(coeffs[3][7], other.coeffs[3][7]);
  result.coeffs[4][0] = _mm256_add_pd(coeffs[4][0], other.coeffs[4][0]);
  result.coeffs[4][1] = _mm256_add_pd(coeffs[4][1], other.coeffs[4][1]);
  result.coeffs[4][2] = _mm256_add_pd(coeffs[4][2], other.coeffs[4][2]);
  result.coeffs[4][3] = _mm256_add_pd(coeffs[4][3], other.coeffs[4][3]);
  result.coeffs[4][4] = _mm256_add_pd(coeffs[4][4], other.coeffs[4][4]);
  result.coeffs[4][5] = _mm256_add_pd(coeffs[4][5], other.coeffs[4][5]);
  result.coeffs[4][6] = _mm256_add_pd(coeffs[4][6], other.coeffs[4][6]);
  result.coeffs[5][0] = _mm256_add_pd(coeffs[5][0], other.coeffs[5][0]);
  result.coeffs[5][1] = _mm256_add_pd(coeffs[5][1], other.coeffs[5][1]);
  result.coeffs[5][2] = _mm256_add_pd(coeffs[5][2], other.coeffs[5][2]);
  result.coeffs[5][3] = _mm256_add_pd(coeffs[5][3], other.coeffs[5][3]);
  result.coeffs[5][4] = _mm256_add_pd(coeffs[5][4], other.coeffs[5][4]);
  result.coeffs[5][5] = _mm256_add_pd(coeffs[5][5], other.coeffs[5][5]);
  result.coeffs[6][0] = _mm256_add_pd(coeffs[6][0], other.coeffs[6][0]);
  result.coeffs[6][1] = _mm256_add_pd(coeffs[6][1], other.coeffs[6][1]);
  result.coeffs[6][2] = _mm256_add_pd(coeffs[6][2], other.coeffs[6][2]);
  result.coeffs[6][3] = _mm256_add_pd(coeffs[6][3], other.coeffs[6][3]);
  result.coeffs[6][4] = _mm256_add_pd(coeffs[6][4], other.coeffs[6][4]);
  result.coeffs[7][0] = _mm256_add_pd(coeffs[7][0], other.coeffs[7][0]);
  result.coeffs[7][1] = _mm256_add_pd(coeffs[7][1], other.coeffs[7][1]);
  result.coeffs[7][2] = _mm256_add_pd(coeffs[7][2], other.coeffs[7][2]);
  result.coeffs[7][3] = _mm256_add_pd(coeffs[7][3], other.coeffs[7][3]);
  result.coeffs[8][0] = _mm256_add_pd(coeffs[8][0], other.coeffs[8][0]);
  result.coeffs[8][1] = _mm256_add_pd(coeffs[8][1], other.coeffs[8][1]);
  result.coeffs[8][2] = _mm256_add_pd(coeffs[8][2], other.coeffs[8][2]);
  result.coeffs[9][0] = _mm256_add_pd(coeffs[9][0], other.coeffs[9][0]);
  result.coeffs[9][1] = _mm256_add_pd(coeffs[9][1], other.coeffs[9][1]);
  result.coeffs[10][0] = _mm256_add_pd(coeffs[10][0], other.coeffs[10][0]);
  return result;
}

// Subtract
template <>
template <>
BVP<4ul> BVP<4UL>::operator-(const BVP<4ul> &other) const {
  BVP<4> result;
  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_sub_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_sub_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_sub_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[1][0] = _mm256_sub_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_sub_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_sub_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[2][0] = _mm256_sub_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_sub_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[3][0] = _mm256_sub_pd(coeffs[3][0], other.coeffs[3][0]);
  return result;
}

template <>
template <>
BVP<5ul> BVP<4UL>::operator-(const BVP<5ul> &other) const {
  BVP<5> result;
  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_sub_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_sub_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_sub_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_sub_pd(result.coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[1][0] = _mm256_sub_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_sub_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_sub_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_sub_pd(result.coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[2][0] = _mm256_sub_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_sub_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_sub_pd(result.coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[3][0] = _mm256_sub_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_sub_pd(result.coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[4][0] = _mm256_sub_pd(result.coeffs[4][0], other.coeffs[4][0]);
  return result;
}

template <>
template <>
BVP<5ul> BVP<5UL>::operator-(const BVP<5ul> &other) const {
  BVP<5> result;
  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_sub_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_sub_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_sub_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_sub_pd(coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[1][0] = _mm256_sub_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_sub_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_sub_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_sub_pd(coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[2][0] = _mm256_sub_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_sub_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_sub_pd(coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[3][0] = _mm256_sub_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_sub_pd(coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[4][0] = _mm256_sub_pd(coeffs[4][0], other.coeffs[4][0]);
  return result;
}

template <>
template <>
BVP<6ul> BVP<6UL>::operator-(const BVP<6ul> &other) const {
  BVP<6> result;
  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_sub_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_sub_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_sub_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_sub_pd(coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[0][5] = _mm256_sub_pd(coeffs[0][5], other.coeffs[0][5]);
  result.coeffs[1][0] = _mm256_sub_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_sub_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_sub_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_sub_pd(coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[1][4] = _mm256_sub_pd(coeffs[1][4], other.coeffs[1][4]);
  result.coeffs[2][0] = _mm256_sub_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_sub_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_sub_pd(coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[2][3] = _mm256_sub_pd(coeffs[2][3], other.coeffs[2][3]);
  result.coeffs[3][0] = _mm256_sub_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_sub_pd(coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[3][2] = _mm256_sub_pd(coeffs[3][2], other.coeffs[3][2]);
  result.coeffs[4][0] = _mm256_sub_pd(coeffs[4][0], other.coeffs[4][0]);
  result.coeffs[4][1] = _mm256_sub_pd(coeffs[4][1], other.coeffs[4][1]);
  result.coeffs[5][0] = _mm256_sub_pd(coeffs[5][0], other.coeffs[5][0]);
  return result;
}

template <>
template <>
BVP<11ul> BVP<11UL>::operator-(const BVP<11ul> &other) const {
  BVP<11> result;
  result.coeffs[0][0] = _mm256_sub_pd(coeffs[0][0], other.coeffs[0][0]);
  result.coeffs[0][1] = _mm256_sub_pd(coeffs[0][1], other.coeffs[0][1]);
  result.coeffs[0][2] = _mm256_sub_pd(coeffs[0][2], other.coeffs[0][2]);
  result.coeffs[0][3] = _mm256_sub_pd(coeffs[0][3], other.coeffs[0][3]);
  result.coeffs[0][4] = _mm256_sub_pd(coeffs[0][4], other.coeffs[0][4]);
  result.coeffs[0][5] = _mm256_sub_pd(coeffs[0][5], other.coeffs[0][5]);
  result.coeffs[0][6] = _mm256_sub_pd(coeffs[0][6], other.coeffs[0][6]);
  result.coeffs[0][7] = _mm256_sub_pd(coeffs[0][7], other.coeffs[0][7]);
  result.coeffs[0][8] = _mm256_sub_pd(coeffs[0][8], other.coeffs[0][8]);
  result.coeffs[0][9] = _mm256_sub_pd(coeffs[0][9], other.coeffs[0][9]);
  result.coeffs[0][10] = _mm256_sub_pd(coeffs[0][10], other.coeffs[0][10]);
  result.coeffs[1][0] = _mm256_sub_pd(coeffs[1][0], other.coeffs[1][0]);
  result.coeffs[1][1] = _mm256_sub_pd(coeffs[1][1], other.coeffs[1][1]);
  result.coeffs[1][2] = _mm256_sub_pd(coeffs[1][2], other.coeffs[1][2]);
  result.coeffs[1][3] = _mm256_sub_pd(coeffs[1][3], other.coeffs[1][3]);
  result.coeffs[1][4] = _mm256_sub_pd(coeffs[1][4], other.coeffs[1][4]);
  result.coeffs[1][5] = _mm256_sub_pd(coeffs[1][5], other.coeffs[1][5]);
  result.coeffs[1][6] = _mm256_sub_pd(coeffs[1][6], other.coeffs[1][6]);
  result.coeffs[1][7] = _mm256_sub_pd(coeffs[1][7], other.coeffs[1][7]);
  result.coeffs[1][8] = _mm256_sub_pd(coeffs[1][8], other.coeffs[1][8]);
  result.coeffs[1][9] = _mm256_sub_pd(coeffs[1][9], other.coeffs[1][9]);
  result.coeffs[2][0] = _mm256_sub_pd(coeffs[2][0], other.coeffs[2][0]);
  result.coeffs[2][1] = _mm256_sub_pd(coeffs[2][1], other.coeffs[2][1]);
  result.coeffs[2][2] = _mm256_sub_pd(coeffs[2][2], other.coeffs[2][2]);
  result.coeffs[2][3] = _mm256_sub_pd(coeffs[2][3], other.coeffs[2][3]);
  result.coeffs[2][4] = _mm256_sub_pd(coeffs[2][4], other.coeffs[2][4]);
  result.coeffs[2][5] = _mm256_sub_pd(coeffs[2][5], other.coeffs[2][5]);
  result.coeffs[2][6] = _mm256_sub_pd(coeffs[2][6], other.coeffs[2][6]);
  result.coeffs[2][7] = _mm256_sub_pd(coeffs[2][7], other.coeffs[2][7]);
  result.coeffs[2][8] = _mm256_sub_pd(coeffs[2][8], other.coeffs[2][8]);
  result.coeffs[3][0] = _mm256_sub_pd(coeffs[3][0], other.coeffs[3][0]);
  result.coeffs[3][1] = _mm256_sub_pd(coeffs[3][1], other.coeffs[3][1]);
  result.coeffs[3][2] = _mm256_sub_pd(coeffs[3][2], other.coeffs[3][2]);
  result.coeffs[3][3] = _mm256_sub_pd(coeffs[3][3], other.coeffs[3][3]);
  result.coeffs[3][4] = _mm256_sub_pd(coeffs[3][4], other.coeffs[3][4]);
  result.coeffs[3][5] = _mm256_sub_pd(coeffs[3][5], other.coeffs[3][5]);
  result.coeffs[3][6] = _mm256_sub_pd(coeffs[3][6], other.coeffs[3][6]);
  result.coeffs[3][7] = _mm256_sub_pd(coeffs[3][7], other.coeffs[3][7]);
  result.coeffs[4][0] = _mm256_sub_pd(coeffs[4][0], other.coeffs[4][0]);
  result.coeffs[4][1] = _mm256_sub_pd(coeffs[4][1], other.coeffs[4][1]);
  result.coeffs[4][2] = _mm256_sub_pd(coeffs[4][2], other.coeffs[4][2]);
  result.coeffs[4][3] = _mm256_sub_pd(coeffs[4][3], other.coeffs[4][3]);
  result.coeffs[4][4] = _mm256_sub_pd(coeffs[4][4], other.coeffs[4][4]);
  result.coeffs[4][5] = _mm256_sub_pd(coeffs[4][5], other.coeffs[4][5]);
  result.coeffs[4][6] = _mm256_sub_pd(coeffs[4][6], other.coeffs[4][6]);
  result.coeffs[5][0] = _mm256_sub_pd(coeffs[5][0], other.coeffs[5][0]);
  result.coeffs[5][1] = _mm256_sub_pd(coeffs[5][1], other.coeffs[5][1]);
  result.coeffs[5][2] = _mm256_sub_pd(coeffs[5][2], other.coeffs[5][2]);
  result.coeffs[5][3] = _mm256_sub_pd(coeffs[5][3], other.coeffs[5][3]);
  result.coeffs[5][4] = _mm256_sub_pd(coeffs[5][4], other.coeffs[5][4]);
  result.coeffs[5][5] = _mm256_sub_pd(coeffs[5][5], other.coeffs[5][5]);
  result.coeffs[6][0] = _mm256_sub_pd(coeffs[6][0], other.coeffs[6][0]);
  result.coeffs[6][1] = _mm256_sub_pd(coeffs[6][1], other.coeffs[6][1]);
  result.coeffs[6][2] = _mm256_sub_pd(coeffs[6][2], other.coeffs[6][2]);
  result.coeffs[6][3] = _mm256_sub_pd(coeffs[6][3], other.coeffs[6][3]);
  result.coeffs[6][4] = _mm256_sub_pd(coeffs[6][4], other.coeffs[6][4]);
  result.coeffs[7][0] = _mm256_sub_pd(coeffs[7][0], other.coeffs[7][0]);
  result.coeffs[7][1] = _mm256_sub_pd(coeffs[7][1], other.coeffs[7][1]);
  result.coeffs[7][2] = _mm256_sub_pd(coeffs[7][2], other.coeffs[7][2]);
  result.coeffs[7][3] = _mm256_sub_pd(coeffs[7][3], other.coeffs[7][3]);
  result.coeffs[8][0] = _mm256_sub_pd(coeffs[8][0], other.coeffs[8][0]);
  result.coeffs[8][1] = _mm256_sub_pd(coeffs[8][1], other.coeffs[8][1]);
  result.coeffs[8][2] = _mm256_sub_pd(coeffs[8][2], other.coeffs[8][2]);
  result.coeffs[9][0] = _mm256_sub_pd(coeffs[9][0], other.coeffs[9][0]);
  result.coeffs[9][1] = _mm256_sub_pd(coeffs[9][1], other.coeffs[9][1]);
  result.coeffs[10][0] = _mm256_sub_pd(coeffs[10][0], other.coeffs[10][0]);
  return result;
}

template <>
template <>
BVP<5UL> BVP<1ul>::operator*(const BVP<5ul> &other) const {
  BVP<5> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][3]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][4]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][3]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][2]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][1]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][0]));
  return result;
}

template <>
template <>
BVP<4UL> BVP<1ul>::operator*(const BVP<4ul> &other) const {
  BVP<4> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][3]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][2]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][1]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][0]));
  return result;
}

template <>
template <>
BVP<4UL> BVP<2ul>::operator*(const BVP<3ul> &other) const {
  BVP<4> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]));
  return result;
}

template <> BVP<4ul> BVP<4ul>::operator*(double d) const {
  BVP<4> result;

  __m256d packed_d = _mm256_broadcast_sd(&d);

  result.coeffs[0][0] =
      _mm256_add_pd(result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[0][1] =
      _mm256_add_pd(result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[0][2] =
      _mm256_add_pd(result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[0][3] =
      _mm256_add_pd(result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[1][0] =
      _mm256_add_pd(result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[1][1] =
      _mm256_add_pd(result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[1][2] =
      _mm256_add_pd(result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[2][0] =
      _mm256_add_pd(result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[2][1] =
      _mm256_add_pd(result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], packed_d));
  result.coeffs[3][0] =
      _mm256_add_pd(result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], packed_d));
  return result;
}

template <>
template <>
BVP<4UL> BVP<4ul>::operator*(const BVP<1ul> &other) const {
  BVP<4> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  return result;
}

template <>
template <>
BVP<5UL> BVP<5ul>::operator*(const BVP<1ul> &other) const {
  BVP<5> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][0]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][0]));
  return result;
}

template <>
template <>
BVP<5ul> BVP<4UL>::operator*(const BVP<2ul> &other) const {
  BVP<5> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][1]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][1]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][1]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][1]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][0]));
  return result;
}

template <>
template <>
BVP<8ul> BVP<4UL>::operator*(const BVP<5ul> &other) const {
  BVP<8> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][3]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][4]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][3]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][4]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][2]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][3]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][4]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][1]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][2]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][3]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][4]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][3]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][3]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][3]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][3]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][2]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][2]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][2]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][1]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][1]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][4]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][3]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][4]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][3]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][4]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][3]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][3]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][3]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][2]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][2]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][2]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][1]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][1]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][4]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][4]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][3]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][3]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][2]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][2]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][1]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][1]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][4]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][3]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][2]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][1]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][0]));
  return result;
}

template <>
template <>
BVP<5ul> BVP<2ul>::operator*(const BVP<4ul> &other) const {
  BVP<5> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][3]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][3]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][2]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][2]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][1]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][1]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][3]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][2]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][1]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][0]));
  return result;
}

template <>
template <>
BVP<9ul> BVP<5ul>::operator*(const BVP<5ul> &other) const {
  BVP<9> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][3]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][4]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][3]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][4]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][2]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][3]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][4]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][1]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][2]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][3]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][4]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][0]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][1]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][2]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][3]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][4]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][3]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][3]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][3]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][0]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][1]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][2]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][3]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][2]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][2]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][2]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][1]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][1]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][4]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][3]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][4]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][3]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][4]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][3]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][4]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][3]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][3]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][3]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][3]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][2]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][2]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][2]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][1]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][1]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][4]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][4]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][4]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][3]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][3]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][3]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][2]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][2]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][2]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][1]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][1]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][4]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][4]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][3]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][3]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][2]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][2]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][1]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][1]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][0]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][4]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][3]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][2]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][1]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][0]));
  return result;
}

template <>
template <>
BVP<16ul> BVP<9ul>::operator*(const BVP<8ul> &other) const {
  BVP<16> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][3]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][4]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][5]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][6]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][7]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][3]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][4]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][5]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][6]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][7]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][2]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][3]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][4]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][5]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][6]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][7]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][1]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][2]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][3]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][4]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][5]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][6]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][7]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][0]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][1]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][2]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][3]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][4]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][5]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][6]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][7]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][0]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][1]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][2]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][3]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][4]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][5]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][6]));
  result.coeffs[0][12] = _mm256_add_pd(
      result.coeffs[0][12], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][7]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][0]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][1]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][2]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][3]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][4]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][5]));
  result.coeffs[0][12] = _mm256_add_pd(
      result.coeffs[0][12], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][6]));
  result.coeffs[0][13] = _mm256_add_pd(
      result.coeffs[0][13], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][7]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][0]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][1]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][2]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][3]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][4]));
  result.coeffs[0][12] = _mm256_add_pd(
      result.coeffs[0][12], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][5]));
  result.coeffs[0][13] = _mm256_add_pd(
      result.coeffs[0][13], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][6]));
  result.coeffs[0][14] = _mm256_add_pd(
      result.coeffs[0][14], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][7]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][8], other.coeffs[0][0]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][8], other.coeffs[0][1]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][8], other.coeffs[0][2]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][8], other.coeffs[0][3]));
  result.coeffs[0][12] = _mm256_add_pd(
      result.coeffs[0][12], _mm256_mul_pd(coeffs[0][8], other.coeffs[0][4]));
  result.coeffs[0][13] = _mm256_add_pd(
      result.coeffs[0][13], _mm256_mul_pd(coeffs[0][8], other.coeffs[0][5]));
  result.coeffs[0][14] = _mm256_add_pd(
      result.coeffs[0][14], _mm256_mul_pd(coeffs[0][8], other.coeffs[0][6]));
  result.coeffs[0][15] = _mm256_add_pd(
      result.coeffs[0][15], _mm256_mul_pd(coeffs[0][8], other.coeffs[0][7]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][4]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][5]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][6]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][3]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][4]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][5]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][6]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][3]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][4]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][5]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][6]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][3]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][4]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][5]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][6]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][0]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][1]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][2]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][3]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][4]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][5]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][6]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][0]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][1]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][2]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][3]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][4]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][5]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][6]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][0]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][1]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][2]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][3]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][4]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][5]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][6]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][0]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][1]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][2]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][3]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][4]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][5]));
  result.coeffs[1][13] = _mm256_add_pd(
      result.coeffs[1][13], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][6]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][8], other.coeffs[1][0]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][8], other.coeffs[1][1]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][8], other.coeffs[1][2]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[0][8], other.coeffs[1][3]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[0][8], other.coeffs[1][4]));
  result.coeffs[1][13] = _mm256_add_pd(
      result.coeffs[1][13], _mm256_mul_pd(coeffs[0][8], other.coeffs[1][5]));
  result.coeffs[1][14] = _mm256_add_pd(
      result.coeffs[1][14], _mm256_mul_pd(coeffs[0][8], other.coeffs[1][6]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][4]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][5]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][4]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][5]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][4]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][5]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][3]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][4]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][5]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][2]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][3]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][4]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][5]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][0]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][1]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][2]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][3]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][4]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][5]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][0]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][1]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][2]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][3]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][4]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][5]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][0]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][1]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][2]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][3]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][4]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][5]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][8], other.coeffs[2][0]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][8], other.coeffs[2][1]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[0][8], other.coeffs[2][2]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[0][8], other.coeffs[2][3]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[0][8], other.coeffs[2][4]));
  result.coeffs[2][13] = _mm256_add_pd(
      result.coeffs[2][13], _mm256_mul_pd(coeffs[0][8], other.coeffs[2][5]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][4]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][4]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][4]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][4]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][3]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][0]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][1]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][2]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][3]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][0]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][1]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][2]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][3]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][0]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][1]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][2]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][3]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][4]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][8], other.coeffs[3][0]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[0][8], other.coeffs[3][1]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[0][8], other.coeffs[3][2]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[0][8], other.coeffs[3][3]));
  result.coeffs[3][12] = _mm256_add_pd(
      result.coeffs[3][12], _mm256_mul_pd(coeffs[0][8], other.coeffs[3][4]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][3]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][3]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][3]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][0]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][1]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][2]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][0]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][1]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][2]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][0]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][1]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][2]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[0][8], other.coeffs[4][0]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[0][8], other.coeffs[4][1]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[0][8], other.coeffs[4][2]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[0][8], other.coeffs[4][3]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[5][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[5][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[5][2]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[5][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[5][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[5][2]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[5][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[5][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[5][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[5][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[5][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[5][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[5][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[5][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[5][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[5][0]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[5][1]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[5][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[5][0]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[5][1]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[5][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[5][0]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[5][1]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[5][2]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[0][8], other.coeffs[5][0]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[0][8], other.coeffs[5][1]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[0][8], other.coeffs[5][2]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[6][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[6][1]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[6][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[6][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[6][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[6][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[6][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[6][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[6][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[6][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[6][0]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[6][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[6][0]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[6][1]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[6][0]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[6][1]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[0][8], other.coeffs[6][0]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[0][8], other.coeffs[6][1]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[7][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[7][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[7][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[7][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[7][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[7][0]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[7][0]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[7][0]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[0][8], other.coeffs[7][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][4]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][5]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][6]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][7]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][3]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][4]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][5]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][6]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][7]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][3]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][4]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][5]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][6]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][7]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][3]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][4]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][5]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][6]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][7]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][0]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][1]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][2]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][3]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][4]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][5]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][6]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][7]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][0]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][1]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][2]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][3]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][4]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][5]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][6]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][7]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][0]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][1]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][2]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][3]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][4]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][5]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][6]));
  result.coeffs[1][13] = _mm256_add_pd(
      result.coeffs[1][13], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][7]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][7], other.coeffs[0][0]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][7], other.coeffs[0][1]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][7], other.coeffs[0][2]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][7], other.coeffs[0][3]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[1][7], other.coeffs[0][4]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[1][7], other.coeffs[0][5]));
  result.coeffs[1][13] = _mm256_add_pd(
      result.coeffs[1][13], _mm256_mul_pd(coeffs[1][7], other.coeffs[0][6]));
  result.coeffs[1][14] = _mm256_add_pd(
      result.coeffs[1][14], _mm256_mul_pd(coeffs[1][7], other.coeffs[0][7]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][4]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][5]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][6]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][4]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][5]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][6]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][4]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][5]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][6]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][3]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][4]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][5]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][6]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][2]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][3]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][4]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][5]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][6]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][0]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][1]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][2]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][3]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][4]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][5]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][6]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][0]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][1]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][2]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][3]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][4]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][5]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][6]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][7], other.coeffs[1][0]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][7], other.coeffs[1][1]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][7], other.coeffs[1][2]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[1][7], other.coeffs[1][3]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[1][7], other.coeffs[1][4]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[1][7], other.coeffs[1][5]));
  result.coeffs[2][13] = _mm256_add_pd(
      result.coeffs[2][13], _mm256_mul_pd(coeffs[1][7], other.coeffs[1][6]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][5]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][5]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][5]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][4]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][5]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][3]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][4]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][5]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][0]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][1]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][2]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][3]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][4]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][5]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][0]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][1]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][2]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][3]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][4]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][5]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][7], other.coeffs[2][0]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][7], other.coeffs[2][1]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[1][7], other.coeffs[2][2]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[1][7], other.coeffs[2][3]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[1][7], other.coeffs[2][4]));
  result.coeffs[3][12] = _mm256_add_pd(
      result.coeffs[3][12], _mm256_mul_pd(coeffs[1][7], other.coeffs[2][5]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][4]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][4]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][4]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][4]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][0]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][1]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][2]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][3]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][0]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][1]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][2]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][3]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][7], other.coeffs[3][0]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[1][7], other.coeffs[3][1]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[1][7], other.coeffs[3][2]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[1][7], other.coeffs[3][3]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[1][7], other.coeffs[3][4]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][3]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][3]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][3]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][0]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][1]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][2]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][0]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][1]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][2]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[1][7], other.coeffs[4][0]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[1][7], other.coeffs[4][1]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[1][7], other.coeffs[4][2]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[1][7], other.coeffs[4][3]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[5][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[5][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[5][2]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[5][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[5][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[5][2]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[5][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[5][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[5][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[5][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[5][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[5][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[5][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[5][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[5][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[5][0]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[5][1]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[5][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[5][0]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[5][1]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[5][2]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[1][7], other.coeffs[5][0]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[1][7], other.coeffs[5][1]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[1][7], other.coeffs[5][2]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[6][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[6][1]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[6][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[6][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[6][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[6][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[6][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[6][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[6][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[6][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[6][0]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[6][1]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[6][0]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[6][1]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[1][7], other.coeffs[6][0]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[1][7], other.coeffs[6][1]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[7][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[7][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[7][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[7][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[7][0]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[7][0]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[7][0]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[1][7], other.coeffs[7][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][4]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][5]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][6]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][7]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][4]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][5]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][6]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][7]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][4]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][5]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][6]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][7]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][3]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][4]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][5]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][6]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][7]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][2]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][3]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][4]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][5]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][6]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][7]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][0]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][1]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][2]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][3]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][4]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][5]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][6]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][7]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][6], other.coeffs[0][0]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][6], other.coeffs[0][1]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][6], other.coeffs[0][2]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][6], other.coeffs[0][3]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[2][6], other.coeffs[0][4]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[2][6], other.coeffs[0][5]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[2][6], other.coeffs[0][6]));
  result.coeffs[2][13] = _mm256_add_pd(
      result.coeffs[2][13], _mm256_mul_pd(coeffs[2][6], other.coeffs[0][7]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][5]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][6]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][5]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][6]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][5]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][6]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][4]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][5]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][6]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][3]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][4]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][5]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][6]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][0]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][1]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][2]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][3]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][4]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][5]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][6]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][6], other.coeffs[1][0]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][6], other.coeffs[1][1]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][6], other.coeffs[1][2]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[2][6], other.coeffs[1][3]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[2][6], other.coeffs[1][4]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[2][6], other.coeffs[1][5]));
  result.coeffs[3][12] = _mm256_add_pd(
      result.coeffs[3][12], _mm256_mul_pd(coeffs[2][6], other.coeffs[1][6]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][5]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][5]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][5]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][4]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][5]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][4]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][5]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][0]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][1]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][2]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][3]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][4]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][5]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][6], other.coeffs[2][0]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][6], other.coeffs[2][1]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[2][6], other.coeffs[2][2]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[2][6], other.coeffs[2][3]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[2][6], other.coeffs[2][4]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[2][6], other.coeffs[2][5]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][4]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][4]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][4]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][4]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][3]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][0]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][1]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][2]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][3]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][6], other.coeffs[3][0]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[2][6], other.coeffs[3][1]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[2][6], other.coeffs[3][2]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[2][6], other.coeffs[3][3]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[2][6], other.coeffs[3][4]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][3]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][3]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][3]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][2]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][0]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][1]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][2]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[2][6], other.coeffs[4][0]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[2][6], other.coeffs[4][1]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[2][6], other.coeffs[4][2]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[2][6], other.coeffs[4][3]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[5][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[5][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[5][2]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[5][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[5][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[5][2]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[5][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[5][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[5][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[5][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[5][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[5][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[5][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[5][1]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[5][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[5][0]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[5][1]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[5][2]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[2][6], other.coeffs[5][0]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[2][6], other.coeffs[5][1]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[2][6], other.coeffs[5][2]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[6][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[6][1]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[6][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[6][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[6][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[6][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[6][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[6][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[6][0]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[6][1]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[6][0]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[6][1]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[2][6], other.coeffs[6][0]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[2][6], other.coeffs[6][1]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[7][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[7][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[7][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[7][0]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[7][0]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[7][0]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[2][6], other.coeffs[7][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][5]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][6]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][7]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][5]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][6]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][7]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][5]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][6]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][7]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][4]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][5]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][6]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][7]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][3]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][4]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][5]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][6]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][7]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][5], other.coeffs[0][0]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][5], other.coeffs[0][1]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][5], other.coeffs[0][2]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][5], other.coeffs[0][3]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[3][5], other.coeffs[0][4]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[3][5], other.coeffs[0][5]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[3][5], other.coeffs[0][6]));
  result.coeffs[3][12] = _mm256_add_pd(
      result.coeffs[3][12], _mm256_mul_pd(coeffs[3][5], other.coeffs[0][7]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][5]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][6]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][5]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][6]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][5]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][6]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][4]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][5]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][6]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][4]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][5]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][6]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][5], other.coeffs[1][0]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][5], other.coeffs[1][1]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][5], other.coeffs[1][2]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[3][5], other.coeffs[1][3]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[3][5], other.coeffs[1][4]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[3][5], other.coeffs[1][5]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[3][5], other.coeffs[1][6]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][5]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][5]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][4]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][5]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][4]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][5]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][3]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][4]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][5]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][5], other.coeffs[2][0]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][5], other.coeffs[2][1]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[3][5], other.coeffs[2][2]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[3][5], other.coeffs[2][3]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[3][5], other.coeffs[2][4]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[3][5], other.coeffs[2][5]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][4]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][4]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][4]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][3]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][4]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][2]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][3]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][5], other.coeffs[3][0]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[3][5], other.coeffs[3][1]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[3][5], other.coeffs[3][2]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[3][5], other.coeffs[3][3]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[3][5], other.coeffs[3][4]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][3]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][3]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][3]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][2]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][1]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][2]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[3][5], other.coeffs[4][0]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[3][5], other.coeffs[4][1]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[3][5], other.coeffs[4][2]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[3][5], other.coeffs[4][3]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[5][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[5][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[5][2]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[5][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[5][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[5][2]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[5][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[5][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[5][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[5][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[5][1]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[5][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[5][0]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[5][1]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[5][2]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[3][5], other.coeffs[5][0]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[3][5], other.coeffs[5][1]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[3][5], other.coeffs[5][2]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[6][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[6][1]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[6][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[6][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[6][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[6][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[6][0]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[6][1]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[6][0]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[6][1]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[3][5], other.coeffs[6][0]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[3][5], other.coeffs[6][1]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[7][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[7][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[7][0]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[7][0]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[7][0]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[3][5], other.coeffs[7][0]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][5]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][6]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][7]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][5]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][6]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][7]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][5]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][6]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][7]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][4]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][5]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][6]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][7]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][4], other.coeffs[0][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][4], other.coeffs[0][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][4], other.coeffs[0][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][4], other.coeffs[0][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[4][4], other.coeffs[0][4]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[4][4], other.coeffs[0][5]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[4][4], other.coeffs[0][6]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[4][4], other.coeffs[0][7]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][5]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][6]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][5]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][6]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][4]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][5]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][6]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][4]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][5]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][6]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][4], other.coeffs[1][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][4], other.coeffs[1][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][4], other.coeffs[1][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[4][4], other.coeffs[1][3]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[4][4], other.coeffs[1][4]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[4][4], other.coeffs[1][5]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[4][4], other.coeffs[1][6]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][5]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][4]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][5]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][4]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][5]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][3]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][4]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][5]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][4], other.coeffs[2][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][4], other.coeffs[2][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[4][4], other.coeffs[2][2]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[4][4], other.coeffs[2][3]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[4][4], other.coeffs[2][4]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[4][4], other.coeffs[2][5]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][4]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][4]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][3]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][4]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][2]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][3]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][4]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][4], other.coeffs[3][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[4][4], other.coeffs[3][1]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[4][4], other.coeffs[3][2]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[4][4], other.coeffs[3][3]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[4][4], other.coeffs[3][4]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][3]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][3]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][2]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][3]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][1]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][2]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[4][4], other.coeffs[4][0]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[4][4], other.coeffs[4][1]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[4][4], other.coeffs[4][2]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[4][4], other.coeffs[4][3]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[5][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[5][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[5][2]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[5][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[5][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[5][2]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[5][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[5][1]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[5][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[5][0]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[5][1]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[5][2]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[4][4], other.coeffs[5][0]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[4][4], other.coeffs[5][1]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[4][4], other.coeffs[5][2]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[6][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[6][1]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[6][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[6][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[6][0]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[6][1]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[6][0]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[6][1]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[4][4], other.coeffs[6][0]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[4][4], other.coeffs[6][1]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[7][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[7][0]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[7][0]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[7][0]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[4][4], other.coeffs[7][0]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][5]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][6]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][7]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][5]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][6]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][7]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][4]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][5]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][6]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][7]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[5][3], other.coeffs[0][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[5][3], other.coeffs[0][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[5][3], other.coeffs[0][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[5][3], other.coeffs[0][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[5][3], other.coeffs[0][4]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[5][3], other.coeffs[0][5]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[5][3], other.coeffs[0][6]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[5][3], other.coeffs[0][7]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][5]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][6]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][4]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][5]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][6]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][4]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][5]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][6]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[5][3], other.coeffs[1][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[5][3], other.coeffs[1][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[5][3], other.coeffs[1][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[5][3], other.coeffs[1][3]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[5][3], other.coeffs[1][4]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[5][3], other.coeffs[1][5]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[5][3], other.coeffs[1][6]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][4]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][5]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][4]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][5]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][3]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][4]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][5]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[5][3], other.coeffs[2][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[5][3], other.coeffs[2][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[5][3], other.coeffs[2][2]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[5][3], other.coeffs[2][3]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[5][3], other.coeffs[2][4]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[5][3], other.coeffs[2][5]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][4]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][3]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][4]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][2]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][3]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][4]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[5][3], other.coeffs[3][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[5][3], other.coeffs[3][1]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[5][3], other.coeffs[3][2]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[5][3], other.coeffs[3][3]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[5][3], other.coeffs[3][4]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][3]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][2]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][3]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][1]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][2]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][3]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[5][3], other.coeffs[4][0]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[5][3], other.coeffs[4][1]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[5][3], other.coeffs[4][2]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[5][3], other.coeffs[4][3]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[5][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[5][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[5][2]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[5][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[5][1]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[5][2]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[5][0]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[5][1]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[5][2]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[5][3], other.coeffs[5][0]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[5][3], other.coeffs[5][1]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[5][3], other.coeffs[5][2]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[6][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[6][1]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[6][0]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[6][1]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[6][0]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[6][1]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[5][3], other.coeffs[6][0]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[5][3], other.coeffs[6][1]));
  result.coeffs[12][0] = _mm256_add_pd(
      result.coeffs[12][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[7][0]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[7][0]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[7][0]));
  result.coeffs[12][3] = _mm256_add_pd(
      result.coeffs[12][3], _mm256_mul_pd(coeffs[5][3], other.coeffs[7][0]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][5]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][6]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][7]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][4]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][5]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][6]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][7]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[6][2], other.coeffs[0][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[6][2], other.coeffs[0][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[6][2], other.coeffs[0][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[6][2], other.coeffs[0][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[6][2], other.coeffs[0][4]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[6][2], other.coeffs[0][5]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[6][2], other.coeffs[0][6]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[6][2], other.coeffs[0][7]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][4]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][5]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][6]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][4]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][5]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][6]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[6][2], other.coeffs[1][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[6][2], other.coeffs[1][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[6][2], other.coeffs[1][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[6][2], other.coeffs[1][3]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[6][2], other.coeffs[1][4]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[6][2], other.coeffs[1][5]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[6][2], other.coeffs[1][6]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][4]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][5]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][3]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][4]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][5]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[6][2], other.coeffs[2][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[6][2], other.coeffs[2][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[6][2], other.coeffs[2][2]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[6][2], other.coeffs[2][3]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[6][2], other.coeffs[2][4]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[6][2], other.coeffs[2][5]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][3]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][4]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][2]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][3]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][4]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[6][2], other.coeffs[3][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[6][2], other.coeffs[3][1]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[6][2], other.coeffs[3][2]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[6][2], other.coeffs[3][3]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[6][2], other.coeffs[3][4]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][2]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][3]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][1]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][2]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][3]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[6][2], other.coeffs[4][0]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[6][2], other.coeffs[4][1]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[6][2], other.coeffs[4][2]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[6][2], other.coeffs[4][3]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[5][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[5][1]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[5][2]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[5][0]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[5][1]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[5][2]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[6][2], other.coeffs[5][0]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[6][2], other.coeffs[5][1]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[6][2], other.coeffs[5][2]));
  result.coeffs[12][0] = _mm256_add_pd(
      result.coeffs[12][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[6][0]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[6][1]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[6][0]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[6][1]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[6][2], other.coeffs[6][0]));
  result.coeffs[12][3] = _mm256_add_pd(
      result.coeffs[12][3], _mm256_mul_pd(coeffs[6][2], other.coeffs[6][1]));
  result.coeffs[13][0] = _mm256_add_pd(
      result.coeffs[13][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[7][0]));
  result.coeffs[13][1] = _mm256_add_pd(
      result.coeffs[13][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[7][0]));
  result.coeffs[13][2] = _mm256_add_pd(
      result.coeffs[13][2], _mm256_mul_pd(coeffs[6][2], other.coeffs[7][0]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][4]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][5]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][6]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][7]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[7][1], other.coeffs[0][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[7][1], other.coeffs[0][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[7][1], other.coeffs[0][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[7][1], other.coeffs[0][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[7][1], other.coeffs[0][4]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[7][1], other.coeffs[0][5]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[7][1], other.coeffs[0][6]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[7][1], other.coeffs[0][7]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][4]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][5]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][6]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[7][1], other.coeffs[1][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[7][1], other.coeffs[1][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[7][1], other.coeffs[1][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[7][1], other.coeffs[1][3]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[7][1], other.coeffs[1][4]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[7][1], other.coeffs[1][5]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[7][1], other.coeffs[1][6]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][3]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][4]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][5]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[7][1], other.coeffs[2][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[7][1], other.coeffs[2][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[7][1], other.coeffs[2][2]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[7][1], other.coeffs[2][3]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[7][1], other.coeffs[2][4]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[7][1], other.coeffs[2][5]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][2]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][3]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][4]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[7][1], other.coeffs[3][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[7][1], other.coeffs[3][1]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[7][1], other.coeffs[3][2]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[7][1], other.coeffs[3][3]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[7][1], other.coeffs[3][4]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][1]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][2]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][3]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[7][1], other.coeffs[4][0]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[7][1], other.coeffs[4][1]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[7][1], other.coeffs[4][2]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[7][1], other.coeffs[4][3]));
  result.coeffs[12][0] = _mm256_add_pd(
      result.coeffs[12][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[5][0]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[5][1]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[5][2]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[7][1], other.coeffs[5][0]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[7][1], other.coeffs[5][1]));
  result.coeffs[12][3] = _mm256_add_pd(
      result.coeffs[12][3], _mm256_mul_pd(coeffs[7][1], other.coeffs[5][2]));
  result.coeffs[13][0] = _mm256_add_pd(
      result.coeffs[13][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[6][0]));
  result.coeffs[13][1] = _mm256_add_pd(
      result.coeffs[13][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[6][1]));
  result.coeffs[13][1] = _mm256_add_pd(
      result.coeffs[13][1], _mm256_mul_pd(coeffs[7][1], other.coeffs[6][0]));
  result.coeffs[13][2] = _mm256_add_pd(
      result.coeffs[13][2], _mm256_mul_pd(coeffs[7][1], other.coeffs[6][1]));
  result.coeffs[14][0] = _mm256_add_pd(
      result.coeffs[14][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[7][0]));
  result.coeffs[14][1] = _mm256_add_pd(
      result.coeffs[14][1], _mm256_mul_pd(coeffs[7][1], other.coeffs[7][0]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[8][0], other.coeffs[0][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[8][0], other.coeffs[0][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[8][0], other.coeffs[0][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[8][0], other.coeffs[0][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[8][0], other.coeffs[0][4]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[8][0], other.coeffs[0][5]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[8][0], other.coeffs[0][6]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[8][0], other.coeffs[0][7]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[8][0], other.coeffs[1][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[8][0], other.coeffs[1][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[8][0], other.coeffs[1][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[8][0], other.coeffs[1][3]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[8][0], other.coeffs[1][4]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[8][0], other.coeffs[1][5]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[8][0], other.coeffs[1][6]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[8][0], other.coeffs[2][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[8][0], other.coeffs[2][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[8][0], other.coeffs[2][2]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[8][0], other.coeffs[2][3]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[8][0], other.coeffs[2][4]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[8][0], other.coeffs[2][5]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[8][0], other.coeffs[3][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[8][0], other.coeffs[3][1]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[8][0], other.coeffs[3][2]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[8][0], other.coeffs[3][3]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[8][0], other.coeffs[3][4]));
  result.coeffs[12][0] = _mm256_add_pd(
      result.coeffs[12][0], _mm256_mul_pd(coeffs[8][0], other.coeffs[4][0]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[8][0], other.coeffs[4][1]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[8][0], other.coeffs[4][2]));
  result.coeffs[12][3] = _mm256_add_pd(
      result.coeffs[12][3], _mm256_mul_pd(coeffs[8][0], other.coeffs[4][3]));
  result.coeffs[13][0] = _mm256_add_pd(
      result.coeffs[13][0], _mm256_mul_pd(coeffs[8][0], other.coeffs[5][0]));
  result.coeffs[13][1] = _mm256_add_pd(
      result.coeffs[13][1], _mm256_mul_pd(coeffs[8][0], other.coeffs[5][1]));
  result.coeffs[13][2] = _mm256_add_pd(
      result.coeffs[13][2], _mm256_mul_pd(coeffs[8][0], other.coeffs[5][2]));
  result.coeffs[14][0] = _mm256_add_pd(
      result.coeffs[14][0], _mm256_mul_pd(coeffs[8][0], other.coeffs[6][0]));
  result.coeffs[14][1] = _mm256_add_pd(
      result.coeffs[14][1], _mm256_mul_pd(coeffs[8][0], other.coeffs[6][1]));
  result.coeffs[15][0] = _mm256_add_pd(
      result.coeffs[15][0], _mm256_mul_pd(coeffs[8][0], other.coeffs[7][0]));
  return result;
}

template <>
template <>
BVP<16ul> BVP<8ul>::operator*(const BVP<9ul> &other) const {
  BVP<16> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][3]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][4]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][5]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][6]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][7]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][8]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][3]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][4]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][5]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][6]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][7]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][8]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][2]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][3]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][4]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][5]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][6]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][7]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][8]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][1]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][2]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][3]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][4]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][5]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][6]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][7]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][8]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][0]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][1]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][2]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][3]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][4]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][5]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][6]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][7]));
  result.coeffs[0][12] = _mm256_add_pd(
      result.coeffs[0][12], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][8]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][0]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][1]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][2]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][3]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][4]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][5]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][6]));
  result.coeffs[0][12] = _mm256_add_pd(
      result.coeffs[0][12], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][7]));
  result.coeffs[0][13] = _mm256_add_pd(
      result.coeffs[0][13], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][8]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][0]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][1]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][2]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][3]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][4]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][5]));
  result.coeffs[0][12] = _mm256_add_pd(
      result.coeffs[0][12], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][6]));
  result.coeffs[0][13] = _mm256_add_pd(
      result.coeffs[0][13], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][7]));
  result.coeffs[0][14] = _mm256_add_pd(
      result.coeffs[0][14], _mm256_mul_pd(coeffs[0][6], other.coeffs[0][8]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][0]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][1]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][2]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][3]));
  result.coeffs[0][11] = _mm256_add_pd(
      result.coeffs[0][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][4]));
  result.coeffs[0][12] = _mm256_add_pd(
      result.coeffs[0][12], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][5]));
  result.coeffs[0][13] = _mm256_add_pd(
      result.coeffs[0][13], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][6]));
  result.coeffs[0][14] = _mm256_add_pd(
      result.coeffs[0][14], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][7]));
  result.coeffs[0][15] = _mm256_add_pd(
      result.coeffs[0][15], _mm256_mul_pd(coeffs[0][7], other.coeffs[0][8]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][4]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][5]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][6]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][7]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][3]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][4]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][5]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][6]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][7]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][3]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][4]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][5]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][6]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][7]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][3]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][4]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][5]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][6]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][7]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][0]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][1]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][2]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][3]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][4]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][5]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][6]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][7]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][0]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][1]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][2]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][3]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][4]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][5]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][6]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][7]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][0]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][1]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][2]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][3]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][4]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][5]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][6]));
  result.coeffs[1][13] = _mm256_add_pd(
      result.coeffs[1][13], _mm256_mul_pd(coeffs[0][6], other.coeffs[1][7]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][0]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][1]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][2]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][3]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][4]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][5]));
  result.coeffs[1][13] = _mm256_add_pd(
      result.coeffs[1][13], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][6]));
  result.coeffs[1][14] = _mm256_add_pd(
      result.coeffs[1][14], _mm256_mul_pd(coeffs[0][7], other.coeffs[1][7]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][4]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][5]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][6]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][4]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][5]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][6]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][4]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][5]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][6]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][3]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][4]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][5]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][6]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][2]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][3]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][4]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][5]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][6]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][0]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][1]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][2]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][3]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][4]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][5]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][6]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][0]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][1]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][2]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][3]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][4]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][5]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[0][6], other.coeffs[2][6]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][0]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][1]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][2]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][3]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][4]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][5]));
  result.coeffs[2][13] = _mm256_add_pd(
      result.coeffs[2][13], _mm256_mul_pd(coeffs[0][7], other.coeffs[2][6]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][5]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][5]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][5]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][4]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][5]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][3]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][4]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][5]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][0]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][1]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][2]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][3]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][4]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][5]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][0]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][1]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][2]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][3]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][4]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[0][6], other.coeffs[3][5]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][0]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][1]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][2]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][3]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][4]));
  result.coeffs[3][12] = _mm256_add_pd(
      result.coeffs[3][12], _mm256_mul_pd(coeffs[0][7], other.coeffs[3][5]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][4]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][4]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][4]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][4]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][0]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][1]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][2]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][3]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][0]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][1]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][2]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][3]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[0][6], other.coeffs[4][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][0]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][1]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][2]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][3]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[0][7], other.coeffs[4][4]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[5][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[5][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[5][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[5][3]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[5][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[5][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[5][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[5][3]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[5][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[5][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[5][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[5][3]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[5][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[5][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[5][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[5][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[5][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[5][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[5][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[5][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[5][0]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[5][1]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[5][2]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[5][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[5][0]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[5][1]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[5][2]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[0][6], other.coeffs[5][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[5][0]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[5][1]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[5][2]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[0][7], other.coeffs[5][3]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[6][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[6][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[6][2]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[6][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[6][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[6][2]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[6][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[6][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[6][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[6][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[6][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[6][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[6][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[6][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[6][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[6][0]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[6][1]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[6][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[6][0]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[6][1]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[0][6], other.coeffs[6][2]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[6][0]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[6][1]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[0][7], other.coeffs[6][2]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[7][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[7][1]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[7][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[7][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[7][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[7][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[7][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[7][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[7][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[7][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[7][0]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[7][1]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[7][0]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[0][6], other.coeffs[7][1]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[7][0]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[0][7], other.coeffs[7][1]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[8][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[8][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[8][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[8][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[8][0]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[8][0]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[0][6], other.coeffs[8][0]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[0][7], other.coeffs[8][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][4]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][5]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][6]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][7]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][8]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][3]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][4]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][5]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][6]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][7]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][8]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][3]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][4]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][5]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][6]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][7]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][8]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][3]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][4]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][5]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][6]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][7]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][8]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][0]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][1]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][2]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][3]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][4]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][5]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][6]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][7]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][8]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][0]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][1]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][2]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][3]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][4]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][5]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][6]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][7]));
  result.coeffs[1][13] = _mm256_add_pd(
      result.coeffs[1][13], _mm256_mul_pd(coeffs[1][5], other.coeffs[0][8]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][0]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][1]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][2]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][3]));
  result.coeffs[1][10] = _mm256_add_pd(
      result.coeffs[1][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][4]));
  result.coeffs[1][11] = _mm256_add_pd(
      result.coeffs[1][11], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][5]));
  result.coeffs[1][12] = _mm256_add_pd(
      result.coeffs[1][12], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][6]));
  result.coeffs[1][13] = _mm256_add_pd(
      result.coeffs[1][13], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][7]));
  result.coeffs[1][14] = _mm256_add_pd(
      result.coeffs[1][14], _mm256_mul_pd(coeffs[1][6], other.coeffs[0][8]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][4]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][5]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][6]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][7]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][4]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][5]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][6]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][7]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][4]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][5]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][6]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][7]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][3]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][4]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][5]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][6]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][7]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][2]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][3]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][4]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][5]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][6]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][7]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][0]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][1]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][2]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][3]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][4]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][5]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][6]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[1][5], other.coeffs[1][7]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][0]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][1]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][2]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][3]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][4]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][5]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][6]));
  result.coeffs[2][13] = _mm256_add_pd(
      result.coeffs[2][13], _mm256_mul_pd(coeffs[1][6], other.coeffs[1][7]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][5]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][6]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][5]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][6]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][5]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][6]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][4]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][5]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][6]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][3]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][4]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][5]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][6]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][0]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][1]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][2]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][3]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][4]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][5]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[1][5], other.coeffs[2][6]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][0]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][1]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][2]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][3]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][4]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][5]));
  result.coeffs[3][12] = _mm256_add_pd(
      result.coeffs[3][12], _mm256_mul_pd(coeffs[1][6], other.coeffs[2][6]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][5]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][5]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][5]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][4]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][5]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][4]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][5]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][0]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][1]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][2]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][3]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][4]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[1][5], other.coeffs[3][5]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][0]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][1]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][2]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][3]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][4]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[1][6], other.coeffs[3][5]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][4]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][4]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][4]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][4]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][3]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][0]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][1]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][2]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][3]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[1][5], other.coeffs[4][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][0]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][1]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][2]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][3]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[1][6], other.coeffs[4][4]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[5][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[5][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[5][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[5][3]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[5][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[5][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[5][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[5][3]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[5][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[5][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[5][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[5][3]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[5][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[5][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[5][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[5][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[5][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[5][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[5][2]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[5][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[5][0]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[5][1]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[5][2]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[1][5], other.coeffs[5][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[5][0]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[5][1]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[5][2]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[1][6], other.coeffs[5][3]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[6][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[6][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[6][2]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[6][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[6][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[6][2]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[6][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[6][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[6][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[6][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[6][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[6][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[6][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[6][1]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[6][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[6][0]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[6][1]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[1][5], other.coeffs[6][2]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[6][0]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[6][1]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[1][6], other.coeffs[6][2]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[7][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[7][1]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[7][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[7][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[7][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[7][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[7][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[7][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[7][0]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[7][1]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[7][0]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[1][5], other.coeffs[7][1]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[7][0]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[1][6], other.coeffs[7][1]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[8][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[8][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[8][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[8][0]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[8][0]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[1][5], other.coeffs[8][0]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[1][6], other.coeffs[8][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][4]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][5]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][6]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][7]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][8]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][4]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][5]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][6]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][7]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][8]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][4]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][5]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][6]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][7]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][8]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][3]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][4]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][5]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][6]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][7]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][8]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][2]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][3]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][4]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][5]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][6]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][7]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[2][4], other.coeffs[0][8]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][0]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][1]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][2]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][3]));
  result.coeffs[2][9] = _mm256_add_pd(
      result.coeffs[2][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][4]));
  result.coeffs[2][10] = _mm256_add_pd(
      result.coeffs[2][10], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][5]));
  result.coeffs[2][11] = _mm256_add_pd(
      result.coeffs[2][11], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][6]));
  result.coeffs[2][12] = _mm256_add_pd(
      result.coeffs[2][12], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][7]));
  result.coeffs[2][13] = _mm256_add_pd(
      result.coeffs[2][13], _mm256_mul_pd(coeffs[2][5], other.coeffs[0][8]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][5]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][6]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][7]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][5]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][6]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][7]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][5]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][6]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][7]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][4]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][5]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][6]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][7]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][3]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][4]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][5]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][6]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[2][4], other.coeffs[1][7]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][0]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][1]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][2]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][3]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][4]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][5]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][6]));
  result.coeffs[3][12] = _mm256_add_pd(
      result.coeffs[3][12], _mm256_mul_pd(coeffs[2][5], other.coeffs[1][7]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][5]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][6]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][5]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][6]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][5]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][6]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][4]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][5]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][6]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][4]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][5]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[2][4], other.coeffs[2][6]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][0]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][1]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][2]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][3]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][4]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][5]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[2][5], other.coeffs[2][6]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][5]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][5]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][4]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][5]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][4]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][5]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][3]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][4]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[2][4], other.coeffs[3][5]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][0]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][1]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][2]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][3]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][4]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[2][5], other.coeffs[3][5]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][4]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][4]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][4]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][3]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][4]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][2]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][3]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[2][4], other.coeffs[4][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][0]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][1]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][2]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][3]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[2][5], other.coeffs[4][4]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[5][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[5][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[5][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[5][3]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[5][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[5][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[5][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[5][3]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[5][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[5][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[5][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[5][3]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[5][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[5][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[5][2]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[5][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[5][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[5][1]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[5][2]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[2][4], other.coeffs[5][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[5][0]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[5][1]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[5][2]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[2][5], other.coeffs[5][3]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[6][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[6][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[6][2]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[6][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[6][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[6][2]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[6][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[6][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[6][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[6][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[6][1]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[6][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[6][0]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[6][1]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[2][4], other.coeffs[6][2]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[6][0]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[6][1]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[2][5], other.coeffs[6][2]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[7][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[7][1]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[7][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[7][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[7][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[7][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[7][0]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[7][1]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[7][0]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[2][4], other.coeffs[7][1]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[7][0]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[2][5], other.coeffs[7][1]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[8][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[8][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[8][0]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[8][0]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[2][4], other.coeffs[8][0]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[2][5], other.coeffs[8][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][5]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][6]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][7]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][8]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][5]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][6]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][7]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][8]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][5]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][6]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][7]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][8]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][4]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][5]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][6]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][7]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[3][3], other.coeffs[0][8]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][3]));
  result.coeffs[3][8] = _mm256_add_pd(
      result.coeffs[3][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][4]));
  result.coeffs[3][9] = _mm256_add_pd(
      result.coeffs[3][9], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][5]));
  result.coeffs[3][10] = _mm256_add_pd(
      result.coeffs[3][10], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][6]));
  result.coeffs[3][11] = _mm256_add_pd(
      result.coeffs[3][11], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][7]));
  result.coeffs[3][12] = _mm256_add_pd(
      result.coeffs[3][12], _mm256_mul_pd(coeffs[3][4], other.coeffs[0][8]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][5]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][6]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][7]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][5]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][6]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][7]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][5]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][6]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][7]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][4]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][5]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][6]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[3][3], other.coeffs[1][7]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][2]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][3]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][4]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][5]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][6]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[3][4], other.coeffs[1][7]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][5]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][6]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][5]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][6]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][4]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][5]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][6]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][4]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][5]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[3][3], other.coeffs[2][6]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][1]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][2]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][3]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][4]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][5]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[3][4], other.coeffs[2][6]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][5]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][4]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][5]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][4]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][5]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][3]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][4]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[3][3], other.coeffs[3][5]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][0]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][1]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][2]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][3]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][4]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[3][4], other.coeffs[3][5]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][4]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][4]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][3]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][4]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][2]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][3]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[3][3], other.coeffs[4][4]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][0]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][1]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][2]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][3]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[3][4], other.coeffs[4][4]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[5][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[5][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[5][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[5][3]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[5][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[5][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[5][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[5][3]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[5][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[5][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[5][2]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[5][3]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[5][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[5][1]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[5][2]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[3][3], other.coeffs[5][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[5][0]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[5][1]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[5][2]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[3][4], other.coeffs[5][3]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[6][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[6][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[6][2]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[6][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[6][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[6][2]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[6][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[6][1]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[6][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[6][0]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[6][1]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[3][3], other.coeffs[6][2]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[6][0]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[6][1]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[3][4], other.coeffs[6][2]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[7][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[7][1]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[7][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[7][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[7][0]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[7][1]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[7][0]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[3][3], other.coeffs[7][1]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[7][0]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[3][4], other.coeffs[7][1]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[8][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[8][0]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[8][0]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[3][3], other.coeffs[8][0]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[3][4], other.coeffs[8][0]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][5]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][6]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][7]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][8]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][5]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][6]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][7]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][8]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][4]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][5]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][6]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][7]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[4][2], other.coeffs[0][8]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][3]));
  result.coeffs[4][7] = _mm256_add_pd(
      result.coeffs[4][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][4]));
  result.coeffs[4][8] = _mm256_add_pd(
      result.coeffs[4][8], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][5]));
  result.coeffs[4][9] = _mm256_add_pd(
      result.coeffs[4][9], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][6]));
  result.coeffs[4][10] = _mm256_add_pd(
      result.coeffs[4][10], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][7]));
  result.coeffs[4][11] = _mm256_add_pd(
      result.coeffs[4][11], _mm256_mul_pd(coeffs[4][3], other.coeffs[0][8]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][5]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][6]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][7]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][5]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][6]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][7]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][4]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][5]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][6]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[4][2], other.coeffs[1][7]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][2]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][3]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][4]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][5]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][6]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[4][3], other.coeffs[1][7]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][5]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][6]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][4]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][5]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][6]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][4]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][5]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[4][2], other.coeffs[2][6]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][1]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][2]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][3]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][4]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][5]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[4][3], other.coeffs[2][6]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][4]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][5]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][4]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][5]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][3]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][4]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[4][2], other.coeffs[3][5]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][0]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][1]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][2]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][3]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][4]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[4][3], other.coeffs[3][5]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][4]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][3]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][4]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][2]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][3]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[4][2], other.coeffs[4][4]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][0]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][1]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][2]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][3]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[4][3], other.coeffs[4][4]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[5][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[5][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[5][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[5][3]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[5][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[5][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[5][2]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[5][3]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[5][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[5][1]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[5][2]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[4][2], other.coeffs[5][3]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[5][0]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[5][1]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[5][2]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[4][3], other.coeffs[5][3]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[6][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[6][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[6][2]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[6][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[6][1]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[6][2]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[6][0]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[6][1]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[4][2], other.coeffs[6][2]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[6][0]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[6][1]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[4][3], other.coeffs[6][2]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[7][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[7][1]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[7][0]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[7][1]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[7][0]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[4][2], other.coeffs[7][1]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[7][0]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[4][3], other.coeffs[7][1]));
  result.coeffs[12][0] = _mm256_add_pd(
      result.coeffs[12][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[8][0]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[8][0]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[4][2], other.coeffs[8][0]));
  result.coeffs[12][3] = _mm256_add_pd(
      result.coeffs[12][3], _mm256_mul_pd(coeffs[4][3], other.coeffs[8][0]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][5]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][6]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][7]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][8]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][4]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][5]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][6]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][7]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[5][1], other.coeffs[0][8]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][3]));
  result.coeffs[5][6] = _mm256_add_pd(
      result.coeffs[5][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][4]));
  result.coeffs[5][7] = _mm256_add_pd(
      result.coeffs[5][7], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][5]));
  result.coeffs[5][8] = _mm256_add_pd(
      result.coeffs[5][8], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][6]));
  result.coeffs[5][9] = _mm256_add_pd(
      result.coeffs[5][9], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][7]));
  result.coeffs[5][10] = _mm256_add_pd(
      result.coeffs[5][10], _mm256_mul_pd(coeffs[5][2], other.coeffs[0][8]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][5]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][6]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][7]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][4]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][5]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][6]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[5][1], other.coeffs[1][7]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][2]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][3]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][4]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][5]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][6]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[5][2], other.coeffs[1][7]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][4]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][5]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][6]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][4]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][5]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[5][1], other.coeffs[2][6]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][1]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][2]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][3]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][4]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][5]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[5][2], other.coeffs[2][6]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][4]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][5]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][3]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][4]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[5][1], other.coeffs[3][5]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][0]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][1]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][2]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][3]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][4]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[5][2], other.coeffs[3][5]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][3]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][4]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][2]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][3]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[5][1], other.coeffs[4][4]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][0]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][1]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][2]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][3]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[5][2], other.coeffs[4][4]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[5][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[5][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[5][2]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[5][3]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[5][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[5][1]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[5][2]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[5][1], other.coeffs[5][3]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[5][0]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[5][1]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[5][2]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[5][2], other.coeffs[5][3]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[6][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[6][1]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[6][2]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[6][0]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[6][1]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[5][1], other.coeffs[6][2]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[6][0]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[6][1]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[5][2], other.coeffs[6][2]));
  result.coeffs[12][0] = _mm256_add_pd(
      result.coeffs[12][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[7][0]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[7][1]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[7][0]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[5][1], other.coeffs[7][1]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[7][0]));
  result.coeffs[12][3] = _mm256_add_pd(
      result.coeffs[12][3], _mm256_mul_pd(coeffs[5][2], other.coeffs[7][1]));
  result.coeffs[13][0] = _mm256_add_pd(
      result.coeffs[13][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[8][0]));
  result.coeffs[13][1] = _mm256_add_pd(
      result.coeffs[13][1], _mm256_mul_pd(coeffs[5][1], other.coeffs[8][0]));
  result.coeffs[13][2] = _mm256_add_pd(
      result.coeffs[13][2], _mm256_mul_pd(coeffs[5][2], other.coeffs[8][0]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][4]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][5]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][6]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][7]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[6][0], other.coeffs[0][8]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][3]));
  result.coeffs[6][5] = _mm256_add_pd(
      result.coeffs[6][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][4]));
  result.coeffs[6][6] = _mm256_add_pd(
      result.coeffs[6][6], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][5]));
  result.coeffs[6][7] = _mm256_add_pd(
      result.coeffs[6][7], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][6]));
  result.coeffs[6][8] = _mm256_add_pd(
      result.coeffs[6][8], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][7]));
  result.coeffs[6][9] = _mm256_add_pd(
      result.coeffs[6][9], _mm256_mul_pd(coeffs[6][1], other.coeffs[0][8]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][4]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][5]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][6]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[6][0], other.coeffs[1][7]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][2]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][3]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][4]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][5]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][6]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[6][1], other.coeffs[1][7]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][4]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][5]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[6][0], other.coeffs[2][6]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][1]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][2]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][3]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][4]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][5]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[6][1], other.coeffs[2][6]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][3]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][4]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[6][0], other.coeffs[3][5]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][0]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][1]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][2]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][3]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][4]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[6][1], other.coeffs[3][5]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][2]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][3]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[6][0], other.coeffs[4][4]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][0]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][1]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][2]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][3]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[6][1], other.coeffs[4][4]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[5][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[5][1]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[5][2]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[6][0], other.coeffs[5][3]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[5][0]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[5][1]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[5][2]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[6][1], other.coeffs[5][3]));
  result.coeffs[12][0] = _mm256_add_pd(
      result.coeffs[12][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[6][0]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[6][1]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[6][0], other.coeffs[6][2]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[6][0]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[6][1]));
  result.coeffs[12][3] = _mm256_add_pd(
      result.coeffs[12][3], _mm256_mul_pd(coeffs[6][1], other.coeffs[6][2]));
  result.coeffs[13][0] = _mm256_add_pd(
      result.coeffs[13][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[7][0]));
  result.coeffs[13][1] = _mm256_add_pd(
      result.coeffs[13][1], _mm256_mul_pd(coeffs[6][0], other.coeffs[7][1]));
  result.coeffs[13][1] = _mm256_add_pd(
      result.coeffs[13][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[7][0]));
  result.coeffs[13][2] = _mm256_add_pd(
      result.coeffs[13][2], _mm256_mul_pd(coeffs[6][1], other.coeffs[7][1]));
  result.coeffs[14][0] = _mm256_add_pd(
      result.coeffs[14][0], _mm256_mul_pd(coeffs[6][0], other.coeffs[8][0]));
  result.coeffs[14][1] = _mm256_add_pd(
      result.coeffs[14][1], _mm256_mul_pd(coeffs[6][1], other.coeffs[8][0]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][3]));
  result.coeffs[7][4] = _mm256_add_pd(
      result.coeffs[7][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][4]));
  result.coeffs[7][5] = _mm256_add_pd(
      result.coeffs[7][5], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][5]));
  result.coeffs[7][6] = _mm256_add_pd(
      result.coeffs[7][6], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][6]));
  result.coeffs[7][7] = _mm256_add_pd(
      result.coeffs[7][7], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][7]));
  result.coeffs[7][8] = _mm256_add_pd(
      result.coeffs[7][8], _mm256_mul_pd(coeffs[7][0], other.coeffs[0][8]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][2]));
  result.coeffs[8][3] = _mm256_add_pd(
      result.coeffs[8][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][3]));
  result.coeffs[8][4] = _mm256_add_pd(
      result.coeffs[8][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][4]));
  result.coeffs[8][5] = _mm256_add_pd(
      result.coeffs[8][5], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][5]));
  result.coeffs[8][6] = _mm256_add_pd(
      result.coeffs[8][6], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][6]));
  result.coeffs[8][7] = _mm256_add_pd(
      result.coeffs[8][7], _mm256_mul_pd(coeffs[7][0], other.coeffs[1][7]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][1]));
  result.coeffs[9][2] = _mm256_add_pd(
      result.coeffs[9][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][2]));
  result.coeffs[9][3] = _mm256_add_pd(
      result.coeffs[9][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][3]));
  result.coeffs[9][4] = _mm256_add_pd(
      result.coeffs[9][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][4]));
  result.coeffs[9][5] = _mm256_add_pd(
      result.coeffs[9][5], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][5]));
  result.coeffs[9][6] = _mm256_add_pd(
      result.coeffs[9][6], _mm256_mul_pd(coeffs[7][0], other.coeffs[2][6]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][0]));
  result.coeffs[10][1] = _mm256_add_pd(
      result.coeffs[10][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][1]));
  result.coeffs[10][2] = _mm256_add_pd(
      result.coeffs[10][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][2]));
  result.coeffs[10][3] = _mm256_add_pd(
      result.coeffs[10][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][3]));
  result.coeffs[10][4] = _mm256_add_pd(
      result.coeffs[10][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][4]));
  result.coeffs[10][5] = _mm256_add_pd(
      result.coeffs[10][5], _mm256_mul_pd(coeffs[7][0], other.coeffs[3][5]));
  result.coeffs[11][0] = _mm256_add_pd(
      result.coeffs[11][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][0]));
  result.coeffs[11][1] = _mm256_add_pd(
      result.coeffs[11][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][1]));
  result.coeffs[11][2] = _mm256_add_pd(
      result.coeffs[11][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][2]));
  result.coeffs[11][3] = _mm256_add_pd(
      result.coeffs[11][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][3]));
  result.coeffs[11][4] = _mm256_add_pd(
      result.coeffs[11][4], _mm256_mul_pd(coeffs[7][0], other.coeffs[4][4]));
  result.coeffs[12][0] = _mm256_add_pd(
      result.coeffs[12][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[5][0]));
  result.coeffs[12][1] = _mm256_add_pd(
      result.coeffs[12][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[5][1]));
  result.coeffs[12][2] = _mm256_add_pd(
      result.coeffs[12][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[5][2]));
  result.coeffs[12][3] = _mm256_add_pd(
      result.coeffs[12][3], _mm256_mul_pd(coeffs[7][0], other.coeffs[5][3]));
  result.coeffs[13][0] = _mm256_add_pd(
      result.coeffs[13][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[6][0]));
  result.coeffs[13][1] = _mm256_add_pd(
      result.coeffs[13][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[6][1]));
  result.coeffs[13][2] = _mm256_add_pd(
      result.coeffs[13][2], _mm256_mul_pd(coeffs[7][0], other.coeffs[6][2]));
  result.coeffs[14][0] = _mm256_add_pd(
      result.coeffs[14][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[7][0]));
  result.coeffs[14][1] = _mm256_add_pd(
      result.coeffs[14][1], _mm256_mul_pd(coeffs[7][0], other.coeffs[7][1]));
  result.coeffs[15][0] = _mm256_add_pd(
      result.coeffs[15][0], _mm256_mul_pd(coeffs[7][0], other.coeffs[8][0]));
  return result;
}

template <>
template <>
BVP<6ul> BVP<5ul>::operator*(const BVP<2ul> &other) const {
  BVP<6> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][1]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][0]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][1]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][1]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][1]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][1]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][1]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][0]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][1]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][0]));
  return result;
}

template <>
template <>
BVP<11ul> BVP<6ul>::operator*(const BVP<6ul> &other) const {
  BVP<11> result;
  result.coeffs[0][0] = _mm256_add_pd(
      result.coeffs[0][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][0]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][1]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][2]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][3]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][4]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][0], other.coeffs[0][5]));
  result.coeffs[0][1] = _mm256_add_pd(
      result.coeffs[0][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][0]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][1]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][2]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][3]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][4]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][1], other.coeffs[0][5]));
  result.coeffs[0][2] = _mm256_add_pd(
      result.coeffs[0][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][0]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][1]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][2]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][3]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][4]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][2], other.coeffs[0][5]));
  result.coeffs[0][3] = _mm256_add_pd(
      result.coeffs[0][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][0]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][1]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][2]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][3]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][4]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][3], other.coeffs[0][5]));
  result.coeffs[0][4] = _mm256_add_pd(
      result.coeffs[0][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][0]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][1]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][2]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][3]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][4]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][4], other.coeffs[0][5]));
  result.coeffs[0][5] = _mm256_add_pd(
      result.coeffs[0][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][0]));
  result.coeffs[0][6] = _mm256_add_pd(
      result.coeffs[0][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][1]));
  result.coeffs[0][7] = _mm256_add_pd(
      result.coeffs[0][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][2]));
  result.coeffs[0][8] = _mm256_add_pd(
      result.coeffs[0][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][3]));
  result.coeffs[0][9] = _mm256_add_pd(
      result.coeffs[0][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][4]));
  result.coeffs[0][10] = _mm256_add_pd(
      result.coeffs[0][10], _mm256_mul_pd(coeffs[0][5], other.coeffs[0][5]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][0], other.coeffs[1][4]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][3]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][1], other.coeffs[1][4]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][3]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][2], other.coeffs[1][4]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][3]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][3], other.coeffs[1][4]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][0]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][1]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][2]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][3]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][4], other.coeffs[1][4]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][0]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][1]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][2]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][3]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[0][5], other.coeffs[1][4]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][0], other.coeffs[2][3]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][1], other.coeffs[2][3]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][2], other.coeffs[2][3]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][3], other.coeffs[2][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][2]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][4], other.coeffs[2][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][0]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][1]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][2]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[0][5], other.coeffs[2][3]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][0], other.coeffs[3][2]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][1], other.coeffs[3][2]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][2], other.coeffs[3][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][3], other.coeffs[3][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][4], other.coeffs[3][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][0]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][1]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[0][5], other.coeffs[3][2]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[0][0], other.coeffs[4][1]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][1], other.coeffs[4][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][2], other.coeffs[4][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][3], other.coeffs[4][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][4], other.coeffs[4][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][0]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[0][5], other.coeffs[4][1]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[0][0], other.coeffs[5][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[0][1], other.coeffs[5][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[0][2], other.coeffs[5][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[0][3], other.coeffs[5][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[0][4], other.coeffs[5][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[0][5], other.coeffs[5][0]));
  result.coeffs[1][0] = _mm256_add_pd(
      result.coeffs[1][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][0]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][1]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][2]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][3]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][4]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][0], other.coeffs[0][5]));
  result.coeffs[1][1] = _mm256_add_pd(
      result.coeffs[1][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][0]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][1]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][2]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][3]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][4]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][1], other.coeffs[0][5]));
  result.coeffs[1][2] = _mm256_add_pd(
      result.coeffs[1][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][0]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][1]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][2]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][3]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][4]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][2], other.coeffs[0][5]));
  result.coeffs[1][3] = _mm256_add_pd(
      result.coeffs[1][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][0]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][1]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][2]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][3]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][4]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][3], other.coeffs[0][5]));
  result.coeffs[1][4] = _mm256_add_pd(
      result.coeffs[1][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][0]));
  result.coeffs[1][5] = _mm256_add_pd(
      result.coeffs[1][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][1]));
  result.coeffs[1][6] = _mm256_add_pd(
      result.coeffs[1][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][2]));
  result.coeffs[1][7] = _mm256_add_pd(
      result.coeffs[1][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][3]));
  result.coeffs[1][8] = _mm256_add_pd(
      result.coeffs[1][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][4]));
  result.coeffs[1][9] = _mm256_add_pd(
      result.coeffs[1][9], _mm256_mul_pd(coeffs[1][4], other.coeffs[0][5]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][0], other.coeffs[1][4]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][1], other.coeffs[1][4]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][2], other.coeffs[1][4]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][3]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][3], other.coeffs[1][4]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][0]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][1]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][2]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][3]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[1][4], other.coeffs[1][4]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][0], other.coeffs[2][3]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][1], other.coeffs[2][3]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][2], other.coeffs[2][3]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][3], other.coeffs[2][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][0]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][1]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][2]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[1][4], other.coeffs[2][3]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][0], other.coeffs[3][2]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][1], other.coeffs[3][2]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][2], other.coeffs[3][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][3], other.coeffs[3][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][0]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][1]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[1][4], other.coeffs[3][2]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[1][0], other.coeffs[4][1]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][1], other.coeffs[4][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][2], other.coeffs[4][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][3], other.coeffs[4][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][0]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[1][4], other.coeffs[4][1]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[1][0], other.coeffs[5][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[1][1], other.coeffs[5][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[1][2], other.coeffs[5][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[1][3], other.coeffs[5][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[1][4], other.coeffs[5][0]));
  result.coeffs[2][0] = _mm256_add_pd(
      result.coeffs[2][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][0]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][1]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][2]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][3]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][4]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][0], other.coeffs[0][5]));
  result.coeffs[2][1] = _mm256_add_pd(
      result.coeffs[2][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][0]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][1]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][2]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][3]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][4]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][1], other.coeffs[0][5]));
  result.coeffs[2][2] = _mm256_add_pd(
      result.coeffs[2][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][0]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][1]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][2]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][3]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][4]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][2], other.coeffs[0][5]));
  result.coeffs[2][3] = _mm256_add_pd(
      result.coeffs[2][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][0]));
  result.coeffs[2][4] = _mm256_add_pd(
      result.coeffs[2][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][1]));
  result.coeffs[2][5] = _mm256_add_pd(
      result.coeffs[2][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][2]));
  result.coeffs[2][6] = _mm256_add_pd(
      result.coeffs[2][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][3]));
  result.coeffs[2][7] = _mm256_add_pd(
      result.coeffs[2][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][4]));
  result.coeffs[2][8] = _mm256_add_pd(
      result.coeffs[2][8], _mm256_mul_pd(coeffs[2][3], other.coeffs[0][5]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][0], other.coeffs[1][4]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][1], other.coeffs[1][4]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][2], other.coeffs[1][4]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][0]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][1]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][2]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][3]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[2][3], other.coeffs[1][4]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][0], other.coeffs[2][3]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][1], other.coeffs[2][3]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][2], other.coeffs[2][3]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][0]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][1]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][2]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[2][3], other.coeffs[2][3]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][0], other.coeffs[3][2]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][1], other.coeffs[3][2]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][2], other.coeffs[3][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][0]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][1]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[2][3], other.coeffs[3][2]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[2][0], other.coeffs[4][1]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][1], other.coeffs[4][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][2], other.coeffs[4][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][0]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[2][3], other.coeffs[4][1]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[2][0], other.coeffs[5][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[2][1], other.coeffs[5][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[2][2], other.coeffs[5][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[2][3], other.coeffs[5][0]));
  result.coeffs[3][0] = _mm256_add_pd(
      result.coeffs[3][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][0]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][1]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][2]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][3]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][4]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][0], other.coeffs[0][5]));
  result.coeffs[3][1] = _mm256_add_pd(
      result.coeffs[3][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][0]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][1]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][2]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][3]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][4]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][1], other.coeffs[0][5]));
  result.coeffs[3][2] = _mm256_add_pd(
      result.coeffs[3][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][0]));
  result.coeffs[3][3] = _mm256_add_pd(
      result.coeffs[3][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][1]));
  result.coeffs[3][4] = _mm256_add_pd(
      result.coeffs[3][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][2]));
  result.coeffs[3][5] = _mm256_add_pd(
      result.coeffs[3][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][3]));
  result.coeffs[3][6] = _mm256_add_pd(
      result.coeffs[3][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][4]));
  result.coeffs[3][7] = _mm256_add_pd(
      result.coeffs[3][7], _mm256_mul_pd(coeffs[3][2], other.coeffs[0][5]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][0], other.coeffs[1][4]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][1], other.coeffs[1][4]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][0]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][1]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][2]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][3]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[3][2], other.coeffs[1][4]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][0], other.coeffs[2][3]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][1], other.coeffs[2][3]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][0]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][1]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][2]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[3][2], other.coeffs[2][3]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][0], other.coeffs[3][2]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][1], other.coeffs[3][2]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][0]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][1]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[3][2], other.coeffs[3][2]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[3][0], other.coeffs[4][1]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[3][1], other.coeffs[4][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][0]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[3][2], other.coeffs[4][1]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[3][0], other.coeffs[5][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[3][1], other.coeffs[5][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[3][2], other.coeffs[5][0]));
  result.coeffs[4][0] = _mm256_add_pd(
      result.coeffs[4][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][0]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][1]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][2]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][3]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][4]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][0], other.coeffs[0][5]));
  result.coeffs[4][1] = _mm256_add_pd(
      result.coeffs[4][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][0]));
  result.coeffs[4][2] = _mm256_add_pd(
      result.coeffs[4][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][1]));
  result.coeffs[4][3] = _mm256_add_pd(
      result.coeffs[4][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][2]));
  result.coeffs[4][4] = _mm256_add_pd(
      result.coeffs[4][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][3]));
  result.coeffs[4][5] = _mm256_add_pd(
      result.coeffs[4][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][4]));
  result.coeffs[4][6] = _mm256_add_pd(
      result.coeffs[4][6], _mm256_mul_pd(coeffs[4][1], other.coeffs[0][5]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][0], other.coeffs[1][4]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][0]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][1]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][2]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][3]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[4][1], other.coeffs[1][4]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][0], other.coeffs[2][3]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][0]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][1]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][2]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[4][1], other.coeffs[2][3]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[4][0], other.coeffs[3][2]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][0]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][1]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[4][1], other.coeffs[3][2]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[4][0], other.coeffs[4][1]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][0]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[4][1], other.coeffs[4][1]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[4][0], other.coeffs[5][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[4][1], other.coeffs[5][0]));
  result.coeffs[5][0] = _mm256_add_pd(
      result.coeffs[5][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][0]));
  result.coeffs[5][1] = _mm256_add_pd(
      result.coeffs[5][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][1]));
  result.coeffs[5][2] = _mm256_add_pd(
      result.coeffs[5][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][2]));
  result.coeffs[5][3] = _mm256_add_pd(
      result.coeffs[5][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][3]));
  result.coeffs[5][4] = _mm256_add_pd(
      result.coeffs[5][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][4]));
  result.coeffs[5][5] = _mm256_add_pd(
      result.coeffs[5][5], _mm256_mul_pd(coeffs[5][0], other.coeffs[0][5]));
  result.coeffs[6][0] = _mm256_add_pd(
      result.coeffs[6][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][0]));
  result.coeffs[6][1] = _mm256_add_pd(
      result.coeffs[6][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][1]));
  result.coeffs[6][2] = _mm256_add_pd(
      result.coeffs[6][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][2]));
  result.coeffs[6][3] = _mm256_add_pd(
      result.coeffs[6][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][3]));
  result.coeffs[6][4] = _mm256_add_pd(
      result.coeffs[6][4], _mm256_mul_pd(coeffs[5][0], other.coeffs[1][4]));
  result.coeffs[7][0] = _mm256_add_pd(
      result.coeffs[7][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][0]));
  result.coeffs[7][1] = _mm256_add_pd(
      result.coeffs[7][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][1]));
  result.coeffs[7][2] = _mm256_add_pd(
      result.coeffs[7][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][2]));
  result.coeffs[7][3] = _mm256_add_pd(
      result.coeffs[7][3], _mm256_mul_pd(coeffs[5][0], other.coeffs[2][3]));
  result.coeffs[8][0] = _mm256_add_pd(
      result.coeffs[8][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][0]));
  result.coeffs[8][1] = _mm256_add_pd(
      result.coeffs[8][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][1]));
  result.coeffs[8][2] = _mm256_add_pd(
      result.coeffs[8][2], _mm256_mul_pd(coeffs[5][0], other.coeffs[3][2]));
  result.coeffs[9][0] = _mm256_add_pd(
      result.coeffs[9][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][0]));
  result.coeffs[9][1] = _mm256_add_pd(
      result.coeffs[9][1], _mm256_mul_pd(coeffs[5][0], other.coeffs[4][1]));
  result.coeffs[10][0] = _mm256_add_pd(
      result.coeffs[10][0], _mm256_mul_pd(coeffs[5][0], other.coeffs[5][0]));
  return result;
}

template <>
UnivariatePolyMatrix<15>
bezout_matrix<16ul, 11ul, 15ul>(const BVP<16ul> &poly1,
                                const BVP<11ul> &poly2) {
  //

  UnivariatePolyMatrix<15> bezout;
  bezout.matrix[0][0][0] =
      _mm256_add_pd(bezout.matrix[0][0][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][0]));
  bezout.matrix[0][0][1] =
      _mm256_add_pd(bezout.matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][1]));
  bezout.matrix[0][0][2] =
      _mm256_add_pd(bezout.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][2]));
  bezout.matrix[0][0][3] =
      _mm256_add_pd(bezout.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][3]));
  bezout.matrix[0][0][4] =
      _mm256_add_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][4]));
  bezout.matrix[0][0][5] =
      _mm256_add_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][5]));
  bezout.matrix[0][0][6] =
      _mm256_add_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][6]));
  bezout.matrix[0][0][7] =
      _mm256_add_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][7]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][8]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[1][9]));
  bezout.matrix[0][0][1] =
      _mm256_add_pd(bezout.matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][0]));
  bezout.matrix[0][0][2] =
      _mm256_add_pd(bezout.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][1]));
  bezout.matrix[0][0][3] =
      _mm256_add_pd(bezout.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][2]));
  bezout.matrix[0][0][4] =
      _mm256_add_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][3]));
  bezout.matrix[0][0][5] =
      _mm256_add_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][4]));
  bezout.matrix[0][0][6] =
      _mm256_add_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][5]));
  bezout.matrix[0][0][7] =
      _mm256_add_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][6]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][7]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][8]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[1][9]));
  bezout.matrix[0][0][2] =
      _mm256_add_pd(bezout.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][0]));
  bezout.matrix[0][0][3] =
      _mm256_add_pd(bezout.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][1]));
  bezout.matrix[0][0][4] =
      _mm256_add_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][2]));
  bezout.matrix[0][0][5] =
      _mm256_add_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][3]));
  bezout.matrix[0][0][6] =
      _mm256_add_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][4]));
  bezout.matrix[0][0][7] =
      _mm256_add_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][5]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][6]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][7]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][8]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[1][9]));
  bezout.matrix[0][0][3] =
      _mm256_add_pd(bezout.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][0]));
  bezout.matrix[0][0][4] =
      _mm256_add_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][1]));
  bezout.matrix[0][0][5] =
      _mm256_add_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][2]));
  bezout.matrix[0][0][6] =
      _mm256_add_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][3]));
  bezout.matrix[0][0][7] =
      _mm256_add_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][4]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][5]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][6]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][7]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][8]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[1][9]));
  bezout.matrix[0][0][4] =
      _mm256_add_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][0]));
  bezout.matrix[0][0][5] =
      _mm256_add_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][1]));
  bezout.matrix[0][0][6] =
      _mm256_add_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][2]));
  bezout.matrix[0][0][7] =
      _mm256_add_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][3]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][4]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][5]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][6]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][7]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][8]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[1][9]));
  bezout.matrix[0][0][5] =
      _mm256_add_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][0]));
  bezout.matrix[0][0][6] =
      _mm256_add_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][1]));
  bezout.matrix[0][0][7] =
      _mm256_add_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][2]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][3]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][4]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][5]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][6]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][7]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][8]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[1][9]));
  bezout.matrix[0][0][6] =
      _mm256_add_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][0]));
  bezout.matrix[0][0][7] =
      _mm256_add_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][1]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][2]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][3]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][4]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][5]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][6]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][7]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][8]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[1][9]));
  bezout.matrix[0][0][7] =
      _mm256_add_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][0]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][1]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][2]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][3]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][4]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][5]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][6]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][7]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[1][8]));
  bezout.matrix[0][0][8] =
      _mm256_add_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[1][0]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[1][1]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[1][2]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[1][3]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[1][4]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[1][5]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[1][6]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[1][7]));
  bezout.matrix[0][0][9] =
      _mm256_add_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[1][0]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[1][1]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[1][2]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[1][3]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[1][4]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[1][5]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[1][6]));
  bezout.matrix[0][0][10] =
      _mm256_add_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[1][0]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[1][1]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[1][2]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[1][3]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[1][4]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[1][5]));
  bezout.matrix[0][0][11] =
      _mm256_add_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[1][0]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[1][1]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[1][2]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[1][3]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[1][4]));
  bezout.matrix[0][0][12] =
      _mm256_add_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[1][0]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[1][1]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[1][2]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[1][3]));
  bezout.matrix[0][0][13] =
      _mm256_add_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[1][0]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[1][1]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[1][2]));
  bezout.matrix[0][0][14] =
      _mm256_add_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[1][0]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[1][1]));
  bezout.matrix[0][0][15] =
      _mm256_add_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[1][0]));
  bezout.matrix[0][0][0] =
      _mm256_sub_pd(bezout.matrix[0][0][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][0]));
  bezout.matrix[0][0][1] =
      _mm256_sub_pd(bezout.matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][1]));
  bezout.matrix[0][0][2] =
      _mm256_sub_pd(bezout.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][2]));
  bezout.matrix[0][0][3] =
      _mm256_sub_pd(bezout.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][3]));
  bezout.matrix[0][0][4] =
      _mm256_sub_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][4]));
  bezout.matrix[0][0][5] =
      _mm256_sub_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][5]));
  bezout.matrix[0][0][6] =
      _mm256_sub_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][6]));
  bezout.matrix[0][0][7] =
      _mm256_sub_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][7]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][8]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][9]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[0][10]));
  bezout.matrix[0][0][1] =
      _mm256_sub_pd(bezout.matrix[0][0][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][0]));
  bezout.matrix[0][0][2] =
      _mm256_sub_pd(bezout.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][1]));
  bezout.matrix[0][0][3] =
      _mm256_sub_pd(bezout.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][2]));
  bezout.matrix[0][0][4] =
      _mm256_sub_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][3]));
  bezout.matrix[0][0][5] =
      _mm256_sub_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][4]));
  bezout.matrix[0][0][6] =
      _mm256_sub_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][5]));
  bezout.matrix[0][0][7] =
      _mm256_sub_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][6]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][7]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][8]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][9]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[0][10]));
  bezout.matrix[0][0][2] =
      _mm256_sub_pd(bezout.matrix[0][0][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][0]));
  bezout.matrix[0][0][3] =
      _mm256_sub_pd(bezout.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][1]));
  bezout.matrix[0][0][4] =
      _mm256_sub_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][2]));
  bezout.matrix[0][0][5] =
      _mm256_sub_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][3]));
  bezout.matrix[0][0][6] =
      _mm256_sub_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][4]));
  bezout.matrix[0][0][7] =
      _mm256_sub_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][5]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][6]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][7]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][8]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][9]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[0][10]));
  bezout.matrix[0][0][3] =
      _mm256_sub_pd(bezout.matrix[0][0][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][0]));
  bezout.matrix[0][0][4] =
      _mm256_sub_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][1]));
  bezout.matrix[0][0][5] =
      _mm256_sub_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][2]));
  bezout.matrix[0][0][6] =
      _mm256_sub_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][3]));
  bezout.matrix[0][0][7] =
      _mm256_sub_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][4]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][5]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][6]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][7]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][8]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][9]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[0][10]));
  bezout.matrix[0][0][4] =
      _mm256_sub_pd(bezout.matrix[0][0][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][0]));
  bezout.matrix[0][0][5] =
      _mm256_sub_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][1]));
  bezout.matrix[0][0][6] =
      _mm256_sub_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][2]));
  bezout.matrix[0][0][7] =
      _mm256_sub_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][3]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][4]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][5]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][6]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][7]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][8]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][9]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[0][10]));
  bezout.matrix[0][0][5] =
      _mm256_sub_pd(bezout.matrix[0][0][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][0]));
  bezout.matrix[0][0][6] =
      _mm256_sub_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][1]));
  bezout.matrix[0][0][7] =
      _mm256_sub_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][2]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][3]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][4]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][5]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][6]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][7]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][8]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][9]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[0][10]));
  bezout.matrix[0][0][6] =
      _mm256_sub_pd(bezout.matrix[0][0][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][0]));
  bezout.matrix[0][0][7] =
      _mm256_sub_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][1]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][2]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][3]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][4]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][5]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][6]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][7]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][8]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[0][9]));
  bezout.matrix[0][0][7] =
      _mm256_sub_pd(bezout.matrix[0][0][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][0]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][1]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][2]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][3]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][4]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][5]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][6]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][7]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[0][8]));
  bezout.matrix[0][0][8] =
      _mm256_sub_pd(bezout.matrix[0][0][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[0][0]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[0][1]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[0][2]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[0][3]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[0][4]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[0][5]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[0][6]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[0][7]));
  bezout.matrix[0][0][9] =
      _mm256_sub_pd(bezout.matrix[0][0][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[0][0]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[0][1]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[0][2]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[0][3]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[0][4]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[0][5]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[0][6]));
  bezout.matrix[0][0][10] =
      _mm256_sub_pd(bezout.matrix[0][0][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[0][0]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[0][1]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[0][2]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[0][3]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[0][4]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[0][5]));
  bezout.matrix[0][0][11] =
      _mm256_sub_pd(bezout.matrix[0][0][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[0][0]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[0][1]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[0][2]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[0][3]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[0][4]));
  bezout.matrix[0][0][12] =
      _mm256_sub_pd(bezout.matrix[0][0][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[0][0]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[0][1]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[0][2]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[0][3]));
  bezout.matrix[0][0][13] =
      _mm256_sub_pd(bezout.matrix[0][0][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[0][0]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[0][1]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[0][2]));
  bezout.matrix[0][0][14] =
      _mm256_sub_pd(bezout.matrix[0][0][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[0][0]));
  bezout.matrix[0][0][15] =
      _mm256_sub_pd(bezout.matrix[0][0][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[0][1]));
  bezout.matrix[0][1][0] =
      _mm256_add_pd(bezout.matrix[0][1][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][0]));
  bezout.matrix[0][1][1] =
      _mm256_add_pd(bezout.matrix[0][1][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][1]));
  bezout.matrix[0][1][2] =
      _mm256_add_pd(bezout.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][2]));
  bezout.matrix[0][1][3] =
      _mm256_add_pd(bezout.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][3]));
  bezout.matrix[0][1][4] =
      _mm256_add_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][4]));
  bezout.matrix[0][1][5] =
      _mm256_add_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][5]));
  bezout.matrix[0][1][6] =
      _mm256_add_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][6]));
  bezout.matrix[0][1][7] =
      _mm256_add_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][7]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[2][8]));
  bezout.matrix[0][1][1] =
      _mm256_add_pd(bezout.matrix[0][1][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][0]));
  bezout.matrix[0][1][2] =
      _mm256_add_pd(bezout.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][1]));
  bezout.matrix[0][1][3] =
      _mm256_add_pd(bezout.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][2]));
  bezout.matrix[0][1][4] =
      _mm256_add_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][3]));
  bezout.matrix[0][1][5] =
      _mm256_add_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][4]));
  bezout.matrix[0][1][6] =
      _mm256_add_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][5]));
  bezout.matrix[0][1][7] =
      _mm256_add_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][6]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][7]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[2][8]));
  bezout.matrix[0][1][2] =
      _mm256_add_pd(bezout.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][0]));
  bezout.matrix[0][1][3] =
      _mm256_add_pd(bezout.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][1]));
  bezout.matrix[0][1][4] =
      _mm256_add_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][2]));
  bezout.matrix[0][1][5] =
      _mm256_add_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][3]));
  bezout.matrix[0][1][6] =
      _mm256_add_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][4]));
  bezout.matrix[0][1][7] =
      _mm256_add_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][5]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][6]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][7]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[2][8]));
  bezout.matrix[0][1][3] =
      _mm256_add_pd(bezout.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][0]));
  bezout.matrix[0][1][4] =
      _mm256_add_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][1]));
  bezout.matrix[0][1][5] =
      _mm256_add_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][2]));
  bezout.matrix[0][1][6] =
      _mm256_add_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][3]));
  bezout.matrix[0][1][7] =
      _mm256_add_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][4]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][5]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][6]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][7]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[2][8]));
  bezout.matrix[0][1][4] =
      _mm256_add_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][0]));
  bezout.matrix[0][1][5] =
      _mm256_add_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][1]));
  bezout.matrix[0][1][6] =
      _mm256_add_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][2]));
  bezout.matrix[0][1][7] =
      _mm256_add_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][3]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][4]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][5]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][6]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][7]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[2][8]));
  bezout.matrix[0][1][5] =
      _mm256_add_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][0]));
  bezout.matrix[0][1][6] =
      _mm256_add_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][1]));
  bezout.matrix[0][1][7] =
      _mm256_add_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][2]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][3]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][4]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][5]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][6]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][7]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[2][8]));
  bezout.matrix[0][1][6] =
      _mm256_add_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][0]));
  bezout.matrix[0][1][7] =
      _mm256_add_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][1]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][2]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][3]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][4]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][5]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][6]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][7]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[2][8]));
  bezout.matrix[0][1][7] =
      _mm256_add_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][0]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][1]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][2]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][3]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][4]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][5]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][6]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][7]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[2][8]));
  bezout.matrix[0][1][8] =
      _mm256_add_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[2][0]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[2][1]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[2][2]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[2][3]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[2][4]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[2][5]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[2][6]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[2][7]));
  bezout.matrix[0][1][9] =
      _mm256_add_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[2][0]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[2][1]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[2][2]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[2][3]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[2][4]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[2][5]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[2][6]));
  bezout.matrix[0][1][10] =
      _mm256_add_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[2][0]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[2][1]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[2][2]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[2][3]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[2][4]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[2][5]));
  bezout.matrix[0][1][11] =
      _mm256_add_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[2][0]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[2][1]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[2][2]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[2][3]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[2][4]));
  bezout.matrix[0][1][12] =
      _mm256_add_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[2][0]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[2][1]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[2][2]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[2][3]));
  bezout.matrix[0][1][13] =
      _mm256_add_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[2][0]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[2][1]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[2][2]));
  bezout.matrix[0][1][14] =
      _mm256_add_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[2][0]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[2][1]));
  bezout.matrix[0][1][15] =
      _mm256_add_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[2][0]));
  bezout.matrix[0][1][0] =
      _mm256_sub_pd(bezout.matrix[0][1][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][0]));
  bezout.matrix[0][1][1] =
      _mm256_sub_pd(bezout.matrix[0][1][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][1]));
  bezout.matrix[0][1][2] =
      _mm256_sub_pd(bezout.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][2]));
  bezout.matrix[0][1][3] =
      _mm256_sub_pd(bezout.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][3]));
  bezout.matrix[0][1][4] =
      _mm256_sub_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][4]));
  bezout.matrix[0][1][5] =
      _mm256_sub_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][5]));
  bezout.matrix[0][1][6] =
      _mm256_sub_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][6]));
  bezout.matrix[0][1][7] =
      _mm256_sub_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][7]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][8]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][9]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[0][10]));
  bezout.matrix[0][1][1] =
      _mm256_sub_pd(bezout.matrix[0][1][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][0]));
  bezout.matrix[0][1][2] =
      _mm256_sub_pd(bezout.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][1]));
  bezout.matrix[0][1][3] =
      _mm256_sub_pd(bezout.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][2]));
  bezout.matrix[0][1][4] =
      _mm256_sub_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][3]));
  bezout.matrix[0][1][5] =
      _mm256_sub_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][4]));
  bezout.matrix[0][1][6] =
      _mm256_sub_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][5]));
  bezout.matrix[0][1][7] =
      _mm256_sub_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][6]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][7]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][8]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][9]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[0][10]));
  bezout.matrix[0][1][2] =
      _mm256_sub_pd(bezout.matrix[0][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][0]));
  bezout.matrix[0][1][3] =
      _mm256_sub_pd(bezout.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][1]));
  bezout.matrix[0][1][4] =
      _mm256_sub_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][2]));
  bezout.matrix[0][1][5] =
      _mm256_sub_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][3]));
  bezout.matrix[0][1][6] =
      _mm256_sub_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][4]));
  bezout.matrix[0][1][7] =
      _mm256_sub_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][5]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][6]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][7]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][8]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][9]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[0][10]));
  bezout.matrix[0][1][3] =
      _mm256_sub_pd(bezout.matrix[0][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][0]));
  bezout.matrix[0][1][4] =
      _mm256_sub_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][1]));
  bezout.matrix[0][1][5] =
      _mm256_sub_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][2]));
  bezout.matrix[0][1][6] =
      _mm256_sub_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][3]));
  bezout.matrix[0][1][7] =
      _mm256_sub_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][4]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][5]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][6]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][7]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][8]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][9]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[0][10]));
  bezout.matrix[0][1][4] =
      _mm256_sub_pd(bezout.matrix[0][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][0]));
  bezout.matrix[0][1][5] =
      _mm256_sub_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][1]));
  bezout.matrix[0][1][6] =
      _mm256_sub_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][2]));
  bezout.matrix[0][1][7] =
      _mm256_sub_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][3]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][4]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][5]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][6]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][7]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][8]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][9]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[0][10]));
  bezout.matrix[0][1][5] =
      _mm256_sub_pd(bezout.matrix[0][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][0]));
  bezout.matrix[0][1][6] =
      _mm256_sub_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][1]));
  bezout.matrix[0][1][7] =
      _mm256_sub_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][2]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][3]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][4]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][5]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][6]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][7]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][8]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][9]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[0][10]));
  bezout.matrix[0][1][6] =
      _mm256_sub_pd(bezout.matrix[0][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][0]));
  bezout.matrix[0][1][7] =
      _mm256_sub_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][1]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][2]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][3]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][4]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][5]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][6]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][7]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][8]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[0][9]));
  bezout.matrix[0][1][7] =
      _mm256_sub_pd(bezout.matrix[0][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][0]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][1]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][2]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][3]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][4]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][5]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][6]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][7]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[0][8]));
  bezout.matrix[0][1][8] =
      _mm256_sub_pd(bezout.matrix[0][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[0][0]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[0][1]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[0][2]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[0][3]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[0][4]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[0][5]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[0][6]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[0][7]));
  bezout.matrix[0][1][9] =
      _mm256_sub_pd(bezout.matrix[0][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[0][0]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[0][1]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[0][2]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[0][3]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[0][4]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[0][5]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[0][6]));
  bezout.matrix[0][1][10] =
      _mm256_sub_pd(bezout.matrix[0][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[0][0]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[0][1]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[0][2]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[0][3]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[0][4]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[0][5]));
  bezout.matrix[0][1][11] =
      _mm256_sub_pd(bezout.matrix[0][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[0][0]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[0][1]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[0][2]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[0][3]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[0][4]));
  bezout.matrix[0][1][12] =
      _mm256_sub_pd(bezout.matrix[0][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[0][0]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[0][1]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[0][2]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[0][3]));
  bezout.matrix[0][1][13] =
      _mm256_sub_pd(bezout.matrix[0][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[0][0]));
  bezout.matrix[0][1][14] =
      _mm256_sub_pd(bezout.matrix[0][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[0][1]));
  bezout.matrix[0][1][15] =
      _mm256_sub_pd(bezout.matrix[0][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[0][2]));
  bezout.matrix[0][2][0] =
      _mm256_add_pd(bezout.matrix[0][2][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[3][0]));
  bezout.matrix[0][2][1] =
      _mm256_add_pd(bezout.matrix[0][2][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[3][1]));
  bezout.matrix[0][2][2] =
      _mm256_add_pd(bezout.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[3][2]));
  bezout.matrix[0][2][3] =
      _mm256_add_pd(bezout.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[3][3]));
  bezout.matrix[0][2][4] =
      _mm256_add_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[3][4]));
  bezout.matrix[0][2][5] =
      _mm256_add_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[3][5]));
  bezout.matrix[0][2][6] =
      _mm256_add_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[3][6]));
  bezout.matrix[0][2][7] =
      _mm256_add_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[3][7]));
  bezout.matrix[0][2][1] =
      _mm256_add_pd(bezout.matrix[0][2][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[3][0]));
  bezout.matrix[0][2][2] =
      _mm256_add_pd(bezout.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[3][1]));
  bezout.matrix[0][2][3] =
      _mm256_add_pd(bezout.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[3][2]));
  bezout.matrix[0][2][4] =
      _mm256_add_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[3][3]));
  bezout.matrix[0][2][5] =
      _mm256_add_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[3][4]));
  bezout.matrix[0][2][6] =
      _mm256_add_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[3][5]));
  bezout.matrix[0][2][7] =
      _mm256_add_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[3][6]));
  bezout.matrix[0][2][8] =
      _mm256_add_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[3][7]));
  bezout.matrix[0][2][2] =
      _mm256_add_pd(bezout.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[3][0]));
  bezout.matrix[0][2][3] =
      _mm256_add_pd(bezout.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[3][1]));
  bezout.matrix[0][2][4] =
      _mm256_add_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[3][2]));
  bezout.matrix[0][2][5] =
      _mm256_add_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[3][3]));
  bezout.matrix[0][2][6] =
      _mm256_add_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[3][4]));
  bezout.matrix[0][2][7] =
      _mm256_add_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[3][5]));
  bezout.matrix[0][2][8] =
      _mm256_add_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[3][6]));
  bezout.matrix[0][2][9] =
      _mm256_add_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[3][7]));
  bezout.matrix[0][2][3] =
      _mm256_add_pd(bezout.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[3][0]));
  bezout.matrix[0][2][4] =
      _mm256_add_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[3][1]));
  bezout.matrix[0][2][5] =
      _mm256_add_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[3][2]));
  bezout.matrix[0][2][6] =
      _mm256_add_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[3][3]));
  bezout.matrix[0][2][7] =
      _mm256_add_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[3][4]));
  bezout.matrix[0][2][8] =
      _mm256_add_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[3][5]));
  bezout.matrix[0][2][9] =
      _mm256_add_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[3][6]));
  bezout.matrix[0][2][10] =
      _mm256_add_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[3][7]));
  bezout.matrix[0][2][4] =
      _mm256_add_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[3][0]));
  bezout.matrix[0][2][5] =
      _mm256_add_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[3][1]));
  bezout.matrix[0][2][6] =
      _mm256_add_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[3][2]));
  bezout.matrix[0][2][7] =
      _mm256_add_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[3][3]));
  bezout.matrix[0][2][8] =
      _mm256_add_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[3][4]));
  bezout.matrix[0][2][9] =
      _mm256_add_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[3][5]));
  bezout.matrix[0][2][10] =
      _mm256_add_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[3][6]));
  bezout.matrix[0][2][11] =
      _mm256_add_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[3][7]));
  bezout.matrix[0][2][5] =
      _mm256_add_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[3][0]));
  bezout.matrix[0][2][6] =
      _mm256_add_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[3][1]));
  bezout.matrix[0][2][7] =
      _mm256_add_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[3][2]));
  bezout.matrix[0][2][8] =
      _mm256_add_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[3][3]));
  bezout.matrix[0][2][9] =
      _mm256_add_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[3][4]));
  bezout.matrix[0][2][10] =
      _mm256_add_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[3][5]));
  bezout.matrix[0][2][11] =
      _mm256_add_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[3][6]));
  bezout.matrix[0][2][12] =
      _mm256_add_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[3][7]));
  bezout.matrix[0][2][6] =
      _mm256_add_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[3][0]));
  bezout.matrix[0][2][7] =
      _mm256_add_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[3][1]));
  bezout.matrix[0][2][8] =
      _mm256_add_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[3][2]));
  bezout.matrix[0][2][9] =
      _mm256_add_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[3][3]));
  bezout.matrix[0][2][10] =
      _mm256_add_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[3][4]));
  bezout.matrix[0][2][11] =
      _mm256_add_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[3][5]));
  bezout.matrix[0][2][12] =
      _mm256_add_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[3][6]));
  bezout.matrix[0][2][13] =
      _mm256_add_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[3][7]));
  bezout.matrix[0][2][7] =
      _mm256_add_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[3][0]));
  bezout.matrix[0][2][8] =
      _mm256_add_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[3][1]));
  bezout.matrix[0][2][9] =
      _mm256_add_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[3][2]));
  bezout.matrix[0][2][10] =
      _mm256_add_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[3][3]));
  bezout.matrix[0][2][11] =
      _mm256_add_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[3][4]));
  bezout.matrix[0][2][12] =
      _mm256_add_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[3][5]));
  bezout.matrix[0][2][13] =
      _mm256_add_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[3][6]));
  bezout.matrix[0][2][14] =
      _mm256_add_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[3][7]));
  bezout.matrix[0][2][8] =
      _mm256_add_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[3][0]));
  bezout.matrix[0][2][9] =
      _mm256_add_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[3][1]));
  bezout.matrix[0][2][10] =
      _mm256_add_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[3][2]));
  bezout.matrix[0][2][11] =
      _mm256_add_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[3][3]));
  bezout.matrix[0][2][12] =
      _mm256_add_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[3][4]));
  bezout.matrix[0][2][13] =
      _mm256_add_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[3][5]));
  bezout.matrix[0][2][14] =
      _mm256_add_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[3][6]));
  bezout.matrix[0][2][15] =
      _mm256_add_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[3][7]));
  bezout.matrix[0][2][9] =
      _mm256_add_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[3][0]));
  bezout.matrix[0][2][10] =
      _mm256_add_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[3][1]));
  bezout.matrix[0][2][11] =
      _mm256_add_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[3][2]));
  bezout.matrix[0][2][12] =
      _mm256_add_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[3][3]));
  bezout.matrix[0][2][13] =
      _mm256_add_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[3][4]));
  bezout.matrix[0][2][14] =
      _mm256_add_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[3][5]));
  bezout.matrix[0][2][15] =
      _mm256_add_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[3][6]));
  bezout.matrix[0][2][10] =
      _mm256_add_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[3][0]));
  bezout.matrix[0][2][11] =
      _mm256_add_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[3][1]));
  bezout.matrix[0][2][12] =
      _mm256_add_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[3][2]));
  bezout.matrix[0][2][13] =
      _mm256_add_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[3][3]));
  bezout.matrix[0][2][14] =
      _mm256_add_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[3][4]));
  bezout.matrix[0][2][15] =
      _mm256_add_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[3][5]));
  bezout.matrix[0][2][11] =
      _mm256_add_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[3][0]));
  bezout.matrix[0][2][12] =
      _mm256_add_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[3][1]));
  bezout.matrix[0][2][13] =
      _mm256_add_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[3][2]));
  bezout.matrix[0][2][14] =
      _mm256_add_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[3][3]));
  bezout.matrix[0][2][15] =
      _mm256_add_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[3][4]));
  bezout.matrix[0][2][12] =
      _mm256_add_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[3][0]));
  bezout.matrix[0][2][13] =
      _mm256_add_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[3][1]));
  bezout.matrix[0][2][14] =
      _mm256_add_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[3][2]));
  bezout.matrix[0][2][15] =
      _mm256_add_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[3][3]));
  bezout.matrix[0][2][13] =
      _mm256_add_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[3][0]));
  bezout.matrix[0][2][14] =
      _mm256_add_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[3][1]));
  bezout.matrix[0][2][15] =
      _mm256_add_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[3][2]));
  bezout.matrix[0][2][14] =
      _mm256_add_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[3][0]));
  bezout.matrix[0][2][15] =
      _mm256_add_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[3][1]));
  bezout.matrix[0][2][15] =
      _mm256_add_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[3][0]));
  bezout.matrix[0][2][0] =
      _mm256_sub_pd(bezout.matrix[0][2][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][0]));
  bezout.matrix[0][2][1] =
      _mm256_sub_pd(bezout.matrix[0][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][1]));
  bezout.matrix[0][2][2] =
      _mm256_sub_pd(bezout.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][2]));
  bezout.matrix[0][2][3] =
      _mm256_sub_pd(bezout.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][3]));
  bezout.matrix[0][2][4] =
      _mm256_sub_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][4]));
  bezout.matrix[0][2][5] =
      _mm256_sub_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][5]));
  bezout.matrix[0][2][6] =
      _mm256_sub_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][6]));
  bezout.matrix[0][2][7] =
      _mm256_sub_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][7]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][8]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][9]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[0][10]));
  bezout.matrix[0][2][1] =
      _mm256_sub_pd(bezout.matrix[0][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][0]));
  bezout.matrix[0][2][2] =
      _mm256_sub_pd(bezout.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][1]));
  bezout.matrix[0][2][3] =
      _mm256_sub_pd(bezout.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][2]));
  bezout.matrix[0][2][4] =
      _mm256_sub_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][3]));
  bezout.matrix[0][2][5] =
      _mm256_sub_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][4]));
  bezout.matrix[0][2][6] =
      _mm256_sub_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][5]));
  bezout.matrix[0][2][7] =
      _mm256_sub_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][6]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][7]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][8]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][9]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[0][10]));
  bezout.matrix[0][2][2] =
      _mm256_sub_pd(bezout.matrix[0][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][0]));
  bezout.matrix[0][2][3] =
      _mm256_sub_pd(bezout.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][1]));
  bezout.matrix[0][2][4] =
      _mm256_sub_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][2]));
  bezout.matrix[0][2][5] =
      _mm256_sub_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][3]));
  bezout.matrix[0][2][6] =
      _mm256_sub_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][4]));
  bezout.matrix[0][2][7] =
      _mm256_sub_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][5]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][6]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][7]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][8]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][9]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[0][10]));
  bezout.matrix[0][2][3] =
      _mm256_sub_pd(bezout.matrix[0][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][0]));
  bezout.matrix[0][2][4] =
      _mm256_sub_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][1]));
  bezout.matrix[0][2][5] =
      _mm256_sub_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][2]));
  bezout.matrix[0][2][6] =
      _mm256_sub_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][3]));
  bezout.matrix[0][2][7] =
      _mm256_sub_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][4]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][5]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][6]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][7]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][8]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][9]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[0][10]));
  bezout.matrix[0][2][4] =
      _mm256_sub_pd(bezout.matrix[0][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][0]));
  bezout.matrix[0][2][5] =
      _mm256_sub_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][1]));
  bezout.matrix[0][2][6] =
      _mm256_sub_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][2]));
  bezout.matrix[0][2][7] =
      _mm256_sub_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][3]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][4]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][5]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][6]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][7]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][8]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][9]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[0][10]));
  bezout.matrix[0][2][5] =
      _mm256_sub_pd(bezout.matrix[0][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][0]));
  bezout.matrix[0][2][6] =
      _mm256_sub_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][1]));
  bezout.matrix[0][2][7] =
      _mm256_sub_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][2]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][3]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][4]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][5]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][6]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][7]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][8]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][9]));
  bezout.matrix[0][2][15] =
      _mm256_sub_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[0][10]));
  bezout.matrix[0][2][6] =
      _mm256_sub_pd(bezout.matrix[0][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][0]));
  bezout.matrix[0][2][7] =
      _mm256_sub_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][1]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][2]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][3]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][4]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][5]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][6]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][7]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][8]));
  bezout.matrix[0][2][15] =
      _mm256_sub_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[0][9]));
  bezout.matrix[0][2][7] =
      _mm256_sub_pd(bezout.matrix[0][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][0]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][1]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][2]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][3]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][4]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][5]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][6]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][7]));
  bezout.matrix[0][2][15] =
      _mm256_sub_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[0][8]));
  bezout.matrix[0][2][8] =
      _mm256_sub_pd(bezout.matrix[0][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[0][0]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[0][1]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[0][2]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[0][3]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[0][4]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[0][5]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[0][6]));
  bezout.matrix[0][2][15] =
      _mm256_sub_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[0][7]));
  bezout.matrix[0][2][9] =
      _mm256_sub_pd(bezout.matrix[0][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[0][0]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[0][1]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[0][2]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[0][3]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[0][4]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[0][5]));
  bezout.matrix[0][2][15] =
      _mm256_sub_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[0][6]));
  bezout.matrix[0][2][10] =
      _mm256_sub_pd(bezout.matrix[0][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[0][0]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[0][1]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[0][2]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[0][3]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[0][4]));
  bezout.matrix[0][2][15] =
      _mm256_sub_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[0][5]));
  bezout.matrix[0][2][11] =
      _mm256_sub_pd(bezout.matrix[0][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[0][0]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[0][1]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[0][2]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[0][3]));
  bezout.matrix[0][2][15] =
      _mm256_sub_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[0][4]));
  bezout.matrix[0][2][12] =
      _mm256_sub_pd(bezout.matrix[0][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[0][0]));
  bezout.matrix[0][2][13] =
      _mm256_sub_pd(bezout.matrix[0][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[0][1]));
  bezout.matrix[0][2][14] =
      _mm256_sub_pd(bezout.matrix[0][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[0][2]));
  bezout.matrix[0][2][15] =
      _mm256_sub_pd(bezout.matrix[0][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[0][3]));
  bezout.matrix[0][3][0] =
      _mm256_add_pd(bezout.matrix[0][3][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[4][0]));
  bezout.matrix[0][3][1] =
      _mm256_add_pd(bezout.matrix[0][3][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[4][1]));
  bezout.matrix[0][3][2] =
      _mm256_add_pd(bezout.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[4][2]));
  bezout.matrix[0][3][3] =
      _mm256_add_pd(bezout.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[4][3]));
  bezout.matrix[0][3][4] =
      _mm256_add_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[4][4]));
  bezout.matrix[0][3][5] =
      _mm256_add_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[4][5]));
  bezout.matrix[0][3][6] =
      _mm256_add_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[4][6]));
  bezout.matrix[0][3][1] =
      _mm256_add_pd(bezout.matrix[0][3][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[4][0]));
  bezout.matrix[0][3][2] =
      _mm256_add_pd(bezout.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[4][1]));
  bezout.matrix[0][3][3] =
      _mm256_add_pd(bezout.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[4][2]));
  bezout.matrix[0][3][4] =
      _mm256_add_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[4][3]));
  bezout.matrix[0][3][5] =
      _mm256_add_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[4][4]));
  bezout.matrix[0][3][6] =
      _mm256_add_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[4][5]));
  bezout.matrix[0][3][7] =
      _mm256_add_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[4][6]));
  bezout.matrix[0][3][2] =
      _mm256_add_pd(bezout.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[4][0]));
  bezout.matrix[0][3][3] =
      _mm256_add_pd(bezout.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[4][1]));
  bezout.matrix[0][3][4] =
      _mm256_add_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[4][2]));
  bezout.matrix[0][3][5] =
      _mm256_add_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[4][3]));
  bezout.matrix[0][3][6] =
      _mm256_add_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[4][4]));
  bezout.matrix[0][3][7] =
      _mm256_add_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[4][5]));
  bezout.matrix[0][3][8] =
      _mm256_add_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[4][6]));
  bezout.matrix[0][3][3] =
      _mm256_add_pd(bezout.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[4][0]));
  bezout.matrix[0][3][4] =
      _mm256_add_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[4][1]));
  bezout.matrix[0][3][5] =
      _mm256_add_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[4][2]));
  bezout.matrix[0][3][6] =
      _mm256_add_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[4][3]));
  bezout.matrix[0][3][7] =
      _mm256_add_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[4][4]));
  bezout.matrix[0][3][8] =
      _mm256_add_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[4][5]));
  bezout.matrix[0][3][9] =
      _mm256_add_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[4][6]));
  bezout.matrix[0][3][4] =
      _mm256_add_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[4][0]));
  bezout.matrix[0][3][5] =
      _mm256_add_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[4][1]));
  bezout.matrix[0][3][6] =
      _mm256_add_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[4][2]));
  bezout.matrix[0][3][7] =
      _mm256_add_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[4][3]));
  bezout.matrix[0][3][8] =
      _mm256_add_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[4][4]));
  bezout.matrix[0][3][9] =
      _mm256_add_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[4][5]));
  bezout.matrix[0][3][10] =
      _mm256_add_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[4][6]));
  bezout.matrix[0][3][5] =
      _mm256_add_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[4][0]));
  bezout.matrix[0][3][6] =
      _mm256_add_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[4][1]));
  bezout.matrix[0][3][7] =
      _mm256_add_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[4][2]));
  bezout.matrix[0][3][8] =
      _mm256_add_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[4][3]));
  bezout.matrix[0][3][9] =
      _mm256_add_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[4][4]));
  bezout.matrix[0][3][10] =
      _mm256_add_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[4][5]));
  bezout.matrix[0][3][11] =
      _mm256_add_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[4][6]));
  bezout.matrix[0][3][6] =
      _mm256_add_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[4][0]));
  bezout.matrix[0][3][7] =
      _mm256_add_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[4][1]));
  bezout.matrix[0][3][8] =
      _mm256_add_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[4][2]));
  bezout.matrix[0][3][9] =
      _mm256_add_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[4][3]));
  bezout.matrix[0][3][10] =
      _mm256_add_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[4][4]));
  bezout.matrix[0][3][11] =
      _mm256_add_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[4][5]));
  bezout.matrix[0][3][12] =
      _mm256_add_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[4][6]));
  bezout.matrix[0][3][7] =
      _mm256_add_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[4][0]));
  bezout.matrix[0][3][8] =
      _mm256_add_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[4][1]));
  bezout.matrix[0][3][9] =
      _mm256_add_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[4][2]));
  bezout.matrix[0][3][10] =
      _mm256_add_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[4][3]));
  bezout.matrix[0][3][11] =
      _mm256_add_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[4][4]));
  bezout.matrix[0][3][12] =
      _mm256_add_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[4][5]));
  bezout.matrix[0][3][13] =
      _mm256_add_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[4][6]));
  bezout.matrix[0][3][8] =
      _mm256_add_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[4][0]));
  bezout.matrix[0][3][9] =
      _mm256_add_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[4][1]));
  bezout.matrix[0][3][10] =
      _mm256_add_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[4][2]));
  bezout.matrix[0][3][11] =
      _mm256_add_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[4][3]));
  bezout.matrix[0][3][12] =
      _mm256_add_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[4][4]));
  bezout.matrix[0][3][13] =
      _mm256_add_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[4][5]));
  bezout.matrix[0][3][14] =
      _mm256_add_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[4][6]));
  bezout.matrix[0][3][9] =
      _mm256_add_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[4][0]));
  bezout.matrix[0][3][10] =
      _mm256_add_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[4][1]));
  bezout.matrix[0][3][11] =
      _mm256_add_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[4][2]));
  bezout.matrix[0][3][12] =
      _mm256_add_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[4][3]));
  bezout.matrix[0][3][13] =
      _mm256_add_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[4][4]));
  bezout.matrix[0][3][14] =
      _mm256_add_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[4][5]));
  bezout.matrix[0][3][15] =
      _mm256_add_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[4][6]));
  bezout.matrix[0][3][10] =
      _mm256_add_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[4][0]));
  bezout.matrix[0][3][11] =
      _mm256_add_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[4][1]));
  bezout.matrix[0][3][12] =
      _mm256_add_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[4][2]));
  bezout.matrix[0][3][13] =
      _mm256_add_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[4][3]));
  bezout.matrix[0][3][14] =
      _mm256_add_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[4][4]));
  bezout.matrix[0][3][15] =
      _mm256_add_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[4][5]));
  bezout.matrix[0][3][11] =
      _mm256_add_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[4][0]));
  bezout.matrix[0][3][12] =
      _mm256_add_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[4][1]));
  bezout.matrix[0][3][13] =
      _mm256_add_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[4][2]));
  bezout.matrix[0][3][14] =
      _mm256_add_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[4][3]));
  bezout.matrix[0][3][15] =
      _mm256_add_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[4][4]));
  bezout.matrix[0][3][12] =
      _mm256_add_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[4][0]));
  bezout.matrix[0][3][13] =
      _mm256_add_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[4][1]));
  bezout.matrix[0][3][14] =
      _mm256_add_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[4][2]));
  bezout.matrix[0][3][15] =
      _mm256_add_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[4][3]));
  bezout.matrix[0][3][13] =
      _mm256_add_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[4][0]));
  bezout.matrix[0][3][14] =
      _mm256_add_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[4][1]));
  bezout.matrix[0][3][15] =
      _mm256_add_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[4][2]));
  bezout.matrix[0][3][14] =
      _mm256_add_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[4][0]));
  bezout.matrix[0][3][15] =
      _mm256_add_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[4][1]));
  bezout.matrix[0][3][15] =
      _mm256_add_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[4][0]));
  bezout.matrix[0][3][0] =
      _mm256_sub_pd(bezout.matrix[0][3][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][0]));
  bezout.matrix[0][3][1] =
      _mm256_sub_pd(bezout.matrix[0][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][1]));
  bezout.matrix[0][3][2] =
      _mm256_sub_pd(bezout.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][2]));
  bezout.matrix[0][3][3] =
      _mm256_sub_pd(bezout.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][3]));
  bezout.matrix[0][3][4] =
      _mm256_sub_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][4]));
  bezout.matrix[0][3][5] =
      _mm256_sub_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][5]));
  bezout.matrix[0][3][6] =
      _mm256_sub_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][6]));
  bezout.matrix[0][3][7] =
      _mm256_sub_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][7]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][8]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][9]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[0][10]));
  bezout.matrix[0][3][1] =
      _mm256_sub_pd(bezout.matrix[0][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][0]));
  bezout.matrix[0][3][2] =
      _mm256_sub_pd(bezout.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][1]));
  bezout.matrix[0][3][3] =
      _mm256_sub_pd(bezout.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][2]));
  bezout.matrix[0][3][4] =
      _mm256_sub_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][3]));
  bezout.matrix[0][3][5] =
      _mm256_sub_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][4]));
  bezout.matrix[0][3][6] =
      _mm256_sub_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][5]));
  bezout.matrix[0][3][7] =
      _mm256_sub_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][6]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][7]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][8]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][9]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[0][10]));
  bezout.matrix[0][3][2] =
      _mm256_sub_pd(bezout.matrix[0][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][0]));
  bezout.matrix[0][3][3] =
      _mm256_sub_pd(bezout.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][1]));
  bezout.matrix[0][3][4] =
      _mm256_sub_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][2]));
  bezout.matrix[0][3][5] =
      _mm256_sub_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][3]));
  bezout.matrix[0][3][6] =
      _mm256_sub_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][4]));
  bezout.matrix[0][3][7] =
      _mm256_sub_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][5]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][6]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][7]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][8]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][9]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[0][10]));
  bezout.matrix[0][3][3] =
      _mm256_sub_pd(bezout.matrix[0][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][0]));
  bezout.matrix[0][3][4] =
      _mm256_sub_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][1]));
  bezout.matrix[0][3][5] =
      _mm256_sub_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][2]));
  bezout.matrix[0][3][6] =
      _mm256_sub_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][3]));
  bezout.matrix[0][3][7] =
      _mm256_sub_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][4]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][5]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][6]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][7]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][8]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][9]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[0][10]));
  bezout.matrix[0][3][4] =
      _mm256_sub_pd(bezout.matrix[0][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][0]));
  bezout.matrix[0][3][5] =
      _mm256_sub_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][1]));
  bezout.matrix[0][3][6] =
      _mm256_sub_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][2]));
  bezout.matrix[0][3][7] =
      _mm256_sub_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][3]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][4]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][5]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][6]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][7]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][8]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][9]));
  bezout.matrix[0][3][14] =
      _mm256_sub_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[0][10]));
  bezout.matrix[0][3][5] =
      _mm256_sub_pd(bezout.matrix[0][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][0]));
  bezout.matrix[0][3][6] =
      _mm256_sub_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][1]));
  bezout.matrix[0][3][7] =
      _mm256_sub_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][2]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][3]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][4]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][5]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][6]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][7]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][8]));
  bezout.matrix[0][3][14] =
      _mm256_sub_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][9]));
  bezout.matrix[0][3][15] =
      _mm256_sub_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[0][10]));
  bezout.matrix[0][3][6] =
      _mm256_sub_pd(bezout.matrix[0][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][0]));
  bezout.matrix[0][3][7] =
      _mm256_sub_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][1]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][2]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][3]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][4]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][5]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][6]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][7]));
  bezout.matrix[0][3][14] =
      _mm256_sub_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][8]));
  bezout.matrix[0][3][15] =
      _mm256_sub_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[0][9]));
  bezout.matrix[0][3][7] =
      _mm256_sub_pd(bezout.matrix[0][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][0]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][1]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][2]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][3]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][4]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][5]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][6]));
  bezout.matrix[0][3][14] =
      _mm256_sub_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][7]));
  bezout.matrix[0][3][15] =
      _mm256_sub_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[0][8]));
  bezout.matrix[0][3][8] =
      _mm256_sub_pd(bezout.matrix[0][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[0][0]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[0][1]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[0][2]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[0][3]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[0][4]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[0][5]));
  bezout.matrix[0][3][14] =
      _mm256_sub_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[0][6]));
  bezout.matrix[0][3][15] =
      _mm256_sub_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[0][7]));
  bezout.matrix[0][3][9] =
      _mm256_sub_pd(bezout.matrix[0][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[0][0]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[0][1]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[0][2]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[0][3]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[0][4]));
  bezout.matrix[0][3][14] =
      _mm256_sub_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[0][5]));
  bezout.matrix[0][3][15] =
      _mm256_sub_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[0][6]));
  bezout.matrix[0][3][10] =
      _mm256_sub_pd(bezout.matrix[0][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[0][0]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[0][1]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[0][2]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[0][3]));
  bezout.matrix[0][3][14] =
      _mm256_sub_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[0][4]));
  bezout.matrix[0][3][15] =
      _mm256_sub_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[0][5]));
  bezout.matrix[0][3][11] =
      _mm256_sub_pd(bezout.matrix[0][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[0][0]));
  bezout.matrix[0][3][12] =
      _mm256_sub_pd(bezout.matrix[0][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[0][1]));
  bezout.matrix[0][3][13] =
      _mm256_sub_pd(bezout.matrix[0][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[0][2]));
  bezout.matrix[0][3][14] =
      _mm256_sub_pd(bezout.matrix[0][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[0][3]));
  bezout.matrix[0][3][15] =
      _mm256_sub_pd(bezout.matrix[0][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[0][4]));
  bezout.matrix[0][4][0] =
      _mm256_add_pd(bezout.matrix[0][4][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[5][0]));
  bezout.matrix[0][4][1] =
      _mm256_add_pd(bezout.matrix[0][4][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[5][1]));
  bezout.matrix[0][4][2] =
      _mm256_add_pd(bezout.matrix[0][4][2],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[5][2]));
  bezout.matrix[0][4][3] =
      _mm256_add_pd(bezout.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[5][3]));
  bezout.matrix[0][4][4] =
      _mm256_add_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[5][4]));
  bezout.matrix[0][4][5] =
      _mm256_add_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[5][5]));
  bezout.matrix[0][4][1] =
      _mm256_add_pd(bezout.matrix[0][4][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[5][0]));
  bezout.matrix[0][4][2] =
      _mm256_add_pd(bezout.matrix[0][4][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[5][1]));
  bezout.matrix[0][4][3] =
      _mm256_add_pd(bezout.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[5][2]));
  bezout.matrix[0][4][4] =
      _mm256_add_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[5][3]));
  bezout.matrix[0][4][5] =
      _mm256_add_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[5][4]));
  bezout.matrix[0][4][6] =
      _mm256_add_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[5][5]));
  bezout.matrix[0][4][2] =
      _mm256_add_pd(bezout.matrix[0][4][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[5][0]));
  bezout.matrix[0][4][3] =
      _mm256_add_pd(bezout.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[5][1]));
  bezout.matrix[0][4][4] =
      _mm256_add_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[5][2]));
  bezout.matrix[0][4][5] =
      _mm256_add_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[5][3]));
  bezout.matrix[0][4][6] =
      _mm256_add_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[5][4]));
  bezout.matrix[0][4][7] =
      _mm256_add_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[5][5]));
  bezout.matrix[0][4][3] =
      _mm256_add_pd(bezout.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[5][0]));
  bezout.matrix[0][4][4] =
      _mm256_add_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[5][1]));
  bezout.matrix[0][4][5] =
      _mm256_add_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[5][2]));
  bezout.matrix[0][4][6] =
      _mm256_add_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[5][3]));
  bezout.matrix[0][4][7] =
      _mm256_add_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[5][4]));
  bezout.matrix[0][4][8] =
      _mm256_add_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[5][5]));
  bezout.matrix[0][4][4] =
      _mm256_add_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[5][0]));
  bezout.matrix[0][4][5] =
      _mm256_add_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[5][1]));
  bezout.matrix[0][4][6] =
      _mm256_add_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[5][2]));
  bezout.matrix[0][4][7] =
      _mm256_add_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[5][3]));
  bezout.matrix[0][4][8] =
      _mm256_add_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[5][4]));
  bezout.matrix[0][4][9] =
      _mm256_add_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[5][5]));
  bezout.matrix[0][4][5] =
      _mm256_add_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[5][0]));
  bezout.matrix[0][4][6] =
      _mm256_add_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[5][1]));
  bezout.matrix[0][4][7] =
      _mm256_add_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[5][2]));
  bezout.matrix[0][4][8] =
      _mm256_add_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[5][3]));
  bezout.matrix[0][4][9] =
      _mm256_add_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[5][4]));
  bezout.matrix[0][4][10] =
      _mm256_add_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[5][5]));
  bezout.matrix[0][4][6] =
      _mm256_add_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[5][0]));
  bezout.matrix[0][4][7] =
      _mm256_add_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[5][1]));
  bezout.matrix[0][4][8] =
      _mm256_add_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[5][2]));
  bezout.matrix[0][4][9] =
      _mm256_add_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[5][3]));
  bezout.matrix[0][4][10] =
      _mm256_add_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[5][4]));
  bezout.matrix[0][4][11] =
      _mm256_add_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[5][5]));
  bezout.matrix[0][4][7] =
      _mm256_add_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[5][0]));
  bezout.matrix[0][4][8] =
      _mm256_add_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[5][1]));
  bezout.matrix[0][4][9] =
      _mm256_add_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[5][2]));
  bezout.matrix[0][4][10] =
      _mm256_add_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[5][3]));
  bezout.matrix[0][4][11] =
      _mm256_add_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[5][4]));
  bezout.matrix[0][4][12] =
      _mm256_add_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[5][5]));
  bezout.matrix[0][4][8] =
      _mm256_add_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[5][0]));
  bezout.matrix[0][4][9] =
      _mm256_add_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[5][1]));
  bezout.matrix[0][4][10] =
      _mm256_add_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[5][2]));
  bezout.matrix[0][4][11] =
      _mm256_add_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[5][3]));
  bezout.matrix[0][4][12] =
      _mm256_add_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[5][4]));
  bezout.matrix[0][4][13] =
      _mm256_add_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[5][5]));
  bezout.matrix[0][4][9] =
      _mm256_add_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[5][0]));
  bezout.matrix[0][4][10] =
      _mm256_add_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[5][1]));
  bezout.matrix[0][4][11] =
      _mm256_add_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[5][2]));
  bezout.matrix[0][4][12] =
      _mm256_add_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[5][3]));
  bezout.matrix[0][4][13] =
      _mm256_add_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[5][4]));
  bezout.matrix[0][4][14] =
      _mm256_add_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[5][5]));
  bezout.matrix[0][4][10] =
      _mm256_add_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[5][0]));
  bezout.matrix[0][4][11] =
      _mm256_add_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[5][1]));
  bezout.matrix[0][4][12] =
      _mm256_add_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[5][2]));
  bezout.matrix[0][4][13] =
      _mm256_add_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[5][3]));
  bezout.matrix[0][4][14] =
      _mm256_add_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[5][4]));
  bezout.matrix[0][4][15] =
      _mm256_add_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[5][5]));
  bezout.matrix[0][4][11] =
      _mm256_add_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[5][0]));
  bezout.matrix[0][4][12] =
      _mm256_add_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[5][1]));
  bezout.matrix[0][4][13] =
      _mm256_add_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[5][2]));
  bezout.matrix[0][4][14] =
      _mm256_add_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[5][3]));
  bezout.matrix[0][4][15] =
      _mm256_add_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[5][4]));
  bezout.matrix[0][4][12] =
      _mm256_add_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[5][0]));
  bezout.matrix[0][4][13] =
      _mm256_add_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[5][1]));
  bezout.matrix[0][4][14] =
      _mm256_add_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[5][2]));
  bezout.matrix[0][4][15] =
      _mm256_add_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[5][3]));
  bezout.matrix[0][4][13] =
      _mm256_add_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[5][0]));
  bezout.matrix[0][4][14] =
      _mm256_add_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[5][1]));
  bezout.matrix[0][4][15] =
      _mm256_add_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[5][2]));
  bezout.matrix[0][4][14] =
      _mm256_add_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[5][0]));
  bezout.matrix[0][4][15] =
      _mm256_add_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[5][1]));
  bezout.matrix[0][4][15] =
      _mm256_add_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[5][0]));
  bezout.matrix[0][4][0] =
      _mm256_sub_pd(bezout.matrix[0][4][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][0]));
  bezout.matrix[0][4][1] =
      _mm256_sub_pd(bezout.matrix[0][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][1]));
  bezout.matrix[0][4][2] =
      _mm256_sub_pd(bezout.matrix[0][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][2]));
  bezout.matrix[0][4][3] =
      _mm256_sub_pd(bezout.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][3]));
  bezout.matrix[0][4][4] =
      _mm256_sub_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][4]));
  bezout.matrix[0][4][5] =
      _mm256_sub_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][5]));
  bezout.matrix[0][4][6] =
      _mm256_sub_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][6]));
  bezout.matrix[0][4][7] =
      _mm256_sub_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][7]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][8]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][9]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[0][10]));
  bezout.matrix[0][4][1] =
      _mm256_sub_pd(bezout.matrix[0][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][0]));
  bezout.matrix[0][4][2] =
      _mm256_sub_pd(bezout.matrix[0][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][1]));
  bezout.matrix[0][4][3] =
      _mm256_sub_pd(bezout.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][2]));
  bezout.matrix[0][4][4] =
      _mm256_sub_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][3]));
  bezout.matrix[0][4][5] =
      _mm256_sub_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][4]));
  bezout.matrix[0][4][6] =
      _mm256_sub_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][5]));
  bezout.matrix[0][4][7] =
      _mm256_sub_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][6]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][7]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][8]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][9]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[0][10]));
  bezout.matrix[0][4][2] =
      _mm256_sub_pd(bezout.matrix[0][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][0]));
  bezout.matrix[0][4][3] =
      _mm256_sub_pd(bezout.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][1]));
  bezout.matrix[0][4][4] =
      _mm256_sub_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][2]));
  bezout.matrix[0][4][5] =
      _mm256_sub_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][3]));
  bezout.matrix[0][4][6] =
      _mm256_sub_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][4]));
  bezout.matrix[0][4][7] =
      _mm256_sub_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][5]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][6]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][7]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][8]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][9]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[0][10]));
  bezout.matrix[0][4][3] =
      _mm256_sub_pd(bezout.matrix[0][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][0]));
  bezout.matrix[0][4][4] =
      _mm256_sub_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][1]));
  bezout.matrix[0][4][5] =
      _mm256_sub_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][2]));
  bezout.matrix[0][4][6] =
      _mm256_sub_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][3]));
  bezout.matrix[0][4][7] =
      _mm256_sub_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][4]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][5]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][6]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][7]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][8]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][9]));
  bezout.matrix[0][4][13] =
      _mm256_sub_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[0][10]));
  bezout.matrix[0][4][4] =
      _mm256_sub_pd(bezout.matrix[0][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][0]));
  bezout.matrix[0][4][5] =
      _mm256_sub_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][1]));
  bezout.matrix[0][4][6] =
      _mm256_sub_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][2]));
  bezout.matrix[0][4][7] =
      _mm256_sub_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][3]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][4]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][5]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][6]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][7]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][8]));
  bezout.matrix[0][4][13] =
      _mm256_sub_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][9]));
  bezout.matrix[0][4][14] =
      _mm256_sub_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[0][10]));
  bezout.matrix[0][4][5] =
      _mm256_sub_pd(bezout.matrix[0][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][0]));
  bezout.matrix[0][4][6] =
      _mm256_sub_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][1]));
  bezout.matrix[0][4][7] =
      _mm256_sub_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][2]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][3]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][4]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][5]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][6]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][7]));
  bezout.matrix[0][4][13] =
      _mm256_sub_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][8]));
  bezout.matrix[0][4][14] =
      _mm256_sub_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][9]));
  bezout.matrix[0][4][15] =
      _mm256_sub_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[0][10]));
  bezout.matrix[0][4][6] =
      _mm256_sub_pd(bezout.matrix[0][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][0]));
  bezout.matrix[0][4][7] =
      _mm256_sub_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][1]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][2]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][3]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][4]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][5]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][6]));
  bezout.matrix[0][4][13] =
      _mm256_sub_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][7]));
  bezout.matrix[0][4][14] =
      _mm256_sub_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][8]));
  bezout.matrix[0][4][15] =
      _mm256_sub_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[0][9]));
  bezout.matrix[0][4][7] =
      _mm256_sub_pd(bezout.matrix[0][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][0]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][1]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][2]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][3]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][4]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][5]));
  bezout.matrix[0][4][13] =
      _mm256_sub_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][6]));
  bezout.matrix[0][4][14] =
      _mm256_sub_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][7]));
  bezout.matrix[0][4][15] =
      _mm256_sub_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[0][8]));
  bezout.matrix[0][4][8] =
      _mm256_sub_pd(bezout.matrix[0][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[0][0]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[0][1]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[0][2]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[0][3]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[0][4]));
  bezout.matrix[0][4][13] =
      _mm256_sub_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[0][5]));
  bezout.matrix[0][4][14] =
      _mm256_sub_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[0][6]));
  bezout.matrix[0][4][15] =
      _mm256_sub_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[0][7]));
  bezout.matrix[0][4][9] =
      _mm256_sub_pd(bezout.matrix[0][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[0][0]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[0][1]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[0][2]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[0][3]));
  bezout.matrix[0][4][13] =
      _mm256_sub_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[0][4]));
  bezout.matrix[0][4][14] =
      _mm256_sub_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[0][5]));
  bezout.matrix[0][4][15] =
      _mm256_sub_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[0][6]));
  bezout.matrix[0][4][10] =
      _mm256_sub_pd(bezout.matrix[0][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[0][0]));
  bezout.matrix[0][4][11] =
      _mm256_sub_pd(bezout.matrix[0][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[0][1]));
  bezout.matrix[0][4][12] =
      _mm256_sub_pd(bezout.matrix[0][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[0][2]));
  bezout.matrix[0][4][13] =
      _mm256_sub_pd(bezout.matrix[0][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[0][3]));
  bezout.matrix[0][4][14] =
      _mm256_sub_pd(bezout.matrix[0][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[0][4]));
  bezout.matrix[0][4][15] =
      _mm256_sub_pd(bezout.matrix[0][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[0][5]));
  bezout.matrix[0][5][0] =
      _mm256_add_pd(bezout.matrix[0][5][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[6][0]));
  bezout.matrix[0][5][1] =
      _mm256_add_pd(bezout.matrix[0][5][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[6][1]));
  bezout.matrix[0][5][2] =
      _mm256_add_pd(bezout.matrix[0][5][2],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[6][2]));
  bezout.matrix[0][5][3] =
      _mm256_add_pd(bezout.matrix[0][5][3],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[6][3]));
  bezout.matrix[0][5][4] =
      _mm256_add_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[6][4]));
  bezout.matrix[0][5][1] =
      _mm256_add_pd(bezout.matrix[0][5][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[6][0]));
  bezout.matrix[0][5][2] =
      _mm256_add_pd(bezout.matrix[0][5][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[6][1]));
  bezout.matrix[0][5][3] =
      _mm256_add_pd(bezout.matrix[0][5][3],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[6][2]));
  bezout.matrix[0][5][4] =
      _mm256_add_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[6][3]));
  bezout.matrix[0][5][5] =
      _mm256_add_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[6][4]));
  bezout.matrix[0][5][2] =
      _mm256_add_pd(bezout.matrix[0][5][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[6][0]));
  bezout.matrix[0][5][3] =
      _mm256_add_pd(bezout.matrix[0][5][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[6][1]));
  bezout.matrix[0][5][4] =
      _mm256_add_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[6][2]));
  bezout.matrix[0][5][5] =
      _mm256_add_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[6][3]));
  bezout.matrix[0][5][6] =
      _mm256_add_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[6][4]));
  bezout.matrix[0][5][3] =
      _mm256_add_pd(bezout.matrix[0][5][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[6][0]));
  bezout.matrix[0][5][4] =
      _mm256_add_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[6][1]));
  bezout.matrix[0][5][5] =
      _mm256_add_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[6][2]));
  bezout.matrix[0][5][6] =
      _mm256_add_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[6][3]));
  bezout.matrix[0][5][7] =
      _mm256_add_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[6][4]));
  bezout.matrix[0][5][4] =
      _mm256_add_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[6][0]));
  bezout.matrix[0][5][5] =
      _mm256_add_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[6][1]));
  bezout.matrix[0][5][6] =
      _mm256_add_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[6][2]));
  bezout.matrix[0][5][7] =
      _mm256_add_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[6][3]));
  bezout.matrix[0][5][8] =
      _mm256_add_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[6][4]));
  bezout.matrix[0][5][5] =
      _mm256_add_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[6][0]));
  bezout.matrix[0][5][6] =
      _mm256_add_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[6][1]));
  bezout.matrix[0][5][7] =
      _mm256_add_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[6][2]));
  bezout.matrix[0][5][8] =
      _mm256_add_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[6][3]));
  bezout.matrix[0][5][9] =
      _mm256_add_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[6][4]));
  bezout.matrix[0][5][6] =
      _mm256_add_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[6][0]));
  bezout.matrix[0][5][7] =
      _mm256_add_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[6][1]));
  bezout.matrix[0][5][8] =
      _mm256_add_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[6][2]));
  bezout.matrix[0][5][9] =
      _mm256_add_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[6][3]));
  bezout.matrix[0][5][10] =
      _mm256_add_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[6][4]));
  bezout.matrix[0][5][7] =
      _mm256_add_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[6][0]));
  bezout.matrix[0][5][8] =
      _mm256_add_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[6][1]));
  bezout.matrix[0][5][9] =
      _mm256_add_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[6][2]));
  bezout.matrix[0][5][10] =
      _mm256_add_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[6][3]));
  bezout.matrix[0][5][11] =
      _mm256_add_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[6][4]));
  bezout.matrix[0][5][8] =
      _mm256_add_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[6][0]));
  bezout.matrix[0][5][9] =
      _mm256_add_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[6][1]));
  bezout.matrix[0][5][10] =
      _mm256_add_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[6][2]));
  bezout.matrix[0][5][11] =
      _mm256_add_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[6][3]));
  bezout.matrix[0][5][12] =
      _mm256_add_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[6][4]));
  bezout.matrix[0][5][9] =
      _mm256_add_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[6][0]));
  bezout.matrix[0][5][10] =
      _mm256_add_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[6][1]));
  bezout.matrix[0][5][11] =
      _mm256_add_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[6][2]));
  bezout.matrix[0][5][12] =
      _mm256_add_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[6][3]));
  bezout.matrix[0][5][13] =
      _mm256_add_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[6][4]));
  bezout.matrix[0][5][10] =
      _mm256_add_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[6][0]));
  bezout.matrix[0][5][11] =
      _mm256_add_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[6][1]));
  bezout.matrix[0][5][12] =
      _mm256_add_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[6][2]));
  bezout.matrix[0][5][13] =
      _mm256_add_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[6][3]));
  bezout.matrix[0][5][14] =
      _mm256_add_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[6][4]));
  bezout.matrix[0][5][11] =
      _mm256_add_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[6][0]));
  bezout.matrix[0][5][12] =
      _mm256_add_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[6][1]));
  bezout.matrix[0][5][13] =
      _mm256_add_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[6][2]));
  bezout.matrix[0][5][14] =
      _mm256_add_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[6][3]));
  bezout.matrix[0][5][15] =
      _mm256_add_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[6][4]));
  bezout.matrix[0][5][12] =
      _mm256_add_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[6][0]));
  bezout.matrix[0][5][13] =
      _mm256_add_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[6][1]));
  bezout.matrix[0][5][14] =
      _mm256_add_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[6][2]));
  bezout.matrix[0][5][15] =
      _mm256_add_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[6][3]));
  bezout.matrix[0][5][13] =
      _mm256_add_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[6][0]));
  bezout.matrix[0][5][14] =
      _mm256_add_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[6][1]));
  bezout.matrix[0][5][15] =
      _mm256_add_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[6][2]));
  bezout.matrix[0][5][14] =
      _mm256_add_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[6][0]));
  bezout.matrix[0][5][15] =
      _mm256_add_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[6][1]));
  bezout.matrix[0][5][15] =
      _mm256_add_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[6][0]));
  bezout.matrix[0][5][0] =
      _mm256_sub_pd(bezout.matrix[0][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][0]));
  bezout.matrix[0][5][1] =
      _mm256_sub_pd(bezout.matrix[0][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][1]));
  bezout.matrix[0][5][2] =
      _mm256_sub_pd(bezout.matrix[0][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][2]));
  bezout.matrix[0][5][3] =
      _mm256_sub_pd(bezout.matrix[0][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][3]));
  bezout.matrix[0][5][4] =
      _mm256_sub_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][4]));
  bezout.matrix[0][5][5] =
      _mm256_sub_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][5]));
  bezout.matrix[0][5][6] =
      _mm256_sub_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][6]));
  bezout.matrix[0][5][7] =
      _mm256_sub_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][7]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][8]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][9]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[0][10]));
  bezout.matrix[0][5][1] =
      _mm256_sub_pd(bezout.matrix[0][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][0]));
  bezout.matrix[0][5][2] =
      _mm256_sub_pd(bezout.matrix[0][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][1]));
  bezout.matrix[0][5][3] =
      _mm256_sub_pd(bezout.matrix[0][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][2]));
  bezout.matrix[0][5][4] =
      _mm256_sub_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][3]));
  bezout.matrix[0][5][5] =
      _mm256_sub_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][4]));
  bezout.matrix[0][5][6] =
      _mm256_sub_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][5]));
  bezout.matrix[0][5][7] =
      _mm256_sub_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][6]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][7]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][8]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][9]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[0][10]));
  bezout.matrix[0][5][2] =
      _mm256_sub_pd(bezout.matrix[0][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][0]));
  bezout.matrix[0][5][3] =
      _mm256_sub_pd(bezout.matrix[0][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][1]));
  bezout.matrix[0][5][4] =
      _mm256_sub_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][2]));
  bezout.matrix[0][5][5] =
      _mm256_sub_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][3]));
  bezout.matrix[0][5][6] =
      _mm256_sub_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][4]));
  bezout.matrix[0][5][7] =
      _mm256_sub_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][5]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][6]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][7]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][8]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][9]));
  bezout.matrix[0][5][12] =
      _mm256_sub_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[0][10]));
  bezout.matrix[0][5][3] =
      _mm256_sub_pd(bezout.matrix[0][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][0]));
  bezout.matrix[0][5][4] =
      _mm256_sub_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][1]));
  bezout.matrix[0][5][5] =
      _mm256_sub_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][2]));
  bezout.matrix[0][5][6] =
      _mm256_sub_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][3]));
  bezout.matrix[0][5][7] =
      _mm256_sub_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][4]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][5]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][6]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][7]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][8]));
  bezout.matrix[0][5][12] =
      _mm256_sub_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][9]));
  bezout.matrix[0][5][13] =
      _mm256_sub_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[0][10]));
  bezout.matrix[0][5][4] =
      _mm256_sub_pd(bezout.matrix[0][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][0]));
  bezout.matrix[0][5][5] =
      _mm256_sub_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][1]));
  bezout.matrix[0][5][6] =
      _mm256_sub_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][2]));
  bezout.matrix[0][5][7] =
      _mm256_sub_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][3]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][4]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][5]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][6]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][7]));
  bezout.matrix[0][5][12] =
      _mm256_sub_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][8]));
  bezout.matrix[0][5][13] =
      _mm256_sub_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][9]));
  bezout.matrix[0][5][14] =
      _mm256_sub_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[0][10]));
  bezout.matrix[0][5][5] =
      _mm256_sub_pd(bezout.matrix[0][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][0]));
  bezout.matrix[0][5][6] =
      _mm256_sub_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][1]));
  bezout.matrix[0][5][7] =
      _mm256_sub_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][2]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][3]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][4]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][5]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][6]));
  bezout.matrix[0][5][12] =
      _mm256_sub_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][7]));
  bezout.matrix[0][5][13] =
      _mm256_sub_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][8]));
  bezout.matrix[0][5][14] =
      _mm256_sub_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][9]));
  bezout.matrix[0][5][15] =
      _mm256_sub_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[0][10]));
  bezout.matrix[0][5][6] =
      _mm256_sub_pd(bezout.matrix[0][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][0]));
  bezout.matrix[0][5][7] =
      _mm256_sub_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][1]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][2]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][3]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][4]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][5]));
  bezout.matrix[0][5][12] =
      _mm256_sub_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][6]));
  bezout.matrix[0][5][13] =
      _mm256_sub_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][7]));
  bezout.matrix[0][5][14] =
      _mm256_sub_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][8]));
  bezout.matrix[0][5][15] =
      _mm256_sub_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[0][9]));
  bezout.matrix[0][5][7] =
      _mm256_sub_pd(bezout.matrix[0][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][0]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][1]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][2]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][3]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][4]));
  bezout.matrix[0][5][12] =
      _mm256_sub_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][5]));
  bezout.matrix[0][5][13] =
      _mm256_sub_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][6]));
  bezout.matrix[0][5][14] =
      _mm256_sub_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][7]));
  bezout.matrix[0][5][15] =
      _mm256_sub_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[0][8]));
  bezout.matrix[0][5][8] =
      _mm256_sub_pd(bezout.matrix[0][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[0][0]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[0][1]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[0][2]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[0][3]));
  bezout.matrix[0][5][12] =
      _mm256_sub_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[0][4]));
  bezout.matrix[0][5][13] =
      _mm256_sub_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[0][5]));
  bezout.matrix[0][5][14] =
      _mm256_sub_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[0][6]));
  bezout.matrix[0][5][15] =
      _mm256_sub_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[0][7]));
  bezout.matrix[0][5][9] =
      _mm256_sub_pd(bezout.matrix[0][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[0][0]));
  bezout.matrix[0][5][10] =
      _mm256_sub_pd(bezout.matrix[0][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[0][1]));
  bezout.matrix[0][5][11] =
      _mm256_sub_pd(bezout.matrix[0][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[0][2]));
  bezout.matrix[0][5][12] =
      _mm256_sub_pd(bezout.matrix[0][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[0][3]));
  bezout.matrix[0][5][13] =
      _mm256_sub_pd(bezout.matrix[0][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[0][4]));
  bezout.matrix[0][5][14] =
      _mm256_sub_pd(bezout.matrix[0][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[0][5]));
  bezout.matrix[0][5][15] =
      _mm256_sub_pd(bezout.matrix[0][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[0][6]));
  bezout.matrix[0][6][0] =
      _mm256_add_pd(bezout.matrix[0][6][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[7][0]));
  bezout.matrix[0][6][1] =
      _mm256_add_pd(bezout.matrix[0][6][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[7][1]));
  bezout.matrix[0][6][2] =
      _mm256_add_pd(bezout.matrix[0][6][2],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[7][2]));
  bezout.matrix[0][6][3] =
      _mm256_add_pd(bezout.matrix[0][6][3],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[7][3]));
  bezout.matrix[0][6][1] =
      _mm256_add_pd(bezout.matrix[0][6][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[7][0]));
  bezout.matrix[0][6][2] =
      _mm256_add_pd(bezout.matrix[0][6][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[7][1]));
  bezout.matrix[0][6][3] =
      _mm256_add_pd(bezout.matrix[0][6][3],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[7][2]));
  bezout.matrix[0][6][4] =
      _mm256_add_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[7][3]));
  bezout.matrix[0][6][2] =
      _mm256_add_pd(bezout.matrix[0][6][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[7][0]));
  bezout.matrix[0][6][3] =
      _mm256_add_pd(bezout.matrix[0][6][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[7][1]));
  bezout.matrix[0][6][4] =
      _mm256_add_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[7][2]));
  bezout.matrix[0][6][5] =
      _mm256_add_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[7][3]));
  bezout.matrix[0][6][3] =
      _mm256_add_pd(bezout.matrix[0][6][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[7][0]));
  bezout.matrix[0][6][4] =
      _mm256_add_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[7][1]));
  bezout.matrix[0][6][5] =
      _mm256_add_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[7][2]));
  bezout.matrix[0][6][6] =
      _mm256_add_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[7][3]));
  bezout.matrix[0][6][4] =
      _mm256_add_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[7][0]));
  bezout.matrix[0][6][5] =
      _mm256_add_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[7][1]));
  bezout.matrix[0][6][6] =
      _mm256_add_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[7][2]));
  bezout.matrix[0][6][7] =
      _mm256_add_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[7][3]));
  bezout.matrix[0][6][5] =
      _mm256_add_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[7][0]));
  bezout.matrix[0][6][6] =
      _mm256_add_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[7][1]));
  bezout.matrix[0][6][7] =
      _mm256_add_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[7][2]));
  bezout.matrix[0][6][8] =
      _mm256_add_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[7][3]));
  bezout.matrix[0][6][6] =
      _mm256_add_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[7][0]));
  bezout.matrix[0][6][7] =
      _mm256_add_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[7][1]));
  bezout.matrix[0][6][8] =
      _mm256_add_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[7][2]));
  bezout.matrix[0][6][9] =
      _mm256_add_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[7][3]));
  bezout.matrix[0][6][7] =
      _mm256_add_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[7][0]));
  bezout.matrix[0][6][8] =
      _mm256_add_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[7][1]));
  bezout.matrix[0][6][9] =
      _mm256_add_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[7][2]));
  bezout.matrix[0][6][10] =
      _mm256_add_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[7][3]));
  bezout.matrix[0][6][8] =
      _mm256_add_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[7][0]));
  bezout.matrix[0][6][9] =
      _mm256_add_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[7][1]));
  bezout.matrix[0][6][10] =
      _mm256_add_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[7][2]));
  bezout.matrix[0][6][11] =
      _mm256_add_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[7][3]));
  bezout.matrix[0][6][9] =
      _mm256_add_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[7][0]));
  bezout.matrix[0][6][10] =
      _mm256_add_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[7][1]));
  bezout.matrix[0][6][11] =
      _mm256_add_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[7][2]));
  bezout.matrix[0][6][12] =
      _mm256_add_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[7][3]));
  bezout.matrix[0][6][10] =
      _mm256_add_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[7][0]));
  bezout.matrix[0][6][11] =
      _mm256_add_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[7][1]));
  bezout.matrix[0][6][12] =
      _mm256_add_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[7][2]));
  bezout.matrix[0][6][13] =
      _mm256_add_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[7][3]));
  bezout.matrix[0][6][11] =
      _mm256_add_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[7][0]));
  bezout.matrix[0][6][12] =
      _mm256_add_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[7][1]));
  bezout.matrix[0][6][13] =
      _mm256_add_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[7][2]));
  bezout.matrix[0][6][14] =
      _mm256_add_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[7][3]));
  bezout.matrix[0][6][12] =
      _mm256_add_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[7][0]));
  bezout.matrix[0][6][13] =
      _mm256_add_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[7][1]));
  bezout.matrix[0][6][14] =
      _mm256_add_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[7][2]));
  bezout.matrix[0][6][15] =
      _mm256_add_pd(bezout.matrix[0][6][15],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[7][3]));
  bezout.matrix[0][6][13] =
      _mm256_add_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[7][0]));
  bezout.matrix[0][6][14] =
      _mm256_add_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[7][1]));
  bezout.matrix[0][6][15] =
      _mm256_add_pd(bezout.matrix[0][6][15],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[7][2]));
  bezout.matrix[0][6][14] =
      _mm256_add_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[7][0]));
  bezout.matrix[0][6][15] =
      _mm256_add_pd(bezout.matrix[0][6][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[7][1]));
  bezout.matrix[0][6][15] =
      _mm256_add_pd(bezout.matrix[0][6][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[7][0]));
  bezout.matrix[0][6][0] =
      _mm256_sub_pd(bezout.matrix[0][6][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][0]));
  bezout.matrix[0][6][1] =
      _mm256_sub_pd(bezout.matrix[0][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][1]));
  bezout.matrix[0][6][2] =
      _mm256_sub_pd(bezout.matrix[0][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][2]));
  bezout.matrix[0][6][3] =
      _mm256_sub_pd(bezout.matrix[0][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][3]));
  bezout.matrix[0][6][4] =
      _mm256_sub_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][4]));
  bezout.matrix[0][6][5] =
      _mm256_sub_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][5]));
  bezout.matrix[0][6][6] =
      _mm256_sub_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][6]));
  bezout.matrix[0][6][7] =
      _mm256_sub_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][7]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][8]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][9]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[0][10]));
  bezout.matrix[0][6][1] =
      _mm256_sub_pd(bezout.matrix[0][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][0]));
  bezout.matrix[0][6][2] =
      _mm256_sub_pd(bezout.matrix[0][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][1]));
  bezout.matrix[0][6][3] =
      _mm256_sub_pd(bezout.matrix[0][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][2]));
  bezout.matrix[0][6][4] =
      _mm256_sub_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][3]));
  bezout.matrix[0][6][5] =
      _mm256_sub_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][4]));
  bezout.matrix[0][6][6] =
      _mm256_sub_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][5]));
  bezout.matrix[0][6][7] =
      _mm256_sub_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][6]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][7]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][8]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][9]));
  bezout.matrix[0][6][11] =
      _mm256_sub_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[0][10]));
  bezout.matrix[0][6][2] =
      _mm256_sub_pd(bezout.matrix[0][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][0]));
  bezout.matrix[0][6][3] =
      _mm256_sub_pd(bezout.matrix[0][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][1]));
  bezout.matrix[0][6][4] =
      _mm256_sub_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][2]));
  bezout.matrix[0][6][5] =
      _mm256_sub_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][3]));
  bezout.matrix[0][6][6] =
      _mm256_sub_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][4]));
  bezout.matrix[0][6][7] =
      _mm256_sub_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][5]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][6]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][7]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][8]));
  bezout.matrix[0][6][11] =
      _mm256_sub_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][9]));
  bezout.matrix[0][6][12] =
      _mm256_sub_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[0][10]));
  bezout.matrix[0][6][3] =
      _mm256_sub_pd(bezout.matrix[0][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][0]));
  bezout.matrix[0][6][4] =
      _mm256_sub_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][1]));
  bezout.matrix[0][6][5] =
      _mm256_sub_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][2]));
  bezout.matrix[0][6][6] =
      _mm256_sub_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][3]));
  bezout.matrix[0][6][7] =
      _mm256_sub_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][4]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][5]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][6]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][7]));
  bezout.matrix[0][6][11] =
      _mm256_sub_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][8]));
  bezout.matrix[0][6][12] =
      _mm256_sub_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][9]));
  bezout.matrix[0][6][13] =
      _mm256_sub_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[0][10]));
  bezout.matrix[0][6][4] =
      _mm256_sub_pd(bezout.matrix[0][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][0]));
  bezout.matrix[0][6][5] =
      _mm256_sub_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][1]));
  bezout.matrix[0][6][6] =
      _mm256_sub_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][2]));
  bezout.matrix[0][6][7] =
      _mm256_sub_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][3]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][4]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][5]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][6]));
  bezout.matrix[0][6][11] =
      _mm256_sub_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][7]));
  bezout.matrix[0][6][12] =
      _mm256_sub_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][8]));
  bezout.matrix[0][6][13] =
      _mm256_sub_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][9]));
  bezout.matrix[0][6][14] =
      _mm256_sub_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[0][10]));
  bezout.matrix[0][6][5] =
      _mm256_sub_pd(bezout.matrix[0][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][0]));
  bezout.matrix[0][6][6] =
      _mm256_sub_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][1]));
  bezout.matrix[0][6][7] =
      _mm256_sub_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][2]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][3]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][4]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][5]));
  bezout.matrix[0][6][11] =
      _mm256_sub_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][6]));
  bezout.matrix[0][6][12] =
      _mm256_sub_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][7]));
  bezout.matrix[0][6][13] =
      _mm256_sub_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][8]));
  bezout.matrix[0][6][14] =
      _mm256_sub_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][9]));
  bezout.matrix[0][6][15] =
      _mm256_sub_pd(bezout.matrix[0][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[0][10]));
  bezout.matrix[0][6][6] =
      _mm256_sub_pd(bezout.matrix[0][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][0]));
  bezout.matrix[0][6][7] =
      _mm256_sub_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][1]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][2]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][3]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][4]));
  bezout.matrix[0][6][11] =
      _mm256_sub_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][5]));
  bezout.matrix[0][6][12] =
      _mm256_sub_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][6]));
  bezout.matrix[0][6][13] =
      _mm256_sub_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][7]));
  bezout.matrix[0][6][14] =
      _mm256_sub_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][8]));
  bezout.matrix[0][6][15] =
      _mm256_sub_pd(bezout.matrix[0][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[0][9]));
  bezout.matrix[0][6][7] =
      _mm256_sub_pd(bezout.matrix[0][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][0]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][1]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][2]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][3]));
  bezout.matrix[0][6][11] =
      _mm256_sub_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][4]));
  bezout.matrix[0][6][12] =
      _mm256_sub_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][5]));
  bezout.matrix[0][6][13] =
      _mm256_sub_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][6]));
  bezout.matrix[0][6][14] =
      _mm256_sub_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][7]));
  bezout.matrix[0][6][15] =
      _mm256_sub_pd(bezout.matrix[0][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[0][8]));
  bezout.matrix[0][6][8] =
      _mm256_sub_pd(bezout.matrix[0][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[0][0]));
  bezout.matrix[0][6][9] =
      _mm256_sub_pd(bezout.matrix[0][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[0][1]));
  bezout.matrix[0][6][10] =
      _mm256_sub_pd(bezout.matrix[0][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[0][2]));
  bezout.matrix[0][6][11] =
      _mm256_sub_pd(bezout.matrix[0][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[0][3]));
  bezout.matrix[0][6][12] =
      _mm256_sub_pd(bezout.matrix[0][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[0][4]));
  bezout.matrix[0][6][13] =
      _mm256_sub_pd(bezout.matrix[0][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[0][5]));
  bezout.matrix[0][6][14] =
      _mm256_sub_pd(bezout.matrix[0][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[0][6]));
  bezout.matrix[0][6][15] =
      _mm256_sub_pd(bezout.matrix[0][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[0][7]));
  bezout.matrix[0][7][0] =
      _mm256_add_pd(bezout.matrix[0][7][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[8][0]));
  bezout.matrix[0][7][1] =
      _mm256_add_pd(bezout.matrix[0][7][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[8][1]));
  bezout.matrix[0][7][2] =
      _mm256_add_pd(bezout.matrix[0][7][2],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[8][2]));
  bezout.matrix[0][7][1] =
      _mm256_add_pd(bezout.matrix[0][7][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[8][0]));
  bezout.matrix[0][7][2] =
      _mm256_add_pd(bezout.matrix[0][7][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[8][1]));
  bezout.matrix[0][7][3] =
      _mm256_add_pd(bezout.matrix[0][7][3],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[8][2]));
  bezout.matrix[0][7][2] =
      _mm256_add_pd(bezout.matrix[0][7][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[8][0]));
  bezout.matrix[0][7][3] =
      _mm256_add_pd(bezout.matrix[0][7][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[8][1]));
  bezout.matrix[0][7][4] =
      _mm256_add_pd(bezout.matrix[0][7][4],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[8][2]));
  bezout.matrix[0][7][3] =
      _mm256_add_pd(bezout.matrix[0][7][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[8][0]));
  bezout.matrix[0][7][4] =
      _mm256_add_pd(bezout.matrix[0][7][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[8][1]));
  bezout.matrix[0][7][5] =
      _mm256_add_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[8][2]));
  bezout.matrix[0][7][4] =
      _mm256_add_pd(bezout.matrix[0][7][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[8][0]));
  bezout.matrix[0][7][5] =
      _mm256_add_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[8][1]));
  bezout.matrix[0][7][6] =
      _mm256_add_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[8][2]));
  bezout.matrix[0][7][5] =
      _mm256_add_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[8][0]));
  bezout.matrix[0][7][6] =
      _mm256_add_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[8][1]));
  bezout.matrix[0][7][7] =
      _mm256_add_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[8][2]));
  bezout.matrix[0][7][6] =
      _mm256_add_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[8][0]));
  bezout.matrix[0][7][7] =
      _mm256_add_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[8][1]));
  bezout.matrix[0][7][8] =
      _mm256_add_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[8][2]));
  bezout.matrix[0][7][7] =
      _mm256_add_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[8][0]));
  bezout.matrix[0][7][8] =
      _mm256_add_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[8][1]));
  bezout.matrix[0][7][9] =
      _mm256_add_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[8][2]));
  bezout.matrix[0][7][8] =
      _mm256_add_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[8][0]));
  bezout.matrix[0][7][9] =
      _mm256_add_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[8][1]));
  bezout.matrix[0][7][10] =
      _mm256_add_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[8][2]));
  bezout.matrix[0][7][9] =
      _mm256_add_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[8][0]));
  bezout.matrix[0][7][10] =
      _mm256_add_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[8][1]));
  bezout.matrix[0][7][11] =
      _mm256_add_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[8][2]));
  bezout.matrix[0][7][10] =
      _mm256_add_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[8][0]));
  bezout.matrix[0][7][11] =
      _mm256_add_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[8][1]));
  bezout.matrix[0][7][12] =
      _mm256_add_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[8][2]));
  bezout.matrix[0][7][11] =
      _mm256_add_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[8][0]));
  bezout.matrix[0][7][12] =
      _mm256_add_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[8][1]));
  bezout.matrix[0][7][13] =
      _mm256_add_pd(bezout.matrix[0][7][13],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[8][2]));
  bezout.matrix[0][7][12] =
      _mm256_add_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[8][0]));
  bezout.matrix[0][7][13] =
      _mm256_add_pd(bezout.matrix[0][7][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[8][1]));
  bezout.matrix[0][7][14] =
      _mm256_add_pd(bezout.matrix[0][7][14],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[8][2]));
  bezout.matrix[0][7][13] =
      _mm256_add_pd(bezout.matrix[0][7][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[8][0]));
  bezout.matrix[0][7][14] =
      _mm256_add_pd(bezout.matrix[0][7][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[8][1]));
  bezout.matrix[0][7][15] =
      _mm256_add_pd(bezout.matrix[0][7][15],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[8][2]));
  bezout.matrix[0][7][14] =
      _mm256_add_pd(bezout.matrix[0][7][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[8][0]));
  bezout.matrix[0][7][15] =
      _mm256_add_pd(bezout.matrix[0][7][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[8][1]));
  bezout.matrix[0][7][15] =
      _mm256_add_pd(bezout.matrix[0][7][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[8][0]));
  bezout.matrix[0][7][0] =
      _mm256_sub_pd(bezout.matrix[0][7][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][0]));
  bezout.matrix[0][7][1] =
      _mm256_sub_pd(bezout.matrix[0][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][1]));
  bezout.matrix[0][7][2] =
      _mm256_sub_pd(bezout.matrix[0][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][2]));
  bezout.matrix[0][7][3] =
      _mm256_sub_pd(bezout.matrix[0][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][3]));
  bezout.matrix[0][7][4] =
      _mm256_sub_pd(bezout.matrix[0][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][4]));
  bezout.matrix[0][7][5] =
      _mm256_sub_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][5]));
  bezout.matrix[0][7][6] =
      _mm256_sub_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][6]));
  bezout.matrix[0][7][7] =
      _mm256_sub_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][7]));
  bezout.matrix[0][7][8] =
      _mm256_sub_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][8]));
  bezout.matrix[0][7][9] =
      _mm256_sub_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][9]));
  bezout.matrix[0][7][10] =
      _mm256_sub_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[0][10]));
  bezout.matrix[0][7][1] =
      _mm256_sub_pd(bezout.matrix[0][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][0]));
  bezout.matrix[0][7][2] =
      _mm256_sub_pd(bezout.matrix[0][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][1]));
  bezout.matrix[0][7][3] =
      _mm256_sub_pd(bezout.matrix[0][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][2]));
  bezout.matrix[0][7][4] =
      _mm256_sub_pd(bezout.matrix[0][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][3]));
  bezout.matrix[0][7][5] =
      _mm256_sub_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][4]));
  bezout.matrix[0][7][6] =
      _mm256_sub_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][5]));
  bezout.matrix[0][7][7] =
      _mm256_sub_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][6]));
  bezout.matrix[0][7][8] =
      _mm256_sub_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][7]));
  bezout.matrix[0][7][9] =
      _mm256_sub_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][8]));
  bezout.matrix[0][7][10] =
      _mm256_sub_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][9]));
  bezout.matrix[0][7][11] =
      _mm256_sub_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[0][10]));
  bezout.matrix[0][7][2] =
      _mm256_sub_pd(bezout.matrix[0][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][0]));
  bezout.matrix[0][7][3] =
      _mm256_sub_pd(bezout.matrix[0][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][1]));
  bezout.matrix[0][7][4] =
      _mm256_sub_pd(bezout.matrix[0][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][2]));
  bezout.matrix[0][7][5] =
      _mm256_sub_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][3]));
  bezout.matrix[0][7][6] =
      _mm256_sub_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][4]));
  bezout.matrix[0][7][7] =
      _mm256_sub_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][5]));
  bezout.matrix[0][7][8] =
      _mm256_sub_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][6]));
  bezout.matrix[0][7][9] =
      _mm256_sub_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][7]));
  bezout.matrix[0][7][10] =
      _mm256_sub_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][8]));
  bezout.matrix[0][7][11] =
      _mm256_sub_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][9]));
  bezout.matrix[0][7][12] =
      _mm256_sub_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[0][10]));
  bezout.matrix[0][7][3] =
      _mm256_sub_pd(bezout.matrix[0][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][0]));
  bezout.matrix[0][7][4] =
      _mm256_sub_pd(bezout.matrix[0][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][1]));
  bezout.matrix[0][7][5] =
      _mm256_sub_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][2]));
  bezout.matrix[0][7][6] =
      _mm256_sub_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][3]));
  bezout.matrix[0][7][7] =
      _mm256_sub_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][4]));
  bezout.matrix[0][7][8] =
      _mm256_sub_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][5]));
  bezout.matrix[0][7][9] =
      _mm256_sub_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][6]));
  bezout.matrix[0][7][10] =
      _mm256_sub_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][7]));
  bezout.matrix[0][7][11] =
      _mm256_sub_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][8]));
  bezout.matrix[0][7][12] =
      _mm256_sub_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][9]));
  bezout.matrix[0][7][13] =
      _mm256_sub_pd(bezout.matrix[0][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[0][10]));
  bezout.matrix[0][7][4] =
      _mm256_sub_pd(bezout.matrix[0][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][0]));
  bezout.matrix[0][7][5] =
      _mm256_sub_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][1]));
  bezout.matrix[0][7][6] =
      _mm256_sub_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][2]));
  bezout.matrix[0][7][7] =
      _mm256_sub_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][3]));
  bezout.matrix[0][7][8] =
      _mm256_sub_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][4]));
  bezout.matrix[0][7][9] =
      _mm256_sub_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][5]));
  bezout.matrix[0][7][10] =
      _mm256_sub_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][6]));
  bezout.matrix[0][7][11] =
      _mm256_sub_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][7]));
  bezout.matrix[0][7][12] =
      _mm256_sub_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][8]));
  bezout.matrix[0][7][13] =
      _mm256_sub_pd(bezout.matrix[0][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][9]));
  bezout.matrix[0][7][14] =
      _mm256_sub_pd(bezout.matrix[0][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[0][10]));
  bezout.matrix[0][7][5] =
      _mm256_sub_pd(bezout.matrix[0][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][0]));
  bezout.matrix[0][7][6] =
      _mm256_sub_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][1]));
  bezout.matrix[0][7][7] =
      _mm256_sub_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][2]));
  bezout.matrix[0][7][8] =
      _mm256_sub_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][3]));
  bezout.matrix[0][7][9] =
      _mm256_sub_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][4]));
  bezout.matrix[0][7][10] =
      _mm256_sub_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][5]));
  bezout.matrix[0][7][11] =
      _mm256_sub_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][6]));
  bezout.matrix[0][7][12] =
      _mm256_sub_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][7]));
  bezout.matrix[0][7][13] =
      _mm256_sub_pd(bezout.matrix[0][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][8]));
  bezout.matrix[0][7][14] =
      _mm256_sub_pd(bezout.matrix[0][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][9]));
  bezout.matrix[0][7][15] =
      _mm256_sub_pd(bezout.matrix[0][7][15],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[0][10]));
  bezout.matrix[0][7][6] =
      _mm256_sub_pd(bezout.matrix[0][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][0]));
  bezout.matrix[0][7][7] =
      _mm256_sub_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][1]));
  bezout.matrix[0][7][8] =
      _mm256_sub_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][2]));
  bezout.matrix[0][7][9] =
      _mm256_sub_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][3]));
  bezout.matrix[0][7][10] =
      _mm256_sub_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][4]));
  bezout.matrix[0][7][11] =
      _mm256_sub_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][5]));
  bezout.matrix[0][7][12] =
      _mm256_sub_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][6]));
  bezout.matrix[0][7][13] =
      _mm256_sub_pd(bezout.matrix[0][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][7]));
  bezout.matrix[0][7][14] =
      _mm256_sub_pd(bezout.matrix[0][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][8]));
  bezout.matrix[0][7][15] =
      _mm256_sub_pd(bezout.matrix[0][7][15],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[0][9]));
  bezout.matrix[0][7][7] =
      _mm256_sub_pd(bezout.matrix[0][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][0]));
  bezout.matrix[0][7][8] =
      _mm256_sub_pd(bezout.matrix[0][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][1]));
  bezout.matrix[0][7][9] =
      _mm256_sub_pd(bezout.matrix[0][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][2]));
  bezout.matrix[0][7][10] =
      _mm256_sub_pd(bezout.matrix[0][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][3]));
  bezout.matrix[0][7][11] =
      _mm256_sub_pd(bezout.matrix[0][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][4]));
  bezout.matrix[0][7][12] =
      _mm256_sub_pd(bezout.matrix[0][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][5]));
  bezout.matrix[0][7][13] =
      _mm256_sub_pd(bezout.matrix[0][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][6]));
  bezout.matrix[0][7][14] =
      _mm256_sub_pd(bezout.matrix[0][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][7]));
  bezout.matrix[0][7][15] =
      _mm256_sub_pd(bezout.matrix[0][7][15],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[0][8]));
  bezout.matrix[0][8][0] =
      _mm256_add_pd(bezout.matrix[0][8][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[9][0]));
  bezout.matrix[0][8][1] =
      _mm256_add_pd(bezout.matrix[0][8][1],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[9][1]));
  bezout.matrix[0][8][1] =
      _mm256_add_pd(bezout.matrix[0][8][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[9][0]));
  bezout.matrix[0][8][2] =
      _mm256_add_pd(bezout.matrix[0][8][2],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[9][1]));
  bezout.matrix[0][8][2] =
      _mm256_add_pd(bezout.matrix[0][8][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[9][0]));
  bezout.matrix[0][8][3] =
      _mm256_add_pd(bezout.matrix[0][8][3],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[9][1]));
  bezout.matrix[0][8][3] =
      _mm256_add_pd(bezout.matrix[0][8][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[9][0]));
  bezout.matrix[0][8][4] =
      _mm256_add_pd(bezout.matrix[0][8][4],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[9][1]));
  bezout.matrix[0][8][4] =
      _mm256_add_pd(bezout.matrix[0][8][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[9][0]));
  bezout.matrix[0][8][5] =
      _mm256_add_pd(bezout.matrix[0][8][5],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[9][1]));
  bezout.matrix[0][8][5] =
      _mm256_add_pd(bezout.matrix[0][8][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[9][0]));
  bezout.matrix[0][8][6] =
      _mm256_add_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[9][1]));
  bezout.matrix[0][8][6] =
      _mm256_add_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[9][0]));
  bezout.matrix[0][8][7] =
      _mm256_add_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[9][1]));
  bezout.matrix[0][8][7] =
      _mm256_add_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[9][0]));
  bezout.matrix[0][8][8] =
      _mm256_add_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[9][1]));
  bezout.matrix[0][8][8] =
      _mm256_add_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[9][0]));
  bezout.matrix[0][8][9] =
      _mm256_add_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[9][1]));
  bezout.matrix[0][8][9] =
      _mm256_add_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[9][0]));
  bezout.matrix[0][8][10] =
      _mm256_add_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[9][1]));
  bezout.matrix[0][8][10] =
      _mm256_add_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[9][0]));
  bezout.matrix[0][8][11] =
      _mm256_add_pd(bezout.matrix[0][8][11],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[9][1]));
  bezout.matrix[0][8][11] =
      _mm256_add_pd(bezout.matrix[0][8][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[9][0]));
  bezout.matrix[0][8][12] =
      _mm256_add_pd(bezout.matrix[0][8][12],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[9][1]));
  bezout.matrix[0][8][12] =
      _mm256_add_pd(bezout.matrix[0][8][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[9][0]));
  bezout.matrix[0][8][13] =
      _mm256_add_pd(bezout.matrix[0][8][13],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[9][1]));
  bezout.matrix[0][8][13] =
      _mm256_add_pd(bezout.matrix[0][8][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[9][0]));
  bezout.matrix[0][8][14] =
      _mm256_add_pd(bezout.matrix[0][8][14],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[9][1]));
  bezout.matrix[0][8][14] =
      _mm256_add_pd(bezout.matrix[0][8][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[9][0]));
  bezout.matrix[0][8][15] =
      _mm256_add_pd(bezout.matrix[0][8][15],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[9][1]));
  bezout.matrix[0][8][15] =
      _mm256_add_pd(bezout.matrix[0][8][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[9][0]));
  bezout.matrix[0][8][0] =
      _mm256_sub_pd(bezout.matrix[0][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][0]));
  bezout.matrix[0][8][1] =
      _mm256_sub_pd(bezout.matrix[0][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][1]));
  bezout.matrix[0][8][2] =
      _mm256_sub_pd(bezout.matrix[0][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][2]));
  bezout.matrix[0][8][3] =
      _mm256_sub_pd(bezout.matrix[0][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][3]));
  bezout.matrix[0][8][4] =
      _mm256_sub_pd(bezout.matrix[0][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][4]));
  bezout.matrix[0][8][5] =
      _mm256_sub_pd(bezout.matrix[0][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][5]));
  bezout.matrix[0][8][6] =
      _mm256_sub_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][6]));
  bezout.matrix[0][8][7] =
      _mm256_sub_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][7]));
  bezout.matrix[0][8][8] =
      _mm256_sub_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][8]));
  bezout.matrix[0][8][9] =
      _mm256_sub_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][9]));
  bezout.matrix[0][8][10] =
      _mm256_sub_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[0][10]));
  bezout.matrix[0][8][1] =
      _mm256_sub_pd(bezout.matrix[0][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][0]));
  bezout.matrix[0][8][2] =
      _mm256_sub_pd(bezout.matrix[0][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][1]));
  bezout.matrix[0][8][3] =
      _mm256_sub_pd(bezout.matrix[0][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][2]));
  bezout.matrix[0][8][4] =
      _mm256_sub_pd(bezout.matrix[0][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][3]));
  bezout.matrix[0][8][5] =
      _mm256_sub_pd(bezout.matrix[0][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][4]));
  bezout.matrix[0][8][6] =
      _mm256_sub_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][5]));
  bezout.matrix[0][8][7] =
      _mm256_sub_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][6]));
  bezout.matrix[0][8][8] =
      _mm256_sub_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][7]));
  bezout.matrix[0][8][9] =
      _mm256_sub_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][8]));
  bezout.matrix[0][8][10] =
      _mm256_sub_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][9]));
  bezout.matrix[0][8][11] =
      _mm256_sub_pd(bezout.matrix[0][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[0][10]));
  bezout.matrix[0][8][2] =
      _mm256_sub_pd(bezout.matrix[0][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][0]));
  bezout.matrix[0][8][3] =
      _mm256_sub_pd(bezout.matrix[0][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][1]));
  bezout.matrix[0][8][4] =
      _mm256_sub_pd(bezout.matrix[0][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][2]));
  bezout.matrix[0][8][5] =
      _mm256_sub_pd(bezout.matrix[0][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][3]));
  bezout.matrix[0][8][6] =
      _mm256_sub_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][4]));
  bezout.matrix[0][8][7] =
      _mm256_sub_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][5]));
  bezout.matrix[0][8][8] =
      _mm256_sub_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][6]));
  bezout.matrix[0][8][9] =
      _mm256_sub_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][7]));
  bezout.matrix[0][8][10] =
      _mm256_sub_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][8]));
  bezout.matrix[0][8][11] =
      _mm256_sub_pd(bezout.matrix[0][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][9]));
  bezout.matrix[0][8][12] =
      _mm256_sub_pd(bezout.matrix[0][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[0][10]));
  bezout.matrix[0][8][3] =
      _mm256_sub_pd(bezout.matrix[0][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][0]));
  bezout.matrix[0][8][4] =
      _mm256_sub_pd(bezout.matrix[0][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][1]));
  bezout.matrix[0][8][5] =
      _mm256_sub_pd(bezout.matrix[0][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][2]));
  bezout.matrix[0][8][6] =
      _mm256_sub_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][3]));
  bezout.matrix[0][8][7] =
      _mm256_sub_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][4]));
  bezout.matrix[0][8][8] =
      _mm256_sub_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][5]));
  bezout.matrix[0][8][9] =
      _mm256_sub_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][6]));
  bezout.matrix[0][8][10] =
      _mm256_sub_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][7]));
  bezout.matrix[0][8][11] =
      _mm256_sub_pd(bezout.matrix[0][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][8]));
  bezout.matrix[0][8][12] =
      _mm256_sub_pd(bezout.matrix[0][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][9]));
  bezout.matrix[0][8][13] =
      _mm256_sub_pd(bezout.matrix[0][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[0][10]));
  bezout.matrix[0][8][4] =
      _mm256_sub_pd(bezout.matrix[0][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][0]));
  bezout.matrix[0][8][5] =
      _mm256_sub_pd(bezout.matrix[0][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][1]));
  bezout.matrix[0][8][6] =
      _mm256_sub_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][2]));
  bezout.matrix[0][8][7] =
      _mm256_sub_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][3]));
  bezout.matrix[0][8][8] =
      _mm256_sub_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][4]));
  bezout.matrix[0][8][9] =
      _mm256_sub_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][5]));
  bezout.matrix[0][8][10] =
      _mm256_sub_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][6]));
  bezout.matrix[0][8][11] =
      _mm256_sub_pd(bezout.matrix[0][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][7]));
  bezout.matrix[0][8][12] =
      _mm256_sub_pd(bezout.matrix[0][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][8]));
  bezout.matrix[0][8][13] =
      _mm256_sub_pd(bezout.matrix[0][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][9]));
  bezout.matrix[0][8][14] =
      _mm256_sub_pd(bezout.matrix[0][8][14],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[0][10]));
  bezout.matrix[0][8][5] =
      _mm256_sub_pd(bezout.matrix[0][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][0]));
  bezout.matrix[0][8][6] =
      _mm256_sub_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][1]));
  bezout.matrix[0][8][7] =
      _mm256_sub_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][2]));
  bezout.matrix[0][8][8] =
      _mm256_sub_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][3]));
  bezout.matrix[0][8][9] =
      _mm256_sub_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][4]));
  bezout.matrix[0][8][10] =
      _mm256_sub_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][5]));
  bezout.matrix[0][8][11] =
      _mm256_sub_pd(bezout.matrix[0][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][6]));
  bezout.matrix[0][8][12] =
      _mm256_sub_pd(bezout.matrix[0][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][7]));
  bezout.matrix[0][8][13] =
      _mm256_sub_pd(bezout.matrix[0][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][8]));
  bezout.matrix[0][8][14] =
      _mm256_sub_pd(bezout.matrix[0][8][14],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][9]));
  bezout.matrix[0][8][15] =
      _mm256_sub_pd(bezout.matrix[0][8][15],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[0][10]));
  bezout.matrix[0][8][6] =
      _mm256_sub_pd(bezout.matrix[0][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][0]));
  bezout.matrix[0][8][7] =
      _mm256_sub_pd(bezout.matrix[0][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][1]));
  bezout.matrix[0][8][8] =
      _mm256_sub_pd(bezout.matrix[0][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][2]));
  bezout.matrix[0][8][9] =
      _mm256_sub_pd(bezout.matrix[0][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][3]));
  bezout.matrix[0][8][10] =
      _mm256_sub_pd(bezout.matrix[0][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][4]));
  bezout.matrix[0][8][11] =
      _mm256_sub_pd(bezout.matrix[0][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][5]));
  bezout.matrix[0][8][12] =
      _mm256_sub_pd(bezout.matrix[0][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][6]));
  bezout.matrix[0][8][13] =
      _mm256_sub_pd(bezout.matrix[0][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][7]));
  bezout.matrix[0][8][14] =
      _mm256_sub_pd(bezout.matrix[0][8][14],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][8]));
  bezout.matrix[0][8][15] =
      _mm256_sub_pd(bezout.matrix[0][8][15],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[0][9]));
  bezout.matrix[0][9][0] =
      _mm256_add_pd(bezout.matrix[0][9][0],
                    _mm256_mul_pd(poly1.coeffs[0][0], poly2.coeffs[10][0]));
  bezout.matrix[0][9][1] =
      _mm256_add_pd(bezout.matrix[0][9][1],
                    _mm256_mul_pd(poly1.coeffs[0][1], poly2.coeffs[10][0]));
  bezout.matrix[0][9][2] =
      _mm256_add_pd(bezout.matrix[0][9][2],
                    _mm256_mul_pd(poly1.coeffs[0][2], poly2.coeffs[10][0]));
  bezout.matrix[0][9][3] =
      _mm256_add_pd(bezout.matrix[0][9][3],
                    _mm256_mul_pd(poly1.coeffs[0][3], poly2.coeffs[10][0]));
  bezout.matrix[0][9][4] =
      _mm256_add_pd(bezout.matrix[0][9][4],
                    _mm256_mul_pd(poly1.coeffs[0][4], poly2.coeffs[10][0]));
  bezout.matrix[0][9][5] =
      _mm256_add_pd(bezout.matrix[0][9][5],
                    _mm256_mul_pd(poly1.coeffs[0][5], poly2.coeffs[10][0]));
  bezout.matrix[0][9][6] =
      _mm256_add_pd(bezout.matrix[0][9][6],
                    _mm256_mul_pd(poly1.coeffs[0][6], poly2.coeffs[10][0]));
  bezout.matrix[0][9][7] =
      _mm256_add_pd(bezout.matrix[0][9][7],
                    _mm256_mul_pd(poly1.coeffs[0][7], poly2.coeffs[10][0]));
  bezout.matrix[0][9][8] =
      _mm256_add_pd(bezout.matrix[0][9][8],
                    _mm256_mul_pd(poly1.coeffs[0][8], poly2.coeffs[10][0]));
  bezout.matrix[0][9][9] =
      _mm256_add_pd(bezout.matrix[0][9][9],
                    _mm256_mul_pd(poly1.coeffs[0][9], poly2.coeffs[10][0]));
  bezout.matrix[0][9][10] =
      _mm256_add_pd(bezout.matrix[0][9][10],
                    _mm256_mul_pd(poly1.coeffs[0][10], poly2.coeffs[10][0]));
  bezout.matrix[0][9][11] =
      _mm256_add_pd(bezout.matrix[0][9][11],
                    _mm256_mul_pd(poly1.coeffs[0][11], poly2.coeffs[10][0]));
  bezout.matrix[0][9][12] =
      _mm256_add_pd(bezout.matrix[0][9][12],
                    _mm256_mul_pd(poly1.coeffs[0][12], poly2.coeffs[10][0]));
  bezout.matrix[0][9][13] =
      _mm256_add_pd(bezout.matrix[0][9][13],
                    _mm256_mul_pd(poly1.coeffs[0][13], poly2.coeffs[10][0]));
  bezout.matrix[0][9][14] =
      _mm256_add_pd(bezout.matrix[0][9][14],
                    _mm256_mul_pd(poly1.coeffs[0][14], poly2.coeffs[10][0]));
  bezout.matrix[0][9][15] =
      _mm256_add_pd(bezout.matrix[0][9][15],
                    _mm256_mul_pd(poly1.coeffs[0][15], poly2.coeffs[10][0]));
  bezout.matrix[0][9][0] =
      _mm256_sub_pd(bezout.matrix[0][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][0]));
  bezout.matrix[0][9][1] =
      _mm256_sub_pd(bezout.matrix[0][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][1]));
  bezout.matrix[0][9][2] =
      _mm256_sub_pd(bezout.matrix[0][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][2]));
  bezout.matrix[0][9][3] =
      _mm256_sub_pd(bezout.matrix[0][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][3]));
  bezout.matrix[0][9][4] =
      _mm256_sub_pd(bezout.matrix[0][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][4]));
  bezout.matrix[0][9][5] =
      _mm256_sub_pd(bezout.matrix[0][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][5]));
  bezout.matrix[0][9][6] =
      _mm256_sub_pd(bezout.matrix[0][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][6]));
  bezout.matrix[0][9][7] =
      _mm256_sub_pd(bezout.matrix[0][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][7]));
  bezout.matrix[0][9][8] =
      _mm256_sub_pd(bezout.matrix[0][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][8]));
  bezout.matrix[0][9][9] =
      _mm256_sub_pd(bezout.matrix[0][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][9]));
  bezout.matrix[0][9][10] =
      _mm256_sub_pd(bezout.matrix[0][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[0][10]));
  bezout.matrix[0][9][1] =
      _mm256_sub_pd(bezout.matrix[0][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][0]));
  bezout.matrix[0][9][2] =
      _mm256_sub_pd(bezout.matrix[0][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][1]));
  bezout.matrix[0][9][3] =
      _mm256_sub_pd(bezout.matrix[0][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][2]));
  bezout.matrix[0][9][4] =
      _mm256_sub_pd(bezout.matrix[0][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][3]));
  bezout.matrix[0][9][5] =
      _mm256_sub_pd(bezout.matrix[0][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][4]));
  bezout.matrix[0][9][6] =
      _mm256_sub_pd(bezout.matrix[0][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][5]));
  bezout.matrix[0][9][7] =
      _mm256_sub_pd(bezout.matrix[0][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][6]));
  bezout.matrix[0][9][8] =
      _mm256_sub_pd(bezout.matrix[0][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][7]));
  bezout.matrix[0][9][9] =
      _mm256_sub_pd(bezout.matrix[0][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][8]));
  bezout.matrix[0][9][10] =
      _mm256_sub_pd(bezout.matrix[0][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][9]));
  bezout.matrix[0][9][11] =
      _mm256_sub_pd(bezout.matrix[0][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[0][10]));
  bezout.matrix[0][9][2] =
      _mm256_sub_pd(bezout.matrix[0][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][0]));
  bezout.matrix[0][9][3] =
      _mm256_sub_pd(bezout.matrix[0][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][1]));
  bezout.matrix[0][9][4] =
      _mm256_sub_pd(bezout.matrix[0][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][2]));
  bezout.matrix[0][9][5] =
      _mm256_sub_pd(bezout.matrix[0][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][3]));
  bezout.matrix[0][9][6] =
      _mm256_sub_pd(bezout.matrix[0][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][4]));
  bezout.matrix[0][9][7] =
      _mm256_sub_pd(bezout.matrix[0][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][5]));
  bezout.matrix[0][9][8] =
      _mm256_sub_pd(bezout.matrix[0][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][6]));
  bezout.matrix[0][9][9] =
      _mm256_sub_pd(bezout.matrix[0][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][7]));
  bezout.matrix[0][9][10] =
      _mm256_sub_pd(bezout.matrix[0][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][8]));
  bezout.matrix[0][9][11] =
      _mm256_sub_pd(bezout.matrix[0][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][9]));
  bezout.matrix[0][9][12] =
      _mm256_sub_pd(bezout.matrix[0][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[0][10]));
  bezout.matrix[0][9][3] =
      _mm256_sub_pd(bezout.matrix[0][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][0]));
  bezout.matrix[0][9][4] =
      _mm256_sub_pd(bezout.matrix[0][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][1]));
  bezout.matrix[0][9][5] =
      _mm256_sub_pd(bezout.matrix[0][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][2]));
  bezout.matrix[0][9][6] =
      _mm256_sub_pd(bezout.matrix[0][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][3]));
  bezout.matrix[0][9][7] =
      _mm256_sub_pd(bezout.matrix[0][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][4]));
  bezout.matrix[0][9][8] =
      _mm256_sub_pd(bezout.matrix[0][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][5]));
  bezout.matrix[0][9][9] =
      _mm256_sub_pd(bezout.matrix[0][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][6]));
  bezout.matrix[0][9][10] =
      _mm256_sub_pd(bezout.matrix[0][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][7]));
  bezout.matrix[0][9][11] =
      _mm256_sub_pd(bezout.matrix[0][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][8]));
  bezout.matrix[0][9][12] =
      _mm256_sub_pd(bezout.matrix[0][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][9]));
  bezout.matrix[0][9][13] =
      _mm256_sub_pd(bezout.matrix[0][9][13],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[0][10]));
  bezout.matrix[0][9][4] =
      _mm256_sub_pd(bezout.matrix[0][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][0]));
  bezout.matrix[0][9][5] =
      _mm256_sub_pd(bezout.matrix[0][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][1]));
  bezout.matrix[0][9][6] =
      _mm256_sub_pd(bezout.matrix[0][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][2]));
  bezout.matrix[0][9][7] =
      _mm256_sub_pd(bezout.matrix[0][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][3]));
  bezout.matrix[0][9][8] =
      _mm256_sub_pd(bezout.matrix[0][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][4]));
  bezout.matrix[0][9][9] =
      _mm256_sub_pd(bezout.matrix[0][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][5]));
  bezout.matrix[0][9][10] =
      _mm256_sub_pd(bezout.matrix[0][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][6]));
  bezout.matrix[0][9][11] =
      _mm256_sub_pd(bezout.matrix[0][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][7]));
  bezout.matrix[0][9][12] =
      _mm256_sub_pd(bezout.matrix[0][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][8]));
  bezout.matrix[0][9][13] =
      _mm256_sub_pd(bezout.matrix[0][9][13],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][9]));
  bezout.matrix[0][9][14] =
      _mm256_sub_pd(bezout.matrix[0][9][14],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[0][10]));
  bezout.matrix[0][9][5] =
      _mm256_sub_pd(bezout.matrix[0][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][0]));
  bezout.matrix[0][9][6] =
      _mm256_sub_pd(bezout.matrix[0][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][1]));
  bezout.matrix[0][9][7] =
      _mm256_sub_pd(bezout.matrix[0][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][2]));
  bezout.matrix[0][9][8] =
      _mm256_sub_pd(bezout.matrix[0][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][3]));
  bezout.matrix[0][9][9] =
      _mm256_sub_pd(bezout.matrix[0][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][4]));
  bezout.matrix[0][9][10] =
      _mm256_sub_pd(bezout.matrix[0][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][5]));
  bezout.matrix[0][9][11] =
      _mm256_sub_pd(bezout.matrix[0][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][6]));
  bezout.matrix[0][9][12] =
      _mm256_sub_pd(bezout.matrix[0][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][7]));
  bezout.matrix[0][9][13] =
      _mm256_sub_pd(bezout.matrix[0][9][13],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][8]));
  bezout.matrix[0][9][14] =
      _mm256_sub_pd(bezout.matrix[0][9][14],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][9]));
  bezout.matrix[0][9][15] =
      _mm256_sub_pd(bezout.matrix[0][9][15],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[0][10]));
  bezout.matrix[0][10][0] =
      _mm256_sub_pd(bezout.matrix[0][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][0]));
  bezout.matrix[0][10][1] =
      _mm256_sub_pd(bezout.matrix[0][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][1]));
  bezout.matrix[0][10][2] =
      _mm256_sub_pd(bezout.matrix[0][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][2]));
  bezout.matrix[0][10][3] =
      _mm256_sub_pd(bezout.matrix[0][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][3]));
  bezout.matrix[0][10][4] =
      _mm256_sub_pd(bezout.matrix[0][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][4]));
  bezout.matrix[0][10][5] =
      _mm256_sub_pd(bezout.matrix[0][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][5]));
  bezout.matrix[0][10][6] =
      _mm256_sub_pd(bezout.matrix[0][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][6]));
  bezout.matrix[0][10][7] =
      _mm256_sub_pd(bezout.matrix[0][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][7]));
  bezout.matrix[0][10][8] =
      _mm256_sub_pd(bezout.matrix[0][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][8]));
  bezout.matrix[0][10][9] =
      _mm256_sub_pd(bezout.matrix[0][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][9]));
  bezout.matrix[0][10][10] =
      _mm256_sub_pd(bezout.matrix[0][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[0][10]));
  bezout.matrix[0][10][1] =
      _mm256_sub_pd(bezout.matrix[0][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][0]));
  bezout.matrix[0][10][2] =
      _mm256_sub_pd(bezout.matrix[0][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][1]));
  bezout.matrix[0][10][3] =
      _mm256_sub_pd(bezout.matrix[0][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][2]));
  bezout.matrix[0][10][4] =
      _mm256_sub_pd(bezout.matrix[0][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][3]));
  bezout.matrix[0][10][5] =
      _mm256_sub_pd(bezout.matrix[0][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][4]));
  bezout.matrix[0][10][6] =
      _mm256_sub_pd(bezout.matrix[0][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][5]));
  bezout.matrix[0][10][7] =
      _mm256_sub_pd(bezout.matrix[0][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][6]));
  bezout.matrix[0][10][8] =
      _mm256_sub_pd(bezout.matrix[0][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][7]));
  bezout.matrix[0][10][9] =
      _mm256_sub_pd(bezout.matrix[0][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][8]));
  bezout.matrix[0][10][10] =
      _mm256_sub_pd(bezout.matrix[0][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][9]));
  bezout.matrix[0][10][11] =
      _mm256_sub_pd(bezout.matrix[0][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[0][10]));
  bezout.matrix[0][10][2] =
      _mm256_sub_pd(bezout.matrix[0][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][0]));
  bezout.matrix[0][10][3] =
      _mm256_sub_pd(bezout.matrix[0][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][1]));
  bezout.matrix[0][10][4] =
      _mm256_sub_pd(bezout.matrix[0][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][2]));
  bezout.matrix[0][10][5] =
      _mm256_sub_pd(bezout.matrix[0][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][3]));
  bezout.matrix[0][10][6] =
      _mm256_sub_pd(bezout.matrix[0][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][4]));
  bezout.matrix[0][10][7] =
      _mm256_sub_pd(bezout.matrix[0][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][5]));
  bezout.matrix[0][10][8] =
      _mm256_sub_pd(bezout.matrix[0][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][6]));
  bezout.matrix[0][10][9] =
      _mm256_sub_pd(bezout.matrix[0][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][7]));
  bezout.matrix[0][10][10] =
      _mm256_sub_pd(bezout.matrix[0][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][8]));
  bezout.matrix[0][10][11] =
      _mm256_sub_pd(bezout.matrix[0][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][9]));
  bezout.matrix[0][10][12] =
      _mm256_sub_pd(bezout.matrix[0][10][12],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[0][10]));
  bezout.matrix[0][10][3] =
      _mm256_sub_pd(bezout.matrix[0][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][0]));
  bezout.matrix[0][10][4] =
      _mm256_sub_pd(bezout.matrix[0][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][1]));
  bezout.matrix[0][10][5] =
      _mm256_sub_pd(bezout.matrix[0][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][2]));
  bezout.matrix[0][10][6] =
      _mm256_sub_pd(bezout.matrix[0][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][3]));
  bezout.matrix[0][10][7] =
      _mm256_sub_pd(bezout.matrix[0][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][4]));
  bezout.matrix[0][10][8] =
      _mm256_sub_pd(bezout.matrix[0][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][5]));
  bezout.matrix[0][10][9] =
      _mm256_sub_pd(bezout.matrix[0][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][6]));
  bezout.matrix[0][10][10] =
      _mm256_sub_pd(bezout.matrix[0][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][7]));
  bezout.matrix[0][10][11] =
      _mm256_sub_pd(bezout.matrix[0][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][8]));
  bezout.matrix[0][10][12] =
      _mm256_sub_pd(bezout.matrix[0][10][12],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][9]));
  bezout.matrix[0][10][13] =
      _mm256_sub_pd(bezout.matrix[0][10][13],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[0][10]));
  bezout.matrix[0][10][4] =
      _mm256_sub_pd(bezout.matrix[0][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][0]));
  bezout.matrix[0][10][5] =
      _mm256_sub_pd(bezout.matrix[0][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][1]));
  bezout.matrix[0][10][6] =
      _mm256_sub_pd(bezout.matrix[0][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][2]));
  bezout.matrix[0][10][7] =
      _mm256_sub_pd(bezout.matrix[0][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][3]));
  bezout.matrix[0][10][8] =
      _mm256_sub_pd(bezout.matrix[0][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][4]));
  bezout.matrix[0][10][9] =
      _mm256_sub_pd(bezout.matrix[0][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][5]));
  bezout.matrix[0][10][10] =
      _mm256_sub_pd(bezout.matrix[0][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][6]));
  bezout.matrix[0][10][11] =
      _mm256_sub_pd(bezout.matrix[0][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][7]));
  bezout.matrix[0][10][12] =
      _mm256_sub_pd(bezout.matrix[0][10][12],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][8]));
  bezout.matrix[0][10][13] =
      _mm256_sub_pd(bezout.matrix[0][10][13],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][9]));
  bezout.matrix[0][10][14] =
      _mm256_sub_pd(bezout.matrix[0][10][14],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[0][10]));
  bezout.matrix[0][11][0] =
      _mm256_sub_pd(bezout.matrix[0][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][0]));
  bezout.matrix[0][11][1] =
      _mm256_sub_pd(bezout.matrix[0][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][1]));
  bezout.matrix[0][11][2] =
      _mm256_sub_pd(bezout.matrix[0][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][2]));
  bezout.matrix[0][11][3] =
      _mm256_sub_pd(bezout.matrix[0][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][3]));
  bezout.matrix[0][11][4] =
      _mm256_sub_pd(bezout.matrix[0][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][4]));
  bezout.matrix[0][11][5] =
      _mm256_sub_pd(bezout.matrix[0][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][5]));
  bezout.matrix[0][11][6] =
      _mm256_sub_pd(bezout.matrix[0][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][6]));
  bezout.matrix[0][11][7] =
      _mm256_sub_pd(bezout.matrix[0][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][7]));
  bezout.matrix[0][11][8] =
      _mm256_sub_pd(bezout.matrix[0][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][8]));
  bezout.matrix[0][11][9] =
      _mm256_sub_pd(bezout.matrix[0][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][9]));
  bezout.matrix[0][11][10] =
      _mm256_sub_pd(bezout.matrix[0][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[0][10]));
  bezout.matrix[0][11][1] =
      _mm256_sub_pd(bezout.matrix[0][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][0]));
  bezout.matrix[0][11][2] =
      _mm256_sub_pd(bezout.matrix[0][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][1]));
  bezout.matrix[0][11][3] =
      _mm256_sub_pd(bezout.matrix[0][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][2]));
  bezout.matrix[0][11][4] =
      _mm256_sub_pd(bezout.matrix[0][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][3]));
  bezout.matrix[0][11][5] =
      _mm256_sub_pd(bezout.matrix[0][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][4]));
  bezout.matrix[0][11][6] =
      _mm256_sub_pd(bezout.matrix[0][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][5]));
  bezout.matrix[0][11][7] =
      _mm256_sub_pd(bezout.matrix[0][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][6]));
  bezout.matrix[0][11][8] =
      _mm256_sub_pd(bezout.matrix[0][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][7]));
  bezout.matrix[0][11][9] =
      _mm256_sub_pd(bezout.matrix[0][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][8]));
  bezout.matrix[0][11][10] =
      _mm256_sub_pd(bezout.matrix[0][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][9]));
  bezout.matrix[0][11][11] =
      _mm256_sub_pd(bezout.matrix[0][11][11],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[0][10]));
  bezout.matrix[0][11][2] =
      _mm256_sub_pd(bezout.matrix[0][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][0]));
  bezout.matrix[0][11][3] =
      _mm256_sub_pd(bezout.matrix[0][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][1]));
  bezout.matrix[0][11][4] =
      _mm256_sub_pd(bezout.matrix[0][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][2]));
  bezout.matrix[0][11][5] =
      _mm256_sub_pd(bezout.matrix[0][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][3]));
  bezout.matrix[0][11][6] =
      _mm256_sub_pd(bezout.matrix[0][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][4]));
  bezout.matrix[0][11][7] =
      _mm256_sub_pd(bezout.matrix[0][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][5]));
  bezout.matrix[0][11][8] =
      _mm256_sub_pd(bezout.matrix[0][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][6]));
  bezout.matrix[0][11][9] =
      _mm256_sub_pd(bezout.matrix[0][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][7]));
  bezout.matrix[0][11][10] =
      _mm256_sub_pd(bezout.matrix[0][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][8]));
  bezout.matrix[0][11][11] =
      _mm256_sub_pd(bezout.matrix[0][11][11],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][9]));
  bezout.matrix[0][11][12] =
      _mm256_sub_pd(bezout.matrix[0][11][12],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[0][10]));
  bezout.matrix[0][11][3] =
      _mm256_sub_pd(bezout.matrix[0][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][0]));
  bezout.matrix[0][11][4] =
      _mm256_sub_pd(bezout.matrix[0][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][1]));
  bezout.matrix[0][11][5] =
      _mm256_sub_pd(bezout.matrix[0][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][2]));
  bezout.matrix[0][11][6] =
      _mm256_sub_pd(bezout.matrix[0][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][3]));
  bezout.matrix[0][11][7] =
      _mm256_sub_pd(bezout.matrix[0][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][4]));
  bezout.matrix[0][11][8] =
      _mm256_sub_pd(bezout.matrix[0][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][5]));
  bezout.matrix[0][11][9] =
      _mm256_sub_pd(bezout.matrix[0][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][6]));
  bezout.matrix[0][11][10] =
      _mm256_sub_pd(bezout.matrix[0][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][7]));
  bezout.matrix[0][11][11] =
      _mm256_sub_pd(bezout.matrix[0][11][11],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][8]));
  bezout.matrix[0][11][12] =
      _mm256_sub_pd(bezout.matrix[0][11][12],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][9]));
  bezout.matrix[0][11][13] =
      _mm256_sub_pd(bezout.matrix[0][11][13],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[0][10]));
  bezout.matrix[0][12][0] =
      _mm256_sub_pd(bezout.matrix[0][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][0]));
  bezout.matrix[0][12][1] =
      _mm256_sub_pd(bezout.matrix[0][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][1]));
  bezout.matrix[0][12][2] =
      _mm256_sub_pd(bezout.matrix[0][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][2]));
  bezout.matrix[0][12][3] =
      _mm256_sub_pd(bezout.matrix[0][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][3]));
  bezout.matrix[0][12][4] =
      _mm256_sub_pd(bezout.matrix[0][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][4]));
  bezout.matrix[0][12][5] =
      _mm256_sub_pd(bezout.matrix[0][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][5]));
  bezout.matrix[0][12][6] =
      _mm256_sub_pd(bezout.matrix[0][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][6]));
  bezout.matrix[0][12][7] =
      _mm256_sub_pd(bezout.matrix[0][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][7]));
  bezout.matrix[0][12][8] =
      _mm256_sub_pd(bezout.matrix[0][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][8]));
  bezout.matrix[0][12][9] =
      _mm256_sub_pd(bezout.matrix[0][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][9]));
  bezout.matrix[0][12][10] =
      _mm256_sub_pd(bezout.matrix[0][12][10],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[0][10]));
  bezout.matrix[0][12][1] =
      _mm256_sub_pd(bezout.matrix[0][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][0]));
  bezout.matrix[0][12][2] =
      _mm256_sub_pd(bezout.matrix[0][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][1]));
  bezout.matrix[0][12][3] =
      _mm256_sub_pd(bezout.matrix[0][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][2]));
  bezout.matrix[0][12][4] =
      _mm256_sub_pd(bezout.matrix[0][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][3]));
  bezout.matrix[0][12][5] =
      _mm256_sub_pd(bezout.matrix[0][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][4]));
  bezout.matrix[0][12][6] =
      _mm256_sub_pd(bezout.matrix[0][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][5]));
  bezout.matrix[0][12][7] =
      _mm256_sub_pd(bezout.matrix[0][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][6]));
  bezout.matrix[0][12][8] =
      _mm256_sub_pd(bezout.matrix[0][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][7]));
  bezout.matrix[0][12][9] =
      _mm256_sub_pd(bezout.matrix[0][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][8]));
  bezout.matrix[0][12][10] =
      _mm256_sub_pd(bezout.matrix[0][12][10],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][9]));
  bezout.matrix[0][12][11] =
      _mm256_sub_pd(bezout.matrix[0][12][11],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[0][10]));
  bezout.matrix[0][12][2] =
      _mm256_sub_pd(bezout.matrix[0][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][0]));
  bezout.matrix[0][12][3] =
      _mm256_sub_pd(bezout.matrix[0][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][1]));
  bezout.matrix[0][12][4] =
      _mm256_sub_pd(bezout.matrix[0][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][2]));
  bezout.matrix[0][12][5] =
      _mm256_sub_pd(bezout.matrix[0][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][3]));
  bezout.matrix[0][12][6] =
      _mm256_sub_pd(bezout.matrix[0][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][4]));
  bezout.matrix[0][12][7] =
      _mm256_sub_pd(bezout.matrix[0][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][5]));
  bezout.matrix[0][12][8] =
      _mm256_sub_pd(bezout.matrix[0][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][6]));
  bezout.matrix[0][12][9] =
      _mm256_sub_pd(bezout.matrix[0][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][7]));
  bezout.matrix[0][12][10] =
      _mm256_sub_pd(bezout.matrix[0][12][10],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][8]));
  bezout.matrix[0][12][11] =
      _mm256_sub_pd(bezout.matrix[0][12][11],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][9]));
  bezout.matrix[0][12][12] =
      _mm256_sub_pd(bezout.matrix[0][12][12],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[0][10]));
  bezout.matrix[0][13][0] =
      _mm256_sub_pd(bezout.matrix[0][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][0]));
  bezout.matrix[0][13][1] =
      _mm256_sub_pd(bezout.matrix[0][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][1]));
  bezout.matrix[0][13][2] =
      _mm256_sub_pd(bezout.matrix[0][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][2]));
  bezout.matrix[0][13][3] =
      _mm256_sub_pd(bezout.matrix[0][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][3]));
  bezout.matrix[0][13][4] =
      _mm256_sub_pd(bezout.matrix[0][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][4]));
  bezout.matrix[0][13][5] =
      _mm256_sub_pd(bezout.matrix[0][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][5]));
  bezout.matrix[0][13][6] =
      _mm256_sub_pd(bezout.matrix[0][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][6]));
  bezout.matrix[0][13][7] =
      _mm256_sub_pd(bezout.matrix[0][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][7]));
  bezout.matrix[0][13][8] =
      _mm256_sub_pd(bezout.matrix[0][13][8],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][8]));
  bezout.matrix[0][13][9] =
      _mm256_sub_pd(bezout.matrix[0][13][9],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][9]));
  bezout.matrix[0][13][10] =
      _mm256_sub_pd(bezout.matrix[0][13][10],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[0][10]));
  bezout.matrix[0][13][1] =
      _mm256_sub_pd(bezout.matrix[0][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][0]));
  bezout.matrix[0][13][2] =
      _mm256_sub_pd(bezout.matrix[0][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][1]));
  bezout.matrix[0][13][3] =
      _mm256_sub_pd(bezout.matrix[0][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][2]));
  bezout.matrix[0][13][4] =
      _mm256_sub_pd(bezout.matrix[0][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][3]));
  bezout.matrix[0][13][5] =
      _mm256_sub_pd(bezout.matrix[0][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][4]));
  bezout.matrix[0][13][6] =
      _mm256_sub_pd(bezout.matrix[0][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][5]));
  bezout.matrix[0][13][7] =
      _mm256_sub_pd(bezout.matrix[0][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][6]));
  bezout.matrix[0][13][8] =
      _mm256_sub_pd(bezout.matrix[0][13][8],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][7]));
  bezout.matrix[0][13][9] =
      _mm256_sub_pd(bezout.matrix[0][13][9],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][8]));
  bezout.matrix[0][13][10] =
      _mm256_sub_pd(bezout.matrix[0][13][10],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][9]));
  bezout.matrix[0][13][11] =
      _mm256_sub_pd(bezout.matrix[0][13][11],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[0][10]));
  bezout.matrix[0][14][0] =
      _mm256_sub_pd(bezout.matrix[0][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][0]));
  bezout.matrix[0][14][1] =
      _mm256_sub_pd(bezout.matrix[0][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][1]));
  bezout.matrix[0][14][2] =
      _mm256_sub_pd(bezout.matrix[0][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][2]));
  bezout.matrix[0][14][3] =
      _mm256_sub_pd(bezout.matrix[0][14][3],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][3]));
  bezout.matrix[0][14][4] =
      _mm256_sub_pd(bezout.matrix[0][14][4],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][4]));
  bezout.matrix[0][14][5] =
      _mm256_sub_pd(bezout.matrix[0][14][5],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][5]));
  bezout.matrix[0][14][6] =
      _mm256_sub_pd(bezout.matrix[0][14][6],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][6]));
  bezout.matrix[0][14][7] =
      _mm256_sub_pd(bezout.matrix[0][14][7],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][7]));
  bezout.matrix[0][14][8] =
      _mm256_sub_pd(bezout.matrix[0][14][8],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][8]));
  bezout.matrix[0][14][9] =
      _mm256_sub_pd(bezout.matrix[0][14][9],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][9]));
  bezout.matrix[0][14][10] =
      _mm256_sub_pd(bezout.matrix[0][14][10],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[0][10]));
  bezout.matrix[1][1][0] =
      _mm256_add_pd(bezout.matrix[1][1][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][0]));
  bezout.matrix[1][1][1] =
      _mm256_add_pd(bezout.matrix[1][1][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][1]));
  bezout.matrix[1][1][2] =
      _mm256_add_pd(bezout.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][2]));
  bezout.matrix[1][1][3] =
      _mm256_add_pd(bezout.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][3]));
  bezout.matrix[1][1][4] =
      _mm256_add_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][4]));
  bezout.matrix[1][1][5] =
      _mm256_add_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][5]));
  bezout.matrix[1][1][6] =
      _mm256_add_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][6]));
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][7]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[2][8]));
  bezout.matrix[1][1][1] =
      _mm256_add_pd(bezout.matrix[1][1][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][0]));
  bezout.matrix[1][1][2] =
      _mm256_add_pd(bezout.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][1]));
  bezout.matrix[1][1][3] =
      _mm256_add_pd(bezout.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][2]));
  bezout.matrix[1][1][4] =
      _mm256_add_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][3]));
  bezout.matrix[1][1][5] =
      _mm256_add_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][4]));
  bezout.matrix[1][1][6] =
      _mm256_add_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][5]));
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][6]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][7]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[2][8]));
  bezout.matrix[1][1][2] =
      _mm256_add_pd(bezout.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][0]));
  bezout.matrix[1][1][3] =
      _mm256_add_pd(bezout.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][1]));
  bezout.matrix[1][1][4] =
      _mm256_add_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][2]));
  bezout.matrix[1][1][5] =
      _mm256_add_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][3]));
  bezout.matrix[1][1][6] =
      _mm256_add_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][4]));
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][5]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][6]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][7]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[2][8]));
  bezout.matrix[1][1][3] =
      _mm256_add_pd(bezout.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][0]));
  bezout.matrix[1][1][4] =
      _mm256_add_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][1]));
  bezout.matrix[1][1][5] =
      _mm256_add_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][2]));
  bezout.matrix[1][1][6] =
      _mm256_add_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][3]));
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][4]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][5]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][6]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][7]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[2][8]));
  bezout.matrix[1][1][4] =
      _mm256_add_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][0]));
  bezout.matrix[1][1][5] =
      _mm256_add_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][1]));
  bezout.matrix[1][1][6] =
      _mm256_add_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][2]));
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][3]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][4]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][5]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][6]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][7]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[2][8]));
  bezout.matrix[1][1][5] =
      _mm256_add_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][0]));
  bezout.matrix[1][1][6] =
      _mm256_add_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][1]));
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][2]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][3]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][4]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][5]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][6]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][7]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[2][8]));
  bezout.matrix[1][1][6] =
      _mm256_add_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][0]));
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][1]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][2]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][3]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][4]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][5]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][6]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][7]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[2][8]));
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][0]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][1]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][2]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][3]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][4]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][5]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][6]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][7]));
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[2][8]));
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[2][0]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[2][1]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[2][2]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[2][3]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[2][4]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[2][5]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[2][6]));
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[2][7]));
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[2][0]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[2][1]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[2][2]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[2][3]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[2][4]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[2][5]));
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[2][6]));
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[2][0]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[2][1]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[2][2]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[2][3]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[2][4]));
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[2][5]));
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[2][0]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[2][1]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[2][2]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[2][3]));
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[2][4]));
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[2][0]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[2][1]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[2][2]));
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[2][3]));
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[2][0]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[2][1]));
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[2][2]));
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[2][0]));
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[2][1]));
  bezout.matrix[1][1][0] =
      _mm256_sub_pd(bezout.matrix[1][1][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][0]));
  bezout.matrix[1][1][1] =
      _mm256_sub_pd(bezout.matrix[1][1][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][1]));
  bezout.matrix[1][1][2] =
      _mm256_sub_pd(bezout.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][2]));
  bezout.matrix[1][1][3] =
      _mm256_sub_pd(bezout.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][3]));
  bezout.matrix[1][1][4] =
      _mm256_sub_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][4]));
  bezout.matrix[1][1][5] =
      _mm256_sub_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][5]));
  bezout.matrix[1][1][6] =
      _mm256_sub_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][6]));
  bezout.matrix[1][1][7] =
      _mm256_sub_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][7]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][8]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[1][9]));
  bezout.matrix[1][1][1] =
      _mm256_sub_pd(bezout.matrix[1][1][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][0]));
  bezout.matrix[1][1][2] =
      _mm256_sub_pd(bezout.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][1]));
  bezout.matrix[1][1][3] =
      _mm256_sub_pd(bezout.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][2]));
  bezout.matrix[1][1][4] =
      _mm256_sub_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][3]));
  bezout.matrix[1][1][5] =
      _mm256_sub_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][4]));
  bezout.matrix[1][1][6] =
      _mm256_sub_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][5]));
  bezout.matrix[1][1][7] =
      _mm256_sub_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][6]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][7]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][8]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[1][9]));
  bezout.matrix[1][1][2] =
      _mm256_sub_pd(bezout.matrix[1][1][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][0]));
  bezout.matrix[1][1][3] =
      _mm256_sub_pd(bezout.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][1]));
  bezout.matrix[1][1][4] =
      _mm256_sub_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][2]));
  bezout.matrix[1][1][5] =
      _mm256_sub_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][3]));
  bezout.matrix[1][1][6] =
      _mm256_sub_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][4]));
  bezout.matrix[1][1][7] =
      _mm256_sub_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][5]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][6]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][7]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][8]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[1][9]));
  bezout.matrix[1][1][3] =
      _mm256_sub_pd(bezout.matrix[1][1][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][0]));
  bezout.matrix[1][1][4] =
      _mm256_sub_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][1]));
  bezout.matrix[1][1][5] =
      _mm256_sub_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][2]));
  bezout.matrix[1][1][6] =
      _mm256_sub_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][3]));
  bezout.matrix[1][1][7] =
      _mm256_sub_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][4]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][5]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][6]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][7]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][8]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[1][9]));
  bezout.matrix[1][1][4] =
      _mm256_sub_pd(bezout.matrix[1][1][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][0]));
  bezout.matrix[1][1][5] =
      _mm256_sub_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][1]));
  bezout.matrix[1][1][6] =
      _mm256_sub_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][2]));
  bezout.matrix[1][1][7] =
      _mm256_sub_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][3]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][4]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][5]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][6]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][7]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][8]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[1][9]));
  bezout.matrix[1][1][5] =
      _mm256_sub_pd(bezout.matrix[1][1][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][0]));
  bezout.matrix[1][1][6] =
      _mm256_sub_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][1]));
  bezout.matrix[1][1][7] =
      _mm256_sub_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][2]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][3]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][4]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][5]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][6]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][7]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][8]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[1][9]));
  bezout.matrix[1][1][6] =
      _mm256_sub_pd(bezout.matrix[1][1][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][0]));
  bezout.matrix[1][1][7] =
      _mm256_sub_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][1]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][2]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][3]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][4]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][5]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][6]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][7]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][8]));
  bezout.matrix[1][1][15] =
      _mm256_sub_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[1][9]));
  bezout.matrix[1][1][7] =
      _mm256_sub_pd(bezout.matrix[1][1][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][0]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][1]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][2]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][3]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][4]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][5]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][6]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][7]));
  bezout.matrix[1][1][15] =
      _mm256_sub_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[1][8]));
  bezout.matrix[1][1][8] =
      _mm256_sub_pd(bezout.matrix[1][1][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[1][0]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[1][1]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[1][2]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[1][3]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[1][4]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[1][5]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[1][6]));
  bezout.matrix[1][1][15] =
      _mm256_sub_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[1][7]));
  bezout.matrix[1][1][9] =
      _mm256_sub_pd(bezout.matrix[1][1][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[1][0]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[1][1]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[1][2]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[1][3]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[1][4]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[1][5]));
  bezout.matrix[1][1][15] =
      _mm256_sub_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[1][6]));
  bezout.matrix[1][1][10] =
      _mm256_sub_pd(bezout.matrix[1][1][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[1][0]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[1][1]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[1][2]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[1][3]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[1][4]));
  bezout.matrix[1][1][15] =
      _mm256_sub_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[1][5]));
  bezout.matrix[1][1][11] =
      _mm256_sub_pd(bezout.matrix[1][1][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[1][0]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[1][1]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[1][2]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[1][3]));
  bezout.matrix[1][1][15] =
      _mm256_sub_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[1][4]));
  bezout.matrix[1][1][12] =
      _mm256_sub_pd(bezout.matrix[1][1][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[1][0]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[1][1]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[1][2]));
  bezout.matrix[1][1][15] =
      _mm256_sub_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[1][3]));
  bezout.matrix[1][1][13] =
      _mm256_sub_pd(bezout.matrix[1][1][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[1][0]));
  bezout.matrix[1][1][14] =
      _mm256_sub_pd(bezout.matrix[1][1][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[1][1]));
  bezout.matrix[1][1][15] =
      _mm256_sub_pd(bezout.matrix[1][1][15],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[1][2]));
  bezout.matrix[1][2][0] =
      _mm256_add_pd(bezout.matrix[1][2][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[3][0]));
  bezout.matrix[1][2][1] =
      _mm256_add_pd(bezout.matrix[1][2][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[3][1]));
  bezout.matrix[1][2][2] =
      _mm256_add_pd(bezout.matrix[1][2][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[3][2]));
  bezout.matrix[1][2][3] =
      _mm256_add_pd(bezout.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[3][3]));
  bezout.matrix[1][2][4] =
      _mm256_add_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[3][4]));
  bezout.matrix[1][2][5] =
      _mm256_add_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[3][5]));
  bezout.matrix[1][2][6] =
      _mm256_add_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[3][6]));
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[3][7]));
  bezout.matrix[1][2][1] =
      _mm256_add_pd(bezout.matrix[1][2][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[3][0]));
  bezout.matrix[1][2][2] =
      _mm256_add_pd(bezout.matrix[1][2][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[3][1]));
  bezout.matrix[1][2][3] =
      _mm256_add_pd(bezout.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[3][2]));
  bezout.matrix[1][2][4] =
      _mm256_add_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[3][3]));
  bezout.matrix[1][2][5] =
      _mm256_add_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[3][4]));
  bezout.matrix[1][2][6] =
      _mm256_add_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[3][5]));
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[3][6]));
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[3][7]));
  bezout.matrix[1][2][2] =
      _mm256_add_pd(bezout.matrix[1][2][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[3][0]));
  bezout.matrix[1][2][3] =
      _mm256_add_pd(bezout.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[3][1]));
  bezout.matrix[1][2][4] =
      _mm256_add_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[3][2]));
  bezout.matrix[1][2][5] =
      _mm256_add_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[3][3]));
  bezout.matrix[1][2][6] =
      _mm256_add_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[3][4]));
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[3][5]));
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[3][6]));
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[3][7]));
  bezout.matrix[1][2][3] =
      _mm256_add_pd(bezout.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[3][0]));
  bezout.matrix[1][2][4] =
      _mm256_add_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[3][1]));
  bezout.matrix[1][2][5] =
      _mm256_add_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[3][2]));
  bezout.matrix[1][2][6] =
      _mm256_add_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[3][3]));
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[3][4]));
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[3][5]));
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[3][6]));
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[3][7]));
  bezout.matrix[1][2][4] =
      _mm256_add_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[3][0]));
  bezout.matrix[1][2][5] =
      _mm256_add_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[3][1]));
  bezout.matrix[1][2][6] =
      _mm256_add_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[3][2]));
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[3][3]));
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[3][4]));
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[3][5]));
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[3][6]));
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[3][7]));
  bezout.matrix[1][2][5] =
      _mm256_add_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[3][0]));
  bezout.matrix[1][2][6] =
      _mm256_add_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[3][1]));
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[3][2]));
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[3][3]));
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[3][4]));
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[3][5]));
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[3][6]));
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[3][7]));
  bezout.matrix[1][2][6] =
      _mm256_add_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[3][0]));
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[3][1]));
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[3][2]));
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[3][3]));
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[3][4]));
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[3][5]));
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[3][6]));
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[3][7]));
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[3][0]));
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[3][1]));
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[3][2]));
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[3][3]));
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[3][4]));
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[3][5]));
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[3][6]));
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[3][7]));
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[3][0]));
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[3][1]));
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[3][2]));
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[3][3]));
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[3][4]));
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[3][5]));
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[3][6]));
  bezout.matrix[1][2][15] =
      _mm256_add_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[3][7]));
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[3][0]));
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[3][1]));
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[3][2]));
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[3][3]));
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[3][4]));
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[3][5]));
  bezout.matrix[1][2][15] =
      _mm256_add_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[3][6]));
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[3][0]));
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[3][1]));
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[3][2]));
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[3][3]));
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[3][4]));
  bezout.matrix[1][2][15] =
      _mm256_add_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[3][5]));
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[3][0]));
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[3][1]));
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[3][2]));
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[3][3]));
  bezout.matrix[1][2][15] =
      _mm256_add_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[3][4]));
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[3][0]));
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[3][1]));
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[3][2]));
  bezout.matrix[1][2][15] =
      _mm256_add_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[3][3]));
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[3][0]));
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[3][1]));
  bezout.matrix[1][2][15] =
      _mm256_add_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[3][2]));
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[3][0]));
  bezout.matrix[1][2][15] =
      _mm256_add_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[3][1]));
  bezout.matrix[1][2][0] =
      _mm256_sub_pd(bezout.matrix[1][2][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][0]));
  bezout.matrix[1][2][1] =
      _mm256_sub_pd(bezout.matrix[1][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][1]));
  bezout.matrix[1][2][2] =
      _mm256_sub_pd(bezout.matrix[1][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][2]));
  bezout.matrix[1][2][3] =
      _mm256_sub_pd(bezout.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][3]));
  bezout.matrix[1][2][4] =
      _mm256_sub_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][4]));
  bezout.matrix[1][2][5] =
      _mm256_sub_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][5]));
  bezout.matrix[1][2][6] =
      _mm256_sub_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][6]));
  bezout.matrix[1][2][7] =
      _mm256_sub_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][7]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][8]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[1][9]));
  bezout.matrix[1][2][1] =
      _mm256_sub_pd(bezout.matrix[1][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][0]));
  bezout.matrix[1][2][2] =
      _mm256_sub_pd(bezout.matrix[1][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][1]));
  bezout.matrix[1][2][3] =
      _mm256_sub_pd(bezout.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][2]));
  bezout.matrix[1][2][4] =
      _mm256_sub_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][3]));
  bezout.matrix[1][2][5] =
      _mm256_sub_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][4]));
  bezout.matrix[1][2][6] =
      _mm256_sub_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][5]));
  bezout.matrix[1][2][7] =
      _mm256_sub_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][6]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][7]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][8]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[1][9]));
  bezout.matrix[1][2][2] =
      _mm256_sub_pd(bezout.matrix[1][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][0]));
  bezout.matrix[1][2][3] =
      _mm256_sub_pd(bezout.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][1]));
  bezout.matrix[1][2][4] =
      _mm256_sub_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][2]));
  bezout.matrix[1][2][5] =
      _mm256_sub_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][3]));
  bezout.matrix[1][2][6] =
      _mm256_sub_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][4]));
  bezout.matrix[1][2][7] =
      _mm256_sub_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][5]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][6]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][7]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][8]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[1][9]));
  bezout.matrix[1][2][3] =
      _mm256_sub_pd(bezout.matrix[1][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][0]));
  bezout.matrix[1][2][4] =
      _mm256_sub_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][1]));
  bezout.matrix[1][2][5] =
      _mm256_sub_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][2]));
  bezout.matrix[1][2][6] =
      _mm256_sub_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][3]));
  bezout.matrix[1][2][7] =
      _mm256_sub_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][4]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][5]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][6]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][7]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][8]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[1][9]));
  bezout.matrix[1][2][4] =
      _mm256_sub_pd(bezout.matrix[1][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][0]));
  bezout.matrix[1][2][5] =
      _mm256_sub_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][1]));
  bezout.matrix[1][2][6] =
      _mm256_sub_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][2]));
  bezout.matrix[1][2][7] =
      _mm256_sub_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][3]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][4]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][5]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][6]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][7]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][8]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[1][9]));
  bezout.matrix[1][2][5] =
      _mm256_sub_pd(bezout.matrix[1][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][0]));
  bezout.matrix[1][2][6] =
      _mm256_sub_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][1]));
  bezout.matrix[1][2][7] =
      _mm256_sub_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][2]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][3]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][4]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][5]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][6]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][7]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][8]));
  bezout.matrix[1][2][14] =
      _mm256_sub_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[1][9]));
  bezout.matrix[1][2][6] =
      _mm256_sub_pd(bezout.matrix[1][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][0]));
  bezout.matrix[1][2][7] =
      _mm256_sub_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][1]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][2]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][3]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][4]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][5]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][6]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][7]));
  bezout.matrix[1][2][14] =
      _mm256_sub_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][8]));
  bezout.matrix[1][2][15] =
      _mm256_sub_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[1][9]));
  bezout.matrix[1][2][7] =
      _mm256_sub_pd(bezout.matrix[1][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][0]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][1]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][2]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][3]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][4]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][5]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][6]));
  bezout.matrix[1][2][14] =
      _mm256_sub_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][7]));
  bezout.matrix[1][2][15] =
      _mm256_sub_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[1][8]));
  bezout.matrix[1][2][8] =
      _mm256_sub_pd(bezout.matrix[1][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[1][0]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[1][1]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[1][2]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[1][3]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[1][4]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[1][5]));
  bezout.matrix[1][2][14] =
      _mm256_sub_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[1][6]));
  bezout.matrix[1][2][15] =
      _mm256_sub_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[1][7]));
  bezout.matrix[1][2][9] =
      _mm256_sub_pd(bezout.matrix[1][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[1][0]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[1][1]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[1][2]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[1][3]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[1][4]));
  bezout.matrix[1][2][14] =
      _mm256_sub_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[1][5]));
  bezout.matrix[1][2][15] =
      _mm256_sub_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[1][6]));
  bezout.matrix[1][2][10] =
      _mm256_sub_pd(bezout.matrix[1][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[1][0]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[1][1]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[1][2]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[1][3]));
  bezout.matrix[1][2][14] =
      _mm256_sub_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[1][4]));
  bezout.matrix[1][2][15] =
      _mm256_sub_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[1][5]));
  bezout.matrix[1][2][11] =
      _mm256_sub_pd(bezout.matrix[1][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[1][0]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[1][1]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[1][2]));
  bezout.matrix[1][2][14] =
      _mm256_sub_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[1][3]));
  bezout.matrix[1][2][15] =
      _mm256_sub_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[1][4]));
  bezout.matrix[1][2][12] =
      _mm256_sub_pd(bezout.matrix[1][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[1][0]));
  bezout.matrix[1][2][13] =
      _mm256_sub_pd(bezout.matrix[1][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[1][1]));
  bezout.matrix[1][2][14] =
      _mm256_sub_pd(bezout.matrix[1][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[1][2]));
  bezout.matrix[1][2][15] =
      _mm256_sub_pd(bezout.matrix[1][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[1][3]));
  bezout.matrix[1][3][0] =
      _mm256_add_pd(bezout.matrix[1][3][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[4][0]));
  bezout.matrix[1][3][1] =
      _mm256_add_pd(bezout.matrix[1][3][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[4][1]));
  bezout.matrix[1][3][2] =
      _mm256_add_pd(bezout.matrix[1][3][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[4][2]));
  bezout.matrix[1][3][3] =
      _mm256_add_pd(bezout.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[4][3]));
  bezout.matrix[1][3][4] =
      _mm256_add_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[4][4]));
  bezout.matrix[1][3][5] =
      _mm256_add_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[4][5]));
  bezout.matrix[1][3][6] =
      _mm256_add_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[4][6]));
  bezout.matrix[1][3][1] =
      _mm256_add_pd(bezout.matrix[1][3][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[4][0]));
  bezout.matrix[1][3][2] =
      _mm256_add_pd(bezout.matrix[1][3][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[4][1]));
  bezout.matrix[1][3][3] =
      _mm256_add_pd(bezout.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[4][2]));
  bezout.matrix[1][3][4] =
      _mm256_add_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[4][3]));
  bezout.matrix[1][3][5] =
      _mm256_add_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[4][4]));
  bezout.matrix[1][3][6] =
      _mm256_add_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[4][5]));
  bezout.matrix[1][3][7] =
      _mm256_add_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[4][6]));
  bezout.matrix[1][3][2] =
      _mm256_add_pd(bezout.matrix[1][3][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[4][0]));
  bezout.matrix[1][3][3] =
      _mm256_add_pd(bezout.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[4][1]));
  bezout.matrix[1][3][4] =
      _mm256_add_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[4][2]));
  bezout.matrix[1][3][5] =
      _mm256_add_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[4][3]));
  bezout.matrix[1][3][6] =
      _mm256_add_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[4][4]));
  bezout.matrix[1][3][7] =
      _mm256_add_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[4][5]));
  bezout.matrix[1][3][8] =
      _mm256_add_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[4][6]));
  bezout.matrix[1][3][3] =
      _mm256_add_pd(bezout.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[4][0]));
  bezout.matrix[1][3][4] =
      _mm256_add_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[4][1]));
  bezout.matrix[1][3][5] =
      _mm256_add_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[4][2]));
  bezout.matrix[1][3][6] =
      _mm256_add_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[4][3]));
  bezout.matrix[1][3][7] =
      _mm256_add_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[4][4]));
  bezout.matrix[1][3][8] =
      _mm256_add_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[4][5]));
  bezout.matrix[1][3][9] =
      _mm256_add_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[4][6]));
  bezout.matrix[1][3][4] =
      _mm256_add_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[4][0]));
  bezout.matrix[1][3][5] =
      _mm256_add_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[4][1]));
  bezout.matrix[1][3][6] =
      _mm256_add_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[4][2]));
  bezout.matrix[1][3][7] =
      _mm256_add_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[4][3]));
  bezout.matrix[1][3][8] =
      _mm256_add_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[4][4]));
  bezout.matrix[1][3][9] =
      _mm256_add_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[4][5]));
  bezout.matrix[1][3][10] =
      _mm256_add_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[4][6]));
  bezout.matrix[1][3][5] =
      _mm256_add_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[4][0]));
  bezout.matrix[1][3][6] =
      _mm256_add_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[4][1]));
  bezout.matrix[1][3][7] =
      _mm256_add_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[4][2]));
  bezout.matrix[1][3][8] =
      _mm256_add_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[4][3]));
  bezout.matrix[1][3][9] =
      _mm256_add_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[4][4]));
  bezout.matrix[1][3][10] =
      _mm256_add_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[4][5]));
  bezout.matrix[1][3][11] =
      _mm256_add_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[4][6]));
  bezout.matrix[1][3][6] =
      _mm256_add_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[4][0]));
  bezout.matrix[1][3][7] =
      _mm256_add_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[4][1]));
  bezout.matrix[1][3][8] =
      _mm256_add_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[4][2]));
  bezout.matrix[1][3][9] =
      _mm256_add_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[4][3]));
  bezout.matrix[1][3][10] =
      _mm256_add_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[4][4]));
  bezout.matrix[1][3][11] =
      _mm256_add_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[4][5]));
  bezout.matrix[1][3][12] =
      _mm256_add_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[4][6]));
  bezout.matrix[1][3][7] =
      _mm256_add_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[4][0]));
  bezout.matrix[1][3][8] =
      _mm256_add_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[4][1]));
  bezout.matrix[1][3][9] =
      _mm256_add_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[4][2]));
  bezout.matrix[1][3][10] =
      _mm256_add_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[4][3]));
  bezout.matrix[1][3][11] =
      _mm256_add_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[4][4]));
  bezout.matrix[1][3][12] =
      _mm256_add_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[4][5]));
  bezout.matrix[1][3][13] =
      _mm256_add_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[4][6]));
  bezout.matrix[1][3][8] =
      _mm256_add_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[4][0]));
  bezout.matrix[1][3][9] =
      _mm256_add_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[4][1]));
  bezout.matrix[1][3][10] =
      _mm256_add_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[4][2]));
  bezout.matrix[1][3][11] =
      _mm256_add_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[4][3]));
  bezout.matrix[1][3][12] =
      _mm256_add_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[4][4]));
  bezout.matrix[1][3][13] =
      _mm256_add_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[4][5]));
  bezout.matrix[1][3][14] =
      _mm256_add_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[4][6]));
  bezout.matrix[1][3][9] =
      _mm256_add_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[4][0]));
  bezout.matrix[1][3][10] =
      _mm256_add_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[4][1]));
  bezout.matrix[1][3][11] =
      _mm256_add_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[4][2]));
  bezout.matrix[1][3][12] =
      _mm256_add_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[4][3]));
  bezout.matrix[1][3][13] =
      _mm256_add_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[4][4]));
  bezout.matrix[1][3][14] =
      _mm256_add_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[4][5]));
  bezout.matrix[1][3][15] =
      _mm256_add_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[4][6]));
  bezout.matrix[1][3][10] =
      _mm256_add_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[4][0]));
  bezout.matrix[1][3][11] =
      _mm256_add_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[4][1]));
  bezout.matrix[1][3][12] =
      _mm256_add_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[4][2]));
  bezout.matrix[1][3][13] =
      _mm256_add_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[4][3]));
  bezout.matrix[1][3][14] =
      _mm256_add_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[4][4]));
  bezout.matrix[1][3][15] =
      _mm256_add_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[4][5]));
  bezout.matrix[1][3][11] =
      _mm256_add_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[4][0]));
  bezout.matrix[1][3][12] =
      _mm256_add_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[4][1]));
  bezout.matrix[1][3][13] =
      _mm256_add_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[4][2]));
  bezout.matrix[1][3][14] =
      _mm256_add_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[4][3]));
  bezout.matrix[1][3][15] =
      _mm256_add_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[4][4]));
  bezout.matrix[1][3][12] =
      _mm256_add_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[4][0]));
  bezout.matrix[1][3][13] =
      _mm256_add_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[4][1]));
  bezout.matrix[1][3][14] =
      _mm256_add_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[4][2]));
  bezout.matrix[1][3][15] =
      _mm256_add_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[4][3]));
  bezout.matrix[1][3][13] =
      _mm256_add_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[4][0]));
  bezout.matrix[1][3][14] =
      _mm256_add_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[4][1]));
  bezout.matrix[1][3][15] =
      _mm256_add_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[4][2]));
  bezout.matrix[1][3][14] =
      _mm256_add_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[4][0]));
  bezout.matrix[1][3][15] =
      _mm256_add_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[4][1]));
  bezout.matrix[1][3][0] =
      _mm256_sub_pd(bezout.matrix[1][3][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][0]));
  bezout.matrix[1][3][1] =
      _mm256_sub_pd(bezout.matrix[1][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][1]));
  bezout.matrix[1][3][2] =
      _mm256_sub_pd(bezout.matrix[1][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][2]));
  bezout.matrix[1][3][3] =
      _mm256_sub_pd(bezout.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][3]));
  bezout.matrix[1][3][4] =
      _mm256_sub_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][4]));
  bezout.matrix[1][3][5] =
      _mm256_sub_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][5]));
  bezout.matrix[1][3][6] =
      _mm256_sub_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][6]));
  bezout.matrix[1][3][7] =
      _mm256_sub_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][7]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][8]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[1][9]));
  bezout.matrix[1][3][1] =
      _mm256_sub_pd(bezout.matrix[1][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][0]));
  bezout.matrix[1][3][2] =
      _mm256_sub_pd(bezout.matrix[1][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][1]));
  bezout.matrix[1][3][3] =
      _mm256_sub_pd(bezout.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][2]));
  bezout.matrix[1][3][4] =
      _mm256_sub_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][3]));
  bezout.matrix[1][3][5] =
      _mm256_sub_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][4]));
  bezout.matrix[1][3][6] =
      _mm256_sub_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][5]));
  bezout.matrix[1][3][7] =
      _mm256_sub_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][6]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][7]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][8]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[1][9]));
  bezout.matrix[1][3][2] =
      _mm256_sub_pd(bezout.matrix[1][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][0]));
  bezout.matrix[1][3][3] =
      _mm256_sub_pd(bezout.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][1]));
  bezout.matrix[1][3][4] =
      _mm256_sub_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][2]));
  bezout.matrix[1][3][5] =
      _mm256_sub_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][3]));
  bezout.matrix[1][3][6] =
      _mm256_sub_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][4]));
  bezout.matrix[1][3][7] =
      _mm256_sub_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][5]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][6]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][7]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][8]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[1][9]));
  bezout.matrix[1][3][3] =
      _mm256_sub_pd(bezout.matrix[1][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][0]));
  bezout.matrix[1][3][4] =
      _mm256_sub_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][1]));
  bezout.matrix[1][3][5] =
      _mm256_sub_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][2]));
  bezout.matrix[1][3][6] =
      _mm256_sub_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][3]));
  bezout.matrix[1][3][7] =
      _mm256_sub_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][4]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][5]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][6]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][7]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][8]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[1][9]));
  bezout.matrix[1][3][4] =
      _mm256_sub_pd(bezout.matrix[1][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][0]));
  bezout.matrix[1][3][5] =
      _mm256_sub_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][1]));
  bezout.matrix[1][3][6] =
      _mm256_sub_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][2]));
  bezout.matrix[1][3][7] =
      _mm256_sub_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][3]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][4]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][5]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][6]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][7]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][8]));
  bezout.matrix[1][3][13] =
      _mm256_sub_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[1][9]));
  bezout.matrix[1][3][5] =
      _mm256_sub_pd(bezout.matrix[1][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][0]));
  bezout.matrix[1][3][6] =
      _mm256_sub_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][1]));
  bezout.matrix[1][3][7] =
      _mm256_sub_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][2]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][3]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][4]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][5]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][6]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][7]));
  bezout.matrix[1][3][13] =
      _mm256_sub_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][8]));
  bezout.matrix[1][3][14] =
      _mm256_sub_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[1][9]));
  bezout.matrix[1][3][6] =
      _mm256_sub_pd(bezout.matrix[1][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][0]));
  bezout.matrix[1][3][7] =
      _mm256_sub_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][1]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][2]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][3]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][4]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][5]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][6]));
  bezout.matrix[1][3][13] =
      _mm256_sub_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][7]));
  bezout.matrix[1][3][14] =
      _mm256_sub_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][8]));
  bezout.matrix[1][3][15] =
      _mm256_sub_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[1][9]));
  bezout.matrix[1][3][7] =
      _mm256_sub_pd(bezout.matrix[1][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][0]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][1]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][2]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][3]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][4]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][5]));
  bezout.matrix[1][3][13] =
      _mm256_sub_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][6]));
  bezout.matrix[1][3][14] =
      _mm256_sub_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][7]));
  bezout.matrix[1][3][15] =
      _mm256_sub_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[1][8]));
  bezout.matrix[1][3][8] =
      _mm256_sub_pd(bezout.matrix[1][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[1][0]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[1][1]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[1][2]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[1][3]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[1][4]));
  bezout.matrix[1][3][13] =
      _mm256_sub_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[1][5]));
  bezout.matrix[1][3][14] =
      _mm256_sub_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[1][6]));
  bezout.matrix[1][3][15] =
      _mm256_sub_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[1][7]));
  bezout.matrix[1][3][9] =
      _mm256_sub_pd(bezout.matrix[1][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[1][0]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[1][1]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[1][2]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[1][3]));
  bezout.matrix[1][3][13] =
      _mm256_sub_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[1][4]));
  bezout.matrix[1][3][14] =
      _mm256_sub_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[1][5]));
  bezout.matrix[1][3][15] =
      _mm256_sub_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[1][6]));
  bezout.matrix[1][3][10] =
      _mm256_sub_pd(bezout.matrix[1][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[1][0]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[1][1]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[1][2]));
  bezout.matrix[1][3][13] =
      _mm256_sub_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[1][3]));
  bezout.matrix[1][3][14] =
      _mm256_sub_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[1][4]));
  bezout.matrix[1][3][15] =
      _mm256_sub_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[1][5]));
  bezout.matrix[1][3][11] =
      _mm256_sub_pd(bezout.matrix[1][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[1][0]));
  bezout.matrix[1][3][12] =
      _mm256_sub_pd(bezout.matrix[1][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[1][1]));
  bezout.matrix[1][3][13] =
      _mm256_sub_pd(bezout.matrix[1][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[1][2]));
  bezout.matrix[1][3][14] =
      _mm256_sub_pd(bezout.matrix[1][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[1][3]));
  bezout.matrix[1][3][15] =
      _mm256_sub_pd(bezout.matrix[1][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[1][4]));
  bezout.matrix[1][4][0] =
      _mm256_add_pd(bezout.matrix[1][4][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[5][0]));
  bezout.matrix[1][4][1] =
      _mm256_add_pd(bezout.matrix[1][4][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[5][1]));
  bezout.matrix[1][4][2] =
      _mm256_add_pd(bezout.matrix[1][4][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[5][2]));
  bezout.matrix[1][4][3] =
      _mm256_add_pd(bezout.matrix[1][4][3],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[5][3]));
  bezout.matrix[1][4][4] =
      _mm256_add_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[5][4]));
  bezout.matrix[1][4][5] =
      _mm256_add_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[5][5]));
  bezout.matrix[1][4][1] =
      _mm256_add_pd(bezout.matrix[1][4][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[5][0]));
  bezout.matrix[1][4][2] =
      _mm256_add_pd(bezout.matrix[1][4][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[5][1]));
  bezout.matrix[1][4][3] =
      _mm256_add_pd(bezout.matrix[1][4][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[5][2]));
  bezout.matrix[1][4][4] =
      _mm256_add_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[5][3]));
  bezout.matrix[1][4][5] =
      _mm256_add_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[5][4]));
  bezout.matrix[1][4][6] =
      _mm256_add_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[5][5]));
  bezout.matrix[1][4][2] =
      _mm256_add_pd(bezout.matrix[1][4][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[5][0]));
  bezout.matrix[1][4][3] =
      _mm256_add_pd(bezout.matrix[1][4][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[5][1]));
  bezout.matrix[1][4][4] =
      _mm256_add_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[5][2]));
  bezout.matrix[1][4][5] =
      _mm256_add_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[5][3]));
  bezout.matrix[1][4][6] =
      _mm256_add_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[5][4]));
  bezout.matrix[1][4][7] =
      _mm256_add_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[5][5]));
  bezout.matrix[1][4][3] =
      _mm256_add_pd(bezout.matrix[1][4][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[5][0]));
  bezout.matrix[1][4][4] =
      _mm256_add_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[5][1]));
  bezout.matrix[1][4][5] =
      _mm256_add_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[5][2]));
  bezout.matrix[1][4][6] =
      _mm256_add_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[5][3]));
  bezout.matrix[1][4][7] =
      _mm256_add_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[5][4]));
  bezout.matrix[1][4][8] =
      _mm256_add_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[5][5]));
  bezout.matrix[1][4][4] =
      _mm256_add_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[5][0]));
  bezout.matrix[1][4][5] =
      _mm256_add_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[5][1]));
  bezout.matrix[1][4][6] =
      _mm256_add_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[5][2]));
  bezout.matrix[1][4][7] =
      _mm256_add_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[5][3]));
  bezout.matrix[1][4][8] =
      _mm256_add_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[5][4]));
  bezout.matrix[1][4][9] =
      _mm256_add_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[5][5]));
  bezout.matrix[1][4][5] =
      _mm256_add_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[5][0]));
  bezout.matrix[1][4][6] =
      _mm256_add_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[5][1]));
  bezout.matrix[1][4][7] =
      _mm256_add_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[5][2]));
  bezout.matrix[1][4][8] =
      _mm256_add_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[5][3]));
  bezout.matrix[1][4][9] =
      _mm256_add_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[5][4]));
  bezout.matrix[1][4][10] =
      _mm256_add_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[5][5]));
  bezout.matrix[1][4][6] =
      _mm256_add_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[5][0]));
  bezout.matrix[1][4][7] =
      _mm256_add_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[5][1]));
  bezout.matrix[1][4][8] =
      _mm256_add_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[5][2]));
  bezout.matrix[1][4][9] =
      _mm256_add_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[5][3]));
  bezout.matrix[1][4][10] =
      _mm256_add_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[5][4]));
  bezout.matrix[1][4][11] =
      _mm256_add_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[5][5]));
  bezout.matrix[1][4][7] =
      _mm256_add_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[5][0]));
  bezout.matrix[1][4][8] =
      _mm256_add_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[5][1]));
  bezout.matrix[1][4][9] =
      _mm256_add_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[5][2]));
  bezout.matrix[1][4][10] =
      _mm256_add_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[5][3]));
  bezout.matrix[1][4][11] =
      _mm256_add_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[5][4]));
  bezout.matrix[1][4][12] =
      _mm256_add_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[5][5]));
  bezout.matrix[1][4][8] =
      _mm256_add_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[5][0]));
  bezout.matrix[1][4][9] =
      _mm256_add_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[5][1]));
  bezout.matrix[1][4][10] =
      _mm256_add_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[5][2]));
  bezout.matrix[1][4][11] =
      _mm256_add_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[5][3]));
  bezout.matrix[1][4][12] =
      _mm256_add_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[5][4]));
  bezout.matrix[1][4][13] =
      _mm256_add_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[5][5]));
  bezout.matrix[1][4][9] =
      _mm256_add_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[5][0]));
  bezout.matrix[1][4][10] =
      _mm256_add_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[5][1]));
  bezout.matrix[1][4][11] =
      _mm256_add_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[5][2]));
  bezout.matrix[1][4][12] =
      _mm256_add_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[5][3]));
  bezout.matrix[1][4][13] =
      _mm256_add_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[5][4]));
  bezout.matrix[1][4][14] =
      _mm256_add_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[5][5]));
  bezout.matrix[1][4][10] =
      _mm256_add_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[5][0]));
  bezout.matrix[1][4][11] =
      _mm256_add_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[5][1]));
  bezout.matrix[1][4][12] =
      _mm256_add_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[5][2]));
  bezout.matrix[1][4][13] =
      _mm256_add_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[5][3]));
  bezout.matrix[1][4][14] =
      _mm256_add_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[5][4]));
  bezout.matrix[1][4][15] =
      _mm256_add_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[5][5]));
  bezout.matrix[1][4][11] =
      _mm256_add_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[5][0]));
  bezout.matrix[1][4][12] =
      _mm256_add_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[5][1]));
  bezout.matrix[1][4][13] =
      _mm256_add_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[5][2]));
  bezout.matrix[1][4][14] =
      _mm256_add_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[5][3]));
  bezout.matrix[1][4][15] =
      _mm256_add_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[5][4]));
  bezout.matrix[1][4][12] =
      _mm256_add_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[5][0]));
  bezout.matrix[1][4][13] =
      _mm256_add_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[5][1]));
  bezout.matrix[1][4][14] =
      _mm256_add_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[5][2]));
  bezout.matrix[1][4][15] =
      _mm256_add_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[5][3]));
  bezout.matrix[1][4][13] =
      _mm256_add_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[5][0]));
  bezout.matrix[1][4][14] =
      _mm256_add_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[5][1]));
  bezout.matrix[1][4][15] =
      _mm256_add_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[5][2]));
  bezout.matrix[1][4][14] =
      _mm256_add_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[5][0]));
  bezout.matrix[1][4][15] =
      _mm256_add_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[5][1]));
  bezout.matrix[1][4][0] =
      _mm256_sub_pd(bezout.matrix[1][4][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][0]));
  bezout.matrix[1][4][1] =
      _mm256_sub_pd(bezout.matrix[1][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][1]));
  bezout.matrix[1][4][2] =
      _mm256_sub_pd(bezout.matrix[1][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][2]));
  bezout.matrix[1][4][3] =
      _mm256_sub_pd(bezout.matrix[1][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][3]));
  bezout.matrix[1][4][4] =
      _mm256_sub_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][4]));
  bezout.matrix[1][4][5] =
      _mm256_sub_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][5]));
  bezout.matrix[1][4][6] =
      _mm256_sub_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][6]));
  bezout.matrix[1][4][7] =
      _mm256_sub_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][7]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][8]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[1][9]));
  bezout.matrix[1][4][1] =
      _mm256_sub_pd(bezout.matrix[1][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][0]));
  bezout.matrix[1][4][2] =
      _mm256_sub_pd(bezout.matrix[1][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][1]));
  bezout.matrix[1][4][3] =
      _mm256_sub_pd(bezout.matrix[1][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][2]));
  bezout.matrix[1][4][4] =
      _mm256_sub_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][3]));
  bezout.matrix[1][4][5] =
      _mm256_sub_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][4]));
  bezout.matrix[1][4][6] =
      _mm256_sub_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][5]));
  bezout.matrix[1][4][7] =
      _mm256_sub_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][6]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][7]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][8]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[1][9]));
  bezout.matrix[1][4][2] =
      _mm256_sub_pd(bezout.matrix[1][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][0]));
  bezout.matrix[1][4][3] =
      _mm256_sub_pd(bezout.matrix[1][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][1]));
  bezout.matrix[1][4][4] =
      _mm256_sub_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][2]));
  bezout.matrix[1][4][5] =
      _mm256_sub_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][3]));
  bezout.matrix[1][4][6] =
      _mm256_sub_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][4]));
  bezout.matrix[1][4][7] =
      _mm256_sub_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][5]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][6]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][7]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][8]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[1][9]));
  bezout.matrix[1][4][3] =
      _mm256_sub_pd(bezout.matrix[1][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][0]));
  bezout.matrix[1][4][4] =
      _mm256_sub_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][1]));
  bezout.matrix[1][4][5] =
      _mm256_sub_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][2]));
  bezout.matrix[1][4][6] =
      _mm256_sub_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][3]));
  bezout.matrix[1][4][7] =
      _mm256_sub_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][4]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][5]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][6]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][7]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][8]));
  bezout.matrix[1][4][12] =
      _mm256_sub_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[1][9]));
  bezout.matrix[1][4][4] =
      _mm256_sub_pd(bezout.matrix[1][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][0]));
  bezout.matrix[1][4][5] =
      _mm256_sub_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][1]));
  bezout.matrix[1][4][6] =
      _mm256_sub_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][2]));
  bezout.matrix[1][4][7] =
      _mm256_sub_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][3]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][4]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][5]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][6]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][7]));
  bezout.matrix[1][4][12] =
      _mm256_sub_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][8]));
  bezout.matrix[1][4][13] =
      _mm256_sub_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[1][9]));
  bezout.matrix[1][4][5] =
      _mm256_sub_pd(bezout.matrix[1][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][0]));
  bezout.matrix[1][4][6] =
      _mm256_sub_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][1]));
  bezout.matrix[1][4][7] =
      _mm256_sub_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][2]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][3]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][4]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][5]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][6]));
  bezout.matrix[1][4][12] =
      _mm256_sub_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][7]));
  bezout.matrix[1][4][13] =
      _mm256_sub_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][8]));
  bezout.matrix[1][4][14] =
      _mm256_sub_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[1][9]));
  bezout.matrix[1][4][6] =
      _mm256_sub_pd(bezout.matrix[1][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][0]));
  bezout.matrix[1][4][7] =
      _mm256_sub_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][1]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][2]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][3]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][4]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][5]));
  bezout.matrix[1][4][12] =
      _mm256_sub_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][6]));
  bezout.matrix[1][4][13] =
      _mm256_sub_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][7]));
  bezout.matrix[1][4][14] =
      _mm256_sub_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][8]));
  bezout.matrix[1][4][15] =
      _mm256_sub_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[1][9]));
  bezout.matrix[1][4][7] =
      _mm256_sub_pd(bezout.matrix[1][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][0]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][1]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][2]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][3]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][4]));
  bezout.matrix[1][4][12] =
      _mm256_sub_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][5]));
  bezout.matrix[1][4][13] =
      _mm256_sub_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][6]));
  bezout.matrix[1][4][14] =
      _mm256_sub_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][7]));
  bezout.matrix[1][4][15] =
      _mm256_sub_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[1][8]));
  bezout.matrix[1][4][8] =
      _mm256_sub_pd(bezout.matrix[1][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[1][0]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[1][1]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[1][2]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[1][3]));
  bezout.matrix[1][4][12] =
      _mm256_sub_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[1][4]));
  bezout.matrix[1][4][13] =
      _mm256_sub_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[1][5]));
  bezout.matrix[1][4][14] =
      _mm256_sub_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[1][6]));
  bezout.matrix[1][4][15] =
      _mm256_sub_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[1][7]));
  bezout.matrix[1][4][9] =
      _mm256_sub_pd(bezout.matrix[1][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[1][0]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[1][1]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[1][2]));
  bezout.matrix[1][4][12] =
      _mm256_sub_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[1][3]));
  bezout.matrix[1][4][13] =
      _mm256_sub_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[1][4]));
  bezout.matrix[1][4][14] =
      _mm256_sub_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[1][5]));
  bezout.matrix[1][4][15] =
      _mm256_sub_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[1][6]));
  bezout.matrix[1][4][10] =
      _mm256_sub_pd(bezout.matrix[1][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[1][0]));
  bezout.matrix[1][4][11] =
      _mm256_sub_pd(bezout.matrix[1][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[1][1]));
  bezout.matrix[1][4][12] =
      _mm256_sub_pd(bezout.matrix[1][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[1][2]));
  bezout.matrix[1][4][13] =
      _mm256_sub_pd(bezout.matrix[1][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[1][3]));
  bezout.matrix[1][4][14] =
      _mm256_sub_pd(bezout.matrix[1][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[1][4]));
  bezout.matrix[1][4][15] =
      _mm256_sub_pd(bezout.matrix[1][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[1][5]));
  bezout.matrix[1][5][0] =
      _mm256_add_pd(bezout.matrix[1][5][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[6][0]));
  bezout.matrix[1][5][1] =
      _mm256_add_pd(bezout.matrix[1][5][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[6][1]));
  bezout.matrix[1][5][2] =
      _mm256_add_pd(bezout.matrix[1][5][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[6][2]));
  bezout.matrix[1][5][3] =
      _mm256_add_pd(bezout.matrix[1][5][3],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[6][3]));
  bezout.matrix[1][5][4] =
      _mm256_add_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[6][4]));
  bezout.matrix[1][5][1] =
      _mm256_add_pd(bezout.matrix[1][5][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[6][0]));
  bezout.matrix[1][5][2] =
      _mm256_add_pd(bezout.matrix[1][5][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[6][1]));
  bezout.matrix[1][5][3] =
      _mm256_add_pd(bezout.matrix[1][5][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[6][2]));
  bezout.matrix[1][5][4] =
      _mm256_add_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[6][3]));
  bezout.matrix[1][5][5] =
      _mm256_add_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[6][4]));
  bezout.matrix[1][5][2] =
      _mm256_add_pd(bezout.matrix[1][5][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[6][0]));
  bezout.matrix[1][5][3] =
      _mm256_add_pd(bezout.matrix[1][5][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[6][1]));
  bezout.matrix[1][5][4] =
      _mm256_add_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[6][2]));
  bezout.matrix[1][5][5] =
      _mm256_add_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[6][3]));
  bezout.matrix[1][5][6] =
      _mm256_add_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[6][4]));
  bezout.matrix[1][5][3] =
      _mm256_add_pd(bezout.matrix[1][5][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[6][0]));
  bezout.matrix[1][5][4] =
      _mm256_add_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[6][1]));
  bezout.matrix[1][5][5] =
      _mm256_add_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[6][2]));
  bezout.matrix[1][5][6] =
      _mm256_add_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[6][3]));
  bezout.matrix[1][5][7] =
      _mm256_add_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[6][4]));
  bezout.matrix[1][5][4] =
      _mm256_add_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[6][0]));
  bezout.matrix[1][5][5] =
      _mm256_add_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[6][1]));
  bezout.matrix[1][5][6] =
      _mm256_add_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[6][2]));
  bezout.matrix[1][5][7] =
      _mm256_add_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[6][3]));
  bezout.matrix[1][5][8] =
      _mm256_add_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[6][4]));
  bezout.matrix[1][5][5] =
      _mm256_add_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[6][0]));
  bezout.matrix[1][5][6] =
      _mm256_add_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[6][1]));
  bezout.matrix[1][5][7] =
      _mm256_add_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[6][2]));
  bezout.matrix[1][5][8] =
      _mm256_add_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[6][3]));
  bezout.matrix[1][5][9] =
      _mm256_add_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[6][4]));
  bezout.matrix[1][5][6] =
      _mm256_add_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[6][0]));
  bezout.matrix[1][5][7] =
      _mm256_add_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[6][1]));
  bezout.matrix[1][5][8] =
      _mm256_add_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[6][2]));
  bezout.matrix[1][5][9] =
      _mm256_add_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[6][3]));
  bezout.matrix[1][5][10] =
      _mm256_add_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[6][4]));
  bezout.matrix[1][5][7] =
      _mm256_add_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[6][0]));
  bezout.matrix[1][5][8] =
      _mm256_add_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[6][1]));
  bezout.matrix[1][5][9] =
      _mm256_add_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[6][2]));
  bezout.matrix[1][5][10] =
      _mm256_add_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[6][3]));
  bezout.matrix[1][5][11] =
      _mm256_add_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[6][4]));
  bezout.matrix[1][5][8] =
      _mm256_add_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[6][0]));
  bezout.matrix[1][5][9] =
      _mm256_add_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[6][1]));
  bezout.matrix[1][5][10] =
      _mm256_add_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[6][2]));
  bezout.matrix[1][5][11] =
      _mm256_add_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[6][3]));
  bezout.matrix[1][5][12] =
      _mm256_add_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[6][4]));
  bezout.matrix[1][5][9] =
      _mm256_add_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[6][0]));
  bezout.matrix[1][5][10] =
      _mm256_add_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[6][1]));
  bezout.matrix[1][5][11] =
      _mm256_add_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[6][2]));
  bezout.matrix[1][5][12] =
      _mm256_add_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[6][3]));
  bezout.matrix[1][5][13] =
      _mm256_add_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[6][4]));
  bezout.matrix[1][5][10] =
      _mm256_add_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[6][0]));
  bezout.matrix[1][5][11] =
      _mm256_add_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[6][1]));
  bezout.matrix[1][5][12] =
      _mm256_add_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[6][2]));
  bezout.matrix[1][5][13] =
      _mm256_add_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[6][3]));
  bezout.matrix[1][5][14] =
      _mm256_add_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[6][4]));
  bezout.matrix[1][5][11] =
      _mm256_add_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[6][0]));
  bezout.matrix[1][5][12] =
      _mm256_add_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[6][1]));
  bezout.matrix[1][5][13] =
      _mm256_add_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[6][2]));
  bezout.matrix[1][5][14] =
      _mm256_add_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[6][3]));
  bezout.matrix[1][5][15] =
      _mm256_add_pd(bezout.matrix[1][5][15],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[6][4]));
  bezout.matrix[1][5][12] =
      _mm256_add_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[6][0]));
  bezout.matrix[1][5][13] =
      _mm256_add_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[6][1]));
  bezout.matrix[1][5][14] =
      _mm256_add_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[6][2]));
  bezout.matrix[1][5][15] =
      _mm256_add_pd(bezout.matrix[1][5][15],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[6][3]));
  bezout.matrix[1][5][13] =
      _mm256_add_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[6][0]));
  bezout.matrix[1][5][14] =
      _mm256_add_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[6][1]));
  bezout.matrix[1][5][15] =
      _mm256_add_pd(bezout.matrix[1][5][15],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[6][2]));
  bezout.matrix[1][5][14] =
      _mm256_add_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[6][0]));
  bezout.matrix[1][5][15] =
      _mm256_add_pd(bezout.matrix[1][5][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[6][1]));
  bezout.matrix[1][5][0] =
      _mm256_sub_pd(bezout.matrix[1][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][0]));
  bezout.matrix[1][5][1] =
      _mm256_sub_pd(bezout.matrix[1][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][1]));
  bezout.matrix[1][5][2] =
      _mm256_sub_pd(bezout.matrix[1][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][2]));
  bezout.matrix[1][5][3] =
      _mm256_sub_pd(bezout.matrix[1][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][3]));
  bezout.matrix[1][5][4] =
      _mm256_sub_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][4]));
  bezout.matrix[1][5][5] =
      _mm256_sub_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][5]));
  bezout.matrix[1][5][6] =
      _mm256_sub_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][6]));
  bezout.matrix[1][5][7] =
      _mm256_sub_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][7]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][8]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[1][9]));
  bezout.matrix[1][5][1] =
      _mm256_sub_pd(bezout.matrix[1][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][0]));
  bezout.matrix[1][5][2] =
      _mm256_sub_pd(bezout.matrix[1][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][1]));
  bezout.matrix[1][5][3] =
      _mm256_sub_pd(bezout.matrix[1][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][2]));
  bezout.matrix[1][5][4] =
      _mm256_sub_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][3]));
  bezout.matrix[1][5][5] =
      _mm256_sub_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][4]));
  bezout.matrix[1][5][6] =
      _mm256_sub_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][5]));
  bezout.matrix[1][5][7] =
      _mm256_sub_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][6]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][7]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][8]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[1][9]));
  bezout.matrix[1][5][2] =
      _mm256_sub_pd(bezout.matrix[1][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][0]));
  bezout.matrix[1][5][3] =
      _mm256_sub_pd(bezout.matrix[1][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][1]));
  bezout.matrix[1][5][4] =
      _mm256_sub_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][2]));
  bezout.matrix[1][5][5] =
      _mm256_sub_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][3]));
  bezout.matrix[1][5][6] =
      _mm256_sub_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][4]));
  bezout.matrix[1][5][7] =
      _mm256_sub_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][5]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][6]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][7]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][8]));
  bezout.matrix[1][5][11] =
      _mm256_sub_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[1][9]));
  bezout.matrix[1][5][3] =
      _mm256_sub_pd(bezout.matrix[1][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][0]));
  bezout.matrix[1][5][4] =
      _mm256_sub_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][1]));
  bezout.matrix[1][5][5] =
      _mm256_sub_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][2]));
  bezout.matrix[1][5][6] =
      _mm256_sub_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][3]));
  bezout.matrix[1][5][7] =
      _mm256_sub_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][4]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][5]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][6]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][7]));
  bezout.matrix[1][5][11] =
      _mm256_sub_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][8]));
  bezout.matrix[1][5][12] =
      _mm256_sub_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[1][9]));
  bezout.matrix[1][5][4] =
      _mm256_sub_pd(bezout.matrix[1][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][0]));
  bezout.matrix[1][5][5] =
      _mm256_sub_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][1]));
  bezout.matrix[1][5][6] =
      _mm256_sub_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][2]));
  bezout.matrix[1][5][7] =
      _mm256_sub_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][3]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][4]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][5]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][6]));
  bezout.matrix[1][5][11] =
      _mm256_sub_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][7]));
  bezout.matrix[1][5][12] =
      _mm256_sub_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][8]));
  bezout.matrix[1][5][13] =
      _mm256_sub_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[1][9]));
  bezout.matrix[1][5][5] =
      _mm256_sub_pd(bezout.matrix[1][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][0]));
  bezout.matrix[1][5][6] =
      _mm256_sub_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][1]));
  bezout.matrix[1][5][7] =
      _mm256_sub_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][2]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][3]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][4]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][5]));
  bezout.matrix[1][5][11] =
      _mm256_sub_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][6]));
  bezout.matrix[1][5][12] =
      _mm256_sub_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][7]));
  bezout.matrix[1][5][13] =
      _mm256_sub_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][8]));
  bezout.matrix[1][5][14] =
      _mm256_sub_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[1][9]));
  bezout.matrix[1][5][6] =
      _mm256_sub_pd(bezout.matrix[1][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][0]));
  bezout.matrix[1][5][7] =
      _mm256_sub_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][1]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][2]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][3]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][4]));
  bezout.matrix[1][5][11] =
      _mm256_sub_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][5]));
  bezout.matrix[1][5][12] =
      _mm256_sub_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][6]));
  bezout.matrix[1][5][13] =
      _mm256_sub_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][7]));
  bezout.matrix[1][5][14] =
      _mm256_sub_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][8]));
  bezout.matrix[1][5][15] =
      _mm256_sub_pd(bezout.matrix[1][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[1][9]));
  bezout.matrix[1][5][7] =
      _mm256_sub_pd(bezout.matrix[1][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][0]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][1]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][2]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][3]));
  bezout.matrix[1][5][11] =
      _mm256_sub_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][4]));
  bezout.matrix[1][5][12] =
      _mm256_sub_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][5]));
  bezout.matrix[1][5][13] =
      _mm256_sub_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][6]));
  bezout.matrix[1][5][14] =
      _mm256_sub_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][7]));
  bezout.matrix[1][5][15] =
      _mm256_sub_pd(bezout.matrix[1][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[1][8]));
  bezout.matrix[1][5][8] =
      _mm256_sub_pd(bezout.matrix[1][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[1][0]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[1][1]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[1][2]));
  bezout.matrix[1][5][11] =
      _mm256_sub_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[1][3]));
  bezout.matrix[1][5][12] =
      _mm256_sub_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[1][4]));
  bezout.matrix[1][5][13] =
      _mm256_sub_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[1][5]));
  bezout.matrix[1][5][14] =
      _mm256_sub_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[1][6]));
  bezout.matrix[1][5][15] =
      _mm256_sub_pd(bezout.matrix[1][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[1][7]));
  bezout.matrix[1][5][9] =
      _mm256_sub_pd(bezout.matrix[1][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[1][0]));
  bezout.matrix[1][5][10] =
      _mm256_sub_pd(bezout.matrix[1][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[1][1]));
  bezout.matrix[1][5][11] =
      _mm256_sub_pd(bezout.matrix[1][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[1][2]));
  bezout.matrix[1][5][12] =
      _mm256_sub_pd(bezout.matrix[1][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[1][3]));
  bezout.matrix[1][5][13] =
      _mm256_sub_pd(bezout.matrix[1][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[1][4]));
  bezout.matrix[1][5][14] =
      _mm256_sub_pd(bezout.matrix[1][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[1][5]));
  bezout.matrix[1][5][15] =
      _mm256_sub_pd(bezout.matrix[1][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[1][6]));
  bezout.matrix[1][6][0] =
      _mm256_add_pd(bezout.matrix[1][6][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[7][0]));
  bezout.matrix[1][6][1] =
      _mm256_add_pd(bezout.matrix[1][6][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[7][1]));
  bezout.matrix[1][6][2] =
      _mm256_add_pd(bezout.matrix[1][6][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[7][2]));
  bezout.matrix[1][6][3] =
      _mm256_add_pd(bezout.matrix[1][6][3],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[7][3]));
  bezout.matrix[1][6][1] =
      _mm256_add_pd(bezout.matrix[1][6][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[7][0]));
  bezout.matrix[1][6][2] =
      _mm256_add_pd(bezout.matrix[1][6][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[7][1]));
  bezout.matrix[1][6][3] =
      _mm256_add_pd(bezout.matrix[1][6][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[7][2]));
  bezout.matrix[1][6][4] =
      _mm256_add_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[7][3]));
  bezout.matrix[1][6][2] =
      _mm256_add_pd(bezout.matrix[1][6][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[7][0]));
  bezout.matrix[1][6][3] =
      _mm256_add_pd(bezout.matrix[1][6][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[7][1]));
  bezout.matrix[1][6][4] =
      _mm256_add_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[7][2]));
  bezout.matrix[1][6][5] =
      _mm256_add_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[7][3]));
  bezout.matrix[1][6][3] =
      _mm256_add_pd(bezout.matrix[1][6][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[7][0]));
  bezout.matrix[1][6][4] =
      _mm256_add_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[7][1]));
  bezout.matrix[1][6][5] =
      _mm256_add_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[7][2]));
  bezout.matrix[1][6][6] =
      _mm256_add_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[7][3]));
  bezout.matrix[1][6][4] =
      _mm256_add_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[7][0]));
  bezout.matrix[1][6][5] =
      _mm256_add_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[7][1]));
  bezout.matrix[1][6][6] =
      _mm256_add_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[7][2]));
  bezout.matrix[1][6][7] =
      _mm256_add_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[7][3]));
  bezout.matrix[1][6][5] =
      _mm256_add_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[7][0]));
  bezout.matrix[1][6][6] =
      _mm256_add_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[7][1]));
  bezout.matrix[1][6][7] =
      _mm256_add_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[7][2]));
  bezout.matrix[1][6][8] =
      _mm256_add_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[7][3]));
  bezout.matrix[1][6][6] =
      _mm256_add_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[7][0]));
  bezout.matrix[1][6][7] =
      _mm256_add_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[7][1]));
  bezout.matrix[1][6][8] =
      _mm256_add_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[7][2]));
  bezout.matrix[1][6][9] =
      _mm256_add_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[7][3]));
  bezout.matrix[1][6][7] =
      _mm256_add_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[7][0]));
  bezout.matrix[1][6][8] =
      _mm256_add_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[7][1]));
  bezout.matrix[1][6][9] =
      _mm256_add_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[7][2]));
  bezout.matrix[1][6][10] =
      _mm256_add_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[7][3]));
  bezout.matrix[1][6][8] =
      _mm256_add_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[7][0]));
  bezout.matrix[1][6][9] =
      _mm256_add_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[7][1]));
  bezout.matrix[1][6][10] =
      _mm256_add_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[7][2]));
  bezout.matrix[1][6][11] =
      _mm256_add_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[7][3]));
  bezout.matrix[1][6][9] =
      _mm256_add_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[7][0]));
  bezout.matrix[1][6][10] =
      _mm256_add_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[7][1]));
  bezout.matrix[1][6][11] =
      _mm256_add_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[7][2]));
  bezout.matrix[1][6][12] =
      _mm256_add_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[7][3]));
  bezout.matrix[1][6][10] =
      _mm256_add_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[7][0]));
  bezout.matrix[1][6][11] =
      _mm256_add_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[7][1]));
  bezout.matrix[1][6][12] =
      _mm256_add_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[7][2]));
  bezout.matrix[1][6][13] =
      _mm256_add_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[7][3]));
  bezout.matrix[1][6][11] =
      _mm256_add_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[7][0]));
  bezout.matrix[1][6][12] =
      _mm256_add_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[7][1]));
  bezout.matrix[1][6][13] =
      _mm256_add_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[7][2]));
  bezout.matrix[1][6][14] =
      _mm256_add_pd(bezout.matrix[1][6][14],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[7][3]));
  bezout.matrix[1][6][12] =
      _mm256_add_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[7][0]));
  bezout.matrix[1][6][13] =
      _mm256_add_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[7][1]));
  bezout.matrix[1][6][14] =
      _mm256_add_pd(bezout.matrix[1][6][14],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[7][2]));
  bezout.matrix[1][6][15] =
      _mm256_add_pd(bezout.matrix[1][6][15],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[7][3]));
  bezout.matrix[1][6][13] =
      _mm256_add_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[7][0]));
  bezout.matrix[1][6][14] =
      _mm256_add_pd(bezout.matrix[1][6][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[7][1]));
  bezout.matrix[1][6][15] =
      _mm256_add_pd(bezout.matrix[1][6][15],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[7][2]));
  bezout.matrix[1][6][14] =
      _mm256_add_pd(bezout.matrix[1][6][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[7][0]));
  bezout.matrix[1][6][15] =
      _mm256_add_pd(bezout.matrix[1][6][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[7][1]));
  bezout.matrix[1][6][0] =
      _mm256_sub_pd(bezout.matrix[1][6][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][0]));
  bezout.matrix[1][6][1] =
      _mm256_sub_pd(bezout.matrix[1][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][1]));
  bezout.matrix[1][6][2] =
      _mm256_sub_pd(bezout.matrix[1][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][2]));
  bezout.matrix[1][6][3] =
      _mm256_sub_pd(bezout.matrix[1][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][3]));
  bezout.matrix[1][6][4] =
      _mm256_sub_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][4]));
  bezout.matrix[1][6][5] =
      _mm256_sub_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][5]));
  bezout.matrix[1][6][6] =
      _mm256_sub_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][6]));
  bezout.matrix[1][6][7] =
      _mm256_sub_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][7]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][8]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[1][9]));
  bezout.matrix[1][6][1] =
      _mm256_sub_pd(bezout.matrix[1][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][0]));
  bezout.matrix[1][6][2] =
      _mm256_sub_pd(bezout.matrix[1][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][1]));
  bezout.matrix[1][6][3] =
      _mm256_sub_pd(bezout.matrix[1][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][2]));
  bezout.matrix[1][6][4] =
      _mm256_sub_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][3]));
  bezout.matrix[1][6][5] =
      _mm256_sub_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][4]));
  bezout.matrix[1][6][6] =
      _mm256_sub_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][5]));
  bezout.matrix[1][6][7] =
      _mm256_sub_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][6]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][7]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][8]));
  bezout.matrix[1][6][10] =
      _mm256_sub_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[1][9]));
  bezout.matrix[1][6][2] =
      _mm256_sub_pd(bezout.matrix[1][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][0]));
  bezout.matrix[1][6][3] =
      _mm256_sub_pd(bezout.matrix[1][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][1]));
  bezout.matrix[1][6][4] =
      _mm256_sub_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][2]));
  bezout.matrix[1][6][5] =
      _mm256_sub_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][3]));
  bezout.matrix[1][6][6] =
      _mm256_sub_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][4]));
  bezout.matrix[1][6][7] =
      _mm256_sub_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][5]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][6]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][7]));
  bezout.matrix[1][6][10] =
      _mm256_sub_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][8]));
  bezout.matrix[1][6][11] =
      _mm256_sub_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[1][9]));
  bezout.matrix[1][6][3] =
      _mm256_sub_pd(bezout.matrix[1][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][0]));
  bezout.matrix[1][6][4] =
      _mm256_sub_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][1]));
  bezout.matrix[1][6][5] =
      _mm256_sub_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][2]));
  bezout.matrix[1][6][6] =
      _mm256_sub_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][3]));
  bezout.matrix[1][6][7] =
      _mm256_sub_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][4]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][5]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][6]));
  bezout.matrix[1][6][10] =
      _mm256_sub_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][7]));
  bezout.matrix[1][6][11] =
      _mm256_sub_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][8]));
  bezout.matrix[1][6][12] =
      _mm256_sub_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[1][9]));
  bezout.matrix[1][6][4] =
      _mm256_sub_pd(bezout.matrix[1][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][0]));
  bezout.matrix[1][6][5] =
      _mm256_sub_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][1]));
  bezout.matrix[1][6][6] =
      _mm256_sub_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][2]));
  bezout.matrix[1][6][7] =
      _mm256_sub_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][3]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][4]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][5]));
  bezout.matrix[1][6][10] =
      _mm256_sub_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][6]));
  bezout.matrix[1][6][11] =
      _mm256_sub_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][7]));
  bezout.matrix[1][6][12] =
      _mm256_sub_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][8]));
  bezout.matrix[1][6][13] =
      _mm256_sub_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[1][9]));
  bezout.matrix[1][6][5] =
      _mm256_sub_pd(bezout.matrix[1][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][0]));
  bezout.matrix[1][6][6] =
      _mm256_sub_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][1]));
  bezout.matrix[1][6][7] =
      _mm256_sub_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][2]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][3]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][4]));
  bezout.matrix[1][6][10] =
      _mm256_sub_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][5]));
  bezout.matrix[1][6][11] =
      _mm256_sub_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][6]));
  bezout.matrix[1][6][12] =
      _mm256_sub_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][7]));
  bezout.matrix[1][6][13] =
      _mm256_sub_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][8]));
  bezout.matrix[1][6][14] =
      _mm256_sub_pd(bezout.matrix[1][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[1][9]));
  bezout.matrix[1][6][6] =
      _mm256_sub_pd(bezout.matrix[1][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][0]));
  bezout.matrix[1][6][7] =
      _mm256_sub_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][1]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][2]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][3]));
  bezout.matrix[1][6][10] =
      _mm256_sub_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][4]));
  bezout.matrix[1][6][11] =
      _mm256_sub_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][5]));
  bezout.matrix[1][6][12] =
      _mm256_sub_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][6]));
  bezout.matrix[1][6][13] =
      _mm256_sub_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][7]));
  bezout.matrix[1][6][14] =
      _mm256_sub_pd(bezout.matrix[1][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][8]));
  bezout.matrix[1][6][15] =
      _mm256_sub_pd(bezout.matrix[1][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[1][9]));
  bezout.matrix[1][6][7] =
      _mm256_sub_pd(bezout.matrix[1][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][0]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][1]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][2]));
  bezout.matrix[1][6][10] =
      _mm256_sub_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][3]));
  bezout.matrix[1][6][11] =
      _mm256_sub_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][4]));
  bezout.matrix[1][6][12] =
      _mm256_sub_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][5]));
  bezout.matrix[1][6][13] =
      _mm256_sub_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][6]));
  bezout.matrix[1][6][14] =
      _mm256_sub_pd(bezout.matrix[1][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][7]));
  bezout.matrix[1][6][15] =
      _mm256_sub_pd(bezout.matrix[1][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[1][8]));
  bezout.matrix[1][6][8] =
      _mm256_sub_pd(bezout.matrix[1][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[1][0]));
  bezout.matrix[1][6][9] =
      _mm256_sub_pd(bezout.matrix[1][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[1][1]));
  bezout.matrix[1][6][10] =
      _mm256_sub_pd(bezout.matrix[1][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[1][2]));
  bezout.matrix[1][6][11] =
      _mm256_sub_pd(bezout.matrix[1][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[1][3]));
  bezout.matrix[1][6][12] =
      _mm256_sub_pd(bezout.matrix[1][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[1][4]));
  bezout.matrix[1][6][13] =
      _mm256_sub_pd(bezout.matrix[1][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[1][5]));
  bezout.matrix[1][6][14] =
      _mm256_sub_pd(bezout.matrix[1][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[1][6]));
  bezout.matrix[1][6][15] =
      _mm256_sub_pd(bezout.matrix[1][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[1][7]));
  bezout.matrix[1][7][0] =
      _mm256_add_pd(bezout.matrix[1][7][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[8][0]));
  bezout.matrix[1][7][1] =
      _mm256_add_pd(bezout.matrix[1][7][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[8][1]));
  bezout.matrix[1][7][2] =
      _mm256_add_pd(bezout.matrix[1][7][2],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[8][2]));
  bezout.matrix[1][7][1] =
      _mm256_add_pd(bezout.matrix[1][7][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[8][0]));
  bezout.matrix[1][7][2] =
      _mm256_add_pd(bezout.matrix[1][7][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[8][1]));
  bezout.matrix[1][7][3] =
      _mm256_add_pd(bezout.matrix[1][7][3],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[8][2]));
  bezout.matrix[1][7][2] =
      _mm256_add_pd(bezout.matrix[1][7][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[8][0]));
  bezout.matrix[1][7][3] =
      _mm256_add_pd(bezout.matrix[1][7][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[8][1]));
  bezout.matrix[1][7][4] =
      _mm256_add_pd(bezout.matrix[1][7][4],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[8][2]));
  bezout.matrix[1][7][3] =
      _mm256_add_pd(bezout.matrix[1][7][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[8][0]));
  bezout.matrix[1][7][4] =
      _mm256_add_pd(bezout.matrix[1][7][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[8][1]));
  bezout.matrix[1][7][5] =
      _mm256_add_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[8][2]));
  bezout.matrix[1][7][4] =
      _mm256_add_pd(bezout.matrix[1][7][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[8][0]));
  bezout.matrix[1][7][5] =
      _mm256_add_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[8][1]));
  bezout.matrix[1][7][6] =
      _mm256_add_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[8][2]));
  bezout.matrix[1][7][5] =
      _mm256_add_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[8][0]));
  bezout.matrix[1][7][6] =
      _mm256_add_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[8][1]));
  bezout.matrix[1][7][7] =
      _mm256_add_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[8][2]));
  bezout.matrix[1][7][6] =
      _mm256_add_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[8][0]));
  bezout.matrix[1][7][7] =
      _mm256_add_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[8][1]));
  bezout.matrix[1][7][8] =
      _mm256_add_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[8][2]));
  bezout.matrix[1][7][7] =
      _mm256_add_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[8][0]));
  bezout.matrix[1][7][8] =
      _mm256_add_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[8][1]));
  bezout.matrix[1][7][9] =
      _mm256_add_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[8][2]));
  bezout.matrix[1][7][8] =
      _mm256_add_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[8][0]));
  bezout.matrix[1][7][9] =
      _mm256_add_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[8][1]));
  bezout.matrix[1][7][10] =
      _mm256_add_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[8][2]));
  bezout.matrix[1][7][9] =
      _mm256_add_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[8][0]));
  bezout.matrix[1][7][10] =
      _mm256_add_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[8][1]));
  bezout.matrix[1][7][11] =
      _mm256_add_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[8][2]));
  bezout.matrix[1][7][10] =
      _mm256_add_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[8][0]));
  bezout.matrix[1][7][11] =
      _mm256_add_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[8][1]));
  bezout.matrix[1][7][12] =
      _mm256_add_pd(bezout.matrix[1][7][12],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[8][2]));
  bezout.matrix[1][7][11] =
      _mm256_add_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[8][0]));
  bezout.matrix[1][7][12] =
      _mm256_add_pd(bezout.matrix[1][7][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[8][1]));
  bezout.matrix[1][7][13] =
      _mm256_add_pd(bezout.matrix[1][7][13],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[8][2]));
  bezout.matrix[1][7][12] =
      _mm256_add_pd(bezout.matrix[1][7][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[8][0]));
  bezout.matrix[1][7][13] =
      _mm256_add_pd(bezout.matrix[1][7][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[8][1]));
  bezout.matrix[1][7][14] =
      _mm256_add_pd(bezout.matrix[1][7][14],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[8][2]));
  bezout.matrix[1][7][13] =
      _mm256_add_pd(bezout.matrix[1][7][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[8][0]));
  bezout.matrix[1][7][14] =
      _mm256_add_pd(bezout.matrix[1][7][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[8][1]));
  bezout.matrix[1][7][15] =
      _mm256_add_pd(bezout.matrix[1][7][15],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[8][2]));
  bezout.matrix[1][7][14] =
      _mm256_add_pd(bezout.matrix[1][7][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[8][0]));
  bezout.matrix[1][7][15] =
      _mm256_add_pd(bezout.matrix[1][7][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[8][1]));
  bezout.matrix[1][7][0] =
      _mm256_sub_pd(bezout.matrix[1][7][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][0]));
  bezout.matrix[1][7][1] =
      _mm256_sub_pd(bezout.matrix[1][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][1]));
  bezout.matrix[1][7][2] =
      _mm256_sub_pd(bezout.matrix[1][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][2]));
  bezout.matrix[1][7][3] =
      _mm256_sub_pd(bezout.matrix[1][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][3]));
  bezout.matrix[1][7][4] =
      _mm256_sub_pd(bezout.matrix[1][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][4]));
  bezout.matrix[1][7][5] =
      _mm256_sub_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][5]));
  bezout.matrix[1][7][6] =
      _mm256_sub_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][6]));
  bezout.matrix[1][7][7] =
      _mm256_sub_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][7]));
  bezout.matrix[1][7][8] =
      _mm256_sub_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][8]));
  bezout.matrix[1][7][9] =
      _mm256_sub_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[1][9]));
  bezout.matrix[1][7][1] =
      _mm256_sub_pd(bezout.matrix[1][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][0]));
  bezout.matrix[1][7][2] =
      _mm256_sub_pd(bezout.matrix[1][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][1]));
  bezout.matrix[1][7][3] =
      _mm256_sub_pd(bezout.matrix[1][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][2]));
  bezout.matrix[1][7][4] =
      _mm256_sub_pd(bezout.matrix[1][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][3]));
  bezout.matrix[1][7][5] =
      _mm256_sub_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][4]));
  bezout.matrix[1][7][6] =
      _mm256_sub_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][5]));
  bezout.matrix[1][7][7] =
      _mm256_sub_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][6]));
  bezout.matrix[1][7][8] =
      _mm256_sub_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][7]));
  bezout.matrix[1][7][9] =
      _mm256_sub_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][8]));
  bezout.matrix[1][7][10] =
      _mm256_sub_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[1][9]));
  bezout.matrix[1][7][2] =
      _mm256_sub_pd(bezout.matrix[1][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][0]));
  bezout.matrix[1][7][3] =
      _mm256_sub_pd(bezout.matrix[1][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][1]));
  bezout.matrix[1][7][4] =
      _mm256_sub_pd(bezout.matrix[1][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][2]));
  bezout.matrix[1][7][5] =
      _mm256_sub_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][3]));
  bezout.matrix[1][7][6] =
      _mm256_sub_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][4]));
  bezout.matrix[1][7][7] =
      _mm256_sub_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][5]));
  bezout.matrix[1][7][8] =
      _mm256_sub_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][6]));
  bezout.matrix[1][7][9] =
      _mm256_sub_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][7]));
  bezout.matrix[1][7][10] =
      _mm256_sub_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][8]));
  bezout.matrix[1][7][11] =
      _mm256_sub_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[1][9]));
  bezout.matrix[1][7][3] =
      _mm256_sub_pd(bezout.matrix[1][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][0]));
  bezout.matrix[1][7][4] =
      _mm256_sub_pd(bezout.matrix[1][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][1]));
  bezout.matrix[1][7][5] =
      _mm256_sub_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][2]));
  bezout.matrix[1][7][6] =
      _mm256_sub_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][3]));
  bezout.matrix[1][7][7] =
      _mm256_sub_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][4]));
  bezout.matrix[1][7][8] =
      _mm256_sub_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][5]));
  bezout.matrix[1][7][9] =
      _mm256_sub_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][6]));
  bezout.matrix[1][7][10] =
      _mm256_sub_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][7]));
  bezout.matrix[1][7][11] =
      _mm256_sub_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][8]));
  bezout.matrix[1][7][12] =
      _mm256_sub_pd(bezout.matrix[1][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[1][9]));
  bezout.matrix[1][7][4] =
      _mm256_sub_pd(bezout.matrix[1][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][0]));
  bezout.matrix[1][7][5] =
      _mm256_sub_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][1]));
  bezout.matrix[1][7][6] =
      _mm256_sub_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][2]));
  bezout.matrix[1][7][7] =
      _mm256_sub_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][3]));
  bezout.matrix[1][7][8] =
      _mm256_sub_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][4]));
  bezout.matrix[1][7][9] =
      _mm256_sub_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][5]));
  bezout.matrix[1][7][10] =
      _mm256_sub_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][6]));
  bezout.matrix[1][7][11] =
      _mm256_sub_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][7]));
  bezout.matrix[1][7][12] =
      _mm256_sub_pd(bezout.matrix[1][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][8]));
  bezout.matrix[1][7][13] =
      _mm256_sub_pd(bezout.matrix[1][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[1][9]));
  bezout.matrix[1][7][5] =
      _mm256_sub_pd(bezout.matrix[1][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][0]));
  bezout.matrix[1][7][6] =
      _mm256_sub_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][1]));
  bezout.matrix[1][7][7] =
      _mm256_sub_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][2]));
  bezout.matrix[1][7][8] =
      _mm256_sub_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][3]));
  bezout.matrix[1][7][9] =
      _mm256_sub_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][4]));
  bezout.matrix[1][7][10] =
      _mm256_sub_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][5]));
  bezout.matrix[1][7][11] =
      _mm256_sub_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][6]));
  bezout.matrix[1][7][12] =
      _mm256_sub_pd(bezout.matrix[1][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][7]));
  bezout.matrix[1][7][13] =
      _mm256_sub_pd(bezout.matrix[1][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][8]));
  bezout.matrix[1][7][14] =
      _mm256_sub_pd(bezout.matrix[1][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[1][9]));
  bezout.matrix[1][7][6] =
      _mm256_sub_pd(bezout.matrix[1][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][0]));
  bezout.matrix[1][7][7] =
      _mm256_sub_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][1]));
  bezout.matrix[1][7][8] =
      _mm256_sub_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][2]));
  bezout.matrix[1][7][9] =
      _mm256_sub_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][3]));
  bezout.matrix[1][7][10] =
      _mm256_sub_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][4]));
  bezout.matrix[1][7][11] =
      _mm256_sub_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][5]));
  bezout.matrix[1][7][12] =
      _mm256_sub_pd(bezout.matrix[1][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][6]));
  bezout.matrix[1][7][13] =
      _mm256_sub_pd(bezout.matrix[1][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][7]));
  bezout.matrix[1][7][14] =
      _mm256_sub_pd(bezout.matrix[1][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][8]));
  bezout.matrix[1][7][15] =
      _mm256_sub_pd(bezout.matrix[1][7][15],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[1][9]));
  bezout.matrix[1][7][7] =
      _mm256_sub_pd(bezout.matrix[1][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][0]));
  bezout.matrix[1][7][8] =
      _mm256_sub_pd(bezout.matrix[1][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][1]));
  bezout.matrix[1][7][9] =
      _mm256_sub_pd(bezout.matrix[1][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][2]));
  bezout.matrix[1][7][10] =
      _mm256_sub_pd(bezout.matrix[1][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][3]));
  bezout.matrix[1][7][11] =
      _mm256_sub_pd(bezout.matrix[1][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][4]));
  bezout.matrix[1][7][12] =
      _mm256_sub_pd(bezout.matrix[1][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][5]));
  bezout.matrix[1][7][13] =
      _mm256_sub_pd(bezout.matrix[1][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][6]));
  bezout.matrix[1][7][14] =
      _mm256_sub_pd(bezout.matrix[1][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][7]));
  bezout.matrix[1][7][15] =
      _mm256_sub_pd(bezout.matrix[1][7][15],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[1][8]));
  bezout.matrix[1][8][0] =
      _mm256_add_pd(bezout.matrix[1][8][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[9][0]));
  bezout.matrix[1][8][1] =
      _mm256_add_pd(bezout.matrix[1][8][1],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[9][1]));
  bezout.matrix[1][8][1] =
      _mm256_add_pd(bezout.matrix[1][8][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[9][0]));
  bezout.matrix[1][8][2] =
      _mm256_add_pd(bezout.matrix[1][8][2],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[9][1]));
  bezout.matrix[1][8][2] =
      _mm256_add_pd(bezout.matrix[1][8][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[9][0]));
  bezout.matrix[1][8][3] =
      _mm256_add_pd(bezout.matrix[1][8][3],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[9][1]));
  bezout.matrix[1][8][3] =
      _mm256_add_pd(bezout.matrix[1][8][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[9][0]));
  bezout.matrix[1][8][4] =
      _mm256_add_pd(bezout.matrix[1][8][4],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[9][1]));
  bezout.matrix[1][8][4] =
      _mm256_add_pd(bezout.matrix[1][8][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[9][0]));
  bezout.matrix[1][8][5] =
      _mm256_add_pd(bezout.matrix[1][8][5],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[9][1]));
  bezout.matrix[1][8][5] =
      _mm256_add_pd(bezout.matrix[1][8][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[9][0]));
  bezout.matrix[1][8][6] =
      _mm256_add_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[9][1]));
  bezout.matrix[1][8][6] =
      _mm256_add_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[9][0]));
  bezout.matrix[1][8][7] =
      _mm256_add_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[9][1]));
  bezout.matrix[1][8][7] =
      _mm256_add_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[9][0]));
  bezout.matrix[1][8][8] =
      _mm256_add_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[9][1]));
  bezout.matrix[1][8][8] =
      _mm256_add_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[9][0]));
  bezout.matrix[1][8][9] =
      _mm256_add_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[9][1]));
  bezout.matrix[1][8][9] =
      _mm256_add_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[9][0]));
  bezout.matrix[1][8][10] =
      _mm256_add_pd(bezout.matrix[1][8][10],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[9][1]));
  bezout.matrix[1][8][10] =
      _mm256_add_pd(bezout.matrix[1][8][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[9][0]));
  bezout.matrix[1][8][11] =
      _mm256_add_pd(bezout.matrix[1][8][11],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[9][1]));
  bezout.matrix[1][8][11] =
      _mm256_add_pd(bezout.matrix[1][8][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[9][0]));
  bezout.matrix[1][8][12] =
      _mm256_add_pd(bezout.matrix[1][8][12],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[9][1]));
  bezout.matrix[1][8][12] =
      _mm256_add_pd(bezout.matrix[1][8][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[9][0]));
  bezout.matrix[1][8][13] =
      _mm256_add_pd(bezout.matrix[1][8][13],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[9][1]));
  bezout.matrix[1][8][13] =
      _mm256_add_pd(bezout.matrix[1][8][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[9][0]));
  bezout.matrix[1][8][14] =
      _mm256_add_pd(bezout.matrix[1][8][14],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[9][1]));
  bezout.matrix[1][8][14] =
      _mm256_add_pd(bezout.matrix[1][8][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[9][0]));
  bezout.matrix[1][8][15] =
      _mm256_add_pd(bezout.matrix[1][8][15],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[9][1]));
  bezout.matrix[1][8][0] =
      _mm256_sub_pd(bezout.matrix[1][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][0]));
  bezout.matrix[1][8][1] =
      _mm256_sub_pd(bezout.matrix[1][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][1]));
  bezout.matrix[1][8][2] =
      _mm256_sub_pd(bezout.matrix[1][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][2]));
  bezout.matrix[1][8][3] =
      _mm256_sub_pd(bezout.matrix[1][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][3]));
  bezout.matrix[1][8][4] =
      _mm256_sub_pd(bezout.matrix[1][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][4]));
  bezout.matrix[1][8][5] =
      _mm256_sub_pd(bezout.matrix[1][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][5]));
  bezout.matrix[1][8][6] =
      _mm256_sub_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][6]));
  bezout.matrix[1][8][7] =
      _mm256_sub_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][7]));
  bezout.matrix[1][8][8] =
      _mm256_sub_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][8]));
  bezout.matrix[1][8][9] =
      _mm256_sub_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[1][9]));
  bezout.matrix[1][8][1] =
      _mm256_sub_pd(bezout.matrix[1][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][0]));
  bezout.matrix[1][8][2] =
      _mm256_sub_pd(bezout.matrix[1][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][1]));
  bezout.matrix[1][8][3] =
      _mm256_sub_pd(bezout.matrix[1][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][2]));
  bezout.matrix[1][8][4] =
      _mm256_sub_pd(bezout.matrix[1][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][3]));
  bezout.matrix[1][8][5] =
      _mm256_sub_pd(bezout.matrix[1][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][4]));
  bezout.matrix[1][8][6] =
      _mm256_sub_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][5]));
  bezout.matrix[1][8][7] =
      _mm256_sub_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][6]));
  bezout.matrix[1][8][8] =
      _mm256_sub_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][7]));
  bezout.matrix[1][8][9] =
      _mm256_sub_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][8]));
  bezout.matrix[1][8][10] =
      _mm256_sub_pd(bezout.matrix[1][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[1][9]));
  bezout.matrix[1][8][2] =
      _mm256_sub_pd(bezout.matrix[1][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][0]));
  bezout.matrix[1][8][3] =
      _mm256_sub_pd(bezout.matrix[1][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][1]));
  bezout.matrix[1][8][4] =
      _mm256_sub_pd(bezout.matrix[1][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][2]));
  bezout.matrix[1][8][5] =
      _mm256_sub_pd(bezout.matrix[1][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][3]));
  bezout.matrix[1][8][6] =
      _mm256_sub_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][4]));
  bezout.matrix[1][8][7] =
      _mm256_sub_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][5]));
  bezout.matrix[1][8][8] =
      _mm256_sub_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][6]));
  bezout.matrix[1][8][9] =
      _mm256_sub_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][7]));
  bezout.matrix[1][8][10] =
      _mm256_sub_pd(bezout.matrix[1][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][8]));
  bezout.matrix[1][8][11] =
      _mm256_sub_pd(bezout.matrix[1][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[1][9]));
  bezout.matrix[1][8][3] =
      _mm256_sub_pd(bezout.matrix[1][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][0]));
  bezout.matrix[1][8][4] =
      _mm256_sub_pd(bezout.matrix[1][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][1]));
  bezout.matrix[1][8][5] =
      _mm256_sub_pd(bezout.matrix[1][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][2]));
  bezout.matrix[1][8][6] =
      _mm256_sub_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][3]));
  bezout.matrix[1][8][7] =
      _mm256_sub_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][4]));
  bezout.matrix[1][8][8] =
      _mm256_sub_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][5]));
  bezout.matrix[1][8][9] =
      _mm256_sub_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][6]));
  bezout.matrix[1][8][10] =
      _mm256_sub_pd(bezout.matrix[1][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][7]));
  bezout.matrix[1][8][11] =
      _mm256_sub_pd(bezout.matrix[1][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][8]));
  bezout.matrix[1][8][12] =
      _mm256_sub_pd(bezout.matrix[1][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[1][9]));
  bezout.matrix[1][8][4] =
      _mm256_sub_pd(bezout.matrix[1][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][0]));
  bezout.matrix[1][8][5] =
      _mm256_sub_pd(bezout.matrix[1][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][1]));
  bezout.matrix[1][8][6] =
      _mm256_sub_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][2]));
  bezout.matrix[1][8][7] =
      _mm256_sub_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][3]));
  bezout.matrix[1][8][8] =
      _mm256_sub_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][4]));
  bezout.matrix[1][8][9] =
      _mm256_sub_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][5]));
  bezout.matrix[1][8][10] =
      _mm256_sub_pd(bezout.matrix[1][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][6]));
  bezout.matrix[1][8][11] =
      _mm256_sub_pd(bezout.matrix[1][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][7]));
  bezout.matrix[1][8][12] =
      _mm256_sub_pd(bezout.matrix[1][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][8]));
  bezout.matrix[1][8][13] =
      _mm256_sub_pd(bezout.matrix[1][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[1][9]));
  bezout.matrix[1][8][5] =
      _mm256_sub_pd(bezout.matrix[1][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][0]));
  bezout.matrix[1][8][6] =
      _mm256_sub_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][1]));
  bezout.matrix[1][8][7] =
      _mm256_sub_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][2]));
  bezout.matrix[1][8][8] =
      _mm256_sub_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][3]));
  bezout.matrix[1][8][9] =
      _mm256_sub_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][4]));
  bezout.matrix[1][8][10] =
      _mm256_sub_pd(bezout.matrix[1][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][5]));
  bezout.matrix[1][8][11] =
      _mm256_sub_pd(bezout.matrix[1][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][6]));
  bezout.matrix[1][8][12] =
      _mm256_sub_pd(bezout.matrix[1][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][7]));
  bezout.matrix[1][8][13] =
      _mm256_sub_pd(bezout.matrix[1][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][8]));
  bezout.matrix[1][8][14] =
      _mm256_sub_pd(bezout.matrix[1][8][14],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[1][9]));
  bezout.matrix[1][8][6] =
      _mm256_sub_pd(bezout.matrix[1][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][0]));
  bezout.matrix[1][8][7] =
      _mm256_sub_pd(bezout.matrix[1][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][1]));
  bezout.matrix[1][8][8] =
      _mm256_sub_pd(bezout.matrix[1][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][2]));
  bezout.matrix[1][8][9] =
      _mm256_sub_pd(bezout.matrix[1][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][3]));
  bezout.matrix[1][8][10] =
      _mm256_sub_pd(bezout.matrix[1][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][4]));
  bezout.matrix[1][8][11] =
      _mm256_sub_pd(bezout.matrix[1][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][5]));
  bezout.matrix[1][8][12] =
      _mm256_sub_pd(bezout.matrix[1][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][6]));
  bezout.matrix[1][8][13] =
      _mm256_sub_pd(bezout.matrix[1][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][7]));
  bezout.matrix[1][8][14] =
      _mm256_sub_pd(bezout.matrix[1][8][14],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][8]));
  bezout.matrix[1][8][15] =
      _mm256_sub_pd(bezout.matrix[1][8][15],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[1][9]));
  bezout.matrix[1][9][0] =
      _mm256_add_pd(bezout.matrix[1][9][0],
                    _mm256_mul_pd(poly1.coeffs[1][0], poly2.coeffs[10][0]));
  bezout.matrix[1][9][1] =
      _mm256_add_pd(bezout.matrix[1][9][1],
                    _mm256_mul_pd(poly1.coeffs[1][1], poly2.coeffs[10][0]));
  bezout.matrix[1][9][2] =
      _mm256_add_pd(bezout.matrix[1][9][2],
                    _mm256_mul_pd(poly1.coeffs[1][2], poly2.coeffs[10][0]));
  bezout.matrix[1][9][3] =
      _mm256_add_pd(bezout.matrix[1][9][3],
                    _mm256_mul_pd(poly1.coeffs[1][3], poly2.coeffs[10][0]));
  bezout.matrix[1][9][4] =
      _mm256_add_pd(bezout.matrix[1][9][4],
                    _mm256_mul_pd(poly1.coeffs[1][4], poly2.coeffs[10][0]));
  bezout.matrix[1][9][5] =
      _mm256_add_pd(bezout.matrix[1][9][5],
                    _mm256_mul_pd(poly1.coeffs[1][5], poly2.coeffs[10][0]));
  bezout.matrix[1][9][6] =
      _mm256_add_pd(bezout.matrix[1][9][6],
                    _mm256_mul_pd(poly1.coeffs[1][6], poly2.coeffs[10][0]));
  bezout.matrix[1][9][7] =
      _mm256_add_pd(bezout.matrix[1][9][7],
                    _mm256_mul_pd(poly1.coeffs[1][7], poly2.coeffs[10][0]));
  bezout.matrix[1][9][8] =
      _mm256_add_pd(bezout.matrix[1][9][8],
                    _mm256_mul_pd(poly1.coeffs[1][8], poly2.coeffs[10][0]));
  bezout.matrix[1][9][9] =
      _mm256_add_pd(bezout.matrix[1][9][9],
                    _mm256_mul_pd(poly1.coeffs[1][9], poly2.coeffs[10][0]));
  bezout.matrix[1][9][10] =
      _mm256_add_pd(bezout.matrix[1][9][10],
                    _mm256_mul_pd(poly1.coeffs[1][10], poly2.coeffs[10][0]));
  bezout.matrix[1][9][11] =
      _mm256_add_pd(bezout.matrix[1][9][11],
                    _mm256_mul_pd(poly1.coeffs[1][11], poly2.coeffs[10][0]));
  bezout.matrix[1][9][12] =
      _mm256_add_pd(bezout.matrix[1][9][12],
                    _mm256_mul_pd(poly1.coeffs[1][12], poly2.coeffs[10][0]));
  bezout.matrix[1][9][13] =
      _mm256_add_pd(bezout.matrix[1][9][13],
                    _mm256_mul_pd(poly1.coeffs[1][13], poly2.coeffs[10][0]));
  bezout.matrix[1][9][14] =
      _mm256_add_pd(bezout.matrix[1][9][14],
                    _mm256_mul_pd(poly1.coeffs[1][14], poly2.coeffs[10][0]));
  bezout.matrix[1][9][0] =
      _mm256_sub_pd(bezout.matrix[1][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][0]));
  bezout.matrix[1][9][1] =
      _mm256_sub_pd(bezout.matrix[1][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][1]));
  bezout.matrix[1][9][2] =
      _mm256_sub_pd(bezout.matrix[1][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][2]));
  bezout.matrix[1][9][3] =
      _mm256_sub_pd(bezout.matrix[1][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][3]));
  bezout.matrix[1][9][4] =
      _mm256_sub_pd(bezout.matrix[1][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][4]));
  bezout.matrix[1][9][5] =
      _mm256_sub_pd(bezout.matrix[1][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][5]));
  bezout.matrix[1][9][6] =
      _mm256_sub_pd(bezout.matrix[1][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][6]));
  bezout.matrix[1][9][7] =
      _mm256_sub_pd(bezout.matrix[1][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][7]));
  bezout.matrix[1][9][8] =
      _mm256_sub_pd(bezout.matrix[1][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][8]));
  bezout.matrix[1][9][9] =
      _mm256_sub_pd(bezout.matrix[1][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[1][9]));
  bezout.matrix[1][9][1] =
      _mm256_sub_pd(bezout.matrix[1][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][0]));
  bezout.matrix[1][9][2] =
      _mm256_sub_pd(bezout.matrix[1][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][1]));
  bezout.matrix[1][9][3] =
      _mm256_sub_pd(bezout.matrix[1][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][2]));
  bezout.matrix[1][9][4] =
      _mm256_sub_pd(bezout.matrix[1][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][3]));
  bezout.matrix[1][9][5] =
      _mm256_sub_pd(bezout.matrix[1][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][4]));
  bezout.matrix[1][9][6] =
      _mm256_sub_pd(bezout.matrix[1][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][5]));
  bezout.matrix[1][9][7] =
      _mm256_sub_pd(bezout.matrix[1][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][6]));
  bezout.matrix[1][9][8] =
      _mm256_sub_pd(bezout.matrix[1][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][7]));
  bezout.matrix[1][9][9] =
      _mm256_sub_pd(bezout.matrix[1][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][8]));
  bezout.matrix[1][9][10] =
      _mm256_sub_pd(bezout.matrix[1][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[1][9]));
  bezout.matrix[1][9][2] =
      _mm256_sub_pd(bezout.matrix[1][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][0]));
  bezout.matrix[1][9][3] =
      _mm256_sub_pd(bezout.matrix[1][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][1]));
  bezout.matrix[1][9][4] =
      _mm256_sub_pd(bezout.matrix[1][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][2]));
  bezout.matrix[1][9][5] =
      _mm256_sub_pd(bezout.matrix[1][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][3]));
  bezout.matrix[1][9][6] =
      _mm256_sub_pd(bezout.matrix[1][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][4]));
  bezout.matrix[1][9][7] =
      _mm256_sub_pd(bezout.matrix[1][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][5]));
  bezout.matrix[1][9][8] =
      _mm256_sub_pd(bezout.matrix[1][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][6]));
  bezout.matrix[1][9][9] =
      _mm256_sub_pd(bezout.matrix[1][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][7]));
  bezout.matrix[1][9][10] =
      _mm256_sub_pd(bezout.matrix[1][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][8]));
  bezout.matrix[1][9][11] =
      _mm256_sub_pd(bezout.matrix[1][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[1][9]));
  bezout.matrix[1][9][3] =
      _mm256_sub_pd(bezout.matrix[1][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][0]));
  bezout.matrix[1][9][4] =
      _mm256_sub_pd(bezout.matrix[1][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][1]));
  bezout.matrix[1][9][5] =
      _mm256_sub_pd(bezout.matrix[1][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][2]));
  bezout.matrix[1][9][6] =
      _mm256_sub_pd(bezout.matrix[1][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][3]));
  bezout.matrix[1][9][7] =
      _mm256_sub_pd(bezout.matrix[1][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][4]));
  bezout.matrix[1][9][8] =
      _mm256_sub_pd(bezout.matrix[1][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][5]));
  bezout.matrix[1][9][9] =
      _mm256_sub_pd(bezout.matrix[1][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][6]));
  bezout.matrix[1][9][10] =
      _mm256_sub_pd(bezout.matrix[1][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][7]));
  bezout.matrix[1][9][11] =
      _mm256_sub_pd(bezout.matrix[1][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][8]));
  bezout.matrix[1][9][12] =
      _mm256_sub_pd(bezout.matrix[1][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[1][9]));
  bezout.matrix[1][9][4] =
      _mm256_sub_pd(bezout.matrix[1][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][0]));
  bezout.matrix[1][9][5] =
      _mm256_sub_pd(bezout.matrix[1][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][1]));
  bezout.matrix[1][9][6] =
      _mm256_sub_pd(bezout.matrix[1][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][2]));
  bezout.matrix[1][9][7] =
      _mm256_sub_pd(bezout.matrix[1][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][3]));
  bezout.matrix[1][9][8] =
      _mm256_sub_pd(bezout.matrix[1][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][4]));
  bezout.matrix[1][9][9] =
      _mm256_sub_pd(bezout.matrix[1][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][5]));
  bezout.matrix[1][9][10] =
      _mm256_sub_pd(bezout.matrix[1][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][6]));
  bezout.matrix[1][9][11] =
      _mm256_sub_pd(bezout.matrix[1][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][7]));
  bezout.matrix[1][9][12] =
      _mm256_sub_pd(bezout.matrix[1][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][8]));
  bezout.matrix[1][9][13] =
      _mm256_sub_pd(bezout.matrix[1][9][13],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[1][9]));
  bezout.matrix[1][9][5] =
      _mm256_sub_pd(bezout.matrix[1][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][0]));
  bezout.matrix[1][9][6] =
      _mm256_sub_pd(bezout.matrix[1][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][1]));
  bezout.matrix[1][9][7] =
      _mm256_sub_pd(bezout.matrix[1][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][2]));
  bezout.matrix[1][9][8] =
      _mm256_sub_pd(bezout.matrix[1][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][3]));
  bezout.matrix[1][9][9] =
      _mm256_sub_pd(bezout.matrix[1][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][4]));
  bezout.matrix[1][9][10] =
      _mm256_sub_pd(bezout.matrix[1][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][5]));
  bezout.matrix[1][9][11] =
      _mm256_sub_pd(bezout.matrix[1][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][6]));
  bezout.matrix[1][9][12] =
      _mm256_sub_pd(bezout.matrix[1][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][7]));
  bezout.matrix[1][9][13] =
      _mm256_sub_pd(bezout.matrix[1][9][13],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][8]));
  bezout.matrix[1][9][14] =
      _mm256_sub_pd(bezout.matrix[1][9][14],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[1][9]));
  bezout.matrix[1][10][0] =
      _mm256_sub_pd(bezout.matrix[1][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][0]));
  bezout.matrix[1][10][1] =
      _mm256_sub_pd(bezout.matrix[1][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][1]));
  bezout.matrix[1][10][2] =
      _mm256_sub_pd(bezout.matrix[1][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][2]));
  bezout.matrix[1][10][3] =
      _mm256_sub_pd(bezout.matrix[1][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][3]));
  bezout.matrix[1][10][4] =
      _mm256_sub_pd(bezout.matrix[1][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][4]));
  bezout.matrix[1][10][5] =
      _mm256_sub_pd(bezout.matrix[1][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][5]));
  bezout.matrix[1][10][6] =
      _mm256_sub_pd(bezout.matrix[1][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][6]));
  bezout.matrix[1][10][7] =
      _mm256_sub_pd(bezout.matrix[1][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][7]));
  bezout.matrix[1][10][8] =
      _mm256_sub_pd(bezout.matrix[1][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][8]));
  bezout.matrix[1][10][9] =
      _mm256_sub_pd(bezout.matrix[1][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[1][9]));
  bezout.matrix[1][10][1] =
      _mm256_sub_pd(bezout.matrix[1][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][0]));
  bezout.matrix[1][10][2] =
      _mm256_sub_pd(bezout.matrix[1][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][1]));
  bezout.matrix[1][10][3] =
      _mm256_sub_pd(bezout.matrix[1][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][2]));
  bezout.matrix[1][10][4] =
      _mm256_sub_pd(bezout.matrix[1][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][3]));
  bezout.matrix[1][10][5] =
      _mm256_sub_pd(bezout.matrix[1][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][4]));
  bezout.matrix[1][10][6] =
      _mm256_sub_pd(bezout.matrix[1][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][5]));
  bezout.matrix[1][10][7] =
      _mm256_sub_pd(bezout.matrix[1][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][6]));
  bezout.matrix[1][10][8] =
      _mm256_sub_pd(bezout.matrix[1][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][7]));
  bezout.matrix[1][10][9] =
      _mm256_sub_pd(bezout.matrix[1][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][8]));
  bezout.matrix[1][10][10] =
      _mm256_sub_pd(bezout.matrix[1][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[1][9]));
  bezout.matrix[1][10][2] =
      _mm256_sub_pd(bezout.matrix[1][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][0]));
  bezout.matrix[1][10][3] =
      _mm256_sub_pd(bezout.matrix[1][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][1]));
  bezout.matrix[1][10][4] =
      _mm256_sub_pd(bezout.matrix[1][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][2]));
  bezout.matrix[1][10][5] =
      _mm256_sub_pd(bezout.matrix[1][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][3]));
  bezout.matrix[1][10][6] =
      _mm256_sub_pd(bezout.matrix[1][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][4]));
  bezout.matrix[1][10][7] =
      _mm256_sub_pd(bezout.matrix[1][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][5]));
  bezout.matrix[1][10][8] =
      _mm256_sub_pd(bezout.matrix[1][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][6]));
  bezout.matrix[1][10][9] =
      _mm256_sub_pd(bezout.matrix[1][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][7]));
  bezout.matrix[1][10][10] =
      _mm256_sub_pd(bezout.matrix[1][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][8]));
  bezout.matrix[1][10][11] =
      _mm256_sub_pd(bezout.matrix[1][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[1][9]));
  bezout.matrix[1][10][3] =
      _mm256_sub_pd(bezout.matrix[1][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][0]));
  bezout.matrix[1][10][4] =
      _mm256_sub_pd(bezout.matrix[1][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][1]));
  bezout.matrix[1][10][5] =
      _mm256_sub_pd(bezout.matrix[1][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][2]));
  bezout.matrix[1][10][6] =
      _mm256_sub_pd(bezout.matrix[1][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][3]));
  bezout.matrix[1][10][7] =
      _mm256_sub_pd(bezout.matrix[1][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][4]));
  bezout.matrix[1][10][8] =
      _mm256_sub_pd(bezout.matrix[1][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][5]));
  bezout.matrix[1][10][9] =
      _mm256_sub_pd(bezout.matrix[1][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][6]));
  bezout.matrix[1][10][10] =
      _mm256_sub_pd(bezout.matrix[1][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][7]));
  bezout.matrix[1][10][11] =
      _mm256_sub_pd(bezout.matrix[1][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][8]));
  bezout.matrix[1][10][12] =
      _mm256_sub_pd(bezout.matrix[1][10][12],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[1][9]));
  bezout.matrix[1][10][4] =
      _mm256_sub_pd(bezout.matrix[1][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][0]));
  bezout.matrix[1][10][5] =
      _mm256_sub_pd(bezout.matrix[1][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][1]));
  bezout.matrix[1][10][6] =
      _mm256_sub_pd(bezout.matrix[1][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][2]));
  bezout.matrix[1][10][7] =
      _mm256_sub_pd(bezout.matrix[1][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][3]));
  bezout.matrix[1][10][8] =
      _mm256_sub_pd(bezout.matrix[1][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][4]));
  bezout.matrix[1][10][9] =
      _mm256_sub_pd(bezout.matrix[1][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][5]));
  bezout.matrix[1][10][10] =
      _mm256_sub_pd(bezout.matrix[1][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][6]));
  bezout.matrix[1][10][11] =
      _mm256_sub_pd(bezout.matrix[1][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][7]));
  bezout.matrix[1][10][12] =
      _mm256_sub_pd(bezout.matrix[1][10][12],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][8]));
  bezout.matrix[1][10][13] =
      _mm256_sub_pd(bezout.matrix[1][10][13],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[1][9]));
  bezout.matrix[1][11][0] =
      _mm256_sub_pd(bezout.matrix[1][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][0]));
  bezout.matrix[1][11][1] =
      _mm256_sub_pd(bezout.matrix[1][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][1]));
  bezout.matrix[1][11][2] =
      _mm256_sub_pd(bezout.matrix[1][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][2]));
  bezout.matrix[1][11][3] =
      _mm256_sub_pd(bezout.matrix[1][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][3]));
  bezout.matrix[1][11][4] =
      _mm256_sub_pd(bezout.matrix[1][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][4]));
  bezout.matrix[1][11][5] =
      _mm256_sub_pd(bezout.matrix[1][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][5]));
  bezout.matrix[1][11][6] =
      _mm256_sub_pd(bezout.matrix[1][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][6]));
  bezout.matrix[1][11][7] =
      _mm256_sub_pd(bezout.matrix[1][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][7]));
  bezout.matrix[1][11][8] =
      _mm256_sub_pd(bezout.matrix[1][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][8]));
  bezout.matrix[1][11][9] =
      _mm256_sub_pd(bezout.matrix[1][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[1][9]));
  bezout.matrix[1][11][1] =
      _mm256_sub_pd(bezout.matrix[1][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][0]));
  bezout.matrix[1][11][2] =
      _mm256_sub_pd(bezout.matrix[1][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][1]));
  bezout.matrix[1][11][3] =
      _mm256_sub_pd(bezout.matrix[1][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][2]));
  bezout.matrix[1][11][4] =
      _mm256_sub_pd(bezout.matrix[1][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][3]));
  bezout.matrix[1][11][5] =
      _mm256_sub_pd(bezout.matrix[1][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][4]));
  bezout.matrix[1][11][6] =
      _mm256_sub_pd(bezout.matrix[1][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][5]));
  bezout.matrix[1][11][7] =
      _mm256_sub_pd(bezout.matrix[1][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][6]));
  bezout.matrix[1][11][8] =
      _mm256_sub_pd(bezout.matrix[1][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][7]));
  bezout.matrix[1][11][9] =
      _mm256_sub_pd(bezout.matrix[1][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][8]));
  bezout.matrix[1][11][10] =
      _mm256_sub_pd(bezout.matrix[1][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[1][9]));
  bezout.matrix[1][11][2] =
      _mm256_sub_pd(bezout.matrix[1][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][0]));
  bezout.matrix[1][11][3] =
      _mm256_sub_pd(bezout.matrix[1][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][1]));
  bezout.matrix[1][11][4] =
      _mm256_sub_pd(bezout.matrix[1][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][2]));
  bezout.matrix[1][11][5] =
      _mm256_sub_pd(bezout.matrix[1][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][3]));
  bezout.matrix[1][11][6] =
      _mm256_sub_pd(bezout.matrix[1][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][4]));
  bezout.matrix[1][11][7] =
      _mm256_sub_pd(bezout.matrix[1][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][5]));
  bezout.matrix[1][11][8] =
      _mm256_sub_pd(bezout.matrix[1][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][6]));
  bezout.matrix[1][11][9] =
      _mm256_sub_pd(bezout.matrix[1][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][7]));
  bezout.matrix[1][11][10] =
      _mm256_sub_pd(bezout.matrix[1][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][8]));
  bezout.matrix[1][11][11] =
      _mm256_sub_pd(bezout.matrix[1][11][11],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[1][9]));
  bezout.matrix[1][11][3] =
      _mm256_sub_pd(bezout.matrix[1][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][0]));
  bezout.matrix[1][11][4] =
      _mm256_sub_pd(bezout.matrix[1][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][1]));
  bezout.matrix[1][11][5] =
      _mm256_sub_pd(bezout.matrix[1][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][2]));
  bezout.matrix[1][11][6] =
      _mm256_sub_pd(bezout.matrix[1][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][3]));
  bezout.matrix[1][11][7] =
      _mm256_sub_pd(bezout.matrix[1][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][4]));
  bezout.matrix[1][11][8] =
      _mm256_sub_pd(bezout.matrix[1][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][5]));
  bezout.matrix[1][11][9] =
      _mm256_sub_pd(bezout.matrix[1][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][6]));
  bezout.matrix[1][11][10] =
      _mm256_sub_pd(bezout.matrix[1][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][7]));
  bezout.matrix[1][11][11] =
      _mm256_sub_pd(bezout.matrix[1][11][11],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][8]));
  bezout.matrix[1][11][12] =
      _mm256_sub_pd(bezout.matrix[1][11][12],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[1][9]));
  bezout.matrix[1][12][0] =
      _mm256_sub_pd(bezout.matrix[1][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][0]));
  bezout.matrix[1][12][1] =
      _mm256_sub_pd(bezout.matrix[1][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][1]));
  bezout.matrix[1][12][2] =
      _mm256_sub_pd(bezout.matrix[1][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][2]));
  bezout.matrix[1][12][3] =
      _mm256_sub_pd(bezout.matrix[1][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][3]));
  bezout.matrix[1][12][4] =
      _mm256_sub_pd(bezout.matrix[1][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][4]));
  bezout.matrix[1][12][5] =
      _mm256_sub_pd(bezout.matrix[1][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][5]));
  bezout.matrix[1][12][6] =
      _mm256_sub_pd(bezout.matrix[1][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][6]));
  bezout.matrix[1][12][7] =
      _mm256_sub_pd(bezout.matrix[1][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][7]));
  bezout.matrix[1][12][8] =
      _mm256_sub_pd(bezout.matrix[1][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][8]));
  bezout.matrix[1][12][9] =
      _mm256_sub_pd(bezout.matrix[1][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[1][9]));
  bezout.matrix[1][12][1] =
      _mm256_sub_pd(bezout.matrix[1][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][0]));
  bezout.matrix[1][12][2] =
      _mm256_sub_pd(bezout.matrix[1][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][1]));
  bezout.matrix[1][12][3] =
      _mm256_sub_pd(bezout.matrix[1][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][2]));
  bezout.matrix[1][12][4] =
      _mm256_sub_pd(bezout.matrix[1][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][3]));
  bezout.matrix[1][12][5] =
      _mm256_sub_pd(bezout.matrix[1][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][4]));
  bezout.matrix[1][12][6] =
      _mm256_sub_pd(bezout.matrix[1][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][5]));
  bezout.matrix[1][12][7] =
      _mm256_sub_pd(bezout.matrix[1][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][6]));
  bezout.matrix[1][12][8] =
      _mm256_sub_pd(bezout.matrix[1][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][7]));
  bezout.matrix[1][12][9] =
      _mm256_sub_pd(bezout.matrix[1][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][8]));
  bezout.matrix[1][12][10] =
      _mm256_sub_pd(bezout.matrix[1][12][10],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[1][9]));
  bezout.matrix[1][12][2] =
      _mm256_sub_pd(bezout.matrix[1][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][0]));
  bezout.matrix[1][12][3] =
      _mm256_sub_pd(bezout.matrix[1][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][1]));
  bezout.matrix[1][12][4] =
      _mm256_sub_pd(bezout.matrix[1][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][2]));
  bezout.matrix[1][12][5] =
      _mm256_sub_pd(bezout.matrix[1][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][3]));
  bezout.matrix[1][12][6] =
      _mm256_sub_pd(bezout.matrix[1][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][4]));
  bezout.matrix[1][12][7] =
      _mm256_sub_pd(bezout.matrix[1][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][5]));
  bezout.matrix[1][12][8] =
      _mm256_sub_pd(bezout.matrix[1][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][6]));
  bezout.matrix[1][12][9] =
      _mm256_sub_pd(bezout.matrix[1][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][7]));
  bezout.matrix[1][12][10] =
      _mm256_sub_pd(bezout.matrix[1][12][10],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][8]));
  bezout.matrix[1][12][11] =
      _mm256_sub_pd(bezout.matrix[1][12][11],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[1][9]));
  bezout.matrix[1][13][0] =
      _mm256_sub_pd(bezout.matrix[1][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][0]));
  bezout.matrix[1][13][1] =
      _mm256_sub_pd(bezout.matrix[1][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][1]));
  bezout.matrix[1][13][2] =
      _mm256_sub_pd(bezout.matrix[1][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][2]));
  bezout.matrix[1][13][3] =
      _mm256_sub_pd(bezout.matrix[1][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][3]));
  bezout.matrix[1][13][4] =
      _mm256_sub_pd(bezout.matrix[1][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][4]));
  bezout.matrix[1][13][5] =
      _mm256_sub_pd(bezout.matrix[1][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][5]));
  bezout.matrix[1][13][6] =
      _mm256_sub_pd(bezout.matrix[1][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][6]));
  bezout.matrix[1][13][7] =
      _mm256_sub_pd(bezout.matrix[1][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][7]));
  bezout.matrix[1][13][8] =
      _mm256_sub_pd(bezout.matrix[1][13][8],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][8]));
  bezout.matrix[1][13][9] =
      _mm256_sub_pd(bezout.matrix[1][13][9],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[1][9]));
  bezout.matrix[1][13][1] =
      _mm256_sub_pd(bezout.matrix[1][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][0]));
  bezout.matrix[1][13][2] =
      _mm256_sub_pd(bezout.matrix[1][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][1]));
  bezout.matrix[1][13][3] =
      _mm256_sub_pd(bezout.matrix[1][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][2]));
  bezout.matrix[1][13][4] =
      _mm256_sub_pd(bezout.matrix[1][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][3]));
  bezout.matrix[1][13][5] =
      _mm256_sub_pd(bezout.matrix[1][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][4]));
  bezout.matrix[1][13][6] =
      _mm256_sub_pd(bezout.matrix[1][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][5]));
  bezout.matrix[1][13][7] =
      _mm256_sub_pd(bezout.matrix[1][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][6]));
  bezout.matrix[1][13][8] =
      _mm256_sub_pd(bezout.matrix[1][13][8],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][7]));
  bezout.matrix[1][13][9] =
      _mm256_sub_pd(bezout.matrix[1][13][9],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][8]));
  bezout.matrix[1][13][10] =
      _mm256_sub_pd(bezout.matrix[1][13][10],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[1][9]));
  bezout.matrix[1][14][0] =
      _mm256_sub_pd(bezout.matrix[1][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][0]));
  bezout.matrix[1][14][1] =
      _mm256_sub_pd(bezout.matrix[1][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][1]));
  bezout.matrix[1][14][2] =
      _mm256_sub_pd(bezout.matrix[1][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][2]));
  bezout.matrix[1][14][3] =
      _mm256_sub_pd(bezout.matrix[1][14][3],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][3]));
  bezout.matrix[1][14][4] =
      _mm256_sub_pd(bezout.matrix[1][14][4],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][4]));
  bezout.matrix[1][14][5] =
      _mm256_sub_pd(bezout.matrix[1][14][5],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][5]));
  bezout.matrix[1][14][6] =
      _mm256_sub_pd(bezout.matrix[1][14][6],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][6]));
  bezout.matrix[1][14][7] =
      _mm256_sub_pd(bezout.matrix[1][14][7],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][7]));
  bezout.matrix[1][14][8] =
      _mm256_sub_pd(bezout.matrix[1][14][8],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][8]));
  bezout.matrix[1][14][9] =
      _mm256_sub_pd(bezout.matrix[1][14][9],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[1][9]));
  bezout.matrix[2][2][0] =
      _mm256_add_pd(bezout.matrix[2][2][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[3][0]));
  bezout.matrix[2][2][1] =
      _mm256_add_pd(bezout.matrix[2][2][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[3][1]));
  bezout.matrix[2][2][2] =
      _mm256_add_pd(bezout.matrix[2][2][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[3][2]));
  bezout.matrix[2][2][3] =
      _mm256_add_pd(bezout.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[3][3]));
  bezout.matrix[2][2][4] =
      _mm256_add_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[3][4]));
  bezout.matrix[2][2][5] =
      _mm256_add_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[3][5]));
  bezout.matrix[2][2][6] =
      _mm256_add_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[3][6]));
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[3][7]));
  bezout.matrix[2][2][1] =
      _mm256_add_pd(bezout.matrix[2][2][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[3][0]));
  bezout.matrix[2][2][2] =
      _mm256_add_pd(bezout.matrix[2][2][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[3][1]));
  bezout.matrix[2][2][3] =
      _mm256_add_pd(bezout.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[3][2]));
  bezout.matrix[2][2][4] =
      _mm256_add_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[3][3]));
  bezout.matrix[2][2][5] =
      _mm256_add_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[3][4]));
  bezout.matrix[2][2][6] =
      _mm256_add_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[3][5]));
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[3][6]));
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[3][7]));
  bezout.matrix[2][2][2] =
      _mm256_add_pd(bezout.matrix[2][2][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[3][0]));
  bezout.matrix[2][2][3] =
      _mm256_add_pd(bezout.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[3][1]));
  bezout.matrix[2][2][4] =
      _mm256_add_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[3][2]));
  bezout.matrix[2][2][5] =
      _mm256_add_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[3][3]));
  bezout.matrix[2][2][6] =
      _mm256_add_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[3][4]));
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[3][5]));
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[3][6]));
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[3][7]));
  bezout.matrix[2][2][3] =
      _mm256_add_pd(bezout.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[3][0]));
  bezout.matrix[2][2][4] =
      _mm256_add_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[3][1]));
  bezout.matrix[2][2][5] =
      _mm256_add_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[3][2]));
  bezout.matrix[2][2][6] =
      _mm256_add_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[3][3]));
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[3][4]));
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[3][5]));
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[3][6]));
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[3][7]));
  bezout.matrix[2][2][4] =
      _mm256_add_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[3][0]));
  bezout.matrix[2][2][5] =
      _mm256_add_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[3][1]));
  bezout.matrix[2][2][6] =
      _mm256_add_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[3][2]));
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[3][3]));
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[3][4]));
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[3][5]));
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[3][6]));
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[3][7]));
  bezout.matrix[2][2][5] =
      _mm256_add_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[3][0]));
  bezout.matrix[2][2][6] =
      _mm256_add_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[3][1]));
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[3][2]));
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[3][3]));
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[3][4]));
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[3][5]));
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[3][6]));
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[3][7]));
  bezout.matrix[2][2][6] =
      _mm256_add_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[3][0]));
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[3][1]));
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[3][2]));
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[3][3]));
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[3][4]));
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[3][5]));
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[3][6]));
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[3][7]));
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[3][0]));
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[3][1]));
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[3][2]));
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[3][3]));
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[3][4]));
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[3][5]));
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[3][6]));
  bezout.matrix[2][2][14] =
      _mm256_add_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[3][7]));
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[3][0]));
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[3][1]));
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[3][2]));
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[3][3]));
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[3][4]));
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[3][5]));
  bezout.matrix[2][2][14] =
      _mm256_add_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[3][6]));
  bezout.matrix[2][2][15] =
      _mm256_add_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[3][7]));
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[3][0]));
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[3][1]));
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[3][2]));
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[3][3]));
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[3][4]));
  bezout.matrix[2][2][14] =
      _mm256_add_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[3][5]));
  bezout.matrix[2][2][15] =
      _mm256_add_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[3][6]));
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[3][0]));
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[3][1]));
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[3][2]));
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[3][3]));
  bezout.matrix[2][2][14] =
      _mm256_add_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[3][4]));
  bezout.matrix[2][2][15] =
      _mm256_add_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[3][5]));
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[3][0]));
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[3][1]));
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[3][2]));
  bezout.matrix[2][2][14] =
      _mm256_add_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[3][3]));
  bezout.matrix[2][2][15] =
      _mm256_add_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[3][4]));
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[3][0]));
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[3][1]));
  bezout.matrix[2][2][14] =
      _mm256_add_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[3][2]));
  bezout.matrix[2][2][15] =
      _mm256_add_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[3][3]));
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[3][0]));
  bezout.matrix[2][2][14] =
      _mm256_add_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[3][1]));
  bezout.matrix[2][2][15] =
      _mm256_add_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[3][2]));
  bezout.matrix[2][2][0] =
      _mm256_sub_pd(bezout.matrix[2][2][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][0]));
  bezout.matrix[2][2][1] =
      _mm256_sub_pd(bezout.matrix[2][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][1]));
  bezout.matrix[2][2][2] =
      _mm256_sub_pd(bezout.matrix[2][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][2]));
  bezout.matrix[2][2][3] =
      _mm256_sub_pd(bezout.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][3]));
  bezout.matrix[2][2][4] =
      _mm256_sub_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][4]));
  bezout.matrix[2][2][5] =
      _mm256_sub_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][5]));
  bezout.matrix[2][2][6] =
      _mm256_sub_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][6]));
  bezout.matrix[2][2][7] =
      _mm256_sub_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][7]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[2][8]));
  bezout.matrix[2][2][1] =
      _mm256_sub_pd(bezout.matrix[2][2][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][0]));
  bezout.matrix[2][2][2] =
      _mm256_sub_pd(bezout.matrix[2][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][1]));
  bezout.matrix[2][2][3] =
      _mm256_sub_pd(bezout.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][2]));
  bezout.matrix[2][2][4] =
      _mm256_sub_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][3]));
  bezout.matrix[2][2][5] =
      _mm256_sub_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][4]));
  bezout.matrix[2][2][6] =
      _mm256_sub_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][5]));
  bezout.matrix[2][2][7] =
      _mm256_sub_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][6]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][7]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[2][8]));
  bezout.matrix[2][2][2] =
      _mm256_sub_pd(bezout.matrix[2][2][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][0]));
  bezout.matrix[2][2][3] =
      _mm256_sub_pd(bezout.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][1]));
  bezout.matrix[2][2][4] =
      _mm256_sub_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][2]));
  bezout.matrix[2][2][5] =
      _mm256_sub_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][3]));
  bezout.matrix[2][2][6] =
      _mm256_sub_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][4]));
  bezout.matrix[2][2][7] =
      _mm256_sub_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][5]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][6]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][7]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[2][8]));
  bezout.matrix[2][2][3] =
      _mm256_sub_pd(bezout.matrix[2][2][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][0]));
  bezout.matrix[2][2][4] =
      _mm256_sub_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][1]));
  bezout.matrix[2][2][5] =
      _mm256_sub_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][2]));
  bezout.matrix[2][2][6] =
      _mm256_sub_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][3]));
  bezout.matrix[2][2][7] =
      _mm256_sub_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][4]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][5]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][6]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][7]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[2][8]));
  bezout.matrix[2][2][4] =
      _mm256_sub_pd(bezout.matrix[2][2][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][0]));
  bezout.matrix[2][2][5] =
      _mm256_sub_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][1]));
  bezout.matrix[2][2][6] =
      _mm256_sub_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][2]));
  bezout.matrix[2][2][7] =
      _mm256_sub_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][3]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][4]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][5]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][6]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][7]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[2][8]));
  bezout.matrix[2][2][5] =
      _mm256_sub_pd(bezout.matrix[2][2][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][0]));
  bezout.matrix[2][2][6] =
      _mm256_sub_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][1]));
  bezout.matrix[2][2][7] =
      _mm256_sub_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][2]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][3]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][4]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][5]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][6]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][7]));
  bezout.matrix[2][2][13] =
      _mm256_sub_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[2][8]));
  bezout.matrix[2][2][6] =
      _mm256_sub_pd(bezout.matrix[2][2][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][0]));
  bezout.matrix[2][2][7] =
      _mm256_sub_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][1]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][2]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][3]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][4]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][5]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][6]));
  bezout.matrix[2][2][13] =
      _mm256_sub_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][7]));
  bezout.matrix[2][2][14] =
      _mm256_sub_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[2][8]));
  bezout.matrix[2][2][7] =
      _mm256_sub_pd(bezout.matrix[2][2][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][0]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][1]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][2]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][3]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][4]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][5]));
  bezout.matrix[2][2][13] =
      _mm256_sub_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][6]));
  bezout.matrix[2][2][14] =
      _mm256_sub_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][7]));
  bezout.matrix[2][2][15] =
      _mm256_sub_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[2][8]));
  bezout.matrix[2][2][8] =
      _mm256_sub_pd(bezout.matrix[2][2][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[2][0]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[2][1]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[2][2]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[2][3]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[2][4]));
  bezout.matrix[2][2][13] =
      _mm256_sub_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[2][5]));
  bezout.matrix[2][2][14] =
      _mm256_sub_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[2][6]));
  bezout.matrix[2][2][15] =
      _mm256_sub_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[2][7]));
  bezout.matrix[2][2][9] =
      _mm256_sub_pd(bezout.matrix[2][2][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[2][0]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[2][1]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[2][2]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[2][3]));
  bezout.matrix[2][2][13] =
      _mm256_sub_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[2][4]));
  bezout.matrix[2][2][14] =
      _mm256_sub_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[2][5]));
  bezout.matrix[2][2][15] =
      _mm256_sub_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[2][6]));
  bezout.matrix[2][2][10] =
      _mm256_sub_pd(bezout.matrix[2][2][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[2][0]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[2][1]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[2][2]));
  bezout.matrix[2][2][13] =
      _mm256_sub_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[2][3]));
  bezout.matrix[2][2][14] =
      _mm256_sub_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[2][4]));
  bezout.matrix[2][2][15] =
      _mm256_sub_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[2][5]));
  bezout.matrix[2][2][11] =
      _mm256_sub_pd(bezout.matrix[2][2][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[2][0]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[2][1]));
  bezout.matrix[2][2][13] =
      _mm256_sub_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[2][2]));
  bezout.matrix[2][2][14] =
      _mm256_sub_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[2][3]));
  bezout.matrix[2][2][15] =
      _mm256_sub_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[2][4]));
  bezout.matrix[2][2][12] =
      _mm256_sub_pd(bezout.matrix[2][2][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[2][0]));
  bezout.matrix[2][2][13] =
      _mm256_sub_pd(bezout.matrix[2][2][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[2][1]));
  bezout.matrix[2][2][14] =
      _mm256_sub_pd(bezout.matrix[2][2][14],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[2][2]));
  bezout.matrix[2][2][15] =
      _mm256_sub_pd(bezout.matrix[2][2][15],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[2][3]));
  bezout.matrix[2][3][0] =
      _mm256_add_pd(bezout.matrix[2][3][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[4][0]));
  bezout.matrix[2][3][1] =
      _mm256_add_pd(bezout.matrix[2][3][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[4][1]));
  bezout.matrix[2][3][2] =
      _mm256_add_pd(bezout.matrix[2][3][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[4][2]));
  bezout.matrix[2][3][3] =
      _mm256_add_pd(bezout.matrix[2][3][3],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[4][3]));
  bezout.matrix[2][3][4] =
      _mm256_add_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[4][4]));
  bezout.matrix[2][3][5] =
      _mm256_add_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[4][5]));
  bezout.matrix[2][3][6] =
      _mm256_add_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[4][6]));
  bezout.matrix[2][3][1] =
      _mm256_add_pd(bezout.matrix[2][3][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[4][0]));
  bezout.matrix[2][3][2] =
      _mm256_add_pd(bezout.matrix[2][3][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[4][1]));
  bezout.matrix[2][3][3] =
      _mm256_add_pd(bezout.matrix[2][3][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[4][2]));
  bezout.matrix[2][3][4] =
      _mm256_add_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[4][3]));
  bezout.matrix[2][3][5] =
      _mm256_add_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[4][4]));
  bezout.matrix[2][3][6] =
      _mm256_add_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[4][5]));
  bezout.matrix[2][3][7] =
      _mm256_add_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[4][6]));
  bezout.matrix[2][3][2] =
      _mm256_add_pd(bezout.matrix[2][3][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[4][0]));
  bezout.matrix[2][3][3] =
      _mm256_add_pd(bezout.matrix[2][3][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[4][1]));
  bezout.matrix[2][3][4] =
      _mm256_add_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[4][2]));
  bezout.matrix[2][3][5] =
      _mm256_add_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[4][3]));
  bezout.matrix[2][3][6] =
      _mm256_add_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[4][4]));
  bezout.matrix[2][3][7] =
      _mm256_add_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[4][5]));
  bezout.matrix[2][3][8] =
      _mm256_add_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[4][6]));
  bezout.matrix[2][3][3] =
      _mm256_add_pd(bezout.matrix[2][3][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[4][0]));
  bezout.matrix[2][3][4] =
      _mm256_add_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[4][1]));
  bezout.matrix[2][3][5] =
      _mm256_add_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[4][2]));
  bezout.matrix[2][3][6] =
      _mm256_add_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[4][3]));
  bezout.matrix[2][3][7] =
      _mm256_add_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[4][4]));
  bezout.matrix[2][3][8] =
      _mm256_add_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[4][5]));
  bezout.matrix[2][3][9] =
      _mm256_add_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[4][6]));
  bezout.matrix[2][3][4] =
      _mm256_add_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[4][0]));
  bezout.matrix[2][3][5] =
      _mm256_add_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[4][1]));
  bezout.matrix[2][3][6] =
      _mm256_add_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[4][2]));
  bezout.matrix[2][3][7] =
      _mm256_add_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[4][3]));
  bezout.matrix[2][3][8] =
      _mm256_add_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[4][4]));
  bezout.matrix[2][3][9] =
      _mm256_add_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[4][5]));
  bezout.matrix[2][3][10] =
      _mm256_add_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[4][6]));
  bezout.matrix[2][3][5] =
      _mm256_add_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[4][0]));
  bezout.matrix[2][3][6] =
      _mm256_add_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[4][1]));
  bezout.matrix[2][3][7] =
      _mm256_add_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[4][2]));
  bezout.matrix[2][3][8] =
      _mm256_add_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[4][3]));
  bezout.matrix[2][3][9] =
      _mm256_add_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[4][4]));
  bezout.matrix[2][3][10] =
      _mm256_add_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[4][5]));
  bezout.matrix[2][3][11] =
      _mm256_add_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[4][6]));
  bezout.matrix[2][3][6] =
      _mm256_add_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[4][0]));
  bezout.matrix[2][3][7] =
      _mm256_add_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[4][1]));
  bezout.matrix[2][3][8] =
      _mm256_add_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[4][2]));
  bezout.matrix[2][3][9] =
      _mm256_add_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[4][3]));
  bezout.matrix[2][3][10] =
      _mm256_add_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[4][4]));
  bezout.matrix[2][3][11] =
      _mm256_add_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[4][5]));
  bezout.matrix[2][3][12] =
      _mm256_add_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[4][6]));
  bezout.matrix[2][3][7] =
      _mm256_add_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[4][0]));
  bezout.matrix[2][3][8] =
      _mm256_add_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[4][1]));
  bezout.matrix[2][3][9] =
      _mm256_add_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[4][2]));
  bezout.matrix[2][3][10] =
      _mm256_add_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[4][3]));
  bezout.matrix[2][3][11] =
      _mm256_add_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[4][4]));
  bezout.matrix[2][3][12] =
      _mm256_add_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[4][5]));
  bezout.matrix[2][3][13] =
      _mm256_add_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[4][6]));
  bezout.matrix[2][3][8] =
      _mm256_add_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[4][0]));
  bezout.matrix[2][3][9] =
      _mm256_add_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[4][1]));
  bezout.matrix[2][3][10] =
      _mm256_add_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[4][2]));
  bezout.matrix[2][3][11] =
      _mm256_add_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[4][3]));
  bezout.matrix[2][3][12] =
      _mm256_add_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[4][4]));
  bezout.matrix[2][3][13] =
      _mm256_add_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[4][5]));
  bezout.matrix[2][3][14] =
      _mm256_add_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[4][6]));
  bezout.matrix[2][3][9] =
      _mm256_add_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[4][0]));
  bezout.matrix[2][3][10] =
      _mm256_add_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[4][1]));
  bezout.matrix[2][3][11] =
      _mm256_add_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[4][2]));
  bezout.matrix[2][3][12] =
      _mm256_add_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[4][3]));
  bezout.matrix[2][3][13] =
      _mm256_add_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[4][4]));
  bezout.matrix[2][3][14] =
      _mm256_add_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[4][5]));
  bezout.matrix[2][3][15] =
      _mm256_add_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[4][6]));
  bezout.matrix[2][3][10] =
      _mm256_add_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[4][0]));
  bezout.matrix[2][3][11] =
      _mm256_add_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[4][1]));
  bezout.matrix[2][3][12] =
      _mm256_add_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[4][2]));
  bezout.matrix[2][3][13] =
      _mm256_add_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[4][3]));
  bezout.matrix[2][3][14] =
      _mm256_add_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[4][4]));
  bezout.matrix[2][3][15] =
      _mm256_add_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[4][5]));
  bezout.matrix[2][3][11] =
      _mm256_add_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[4][0]));
  bezout.matrix[2][3][12] =
      _mm256_add_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[4][1]));
  bezout.matrix[2][3][13] =
      _mm256_add_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[4][2]));
  bezout.matrix[2][3][14] =
      _mm256_add_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[4][3]));
  bezout.matrix[2][3][15] =
      _mm256_add_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[4][4]));
  bezout.matrix[2][3][12] =
      _mm256_add_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[4][0]));
  bezout.matrix[2][3][13] =
      _mm256_add_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[4][1]));
  bezout.matrix[2][3][14] =
      _mm256_add_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[4][2]));
  bezout.matrix[2][3][15] =
      _mm256_add_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[4][3]));
  bezout.matrix[2][3][13] =
      _mm256_add_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[4][0]));
  bezout.matrix[2][3][14] =
      _mm256_add_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[4][1]));
  bezout.matrix[2][3][15] =
      _mm256_add_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[4][2]));
  bezout.matrix[2][3][0] =
      _mm256_sub_pd(bezout.matrix[2][3][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][0]));
  bezout.matrix[2][3][1] =
      _mm256_sub_pd(bezout.matrix[2][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][1]));
  bezout.matrix[2][3][2] =
      _mm256_sub_pd(bezout.matrix[2][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][2]));
  bezout.matrix[2][3][3] =
      _mm256_sub_pd(bezout.matrix[2][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][3]));
  bezout.matrix[2][3][4] =
      _mm256_sub_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][4]));
  bezout.matrix[2][3][5] =
      _mm256_sub_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][5]));
  bezout.matrix[2][3][6] =
      _mm256_sub_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][6]));
  bezout.matrix[2][3][7] =
      _mm256_sub_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][7]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[2][8]));
  bezout.matrix[2][3][1] =
      _mm256_sub_pd(bezout.matrix[2][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][0]));
  bezout.matrix[2][3][2] =
      _mm256_sub_pd(bezout.matrix[2][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][1]));
  bezout.matrix[2][3][3] =
      _mm256_sub_pd(bezout.matrix[2][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][2]));
  bezout.matrix[2][3][4] =
      _mm256_sub_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][3]));
  bezout.matrix[2][3][5] =
      _mm256_sub_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][4]));
  bezout.matrix[2][3][6] =
      _mm256_sub_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][5]));
  bezout.matrix[2][3][7] =
      _mm256_sub_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][6]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][7]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[2][8]));
  bezout.matrix[2][3][2] =
      _mm256_sub_pd(bezout.matrix[2][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][0]));
  bezout.matrix[2][3][3] =
      _mm256_sub_pd(bezout.matrix[2][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][1]));
  bezout.matrix[2][3][4] =
      _mm256_sub_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][2]));
  bezout.matrix[2][3][5] =
      _mm256_sub_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][3]));
  bezout.matrix[2][3][6] =
      _mm256_sub_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][4]));
  bezout.matrix[2][3][7] =
      _mm256_sub_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][5]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][6]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][7]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[2][8]));
  bezout.matrix[2][3][3] =
      _mm256_sub_pd(bezout.matrix[2][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][0]));
  bezout.matrix[2][3][4] =
      _mm256_sub_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][1]));
  bezout.matrix[2][3][5] =
      _mm256_sub_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][2]));
  bezout.matrix[2][3][6] =
      _mm256_sub_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][3]));
  bezout.matrix[2][3][7] =
      _mm256_sub_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][4]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][5]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][6]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][7]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[2][8]));
  bezout.matrix[2][3][4] =
      _mm256_sub_pd(bezout.matrix[2][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][0]));
  bezout.matrix[2][3][5] =
      _mm256_sub_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][1]));
  bezout.matrix[2][3][6] =
      _mm256_sub_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][2]));
  bezout.matrix[2][3][7] =
      _mm256_sub_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][3]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][4]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][5]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][6]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][7]));
  bezout.matrix[2][3][12] =
      _mm256_sub_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[2][8]));
  bezout.matrix[2][3][5] =
      _mm256_sub_pd(bezout.matrix[2][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][0]));
  bezout.matrix[2][3][6] =
      _mm256_sub_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][1]));
  bezout.matrix[2][3][7] =
      _mm256_sub_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][2]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][3]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][4]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][5]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][6]));
  bezout.matrix[2][3][12] =
      _mm256_sub_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][7]));
  bezout.matrix[2][3][13] =
      _mm256_sub_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[2][8]));
  bezout.matrix[2][3][6] =
      _mm256_sub_pd(bezout.matrix[2][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][0]));
  bezout.matrix[2][3][7] =
      _mm256_sub_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][1]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][2]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][3]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][4]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][5]));
  bezout.matrix[2][3][12] =
      _mm256_sub_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][6]));
  bezout.matrix[2][3][13] =
      _mm256_sub_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][7]));
  bezout.matrix[2][3][14] =
      _mm256_sub_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[2][8]));
  bezout.matrix[2][3][7] =
      _mm256_sub_pd(bezout.matrix[2][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][0]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][1]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][2]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][3]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][4]));
  bezout.matrix[2][3][12] =
      _mm256_sub_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][5]));
  bezout.matrix[2][3][13] =
      _mm256_sub_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][6]));
  bezout.matrix[2][3][14] =
      _mm256_sub_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][7]));
  bezout.matrix[2][3][15] =
      _mm256_sub_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[2][8]));
  bezout.matrix[2][3][8] =
      _mm256_sub_pd(bezout.matrix[2][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[2][0]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[2][1]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[2][2]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[2][3]));
  bezout.matrix[2][3][12] =
      _mm256_sub_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[2][4]));
  bezout.matrix[2][3][13] =
      _mm256_sub_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[2][5]));
  bezout.matrix[2][3][14] =
      _mm256_sub_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[2][6]));
  bezout.matrix[2][3][15] =
      _mm256_sub_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[2][7]));
  bezout.matrix[2][3][9] =
      _mm256_sub_pd(bezout.matrix[2][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[2][0]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[2][1]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[2][2]));
  bezout.matrix[2][3][12] =
      _mm256_sub_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[2][3]));
  bezout.matrix[2][3][13] =
      _mm256_sub_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[2][4]));
  bezout.matrix[2][3][14] =
      _mm256_sub_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[2][5]));
  bezout.matrix[2][3][15] =
      _mm256_sub_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[2][6]));
  bezout.matrix[2][3][10] =
      _mm256_sub_pd(bezout.matrix[2][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[2][0]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[2][1]));
  bezout.matrix[2][3][12] =
      _mm256_sub_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[2][2]));
  bezout.matrix[2][3][13] =
      _mm256_sub_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[2][3]));
  bezout.matrix[2][3][14] =
      _mm256_sub_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[2][4]));
  bezout.matrix[2][3][15] =
      _mm256_sub_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[2][5]));
  bezout.matrix[2][3][11] =
      _mm256_sub_pd(bezout.matrix[2][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[2][0]));
  bezout.matrix[2][3][12] =
      _mm256_sub_pd(bezout.matrix[2][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[2][1]));
  bezout.matrix[2][3][13] =
      _mm256_sub_pd(bezout.matrix[2][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[2][2]));
  bezout.matrix[2][3][14] =
      _mm256_sub_pd(bezout.matrix[2][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[2][3]));
  bezout.matrix[2][3][15] =
      _mm256_sub_pd(bezout.matrix[2][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[2][4]));
  bezout.matrix[2][4][0] =
      _mm256_add_pd(bezout.matrix[2][4][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[5][0]));
  bezout.matrix[2][4][1] =
      _mm256_add_pd(bezout.matrix[2][4][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[5][1]));
  bezout.matrix[2][4][2] =
      _mm256_add_pd(bezout.matrix[2][4][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[5][2]));
  bezout.matrix[2][4][3] =
      _mm256_add_pd(bezout.matrix[2][4][3],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[5][3]));
  bezout.matrix[2][4][4] =
      _mm256_add_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[5][4]));
  bezout.matrix[2][4][5] =
      _mm256_add_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[5][5]));
  bezout.matrix[2][4][1] =
      _mm256_add_pd(bezout.matrix[2][4][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[5][0]));
  bezout.matrix[2][4][2] =
      _mm256_add_pd(bezout.matrix[2][4][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[5][1]));
  bezout.matrix[2][4][3] =
      _mm256_add_pd(bezout.matrix[2][4][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[5][2]));
  bezout.matrix[2][4][4] =
      _mm256_add_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[5][3]));
  bezout.matrix[2][4][5] =
      _mm256_add_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[5][4]));
  bezout.matrix[2][4][6] =
      _mm256_add_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[5][5]));
  bezout.matrix[2][4][2] =
      _mm256_add_pd(bezout.matrix[2][4][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[5][0]));
  bezout.matrix[2][4][3] =
      _mm256_add_pd(bezout.matrix[2][4][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[5][1]));
  bezout.matrix[2][4][4] =
      _mm256_add_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[5][2]));
  bezout.matrix[2][4][5] =
      _mm256_add_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[5][3]));
  bezout.matrix[2][4][6] =
      _mm256_add_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[5][4]));
  bezout.matrix[2][4][7] =
      _mm256_add_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[5][5]));
  bezout.matrix[2][4][3] =
      _mm256_add_pd(bezout.matrix[2][4][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[5][0]));
  bezout.matrix[2][4][4] =
      _mm256_add_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[5][1]));
  bezout.matrix[2][4][5] =
      _mm256_add_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[5][2]));
  bezout.matrix[2][4][6] =
      _mm256_add_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[5][3]));
  bezout.matrix[2][4][7] =
      _mm256_add_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[5][4]));
  bezout.matrix[2][4][8] =
      _mm256_add_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[5][5]));
  bezout.matrix[2][4][4] =
      _mm256_add_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[5][0]));
  bezout.matrix[2][4][5] =
      _mm256_add_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[5][1]));
  bezout.matrix[2][4][6] =
      _mm256_add_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[5][2]));
  bezout.matrix[2][4][7] =
      _mm256_add_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[5][3]));
  bezout.matrix[2][4][8] =
      _mm256_add_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[5][4]));
  bezout.matrix[2][4][9] =
      _mm256_add_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[5][5]));
  bezout.matrix[2][4][5] =
      _mm256_add_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[5][0]));
  bezout.matrix[2][4][6] =
      _mm256_add_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[5][1]));
  bezout.matrix[2][4][7] =
      _mm256_add_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[5][2]));
  bezout.matrix[2][4][8] =
      _mm256_add_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[5][3]));
  bezout.matrix[2][4][9] =
      _mm256_add_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[5][4]));
  bezout.matrix[2][4][10] =
      _mm256_add_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[5][5]));
  bezout.matrix[2][4][6] =
      _mm256_add_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[5][0]));
  bezout.matrix[2][4][7] =
      _mm256_add_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[5][1]));
  bezout.matrix[2][4][8] =
      _mm256_add_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[5][2]));
  bezout.matrix[2][4][9] =
      _mm256_add_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[5][3]));
  bezout.matrix[2][4][10] =
      _mm256_add_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[5][4]));
  bezout.matrix[2][4][11] =
      _mm256_add_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[5][5]));
  bezout.matrix[2][4][7] =
      _mm256_add_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[5][0]));
  bezout.matrix[2][4][8] =
      _mm256_add_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[5][1]));
  bezout.matrix[2][4][9] =
      _mm256_add_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[5][2]));
  bezout.matrix[2][4][10] =
      _mm256_add_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[5][3]));
  bezout.matrix[2][4][11] =
      _mm256_add_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[5][4]));
  bezout.matrix[2][4][12] =
      _mm256_add_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[5][5]));
  bezout.matrix[2][4][8] =
      _mm256_add_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[5][0]));
  bezout.matrix[2][4][9] =
      _mm256_add_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[5][1]));
  bezout.matrix[2][4][10] =
      _mm256_add_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[5][2]));
  bezout.matrix[2][4][11] =
      _mm256_add_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[5][3]));
  bezout.matrix[2][4][12] =
      _mm256_add_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[5][4]));
  bezout.matrix[2][4][13] =
      _mm256_add_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[5][5]));
  bezout.matrix[2][4][9] =
      _mm256_add_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[5][0]));
  bezout.matrix[2][4][10] =
      _mm256_add_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[5][1]));
  bezout.matrix[2][4][11] =
      _mm256_add_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[5][2]));
  bezout.matrix[2][4][12] =
      _mm256_add_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[5][3]));
  bezout.matrix[2][4][13] =
      _mm256_add_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[5][4]));
  bezout.matrix[2][4][14] =
      _mm256_add_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[5][5]));
  bezout.matrix[2][4][10] =
      _mm256_add_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[5][0]));
  bezout.matrix[2][4][11] =
      _mm256_add_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[5][1]));
  bezout.matrix[2][4][12] =
      _mm256_add_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[5][2]));
  bezout.matrix[2][4][13] =
      _mm256_add_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[5][3]));
  bezout.matrix[2][4][14] =
      _mm256_add_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[5][4]));
  bezout.matrix[2][4][15] =
      _mm256_add_pd(bezout.matrix[2][4][15],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[5][5]));
  bezout.matrix[2][4][11] =
      _mm256_add_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[5][0]));
  bezout.matrix[2][4][12] =
      _mm256_add_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[5][1]));
  bezout.matrix[2][4][13] =
      _mm256_add_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[5][2]));
  bezout.matrix[2][4][14] =
      _mm256_add_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[5][3]));
  bezout.matrix[2][4][15] =
      _mm256_add_pd(bezout.matrix[2][4][15],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[5][4]));
  bezout.matrix[2][4][12] =
      _mm256_add_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[5][0]));
  bezout.matrix[2][4][13] =
      _mm256_add_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[5][1]));
  bezout.matrix[2][4][14] =
      _mm256_add_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[5][2]));
  bezout.matrix[2][4][15] =
      _mm256_add_pd(bezout.matrix[2][4][15],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[5][3]));
  bezout.matrix[2][4][13] =
      _mm256_add_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[5][0]));
  bezout.matrix[2][4][14] =
      _mm256_add_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[5][1]));
  bezout.matrix[2][4][15] =
      _mm256_add_pd(bezout.matrix[2][4][15],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[5][2]));
  bezout.matrix[2][4][0] =
      _mm256_sub_pd(bezout.matrix[2][4][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][0]));
  bezout.matrix[2][4][1] =
      _mm256_sub_pd(bezout.matrix[2][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][1]));
  bezout.matrix[2][4][2] =
      _mm256_sub_pd(bezout.matrix[2][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][2]));
  bezout.matrix[2][4][3] =
      _mm256_sub_pd(bezout.matrix[2][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][3]));
  bezout.matrix[2][4][4] =
      _mm256_sub_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][4]));
  bezout.matrix[2][4][5] =
      _mm256_sub_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][5]));
  bezout.matrix[2][4][6] =
      _mm256_sub_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][6]));
  bezout.matrix[2][4][7] =
      _mm256_sub_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][7]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[2][8]));
  bezout.matrix[2][4][1] =
      _mm256_sub_pd(bezout.matrix[2][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][0]));
  bezout.matrix[2][4][2] =
      _mm256_sub_pd(bezout.matrix[2][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][1]));
  bezout.matrix[2][4][3] =
      _mm256_sub_pd(bezout.matrix[2][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][2]));
  bezout.matrix[2][4][4] =
      _mm256_sub_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][3]));
  bezout.matrix[2][4][5] =
      _mm256_sub_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][4]));
  bezout.matrix[2][4][6] =
      _mm256_sub_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][5]));
  bezout.matrix[2][4][7] =
      _mm256_sub_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][6]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][7]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[2][8]));
  bezout.matrix[2][4][2] =
      _mm256_sub_pd(bezout.matrix[2][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][0]));
  bezout.matrix[2][4][3] =
      _mm256_sub_pd(bezout.matrix[2][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][1]));
  bezout.matrix[2][4][4] =
      _mm256_sub_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][2]));
  bezout.matrix[2][4][5] =
      _mm256_sub_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][3]));
  bezout.matrix[2][4][6] =
      _mm256_sub_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][4]));
  bezout.matrix[2][4][7] =
      _mm256_sub_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][5]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][6]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][7]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[2][8]));
  bezout.matrix[2][4][3] =
      _mm256_sub_pd(bezout.matrix[2][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][0]));
  bezout.matrix[2][4][4] =
      _mm256_sub_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][1]));
  bezout.matrix[2][4][5] =
      _mm256_sub_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][2]));
  bezout.matrix[2][4][6] =
      _mm256_sub_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][3]));
  bezout.matrix[2][4][7] =
      _mm256_sub_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][4]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][5]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][6]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][7]));
  bezout.matrix[2][4][11] =
      _mm256_sub_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[2][8]));
  bezout.matrix[2][4][4] =
      _mm256_sub_pd(bezout.matrix[2][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][0]));
  bezout.matrix[2][4][5] =
      _mm256_sub_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][1]));
  bezout.matrix[2][4][6] =
      _mm256_sub_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][2]));
  bezout.matrix[2][4][7] =
      _mm256_sub_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][3]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][4]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][5]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][6]));
  bezout.matrix[2][4][11] =
      _mm256_sub_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][7]));
  bezout.matrix[2][4][12] =
      _mm256_sub_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[2][8]));
  bezout.matrix[2][4][5] =
      _mm256_sub_pd(bezout.matrix[2][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][0]));
  bezout.matrix[2][4][6] =
      _mm256_sub_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][1]));
  bezout.matrix[2][4][7] =
      _mm256_sub_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][2]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][3]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][4]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][5]));
  bezout.matrix[2][4][11] =
      _mm256_sub_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][6]));
  bezout.matrix[2][4][12] =
      _mm256_sub_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][7]));
  bezout.matrix[2][4][13] =
      _mm256_sub_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[2][8]));
  bezout.matrix[2][4][6] =
      _mm256_sub_pd(bezout.matrix[2][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][0]));
  bezout.matrix[2][4][7] =
      _mm256_sub_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][1]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][2]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][3]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][4]));
  bezout.matrix[2][4][11] =
      _mm256_sub_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][5]));
  bezout.matrix[2][4][12] =
      _mm256_sub_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][6]));
  bezout.matrix[2][4][13] =
      _mm256_sub_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][7]));
  bezout.matrix[2][4][14] =
      _mm256_sub_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[2][8]));
  bezout.matrix[2][4][7] =
      _mm256_sub_pd(bezout.matrix[2][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][0]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][1]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][2]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][3]));
  bezout.matrix[2][4][11] =
      _mm256_sub_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][4]));
  bezout.matrix[2][4][12] =
      _mm256_sub_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][5]));
  bezout.matrix[2][4][13] =
      _mm256_sub_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][6]));
  bezout.matrix[2][4][14] =
      _mm256_sub_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][7]));
  bezout.matrix[2][4][15] =
      _mm256_sub_pd(bezout.matrix[2][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[2][8]));
  bezout.matrix[2][4][8] =
      _mm256_sub_pd(bezout.matrix[2][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[2][0]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[2][1]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[2][2]));
  bezout.matrix[2][4][11] =
      _mm256_sub_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[2][3]));
  bezout.matrix[2][4][12] =
      _mm256_sub_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[2][4]));
  bezout.matrix[2][4][13] =
      _mm256_sub_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[2][5]));
  bezout.matrix[2][4][14] =
      _mm256_sub_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[2][6]));
  bezout.matrix[2][4][15] =
      _mm256_sub_pd(bezout.matrix[2][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[2][7]));
  bezout.matrix[2][4][9] =
      _mm256_sub_pd(bezout.matrix[2][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[2][0]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[2][1]));
  bezout.matrix[2][4][11] =
      _mm256_sub_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[2][2]));
  bezout.matrix[2][4][12] =
      _mm256_sub_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[2][3]));
  bezout.matrix[2][4][13] =
      _mm256_sub_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[2][4]));
  bezout.matrix[2][4][14] =
      _mm256_sub_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[2][5]));
  bezout.matrix[2][4][15] =
      _mm256_sub_pd(bezout.matrix[2][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[2][6]));
  bezout.matrix[2][4][10] =
      _mm256_sub_pd(bezout.matrix[2][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[2][0]));
  bezout.matrix[2][4][11] =
      _mm256_sub_pd(bezout.matrix[2][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[2][1]));
  bezout.matrix[2][4][12] =
      _mm256_sub_pd(bezout.matrix[2][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[2][2]));
  bezout.matrix[2][4][13] =
      _mm256_sub_pd(bezout.matrix[2][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[2][3]));
  bezout.matrix[2][4][14] =
      _mm256_sub_pd(bezout.matrix[2][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[2][4]));
  bezout.matrix[2][4][15] =
      _mm256_sub_pd(bezout.matrix[2][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[2][5]));
  bezout.matrix[2][5][0] =
      _mm256_add_pd(bezout.matrix[2][5][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[6][0]));
  bezout.matrix[2][5][1] =
      _mm256_add_pd(bezout.matrix[2][5][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[6][1]));
  bezout.matrix[2][5][2] =
      _mm256_add_pd(bezout.matrix[2][5][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[6][2]));
  bezout.matrix[2][5][3] =
      _mm256_add_pd(bezout.matrix[2][5][3],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[6][3]));
  bezout.matrix[2][5][4] =
      _mm256_add_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[6][4]));
  bezout.matrix[2][5][1] =
      _mm256_add_pd(bezout.matrix[2][5][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[6][0]));
  bezout.matrix[2][5][2] =
      _mm256_add_pd(bezout.matrix[2][5][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[6][1]));
  bezout.matrix[2][5][3] =
      _mm256_add_pd(bezout.matrix[2][5][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[6][2]));
  bezout.matrix[2][5][4] =
      _mm256_add_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[6][3]));
  bezout.matrix[2][5][5] =
      _mm256_add_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[6][4]));
  bezout.matrix[2][5][2] =
      _mm256_add_pd(bezout.matrix[2][5][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[6][0]));
  bezout.matrix[2][5][3] =
      _mm256_add_pd(bezout.matrix[2][5][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[6][1]));
  bezout.matrix[2][5][4] =
      _mm256_add_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[6][2]));
  bezout.matrix[2][5][5] =
      _mm256_add_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[6][3]));
  bezout.matrix[2][5][6] =
      _mm256_add_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[6][4]));
  bezout.matrix[2][5][3] =
      _mm256_add_pd(bezout.matrix[2][5][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[6][0]));
  bezout.matrix[2][5][4] =
      _mm256_add_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[6][1]));
  bezout.matrix[2][5][5] =
      _mm256_add_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[6][2]));
  bezout.matrix[2][5][6] =
      _mm256_add_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[6][3]));
  bezout.matrix[2][5][7] =
      _mm256_add_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[6][4]));
  bezout.matrix[2][5][4] =
      _mm256_add_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[6][0]));
  bezout.matrix[2][5][5] =
      _mm256_add_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[6][1]));
  bezout.matrix[2][5][6] =
      _mm256_add_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[6][2]));
  bezout.matrix[2][5][7] =
      _mm256_add_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[6][3]));
  bezout.matrix[2][5][8] =
      _mm256_add_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[6][4]));
  bezout.matrix[2][5][5] =
      _mm256_add_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[6][0]));
  bezout.matrix[2][5][6] =
      _mm256_add_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[6][1]));
  bezout.matrix[2][5][7] =
      _mm256_add_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[6][2]));
  bezout.matrix[2][5][8] =
      _mm256_add_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[6][3]));
  bezout.matrix[2][5][9] =
      _mm256_add_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[6][4]));
  bezout.matrix[2][5][6] =
      _mm256_add_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[6][0]));
  bezout.matrix[2][5][7] =
      _mm256_add_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[6][1]));
  bezout.matrix[2][5][8] =
      _mm256_add_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[6][2]));
  bezout.matrix[2][5][9] =
      _mm256_add_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[6][3]));
  bezout.matrix[2][5][10] =
      _mm256_add_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[6][4]));
  bezout.matrix[2][5][7] =
      _mm256_add_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[6][0]));
  bezout.matrix[2][5][8] =
      _mm256_add_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[6][1]));
  bezout.matrix[2][5][9] =
      _mm256_add_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[6][2]));
  bezout.matrix[2][5][10] =
      _mm256_add_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[6][3]));
  bezout.matrix[2][5][11] =
      _mm256_add_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[6][4]));
  bezout.matrix[2][5][8] =
      _mm256_add_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[6][0]));
  bezout.matrix[2][5][9] =
      _mm256_add_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[6][1]));
  bezout.matrix[2][5][10] =
      _mm256_add_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[6][2]));
  bezout.matrix[2][5][11] =
      _mm256_add_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[6][3]));
  bezout.matrix[2][5][12] =
      _mm256_add_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[6][4]));
  bezout.matrix[2][5][9] =
      _mm256_add_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[6][0]));
  bezout.matrix[2][5][10] =
      _mm256_add_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[6][1]));
  bezout.matrix[2][5][11] =
      _mm256_add_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[6][2]));
  bezout.matrix[2][5][12] =
      _mm256_add_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[6][3]));
  bezout.matrix[2][5][13] =
      _mm256_add_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[6][4]));
  bezout.matrix[2][5][10] =
      _mm256_add_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[6][0]));
  bezout.matrix[2][5][11] =
      _mm256_add_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[6][1]));
  bezout.matrix[2][5][12] =
      _mm256_add_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[6][2]));
  bezout.matrix[2][5][13] =
      _mm256_add_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[6][3]));
  bezout.matrix[2][5][14] =
      _mm256_add_pd(bezout.matrix[2][5][14],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[6][4]));
  bezout.matrix[2][5][11] =
      _mm256_add_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[6][0]));
  bezout.matrix[2][5][12] =
      _mm256_add_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[6][1]));
  bezout.matrix[2][5][13] =
      _mm256_add_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[6][2]));
  bezout.matrix[2][5][14] =
      _mm256_add_pd(bezout.matrix[2][5][14],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[6][3]));
  bezout.matrix[2][5][15] =
      _mm256_add_pd(bezout.matrix[2][5][15],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[6][4]));
  bezout.matrix[2][5][12] =
      _mm256_add_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[6][0]));
  bezout.matrix[2][5][13] =
      _mm256_add_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[6][1]));
  bezout.matrix[2][5][14] =
      _mm256_add_pd(bezout.matrix[2][5][14],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[6][2]));
  bezout.matrix[2][5][15] =
      _mm256_add_pd(bezout.matrix[2][5][15],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[6][3]));
  bezout.matrix[2][5][13] =
      _mm256_add_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[6][0]));
  bezout.matrix[2][5][14] =
      _mm256_add_pd(bezout.matrix[2][5][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[6][1]));
  bezout.matrix[2][5][15] =
      _mm256_add_pd(bezout.matrix[2][5][15],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[6][2]));
  bezout.matrix[2][5][0] =
      _mm256_sub_pd(bezout.matrix[2][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][0]));
  bezout.matrix[2][5][1] =
      _mm256_sub_pd(bezout.matrix[2][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][1]));
  bezout.matrix[2][5][2] =
      _mm256_sub_pd(bezout.matrix[2][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][2]));
  bezout.matrix[2][5][3] =
      _mm256_sub_pd(bezout.matrix[2][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][3]));
  bezout.matrix[2][5][4] =
      _mm256_sub_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][4]));
  bezout.matrix[2][5][5] =
      _mm256_sub_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][5]));
  bezout.matrix[2][5][6] =
      _mm256_sub_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][6]));
  bezout.matrix[2][5][7] =
      _mm256_sub_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][7]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[2][8]));
  bezout.matrix[2][5][1] =
      _mm256_sub_pd(bezout.matrix[2][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][0]));
  bezout.matrix[2][5][2] =
      _mm256_sub_pd(bezout.matrix[2][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][1]));
  bezout.matrix[2][5][3] =
      _mm256_sub_pd(bezout.matrix[2][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][2]));
  bezout.matrix[2][5][4] =
      _mm256_sub_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][3]));
  bezout.matrix[2][5][5] =
      _mm256_sub_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][4]));
  bezout.matrix[2][5][6] =
      _mm256_sub_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][5]));
  bezout.matrix[2][5][7] =
      _mm256_sub_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][6]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][7]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[2][8]));
  bezout.matrix[2][5][2] =
      _mm256_sub_pd(bezout.matrix[2][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][0]));
  bezout.matrix[2][5][3] =
      _mm256_sub_pd(bezout.matrix[2][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][1]));
  bezout.matrix[2][5][4] =
      _mm256_sub_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][2]));
  bezout.matrix[2][5][5] =
      _mm256_sub_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][3]));
  bezout.matrix[2][5][6] =
      _mm256_sub_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][4]));
  bezout.matrix[2][5][7] =
      _mm256_sub_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][5]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][6]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][7]));
  bezout.matrix[2][5][10] =
      _mm256_sub_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[2][8]));
  bezout.matrix[2][5][3] =
      _mm256_sub_pd(bezout.matrix[2][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][0]));
  bezout.matrix[2][5][4] =
      _mm256_sub_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][1]));
  bezout.matrix[2][5][5] =
      _mm256_sub_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][2]));
  bezout.matrix[2][5][6] =
      _mm256_sub_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][3]));
  bezout.matrix[2][5][7] =
      _mm256_sub_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][4]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][5]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][6]));
  bezout.matrix[2][5][10] =
      _mm256_sub_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][7]));
  bezout.matrix[2][5][11] =
      _mm256_sub_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[2][8]));
  bezout.matrix[2][5][4] =
      _mm256_sub_pd(bezout.matrix[2][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][0]));
  bezout.matrix[2][5][5] =
      _mm256_sub_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][1]));
  bezout.matrix[2][5][6] =
      _mm256_sub_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][2]));
  bezout.matrix[2][5][7] =
      _mm256_sub_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][3]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][4]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][5]));
  bezout.matrix[2][5][10] =
      _mm256_sub_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][6]));
  bezout.matrix[2][5][11] =
      _mm256_sub_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][7]));
  bezout.matrix[2][5][12] =
      _mm256_sub_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[2][8]));
  bezout.matrix[2][5][5] =
      _mm256_sub_pd(bezout.matrix[2][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][0]));
  bezout.matrix[2][5][6] =
      _mm256_sub_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][1]));
  bezout.matrix[2][5][7] =
      _mm256_sub_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][2]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][3]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][4]));
  bezout.matrix[2][5][10] =
      _mm256_sub_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][5]));
  bezout.matrix[2][5][11] =
      _mm256_sub_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][6]));
  bezout.matrix[2][5][12] =
      _mm256_sub_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][7]));
  bezout.matrix[2][5][13] =
      _mm256_sub_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[2][8]));
  bezout.matrix[2][5][6] =
      _mm256_sub_pd(bezout.matrix[2][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][0]));
  bezout.matrix[2][5][7] =
      _mm256_sub_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][1]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][2]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][3]));
  bezout.matrix[2][5][10] =
      _mm256_sub_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][4]));
  bezout.matrix[2][5][11] =
      _mm256_sub_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][5]));
  bezout.matrix[2][5][12] =
      _mm256_sub_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][6]));
  bezout.matrix[2][5][13] =
      _mm256_sub_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][7]));
  bezout.matrix[2][5][14] =
      _mm256_sub_pd(bezout.matrix[2][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[2][8]));
  bezout.matrix[2][5][7] =
      _mm256_sub_pd(bezout.matrix[2][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][0]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][1]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][2]));
  bezout.matrix[2][5][10] =
      _mm256_sub_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][3]));
  bezout.matrix[2][5][11] =
      _mm256_sub_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][4]));
  bezout.matrix[2][5][12] =
      _mm256_sub_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][5]));
  bezout.matrix[2][5][13] =
      _mm256_sub_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][6]));
  bezout.matrix[2][5][14] =
      _mm256_sub_pd(bezout.matrix[2][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][7]));
  bezout.matrix[2][5][15] =
      _mm256_sub_pd(bezout.matrix[2][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[2][8]));
  bezout.matrix[2][5][8] =
      _mm256_sub_pd(bezout.matrix[2][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[2][0]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[2][1]));
  bezout.matrix[2][5][10] =
      _mm256_sub_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[2][2]));
  bezout.matrix[2][5][11] =
      _mm256_sub_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[2][3]));
  bezout.matrix[2][5][12] =
      _mm256_sub_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[2][4]));
  bezout.matrix[2][5][13] =
      _mm256_sub_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[2][5]));
  bezout.matrix[2][5][14] =
      _mm256_sub_pd(bezout.matrix[2][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[2][6]));
  bezout.matrix[2][5][15] =
      _mm256_sub_pd(bezout.matrix[2][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[2][7]));
  bezout.matrix[2][5][9] =
      _mm256_sub_pd(bezout.matrix[2][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[2][0]));
  bezout.matrix[2][5][10] =
      _mm256_sub_pd(bezout.matrix[2][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[2][1]));
  bezout.matrix[2][5][11] =
      _mm256_sub_pd(bezout.matrix[2][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[2][2]));
  bezout.matrix[2][5][12] =
      _mm256_sub_pd(bezout.matrix[2][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[2][3]));
  bezout.matrix[2][5][13] =
      _mm256_sub_pd(bezout.matrix[2][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[2][4]));
  bezout.matrix[2][5][14] =
      _mm256_sub_pd(bezout.matrix[2][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[2][5]));
  bezout.matrix[2][5][15] =
      _mm256_sub_pd(bezout.matrix[2][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[2][6]));
  bezout.matrix[2][6][0] =
      _mm256_add_pd(bezout.matrix[2][6][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[7][0]));
  bezout.matrix[2][6][1] =
      _mm256_add_pd(bezout.matrix[2][6][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[7][1]));
  bezout.matrix[2][6][2] =
      _mm256_add_pd(bezout.matrix[2][6][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[7][2]));
  bezout.matrix[2][6][3] =
      _mm256_add_pd(bezout.matrix[2][6][3],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[7][3]));
  bezout.matrix[2][6][1] =
      _mm256_add_pd(bezout.matrix[2][6][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[7][0]));
  bezout.matrix[2][6][2] =
      _mm256_add_pd(bezout.matrix[2][6][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[7][1]));
  bezout.matrix[2][6][3] =
      _mm256_add_pd(bezout.matrix[2][6][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[7][2]));
  bezout.matrix[2][6][4] =
      _mm256_add_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[7][3]));
  bezout.matrix[2][6][2] =
      _mm256_add_pd(bezout.matrix[2][6][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[7][0]));
  bezout.matrix[2][6][3] =
      _mm256_add_pd(bezout.matrix[2][6][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[7][1]));
  bezout.matrix[2][6][4] =
      _mm256_add_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[7][2]));
  bezout.matrix[2][6][5] =
      _mm256_add_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[7][3]));
  bezout.matrix[2][6][3] =
      _mm256_add_pd(bezout.matrix[2][6][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[7][0]));
  bezout.matrix[2][6][4] =
      _mm256_add_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[7][1]));
  bezout.matrix[2][6][5] =
      _mm256_add_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[7][2]));
  bezout.matrix[2][6][6] =
      _mm256_add_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[7][3]));
  bezout.matrix[2][6][4] =
      _mm256_add_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[7][0]));
  bezout.matrix[2][6][5] =
      _mm256_add_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[7][1]));
  bezout.matrix[2][6][6] =
      _mm256_add_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[7][2]));
  bezout.matrix[2][6][7] =
      _mm256_add_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[7][3]));
  bezout.matrix[2][6][5] =
      _mm256_add_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[7][0]));
  bezout.matrix[2][6][6] =
      _mm256_add_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[7][1]));
  bezout.matrix[2][6][7] =
      _mm256_add_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[7][2]));
  bezout.matrix[2][6][8] =
      _mm256_add_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[7][3]));
  bezout.matrix[2][6][6] =
      _mm256_add_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[7][0]));
  bezout.matrix[2][6][7] =
      _mm256_add_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[7][1]));
  bezout.matrix[2][6][8] =
      _mm256_add_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[7][2]));
  bezout.matrix[2][6][9] =
      _mm256_add_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[7][3]));
  bezout.matrix[2][6][7] =
      _mm256_add_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[7][0]));
  bezout.matrix[2][6][8] =
      _mm256_add_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[7][1]));
  bezout.matrix[2][6][9] =
      _mm256_add_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[7][2]));
  bezout.matrix[2][6][10] =
      _mm256_add_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[7][3]));
  bezout.matrix[2][6][8] =
      _mm256_add_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[7][0]));
  bezout.matrix[2][6][9] =
      _mm256_add_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[7][1]));
  bezout.matrix[2][6][10] =
      _mm256_add_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[7][2]));
  bezout.matrix[2][6][11] =
      _mm256_add_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[7][3]));
  bezout.matrix[2][6][9] =
      _mm256_add_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[7][0]));
  bezout.matrix[2][6][10] =
      _mm256_add_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[7][1]));
  bezout.matrix[2][6][11] =
      _mm256_add_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[7][2]));
  bezout.matrix[2][6][12] =
      _mm256_add_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[7][3]));
  bezout.matrix[2][6][10] =
      _mm256_add_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[7][0]));
  bezout.matrix[2][6][11] =
      _mm256_add_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[7][1]));
  bezout.matrix[2][6][12] =
      _mm256_add_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[7][2]));
  bezout.matrix[2][6][13] =
      _mm256_add_pd(bezout.matrix[2][6][13],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[7][3]));
  bezout.matrix[2][6][11] =
      _mm256_add_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[7][0]));
  bezout.matrix[2][6][12] =
      _mm256_add_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[7][1]));
  bezout.matrix[2][6][13] =
      _mm256_add_pd(bezout.matrix[2][6][13],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[7][2]));
  bezout.matrix[2][6][14] =
      _mm256_add_pd(bezout.matrix[2][6][14],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[7][3]));
  bezout.matrix[2][6][12] =
      _mm256_add_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[7][0]));
  bezout.matrix[2][6][13] =
      _mm256_add_pd(bezout.matrix[2][6][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[7][1]));
  bezout.matrix[2][6][14] =
      _mm256_add_pd(bezout.matrix[2][6][14],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[7][2]));
  bezout.matrix[2][6][15] =
      _mm256_add_pd(bezout.matrix[2][6][15],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[7][3]));
  bezout.matrix[2][6][13] =
      _mm256_add_pd(bezout.matrix[2][6][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[7][0]));
  bezout.matrix[2][6][14] =
      _mm256_add_pd(bezout.matrix[2][6][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[7][1]));
  bezout.matrix[2][6][15] =
      _mm256_add_pd(bezout.matrix[2][6][15],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[7][2]));
  bezout.matrix[2][6][0] =
      _mm256_sub_pd(bezout.matrix[2][6][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][0]));
  bezout.matrix[2][6][1] =
      _mm256_sub_pd(bezout.matrix[2][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][1]));
  bezout.matrix[2][6][2] =
      _mm256_sub_pd(bezout.matrix[2][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][2]));
  bezout.matrix[2][6][3] =
      _mm256_sub_pd(bezout.matrix[2][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][3]));
  bezout.matrix[2][6][4] =
      _mm256_sub_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][4]));
  bezout.matrix[2][6][5] =
      _mm256_sub_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][5]));
  bezout.matrix[2][6][6] =
      _mm256_sub_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][6]));
  bezout.matrix[2][6][7] =
      _mm256_sub_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][7]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[2][8]));
  bezout.matrix[2][6][1] =
      _mm256_sub_pd(bezout.matrix[2][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][0]));
  bezout.matrix[2][6][2] =
      _mm256_sub_pd(bezout.matrix[2][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][1]));
  bezout.matrix[2][6][3] =
      _mm256_sub_pd(bezout.matrix[2][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][2]));
  bezout.matrix[2][6][4] =
      _mm256_sub_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][3]));
  bezout.matrix[2][6][5] =
      _mm256_sub_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][4]));
  bezout.matrix[2][6][6] =
      _mm256_sub_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][5]));
  bezout.matrix[2][6][7] =
      _mm256_sub_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][6]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][7]));
  bezout.matrix[2][6][9] =
      _mm256_sub_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[2][8]));
  bezout.matrix[2][6][2] =
      _mm256_sub_pd(bezout.matrix[2][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][0]));
  bezout.matrix[2][6][3] =
      _mm256_sub_pd(bezout.matrix[2][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][1]));
  bezout.matrix[2][6][4] =
      _mm256_sub_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][2]));
  bezout.matrix[2][6][5] =
      _mm256_sub_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][3]));
  bezout.matrix[2][6][6] =
      _mm256_sub_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][4]));
  bezout.matrix[2][6][7] =
      _mm256_sub_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][5]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][6]));
  bezout.matrix[2][6][9] =
      _mm256_sub_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][7]));
  bezout.matrix[2][6][10] =
      _mm256_sub_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[2][8]));
  bezout.matrix[2][6][3] =
      _mm256_sub_pd(bezout.matrix[2][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][0]));
  bezout.matrix[2][6][4] =
      _mm256_sub_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][1]));
  bezout.matrix[2][6][5] =
      _mm256_sub_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][2]));
  bezout.matrix[2][6][6] =
      _mm256_sub_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][3]));
  bezout.matrix[2][6][7] =
      _mm256_sub_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][4]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][5]));
  bezout.matrix[2][6][9] =
      _mm256_sub_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][6]));
  bezout.matrix[2][6][10] =
      _mm256_sub_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][7]));
  bezout.matrix[2][6][11] =
      _mm256_sub_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[2][8]));
  bezout.matrix[2][6][4] =
      _mm256_sub_pd(bezout.matrix[2][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][0]));
  bezout.matrix[2][6][5] =
      _mm256_sub_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][1]));
  bezout.matrix[2][6][6] =
      _mm256_sub_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][2]));
  bezout.matrix[2][6][7] =
      _mm256_sub_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][3]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][4]));
  bezout.matrix[2][6][9] =
      _mm256_sub_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][5]));
  bezout.matrix[2][6][10] =
      _mm256_sub_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][6]));
  bezout.matrix[2][6][11] =
      _mm256_sub_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][7]));
  bezout.matrix[2][6][12] =
      _mm256_sub_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[2][8]));
  bezout.matrix[2][6][5] =
      _mm256_sub_pd(bezout.matrix[2][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][0]));
  bezout.matrix[2][6][6] =
      _mm256_sub_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][1]));
  bezout.matrix[2][6][7] =
      _mm256_sub_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][2]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][3]));
  bezout.matrix[2][6][9] =
      _mm256_sub_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][4]));
  bezout.matrix[2][6][10] =
      _mm256_sub_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][5]));
  bezout.matrix[2][6][11] =
      _mm256_sub_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][6]));
  bezout.matrix[2][6][12] =
      _mm256_sub_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][7]));
  bezout.matrix[2][6][13] =
      _mm256_sub_pd(bezout.matrix[2][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[2][8]));
  bezout.matrix[2][6][6] =
      _mm256_sub_pd(bezout.matrix[2][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][0]));
  bezout.matrix[2][6][7] =
      _mm256_sub_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][1]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][2]));
  bezout.matrix[2][6][9] =
      _mm256_sub_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][3]));
  bezout.matrix[2][6][10] =
      _mm256_sub_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][4]));
  bezout.matrix[2][6][11] =
      _mm256_sub_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][5]));
  bezout.matrix[2][6][12] =
      _mm256_sub_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][6]));
  bezout.matrix[2][6][13] =
      _mm256_sub_pd(bezout.matrix[2][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][7]));
  bezout.matrix[2][6][14] =
      _mm256_sub_pd(bezout.matrix[2][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[2][8]));
  bezout.matrix[2][6][7] =
      _mm256_sub_pd(bezout.matrix[2][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][0]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][1]));
  bezout.matrix[2][6][9] =
      _mm256_sub_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][2]));
  bezout.matrix[2][6][10] =
      _mm256_sub_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][3]));
  bezout.matrix[2][6][11] =
      _mm256_sub_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][4]));
  bezout.matrix[2][6][12] =
      _mm256_sub_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][5]));
  bezout.matrix[2][6][13] =
      _mm256_sub_pd(bezout.matrix[2][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][6]));
  bezout.matrix[2][6][14] =
      _mm256_sub_pd(bezout.matrix[2][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][7]));
  bezout.matrix[2][6][15] =
      _mm256_sub_pd(bezout.matrix[2][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[2][8]));
  bezout.matrix[2][6][8] =
      _mm256_sub_pd(bezout.matrix[2][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[2][0]));
  bezout.matrix[2][6][9] =
      _mm256_sub_pd(bezout.matrix[2][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[2][1]));
  bezout.matrix[2][6][10] =
      _mm256_sub_pd(bezout.matrix[2][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[2][2]));
  bezout.matrix[2][6][11] =
      _mm256_sub_pd(bezout.matrix[2][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[2][3]));
  bezout.matrix[2][6][12] =
      _mm256_sub_pd(bezout.matrix[2][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[2][4]));
  bezout.matrix[2][6][13] =
      _mm256_sub_pd(bezout.matrix[2][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[2][5]));
  bezout.matrix[2][6][14] =
      _mm256_sub_pd(bezout.matrix[2][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[2][6]));
  bezout.matrix[2][6][15] =
      _mm256_sub_pd(bezout.matrix[2][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[2][7]));
  bezout.matrix[2][7][0] =
      _mm256_add_pd(bezout.matrix[2][7][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[8][0]));
  bezout.matrix[2][7][1] =
      _mm256_add_pd(bezout.matrix[2][7][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[8][1]));
  bezout.matrix[2][7][2] =
      _mm256_add_pd(bezout.matrix[2][7][2],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[8][2]));
  bezout.matrix[2][7][1] =
      _mm256_add_pd(bezout.matrix[2][7][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[8][0]));
  bezout.matrix[2][7][2] =
      _mm256_add_pd(bezout.matrix[2][7][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[8][1]));
  bezout.matrix[2][7][3] =
      _mm256_add_pd(bezout.matrix[2][7][3],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[8][2]));
  bezout.matrix[2][7][2] =
      _mm256_add_pd(bezout.matrix[2][7][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[8][0]));
  bezout.matrix[2][7][3] =
      _mm256_add_pd(bezout.matrix[2][7][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[8][1]));
  bezout.matrix[2][7][4] =
      _mm256_add_pd(bezout.matrix[2][7][4],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[8][2]));
  bezout.matrix[2][7][3] =
      _mm256_add_pd(bezout.matrix[2][7][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[8][0]));
  bezout.matrix[2][7][4] =
      _mm256_add_pd(bezout.matrix[2][7][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[8][1]));
  bezout.matrix[2][7][5] =
      _mm256_add_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[8][2]));
  bezout.matrix[2][7][4] =
      _mm256_add_pd(bezout.matrix[2][7][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[8][0]));
  bezout.matrix[2][7][5] =
      _mm256_add_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[8][1]));
  bezout.matrix[2][7][6] =
      _mm256_add_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[8][2]));
  bezout.matrix[2][7][5] =
      _mm256_add_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[8][0]));
  bezout.matrix[2][7][6] =
      _mm256_add_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[8][1]));
  bezout.matrix[2][7][7] =
      _mm256_add_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[8][2]));
  bezout.matrix[2][7][6] =
      _mm256_add_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[8][0]));
  bezout.matrix[2][7][7] =
      _mm256_add_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[8][1]));
  bezout.matrix[2][7][8] =
      _mm256_add_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[8][2]));
  bezout.matrix[2][7][7] =
      _mm256_add_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[8][0]));
  bezout.matrix[2][7][8] =
      _mm256_add_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[8][1]));
  bezout.matrix[2][7][9] =
      _mm256_add_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[8][2]));
  bezout.matrix[2][7][8] =
      _mm256_add_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[8][0]));
  bezout.matrix[2][7][9] =
      _mm256_add_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[8][1]));
  bezout.matrix[2][7][10] =
      _mm256_add_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[8][2]));
  bezout.matrix[2][7][9] =
      _mm256_add_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[8][0]));
  bezout.matrix[2][7][10] =
      _mm256_add_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[8][1]));
  bezout.matrix[2][7][11] =
      _mm256_add_pd(bezout.matrix[2][7][11],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[8][2]));
  bezout.matrix[2][7][10] =
      _mm256_add_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[8][0]));
  bezout.matrix[2][7][11] =
      _mm256_add_pd(bezout.matrix[2][7][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[8][1]));
  bezout.matrix[2][7][12] =
      _mm256_add_pd(bezout.matrix[2][7][12],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[8][2]));
  bezout.matrix[2][7][11] =
      _mm256_add_pd(bezout.matrix[2][7][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[8][0]));
  bezout.matrix[2][7][12] =
      _mm256_add_pd(bezout.matrix[2][7][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[8][1]));
  bezout.matrix[2][7][13] =
      _mm256_add_pd(bezout.matrix[2][7][13],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[8][2]));
  bezout.matrix[2][7][12] =
      _mm256_add_pd(bezout.matrix[2][7][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[8][0]));
  bezout.matrix[2][7][13] =
      _mm256_add_pd(bezout.matrix[2][7][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[8][1]));
  bezout.matrix[2][7][14] =
      _mm256_add_pd(bezout.matrix[2][7][14],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[8][2]));
  bezout.matrix[2][7][13] =
      _mm256_add_pd(bezout.matrix[2][7][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[8][0]));
  bezout.matrix[2][7][14] =
      _mm256_add_pd(bezout.matrix[2][7][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[8][1]));
  bezout.matrix[2][7][15] =
      _mm256_add_pd(bezout.matrix[2][7][15],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[8][2]));
  bezout.matrix[2][7][0] =
      _mm256_sub_pd(bezout.matrix[2][7][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][0]));
  bezout.matrix[2][7][1] =
      _mm256_sub_pd(bezout.matrix[2][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][1]));
  bezout.matrix[2][7][2] =
      _mm256_sub_pd(bezout.matrix[2][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][2]));
  bezout.matrix[2][7][3] =
      _mm256_sub_pd(bezout.matrix[2][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][3]));
  bezout.matrix[2][7][4] =
      _mm256_sub_pd(bezout.matrix[2][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][4]));
  bezout.matrix[2][7][5] =
      _mm256_sub_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][5]));
  bezout.matrix[2][7][6] =
      _mm256_sub_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][6]));
  bezout.matrix[2][7][7] =
      _mm256_sub_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][7]));
  bezout.matrix[2][7][8] =
      _mm256_sub_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[2][8]));
  bezout.matrix[2][7][1] =
      _mm256_sub_pd(bezout.matrix[2][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][0]));
  bezout.matrix[2][7][2] =
      _mm256_sub_pd(bezout.matrix[2][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][1]));
  bezout.matrix[2][7][3] =
      _mm256_sub_pd(bezout.matrix[2][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][2]));
  bezout.matrix[2][7][4] =
      _mm256_sub_pd(bezout.matrix[2][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][3]));
  bezout.matrix[2][7][5] =
      _mm256_sub_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][4]));
  bezout.matrix[2][7][6] =
      _mm256_sub_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][5]));
  bezout.matrix[2][7][7] =
      _mm256_sub_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][6]));
  bezout.matrix[2][7][8] =
      _mm256_sub_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][7]));
  bezout.matrix[2][7][9] =
      _mm256_sub_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[2][8]));
  bezout.matrix[2][7][2] =
      _mm256_sub_pd(bezout.matrix[2][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][0]));
  bezout.matrix[2][7][3] =
      _mm256_sub_pd(bezout.matrix[2][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][1]));
  bezout.matrix[2][7][4] =
      _mm256_sub_pd(bezout.matrix[2][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][2]));
  bezout.matrix[2][7][5] =
      _mm256_sub_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][3]));
  bezout.matrix[2][7][6] =
      _mm256_sub_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][4]));
  bezout.matrix[2][7][7] =
      _mm256_sub_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][5]));
  bezout.matrix[2][7][8] =
      _mm256_sub_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][6]));
  bezout.matrix[2][7][9] =
      _mm256_sub_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][7]));
  bezout.matrix[2][7][10] =
      _mm256_sub_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[2][8]));
  bezout.matrix[2][7][3] =
      _mm256_sub_pd(bezout.matrix[2][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][0]));
  bezout.matrix[2][7][4] =
      _mm256_sub_pd(bezout.matrix[2][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][1]));
  bezout.matrix[2][7][5] =
      _mm256_sub_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][2]));
  bezout.matrix[2][7][6] =
      _mm256_sub_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][3]));
  bezout.matrix[2][7][7] =
      _mm256_sub_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][4]));
  bezout.matrix[2][7][8] =
      _mm256_sub_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][5]));
  bezout.matrix[2][7][9] =
      _mm256_sub_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][6]));
  bezout.matrix[2][7][10] =
      _mm256_sub_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][7]));
  bezout.matrix[2][7][11] =
      _mm256_sub_pd(bezout.matrix[2][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[2][8]));
  bezout.matrix[2][7][4] =
      _mm256_sub_pd(bezout.matrix[2][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][0]));
  bezout.matrix[2][7][5] =
      _mm256_sub_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][1]));
  bezout.matrix[2][7][6] =
      _mm256_sub_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][2]));
  bezout.matrix[2][7][7] =
      _mm256_sub_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][3]));
  bezout.matrix[2][7][8] =
      _mm256_sub_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][4]));
  bezout.matrix[2][7][9] =
      _mm256_sub_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][5]));
  bezout.matrix[2][7][10] =
      _mm256_sub_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][6]));
  bezout.matrix[2][7][11] =
      _mm256_sub_pd(bezout.matrix[2][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][7]));
  bezout.matrix[2][7][12] =
      _mm256_sub_pd(bezout.matrix[2][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[2][8]));
  bezout.matrix[2][7][5] =
      _mm256_sub_pd(bezout.matrix[2][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][0]));
  bezout.matrix[2][7][6] =
      _mm256_sub_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][1]));
  bezout.matrix[2][7][7] =
      _mm256_sub_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][2]));
  bezout.matrix[2][7][8] =
      _mm256_sub_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][3]));
  bezout.matrix[2][7][9] =
      _mm256_sub_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][4]));
  bezout.matrix[2][7][10] =
      _mm256_sub_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][5]));
  bezout.matrix[2][7][11] =
      _mm256_sub_pd(bezout.matrix[2][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][6]));
  bezout.matrix[2][7][12] =
      _mm256_sub_pd(bezout.matrix[2][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][7]));
  bezout.matrix[2][7][13] =
      _mm256_sub_pd(bezout.matrix[2][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[2][8]));
  bezout.matrix[2][7][6] =
      _mm256_sub_pd(bezout.matrix[2][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][0]));
  bezout.matrix[2][7][7] =
      _mm256_sub_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][1]));
  bezout.matrix[2][7][8] =
      _mm256_sub_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][2]));
  bezout.matrix[2][7][9] =
      _mm256_sub_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][3]));
  bezout.matrix[2][7][10] =
      _mm256_sub_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][4]));
  bezout.matrix[2][7][11] =
      _mm256_sub_pd(bezout.matrix[2][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][5]));
  bezout.matrix[2][7][12] =
      _mm256_sub_pd(bezout.matrix[2][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][6]));
  bezout.matrix[2][7][13] =
      _mm256_sub_pd(bezout.matrix[2][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][7]));
  bezout.matrix[2][7][14] =
      _mm256_sub_pd(bezout.matrix[2][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[2][8]));
  bezout.matrix[2][7][7] =
      _mm256_sub_pd(bezout.matrix[2][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][0]));
  bezout.matrix[2][7][8] =
      _mm256_sub_pd(bezout.matrix[2][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][1]));
  bezout.matrix[2][7][9] =
      _mm256_sub_pd(bezout.matrix[2][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][2]));
  bezout.matrix[2][7][10] =
      _mm256_sub_pd(bezout.matrix[2][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][3]));
  bezout.matrix[2][7][11] =
      _mm256_sub_pd(bezout.matrix[2][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][4]));
  bezout.matrix[2][7][12] =
      _mm256_sub_pd(bezout.matrix[2][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][5]));
  bezout.matrix[2][7][13] =
      _mm256_sub_pd(bezout.matrix[2][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][6]));
  bezout.matrix[2][7][14] =
      _mm256_sub_pd(bezout.matrix[2][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][7]));
  bezout.matrix[2][7][15] =
      _mm256_sub_pd(bezout.matrix[2][7][15],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[2][8]));
  bezout.matrix[2][8][0] =
      _mm256_add_pd(bezout.matrix[2][8][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[9][0]));
  bezout.matrix[2][8][1] =
      _mm256_add_pd(bezout.matrix[2][8][1],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[9][1]));
  bezout.matrix[2][8][1] =
      _mm256_add_pd(bezout.matrix[2][8][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[9][0]));
  bezout.matrix[2][8][2] =
      _mm256_add_pd(bezout.matrix[2][8][2],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[9][1]));
  bezout.matrix[2][8][2] =
      _mm256_add_pd(bezout.matrix[2][8][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[9][0]));
  bezout.matrix[2][8][3] =
      _mm256_add_pd(bezout.matrix[2][8][3],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[9][1]));
  bezout.matrix[2][8][3] =
      _mm256_add_pd(bezout.matrix[2][8][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[9][0]));
  bezout.matrix[2][8][4] =
      _mm256_add_pd(bezout.matrix[2][8][4],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[9][1]));
  bezout.matrix[2][8][4] =
      _mm256_add_pd(bezout.matrix[2][8][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[9][0]));
  bezout.matrix[2][8][5] =
      _mm256_add_pd(bezout.matrix[2][8][5],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[9][1]));
  bezout.matrix[2][8][5] =
      _mm256_add_pd(bezout.matrix[2][8][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[9][0]));
  bezout.matrix[2][8][6] =
      _mm256_add_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[9][1]));
  bezout.matrix[2][8][6] =
      _mm256_add_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[9][0]));
  bezout.matrix[2][8][7] =
      _mm256_add_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[9][1]));
  bezout.matrix[2][8][7] =
      _mm256_add_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[9][0]));
  bezout.matrix[2][8][8] =
      _mm256_add_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[9][1]));
  bezout.matrix[2][8][8] =
      _mm256_add_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[9][0]));
  bezout.matrix[2][8][9] =
      _mm256_add_pd(bezout.matrix[2][8][9],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[9][1]));
  bezout.matrix[2][8][9] =
      _mm256_add_pd(bezout.matrix[2][8][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[9][0]));
  bezout.matrix[2][8][10] =
      _mm256_add_pd(bezout.matrix[2][8][10],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[9][1]));
  bezout.matrix[2][8][10] =
      _mm256_add_pd(bezout.matrix[2][8][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[9][0]));
  bezout.matrix[2][8][11] =
      _mm256_add_pd(bezout.matrix[2][8][11],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[9][1]));
  bezout.matrix[2][8][11] =
      _mm256_add_pd(bezout.matrix[2][8][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[9][0]));
  bezout.matrix[2][8][12] =
      _mm256_add_pd(bezout.matrix[2][8][12],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[9][1]));
  bezout.matrix[2][8][12] =
      _mm256_add_pd(bezout.matrix[2][8][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[9][0]));
  bezout.matrix[2][8][13] =
      _mm256_add_pd(bezout.matrix[2][8][13],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[9][1]));
  bezout.matrix[2][8][13] =
      _mm256_add_pd(bezout.matrix[2][8][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[9][0]));
  bezout.matrix[2][8][14] =
      _mm256_add_pd(bezout.matrix[2][8][14],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[9][1]));
  bezout.matrix[2][8][0] =
      _mm256_sub_pd(bezout.matrix[2][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][0]));
  bezout.matrix[2][8][1] =
      _mm256_sub_pd(bezout.matrix[2][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][1]));
  bezout.matrix[2][8][2] =
      _mm256_sub_pd(bezout.matrix[2][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][2]));
  bezout.matrix[2][8][3] =
      _mm256_sub_pd(bezout.matrix[2][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][3]));
  bezout.matrix[2][8][4] =
      _mm256_sub_pd(bezout.matrix[2][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][4]));
  bezout.matrix[2][8][5] =
      _mm256_sub_pd(bezout.matrix[2][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][5]));
  bezout.matrix[2][8][6] =
      _mm256_sub_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][6]));
  bezout.matrix[2][8][7] =
      _mm256_sub_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][7]));
  bezout.matrix[2][8][8] =
      _mm256_sub_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[2][8]));
  bezout.matrix[2][8][1] =
      _mm256_sub_pd(bezout.matrix[2][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][0]));
  bezout.matrix[2][8][2] =
      _mm256_sub_pd(bezout.matrix[2][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][1]));
  bezout.matrix[2][8][3] =
      _mm256_sub_pd(bezout.matrix[2][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][2]));
  bezout.matrix[2][8][4] =
      _mm256_sub_pd(bezout.matrix[2][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][3]));
  bezout.matrix[2][8][5] =
      _mm256_sub_pd(bezout.matrix[2][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][4]));
  bezout.matrix[2][8][6] =
      _mm256_sub_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][5]));
  bezout.matrix[2][8][7] =
      _mm256_sub_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][6]));
  bezout.matrix[2][8][8] =
      _mm256_sub_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][7]));
  bezout.matrix[2][8][9] =
      _mm256_sub_pd(bezout.matrix[2][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[2][8]));
  bezout.matrix[2][8][2] =
      _mm256_sub_pd(bezout.matrix[2][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][0]));
  bezout.matrix[2][8][3] =
      _mm256_sub_pd(bezout.matrix[2][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][1]));
  bezout.matrix[2][8][4] =
      _mm256_sub_pd(bezout.matrix[2][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][2]));
  bezout.matrix[2][8][5] =
      _mm256_sub_pd(bezout.matrix[2][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][3]));
  bezout.matrix[2][8][6] =
      _mm256_sub_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][4]));
  bezout.matrix[2][8][7] =
      _mm256_sub_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][5]));
  bezout.matrix[2][8][8] =
      _mm256_sub_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][6]));
  bezout.matrix[2][8][9] =
      _mm256_sub_pd(bezout.matrix[2][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][7]));
  bezout.matrix[2][8][10] =
      _mm256_sub_pd(bezout.matrix[2][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[2][8]));
  bezout.matrix[2][8][3] =
      _mm256_sub_pd(bezout.matrix[2][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][0]));
  bezout.matrix[2][8][4] =
      _mm256_sub_pd(bezout.matrix[2][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][1]));
  bezout.matrix[2][8][5] =
      _mm256_sub_pd(bezout.matrix[2][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][2]));
  bezout.matrix[2][8][6] =
      _mm256_sub_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][3]));
  bezout.matrix[2][8][7] =
      _mm256_sub_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][4]));
  bezout.matrix[2][8][8] =
      _mm256_sub_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][5]));
  bezout.matrix[2][8][9] =
      _mm256_sub_pd(bezout.matrix[2][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][6]));
  bezout.matrix[2][8][10] =
      _mm256_sub_pd(bezout.matrix[2][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][7]));
  bezout.matrix[2][8][11] =
      _mm256_sub_pd(bezout.matrix[2][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[2][8]));
  bezout.matrix[2][8][4] =
      _mm256_sub_pd(bezout.matrix[2][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][0]));
  bezout.matrix[2][8][5] =
      _mm256_sub_pd(bezout.matrix[2][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][1]));
  bezout.matrix[2][8][6] =
      _mm256_sub_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][2]));
  bezout.matrix[2][8][7] =
      _mm256_sub_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][3]));
  bezout.matrix[2][8][8] =
      _mm256_sub_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][4]));
  bezout.matrix[2][8][9] =
      _mm256_sub_pd(bezout.matrix[2][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][5]));
  bezout.matrix[2][8][10] =
      _mm256_sub_pd(bezout.matrix[2][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][6]));
  bezout.matrix[2][8][11] =
      _mm256_sub_pd(bezout.matrix[2][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][7]));
  bezout.matrix[2][8][12] =
      _mm256_sub_pd(bezout.matrix[2][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[2][8]));
  bezout.matrix[2][8][5] =
      _mm256_sub_pd(bezout.matrix[2][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][0]));
  bezout.matrix[2][8][6] =
      _mm256_sub_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][1]));
  bezout.matrix[2][8][7] =
      _mm256_sub_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][2]));
  bezout.matrix[2][8][8] =
      _mm256_sub_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][3]));
  bezout.matrix[2][8][9] =
      _mm256_sub_pd(bezout.matrix[2][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][4]));
  bezout.matrix[2][8][10] =
      _mm256_sub_pd(bezout.matrix[2][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][5]));
  bezout.matrix[2][8][11] =
      _mm256_sub_pd(bezout.matrix[2][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][6]));
  bezout.matrix[2][8][12] =
      _mm256_sub_pd(bezout.matrix[2][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][7]));
  bezout.matrix[2][8][13] =
      _mm256_sub_pd(bezout.matrix[2][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[2][8]));
  bezout.matrix[2][8][6] =
      _mm256_sub_pd(bezout.matrix[2][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][0]));
  bezout.matrix[2][8][7] =
      _mm256_sub_pd(bezout.matrix[2][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][1]));
  bezout.matrix[2][8][8] =
      _mm256_sub_pd(bezout.matrix[2][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][2]));
  bezout.matrix[2][8][9] =
      _mm256_sub_pd(bezout.matrix[2][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][3]));
  bezout.matrix[2][8][10] =
      _mm256_sub_pd(bezout.matrix[2][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][4]));
  bezout.matrix[2][8][11] =
      _mm256_sub_pd(bezout.matrix[2][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][5]));
  bezout.matrix[2][8][12] =
      _mm256_sub_pd(bezout.matrix[2][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][6]));
  bezout.matrix[2][8][13] =
      _mm256_sub_pd(bezout.matrix[2][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][7]));
  bezout.matrix[2][8][14] =
      _mm256_sub_pd(bezout.matrix[2][8][14],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[2][8]));
  bezout.matrix[2][9][0] =
      _mm256_add_pd(bezout.matrix[2][9][0],
                    _mm256_mul_pd(poly1.coeffs[2][0], poly2.coeffs[10][0]));
  bezout.matrix[2][9][1] =
      _mm256_add_pd(bezout.matrix[2][9][1],
                    _mm256_mul_pd(poly1.coeffs[2][1], poly2.coeffs[10][0]));
  bezout.matrix[2][9][2] =
      _mm256_add_pd(bezout.matrix[2][9][2],
                    _mm256_mul_pd(poly1.coeffs[2][2], poly2.coeffs[10][0]));
  bezout.matrix[2][9][3] =
      _mm256_add_pd(bezout.matrix[2][9][3],
                    _mm256_mul_pd(poly1.coeffs[2][3], poly2.coeffs[10][0]));
  bezout.matrix[2][9][4] =
      _mm256_add_pd(bezout.matrix[2][9][4],
                    _mm256_mul_pd(poly1.coeffs[2][4], poly2.coeffs[10][0]));
  bezout.matrix[2][9][5] =
      _mm256_add_pd(bezout.matrix[2][9][5],
                    _mm256_mul_pd(poly1.coeffs[2][5], poly2.coeffs[10][0]));
  bezout.matrix[2][9][6] =
      _mm256_add_pd(bezout.matrix[2][9][6],
                    _mm256_mul_pd(poly1.coeffs[2][6], poly2.coeffs[10][0]));
  bezout.matrix[2][9][7] =
      _mm256_add_pd(bezout.matrix[2][9][7],
                    _mm256_mul_pd(poly1.coeffs[2][7], poly2.coeffs[10][0]));
  bezout.matrix[2][9][8] =
      _mm256_add_pd(bezout.matrix[2][9][8],
                    _mm256_mul_pd(poly1.coeffs[2][8], poly2.coeffs[10][0]));
  bezout.matrix[2][9][9] =
      _mm256_add_pd(bezout.matrix[2][9][9],
                    _mm256_mul_pd(poly1.coeffs[2][9], poly2.coeffs[10][0]));
  bezout.matrix[2][9][10] =
      _mm256_add_pd(bezout.matrix[2][9][10],
                    _mm256_mul_pd(poly1.coeffs[2][10], poly2.coeffs[10][0]));
  bezout.matrix[2][9][11] =
      _mm256_add_pd(bezout.matrix[2][9][11],
                    _mm256_mul_pd(poly1.coeffs[2][11], poly2.coeffs[10][0]));
  bezout.matrix[2][9][12] =
      _mm256_add_pd(bezout.matrix[2][9][12],
                    _mm256_mul_pd(poly1.coeffs[2][12], poly2.coeffs[10][0]));
  bezout.matrix[2][9][13] =
      _mm256_add_pd(bezout.matrix[2][9][13],
                    _mm256_mul_pd(poly1.coeffs[2][13], poly2.coeffs[10][0]));
  bezout.matrix[2][9][0] =
      _mm256_sub_pd(bezout.matrix[2][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][0]));
  bezout.matrix[2][9][1] =
      _mm256_sub_pd(bezout.matrix[2][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][1]));
  bezout.matrix[2][9][2] =
      _mm256_sub_pd(bezout.matrix[2][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][2]));
  bezout.matrix[2][9][3] =
      _mm256_sub_pd(bezout.matrix[2][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][3]));
  bezout.matrix[2][9][4] =
      _mm256_sub_pd(bezout.matrix[2][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][4]));
  bezout.matrix[2][9][5] =
      _mm256_sub_pd(bezout.matrix[2][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][5]));
  bezout.matrix[2][9][6] =
      _mm256_sub_pd(bezout.matrix[2][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][6]));
  bezout.matrix[2][9][7] =
      _mm256_sub_pd(bezout.matrix[2][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][7]));
  bezout.matrix[2][9][8] =
      _mm256_sub_pd(bezout.matrix[2][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[2][8]));
  bezout.matrix[2][9][1] =
      _mm256_sub_pd(bezout.matrix[2][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][0]));
  bezout.matrix[2][9][2] =
      _mm256_sub_pd(bezout.matrix[2][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][1]));
  bezout.matrix[2][9][3] =
      _mm256_sub_pd(bezout.matrix[2][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][2]));
  bezout.matrix[2][9][4] =
      _mm256_sub_pd(bezout.matrix[2][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][3]));
  bezout.matrix[2][9][5] =
      _mm256_sub_pd(bezout.matrix[2][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][4]));
  bezout.matrix[2][9][6] =
      _mm256_sub_pd(bezout.matrix[2][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][5]));
  bezout.matrix[2][9][7] =
      _mm256_sub_pd(bezout.matrix[2][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][6]));
  bezout.matrix[2][9][8] =
      _mm256_sub_pd(bezout.matrix[2][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][7]));
  bezout.matrix[2][9][9] =
      _mm256_sub_pd(bezout.matrix[2][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[2][8]));
  bezout.matrix[2][9][2] =
      _mm256_sub_pd(bezout.matrix[2][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][0]));
  bezout.matrix[2][9][3] =
      _mm256_sub_pd(bezout.matrix[2][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][1]));
  bezout.matrix[2][9][4] =
      _mm256_sub_pd(bezout.matrix[2][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][2]));
  bezout.matrix[2][9][5] =
      _mm256_sub_pd(bezout.matrix[2][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][3]));
  bezout.matrix[2][9][6] =
      _mm256_sub_pd(bezout.matrix[2][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][4]));
  bezout.matrix[2][9][7] =
      _mm256_sub_pd(bezout.matrix[2][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][5]));
  bezout.matrix[2][9][8] =
      _mm256_sub_pd(bezout.matrix[2][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][6]));
  bezout.matrix[2][9][9] =
      _mm256_sub_pd(bezout.matrix[2][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][7]));
  bezout.matrix[2][9][10] =
      _mm256_sub_pd(bezout.matrix[2][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[2][8]));
  bezout.matrix[2][9][3] =
      _mm256_sub_pd(bezout.matrix[2][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][0]));
  bezout.matrix[2][9][4] =
      _mm256_sub_pd(bezout.matrix[2][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][1]));
  bezout.matrix[2][9][5] =
      _mm256_sub_pd(bezout.matrix[2][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][2]));
  bezout.matrix[2][9][6] =
      _mm256_sub_pd(bezout.matrix[2][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][3]));
  bezout.matrix[2][9][7] =
      _mm256_sub_pd(bezout.matrix[2][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][4]));
  bezout.matrix[2][9][8] =
      _mm256_sub_pd(bezout.matrix[2][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][5]));
  bezout.matrix[2][9][9] =
      _mm256_sub_pd(bezout.matrix[2][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][6]));
  bezout.matrix[2][9][10] =
      _mm256_sub_pd(bezout.matrix[2][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][7]));
  bezout.matrix[2][9][11] =
      _mm256_sub_pd(bezout.matrix[2][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[2][8]));
  bezout.matrix[2][9][4] =
      _mm256_sub_pd(bezout.matrix[2][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][0]));
  bezout.matrix[2][9][5] =
      _mm256_sub_pd(bezout.matrix[2][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][1]));
  bezout.matrix[2][9][6] =
      _mm256_sub_pd(bezout.matrix[2][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][2]));
  bezout.matrix[2][9][7] =
      _mm256_sub_pd(bezout.matrix[2][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][3]));
  bezout.matrix[2][9][8] =
      _mm256_sub_pd(bezout.matrix[2][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][4]));
  bezout.matrix[2][9][9] =
      _mm256_sub_pd(bezout.matrix[2][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][5]));
  bezout.matrix[2][9][10] =
      _mm256_sub_pd(bezout.matrix[2][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][6]));
  bezout.matrix[2][9][11] =
      _mm256_sub_pd(bezout.matrix[2][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][7]));
  bezout.matrix[2][9][12] =
      _mm256_sub_pd(bezout.matrix[2][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[2][8]));
  bezout.matrix[2][9][5] =
      _mm256_sub_pd(bezout.matrix[2][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][0]));
  bezout.matrix[2][9][6] =
      _mm256_sub_pd(bezout.matrix[2][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][1]));
  bezout.matrix[2][9][7] =
      _mm256_sub_pd(bezout.matrix[2][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][2]));
  bezout.matrix[2][9][8] =
      _mm256_sub_pd(bezout.matrix[2][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][3]));
  bezout.matrix[2][9][9] =
      _mm256_sub_pd(bezout.matrix[2][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][4]));
  bezout.matrix[2][9][10] =
      _mm256_sub_pd(bezout.matrix[2][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][5]));
  bezout.matrix[2][9][11] =
      _mm256_sub_pd(bezout.matrix[2][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][6]));
  bezout.matrix[2][9][12] =
      _mm256_sub_pd(bezout.matrix[2][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][7]));
  bezout.matrix[2][9][13] =
      _mm256_sub_pd(bezout.matrix[2][9][13],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[2][8]));
  bezout.matrix[2][10][0] =
      _mm256_sub_pd(bezout.matrix[2][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][0]));
  bezout.matrix[2][10][1] =
      _mm256_sub_pd(bezout.matrix[2][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][1]));
  bezout.matrix[2][10][2] =
      _mm256_sub_pd(bezout.matrix[2][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][2]));
  bezout.matrix[2][10][3] =
      _mm256_sub_pd(bezout.matrix[2][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][3]));
  bezout.matrix[2][10][4] =
      _mm256_sub_pd(bezout.matrix[2][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][4]));
  bezout.matrix[2][10][5] =
      _mm256_sub_pd(bezout.matrix[2][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][5]));
  bezout.matrix[2][10][6] =
      _mm256_sub_pd(bezout.matrix[2][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][6]));
  bezout.matrix[2][10][7] =
      _mm256_sub_pd(bezout.matrix[2][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][7]));
  bezout.matrix[2][10][8] =
      _mm256_sub_pd(bezout.matrix[2][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[2][8]));
  bezout.matrix[2][10][1] =
      _mm256_sub_pd(bezout.matrix[2][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][0]));
  bezout.matrix[2][10][2] =
      _mm256_sub_pd(bezout.matrix[2][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][1]));
  bezout.matrix[2][10][3] =
      _mm256_sub_pd(bezout.matrix[2][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][2]));
  bezout.matrix[2][10][4] =
      _mm256_sub_pd(bezout.matrix[2][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][3]));
  bezout.matrix[2][10][5] =
      _mm256_sub_pd(bezout.matrix[2][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][4]));
  bezout.matrix[2][10][6] =
      _mm256_sub_pd(bezout.matrix[2][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][5]));
  bezout.matrix[2][10][7] =
      _mm256_sub_pd(bezout.matrix[2][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][6]));
  bezout.matrix[2][10][8] =
      _mm256_sub_pd(bezout.matrix[2][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][7]));
  bezout.matrix[2][10][9] =
      _mm256_sub_pd(bezout.matrix[2][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[2][8]));
  bezout.matrix[2][10][2] =
      _mm256_sub_pd(bezout.matrix[2][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][0]));
  bezout.matrix[2][10][3] =
      _mm256_sub_pd(bezout.matrix[2][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][1]));
  bezout.matrix[2][10][4] =
      _mm256_sub_pd(bezout.matrix[2][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][2]));
  bezout.matrix[2][10][5] =
      _mm256_sub_pd(bezout.matrix[2][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][3]));
  bezout.matrix[2][10][6] =
      _mm256_sub_pd(bezout.matrix[2][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][4]));
  bezout.matrix[2][10][7] =
      _mm256_sub_pd(bezout.matrix[2][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][5]));
  bezout.matrix[2][10][8] =
      _mm256_sub_pd(bezout.matrix[2][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][6]));
  bezout.matrix[2][10][9] =
      _mm256_sub_pd(bezout.matrix[2][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][7]));
  bezout.matrix[2][10][10] =
      _mm256_sub_pd(bezout.matrix[2][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[2][8]));
  bezout.matrix[2][10][3] =
      _mm256_sub_pd(bezout.matrix[2][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][0]));
  bezout.matrix[2][10][4] =
      _mm256_sub_pd(bezout.matrix[2][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][1]));
  bezout.matrix[2][10][5] =
      _mm256_sub_pd(bezout.matrix[2][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][2]));
  bezout.matrix[2][10][6] =
      _mm256_sub_pd(bezout.matrix[2][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][3]));
  bezout.matrix[2][10][7] =
      _mm256_sub_pd(bezout.matrix[2][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][4]));
  bezout.matrix[2][10][8] =
      _mm256_sub_pd(bezout.matrix[2][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][5]));
  bezout.matrix[2][10][9] =
      _mm256_sub_pd(bezout.matrix[2][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][6]));
  bezout.matrix[2][10][10] =
      _mm256_sub_pd(bezout.matrix[2][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][7]));
  bezout.matrix[2][10][11] =
      _mm256_sub_pd(bezout.matrix[2][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[2][8]));
  bezout.matrix[2][10][4] =
      _mm256_sub_pd(bezout.matrix[2][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][0]));
  bezout.matrix[2][10][5] =
      _mm256_sub_pd(bezout.matrix[2][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][1]));
  bezout.matrix[2][10][6] =
      _mm256_sub_pd(bezout.matrix[2][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][2]));
  bezout.matrix[2][10][7] =
      _mm256_sub_pd(bezout.matrix[2][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][3]));
  bezout.matrix[2][10][8] =
      _mm256_sub_pd(bezout.matrix[2][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][4]));
  bezout.matrix[2][10][9] =
      _mm256_sub_pd(bezout.matrix[2][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][5]));
  bezout.matrix[2][10][10] =
      _mm256_sub_pd(bezout.matrix[2][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][6]));
  bezout.matrix[2][10][11] =
      _mm256_sub_pd(bezout.matrix[2][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][7]));
  bezout.matrix[2][10][12] =
      _mm256_sub_pd(bezout.matrix[2][10][12],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[2][8]));
  bezout.matrix[2][11][0] =
      _mm256_sub_pd(bezout.matrix[2][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][0]));
  bezout.matrix[2][11][1] =
      _mm256_sub_pd(bezout.matrix[2][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][1]));
  bezout.matrix[2][11][2] =
      _mm256_sub_pd(bezout.matrix[2][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][2]));
  bezout.matrix[2][11][3] =
      _mm256_sub_pd(bezout.matrix[2][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][3]));
  bezout.matrix[2][11][4] =
      _mm256_sub_pd(bezout.matrix[2][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][4]));
  bezout.matrix[2][11][5] =
      _mm256_sub_pd(bezout.matrix[2][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][5]));
  bezout.matrix[2][11][6] =
      _mm256_sub_pd(bezout.matrix[2][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][6]));
  bezout.matrix[2][11][7] =
      _mm256_sub_pd(bezout.matrix[2][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][7]));
  bezout.matrix[2][11][8] =
      _mm256_sub_pd(bezout.matrix[2][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[2][8]));
  bezout.matrix[2][11][1] =
      _mm256_sub_pd(bezout.matrix[2][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][0]));
  bezout.matrix[2][11][2] =
      _mm256_sub_pd(bezout.matrix[2][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][1]));
  bezout.matrix[2][11][3] =
      _mm256_sub_pd(bezout.matrix[2][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][2]));
  bezout.matrix[2][11][4] =
      _mm256_sub_pd(bezout.matrix[2][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][3]));
  bezout.matrix[2][11][5] =
      _mm256_sub_pd(bezout.matrix[2][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][4]));
  bezout.matrix[2][11][6] =
      _mm256_sub_pd(bezout.matrix[2][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][5]));
  bezout.matrix[2][11][7] =
      _mm256_sub_pd(bezout.matrix[2][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][6]));
  bezout.matrix[2][11][8] =
      _mm256_sub_pd(bezout.matrix[2][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][7]));
  bezout.matrix[2][11][9] =
      _mm256_sub_pd(bezout.matrix[2][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[2][8]));
  bezout.matrix[2][11][2] =
      _mm256_sub_pd(bezout.matrix[2][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][0]));
  bezout.matrix[2][11][3] =
      _mm256_sub_pd(bezout.matrix[2][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][1]));
  bezout.matrix[2][11][4] =
      _mm256_sub_pd(bezout.matrix[2][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][2]));
  bezout.matrix[2][11][5] =
      _mm256_sub_pd(bezout.matrix[2][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][3]));
  bezout.matrix[2][11][6] =
      _mm256_sub_pd(bezout.matrix[2][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][4]));
  bezout.matrix[2][11][7] =
      _mm256_sub_pd(bezout.matrix[2][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][5]));
  bezout.matrix[2][11][8] =
      _mm256_sub_pd(bezout.matrix[2][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][6]));
  bezout.matrix[2][11][9] =
      _mm256_sub_pd(bezout.matrix[2][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][7]));
  bezout.matrix[2][11][10] =
      _mm256_sub_pd(bezout.matrix[2][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[2][8]));
  bezout.matrix[2][11][3] =
      _mm256_sub_pd(bezout.matrix[2][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][0]));
  bezout.matrix[2][11][4] =
      _mm256_sub_pd(bezout.matrix[2][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][1]));
  bezout.matrix[2][11][5] =
      _mm256_sub_pd(bezout.matrix[2][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][2]));
  bezout.matrix[2][11][6] =
      _mm256_sub_pd(bezout.matrix[2][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][3]));
  bezout.matrix[2][11][7] =
      _mm256_sub_pd(bezout.matrix[2][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][4]));
  bezout.matrix[2][11][8] =
      _mm256_sub_pd(bezout.matrix[2][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][5]));
  bezout.matrix[2][11][9] =
      _mm256_sub_pd(bezout.matrix[2][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][6]));
  bezout.matrix[2][11][10] =
      _mm256_sub_pd(bezout.matrix[2][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][7]));
  bezout.matrix[2][11][11] =
      _mm256_sub_pd(bezout.matrix[2][11][11],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[2][8]));
  bezout.matrix[2][12][0] =
      _mm256_sub_pd(bezout.matrix[2][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][0]));
  bezout.matrix[2][12][1] =
      _mm256_sub_pd(bezout.matrix[2][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][1]));
  bezout.matrix[2][12][2] =
      _mm256_sub_pd(bezout.matrix[2][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][2]));
  bezout.matrix[2][12][3] =
      _mm256_sub_pd(bezout.matrix[2][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][3]));
  bezout.matrix[2][12][4] =
      _mm256_sub_pd(bezout.matrix[2][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][4]));
  bezout.matrix[2][12][5] =
      _mm256_sub_pd(bezout.matrix[2][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][5]));
  bezout.matrix[2][12][6] =
      _mm256_sub_pd(bezout.matrix[2][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][6]));
  bezout.matrix[2][12][7] =
      _mm256_sub_pd(bezout.matrix[2][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][7]));
  bezout.matrix[2][12][8] =
      _mm256_sub_pd(bezout.matrix[2][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[2][8]));
  bezout.matrix[2][12][1] =
      _mm256_sub_pd(bezout.matrix[2][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][0]));
  bezout.matrix[2][12][2] =
      _mm256_sub_pd(bezout.matrix[2][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][1]));
  bezout.matrix[2][12][3] =
      _mm256_sub_pd(bezout.matrix[2][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][2]));
  bezout.matrix[2][12][4] =
      _mm256_sub_pd(bezout.matrix[2][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][3]));
  bezout.matrix[2][12][5] =
      _mm256_sub_pd(bezout.matrix[2][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][4]));
  bezout.matrix[2][12][6] =
      _mm256_sub_pd(bezout.matrix[2][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][5]));
  bezout.matrix[2][12][7] =
      _mm256_sub_pd(bezout.matrix[2][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][6]));
  bezout.matrix[2][12][8] =
      _mm256_sub_pd(bezout.matrix[2][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][7]));
  bezout.matrix[2][12][9] =
      _mm256_sub_pd(bezout.matrix[2][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[2][8]));
  bezout.matrix[2][12][2] =
      _mm256_sub_pd(bezout.matrix[2][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][0]));
  bezout.matrix[2][12][3] =
      _mm256_sub_pd(bezout.matrix[2][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][1]));
  bezout.matrix[2][12][4] =
      _mm256_sub_pd(bezout.matrix[2][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][2]));
  bezout.matrix[2][12][5] =
      _mm256_sub_pd(bezout.matrix[2][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][3]));
  bezout.matrix[2][12][6] =
      _mm256_sub_pd(bezout.matrix[2][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][4]));
  bezout.matrix[2][12][7] =
      _mm256_sub_pd(bezout.matrix[2][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][5]));
  bezout.matrix[2][12][8] =
      _mm256_sub_pd(bezout.matrix[2][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][6]));
  bezout.matrix[2][12][9] =
      _mm256_sub_pd(bezout.matrix[2][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][7]));
  bezout.matrix[2][12][10] =
      _mm256_sub_pd(bezout.matrix[2][12][10],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[2][8]));
  bezout.matrix[2][13][0] =
      _mm256_sub_pd(bezout.matrix[2][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][0]));
  bezout.matrix[2][13][1] =
      _mm256_sub_pd(bezout.matrix[2][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][1]));
  bezout.matrix[2][13][2] =
      _mm256_sub_pd(bezout.matrix[2][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][2]));
  bezout.matrix[2][13][3] =
      _mm256_sub_pd(bezout.matrix[2][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][3]));
  bezout.matrix[2][13][4] =
      _mm256_sub_pd(bezout.matrix[2][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][4]));
  bezout.matrix[2][13][5] =
      _mm256_sub_pd(bezout.matrix[2][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][5]));
  bezout.matrix[2][13][6] =
      _mm256_sub_pd(bezout.matrix[2][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][6]));
  bezout.matrix[2][13][7] =
      _mm256_sub_pd(bezout.matrix[2][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][7]));
  bezout.matrix[2][13][8] =
      _mm256_sub_pd(bezout.matrix[2][13][8],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[2][8]));
  bezout.matrix[2][13][1] =
      _mm256_sub_pd(bezout.matrix[2][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][0]));
  bezout.matrix[2][13][2] =
      _mm256_sub_pd(bezout.matrix[2][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][1]));
  bezout.matrix[2][13][3] =
      _mm256_sub_pd(bezout.matrix[2][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][2]));
  bezout.matrix[2][13][4] =
      _mm256_sub_pd(bezout.matrix[2][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][3]));
  bezout.matrix[2][13][5] =
      _mm256_sub_pd(bezout.matrix[2][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][4]));
  bezout.matrix[2][13][6] =
      _mm256_sub_pd(bezout.matrix[2][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][5]));
  bezout.matrix[2][13][7] =
      _mm256_sub_pd(bezout.matrix[2][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][6]));
  bezout.matrix[2][13][8] =
      _mm256_sub_pd(bezout.matrix[2][13][8],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][7]));
  bezout.matrix[2][13][9] =
      _mm256_sub_pd(bezout.matrix[2][13][9],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[2][8]));
  bezout.matrix[2][14][0] =
      _mm256_sub_pd(bezout.matrix[2][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][0]));
  bezout.matrix[2][14][1] =
      _mm256_sub_pd(bezout.matrix[2][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][1]));
  bezout.matrix[2][14][2] =
      _mm256_sub_pd(bezout.matrix[2][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][2]));
  bezout.matrix[2][14][3] =
      _mm256_sub_pd(bezout.matrix[2][14][3],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][3]));
  bezout.matrix[2][14][4] =
      _mm256_sub_pd(bezout.matrix[2][14][4],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][4]));
  bezout.matrix[2][14][5] =
      _mm256_sub_pd(bezout.matrix[2][14][5],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][5]));
  bezout.matrix[2][14][6] =
      _mm256_sub_pd(bezout.matrix[2][14][6],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][6]));
  bezout.matrix[2][14][7] =
      _mm256_sub_pd(bezout.matrix[2][14][7],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][7]));
  bezout.matrix[2][14][8] =
      _mm256_sub_pd(bezout.matrix[2][14][8],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[2][8]));
  bezout.matrix[3][3][0] =
      _mm256_add_pd(bezout.matrix[3][3][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[4][0]));
  bezout.matrix[3][3][1] =
      _mm256_add_pd(bezout.matrix[3][3][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[4][1]));
  bezout.matrix[3][3][2] =
      _mm256_add_pd(bezout.matrix[3][3][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[4][2]));
  bezout.matrix[3][3][3] =
      _mm256_add_pd(bezout.matrix[3][3][3],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[4][3]));
  bezout.matrix[3][3][4] =
      _mm256_add_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[4][4]));
  bezout.matrix[3][3][5] =
      _mm256_add_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[4][5]));
  bezout.matrix[3][3][6] =
      _mm256_add_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[4][6]));
  bezout.matrix[3][3][1] =
      _mm256_add_pd(bezout.matrix[3][3][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[4][0]));
  bezout.matrix[3][3][2] =
      _mm256_add_pd(bezout.matrix[3][3][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[4][1]));
  bezout.matrix[3][3][3] =
      _mm256_add_pd(bezout.matrix[3][3][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[4][2]));
  bezout.matrix[3][3][4] =
      _mm256_add_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[4][3]));
  bezout.matrix[3][3][5] =
      _mm256_add_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[4][4]));
  bezout.matrix[3][3][6] =
      _mm256_add_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[4][5]));
  bezout.matrix[3][3][7] =
      _mm256_add_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[4][6]));
  bezout.matrix[3][3][2] =
      _mm256_add_pd(bezout.matrix[3][3][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[4][0]));
  bezout.matrix[3][3][3] =
      _mm256_add_pd(bezout.matrix[3][3][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[4][1]));
  bezout.matrix[3][3][4] =
      _mm256_add_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[4][2]));
  bezout.matrix[3][3][5] =
      _mm256_add_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[4][3]));
  bezout.matrix[3][3][6] =
      _mm256_add_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[4][4]));
  bezout.matrix[3][3][7] =
      _mm256_add_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[4][5]));
  bezout.matrix[3][3][8] =
      _mm256_add_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[4][6]));
  bezout.matrix[3][3][3] =
      _mm256_add_pd(bezout.matrix[3][3][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[4][0]));
  bezout.matrix[3][3][4] =
      _mm256_add_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[4][1]));
  bezout.matrix[3][3][5] =
      _mm256_add_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[4][2]));
  bezout.matrix[3][3][6] =
      _mm256_add_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[4][3]));
  bezout.matrix[3][3][7] =
      _mm256_add_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[4][4]));
  bezout.matrix[3][3][8] =
      _mm256_add_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[4][5]));
  bezout.matrix[3][3][9] =
      _mm256_add_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[4][6]));
  bezout.matrix[3][3][4] =
      _mm256_add_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[4][0]));
  bezout.matrix[3][3][5] =
      _mm256_add_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[4][1]));
  bezout.matrix[3][3][6] =
      _mm256_add_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[4][2]));
  bezout.matrix[3][3][7] =
      _mm256_add_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[4][3]));
  bezout.matrix[3][3][8] =
      _mm256_add_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[4][4]));
  bezout.matrix[3][3][9] =
      _mm256_add_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[4][5]));
  bezout.matrix[3][3][10] =
      _mm256_add_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[4][6]));
  bezout.matrix[3][3][5] =
      _mm256_add_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[4][0]));
  bezout.matrix[3][3][6] =
      _mm256_add_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[4][1]));
  bezout.matrix[3][3][7] =
      _mm256_add_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[4][2]));
  bezout.matrix[3][3][8] =
      _mm256_add_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[4][3]));
  bezout.matrix[3][3][9] =
      _mm256_add_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[4][4]));
  bezout.matrix[3][3][10] =
      _mm256_add_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[4][5]));
  bezout.matrix[3][3][11] =
      _mm256_add_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[4][6]));
  bezout.matrix[3][3][6] =
      _mm256_add_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[4][0]));
  bezout.matrix[3][3][7] =
      _mm256_add_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[4][1]));
  bezout.matrix[3][3][8] =
      _mm256_add_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[4][2]));
  bezout.matrix[3][3][9] =
      _mm256_add_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[4][3]));
  bezout.matrix[3][3][10] =
      _mm256_add_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[4][4]));
  bezout.matrix[3][3][11] =
      _mm256_add_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[4][5]));
  bezout.matrix[3][3][12] =
      _mm256_add_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[4][6]));
  bezout.matrix[3][3][7] =
      _mm256_add_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[4][0]));
  bezout.matrix[3][3][8] =
      _mm256_add_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[4][1]));
  bezout.matrix[3][3][9] =
      _mm256_add_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[4][2]));
  bezout.matrix[3][3][10] =
      _mm256_add_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[4][3]));
  bezout.matrix[3][3][11] =
      _mm256_add_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[4][4]));
  bezout.matrix[3][3][12] =
      _mm256_add_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[4][5]));
  bezout.matrix[3][3][13] =
      _mm256_add_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[4][6]));
  bezout.matrix[3][3][8] =
      _mm256_add_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[4][0]));
  bezout.matrix[3][3][9] =
      _mm256_add_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[4][1]));
  bezout.matrix[3][3][10] =
      _mm256_add_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[4][2]));
  bezout.matrix[3][3][11] =
      _mm256_add_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[4][3]));
  bezout.matrix[3][3][12] =
      _mm256_add_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[4][4]));
  bezout.matrix[3][3][13] =
      _mm256_add_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[4][5]));
  bezout.matrix[3][3][14] =
      _mm256_add_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[4][6]));
  bezout.matrix[3][3][9] =
      _mm256_add_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[4][0]));
  bezout.matrix[3][3][10] =
      _mm256_add_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[4][1]));
  bezout.matrix[3][3][11] =
      _mm256_add_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[4][2]));
  bezout.matrix[3][3][12] =
      _mm256_add_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[4][3]));
  bezout.matrix[3][3][13] =
      _mm256_add_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[4][4]));
  bezout.matrix[3][3][14] =
      _mm256_add_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[4][5]));
  bezout.matrix[3][3][15] =
      _mm256_add_pd(bezout.matrix[3][3][15],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[4][6]));
  bezout.matrix[3][3][10] =
      _mm256_add_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[4][0]));
  bezout.matrix[3][3][11] =
      _mm256_add_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[4][1]));
  bezout.matrix[3][3][12] =
      _mm256_add_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[4][2]));
  bezout.matrix[3][3][13] =
      _mm256_add_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[4][3]));
  bezout.matrix[3][3][14] =
      _mm256_add_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[4][4]));
  bezout.matrix[3][3][15] =
      _mm256_add_pd(bezout.matrix[3][3][15],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[4][5]));
  bezout.matrix[3][3][11] =
      _mm256_add_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[4][0]));
  bezout.matrix[3][3][12] =
      _mm256_add_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[4][1]));
  bezout.matrix[3][3][13] =
      _mm256_add_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[4][2]));
  bezout.matrix[3][3][14] =
      _mm256_add_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[4][3]));
  bezout.matrix[3][3][15] =
      _mm256_add_pd(bezout.matrix[3][3][15],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[4][4]));
  bezout.matrix[3][3][12] =
      _mm256_add_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[4][0]));
  bezout.matrix[3][3][13] =
      _mm256_add_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[4][1]));
  bezout.matrix[3][3][14] =
      _mm256_add_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[4][2]));
  bezout.matrix[3][3][15] =
      _mm256_add_pd(bezout.matrix[3][3][15],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[4][3]));
  bezout.matrix[3][3][0] =
      _mm256_sub_pd(bezout.matrix[3][3][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[3][0]));
  bezout.matrix[3][3][1] =
      _mm256_sub_pd(bezout.matrix[3][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[3][1]));
  bezout.matrix[3][3][2] =
      _mm256_sub_pd(bezout.matrix[3][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[3][2]));
  bezout.matrix[3][3][3] =
      _mm256_sub_pd(bezout.matrix[3][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[3][3]));
  bezout.matrix[3][3][4] =
      _mm256_sub_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[3][4]));
  bezout.matrix[3][3][5] =
      _mm256_sub_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[3][5]));
  bezout.matrix[3][3][6] =
      _mm256_sub_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[3][6]));
  bezout.matrix[3][3][7] =
      _mm256_sub_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[3][7]));
  bezout.matrix[3][3][1] =
      _mm256_sub_pd(bezout.matrix[3][3][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[3][0]));
  bezout.matrix[3][3][2] =
      _mm256_sub_pd(bezout.matrix[3][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[3][1]));
  bezout.matrix[3][3][3] =
      _mm256_sub_pd(bezout.matrix[3][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[3][2]));
  bezout.matrix[3][3][4] =
      _mm256_sub_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[3][3]));
  bezout.matrix[3][3][5] =
      _mm256_sub_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[3][4]));
  bezout.matrix[3][3][6] =
      _mm256_sub_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[3][5]));
  bezout.matrix[3][3][7] =
      _mm256_sub_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[3][6]));
  bezout.matrix[3][3][8] =
      _mm256_sub_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[3][7]));
  bezout.matrix[3][3][2] =
      _mm256_sub_pd(bezout.matrix[3][3][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[3][0]));
  bezout.matrix[3][3][3] =
      _mm256_sub_pd(bezout.matrix[3][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[3][1]));
  bezout.matrix[3][3][4] =
      _mm256_sub_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[3][2]));
  bezout.matrix[3][3][5] =
      _mm256_sub_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[3][3]));
  bezout.matrix[3][3][6] =
      _mm256_sub_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[3][4]));
  bezout.matrix[3][3][7] =
      _mm256_sub_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[3][5]));
  bezout.matrix[3][3][8] =
      _mm256_sub_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[3][6]));
  bezout.matrix[3][3][9] =
      _mm256_sub_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[3][7]));
  bezout.matrix[3][3][3] =
      _mm256_sub_pd(bezout.matrix[3][3][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[3][0]));
  bezout.matrix[3][3][4] =
      _mm256_sub_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[3][1]));
  bezout.matrix[3][3][5] =
      _mm256_sub_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[3][2]));
  bezout.matrix[3][3][6] =
      _mm256_sub_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[3][3]));
  bezout.matrix[3][3][7] =
      _mm256_sub_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[3][4]));
  bezout.matrix[3][3][8] =
      _mm256_sub_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[3][5]));
  bezout.matrix[3][3][9] =
      _mm256_sub_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[3][6]));
  bezout.matrix[3][3][10] =
      _mm256_sub_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[3][7]));
  bezout.matrix[3][3][4] =
      _mm256_sub_pd(bezout.matrix[3][3][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[3][0]));
  bezout.matrix[3][3][5] =
      _mm256_sub_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[3][1]));
  bezout.matrix[3][3][6] =
      _mm256_sub_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[3][2]));
  bezout.matrix[3][3][7] =
      _mm256_sub_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[3][3]));
  bezout.matrix[3][3][8] =
      _mm256_sub_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[3][4]));
  bezout.matrix[3][3][9] =
      _mm256_sub_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[3][5]));
  bezout.matrix[3][3][10] =
      _mm256_sub_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[3][6]));
  bezout.matrix[3][3][11] =
      _mm256_sub_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[3][7]));
  bezout.matrix[3][3][5] =
      _mm256_sub_pd(bezout.matrix[3][3][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[3][0]));
  bezout.matrix[3][3][6] =
      _mm256_sub_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[3][1]));
  bezout.matrix[3][3][7] =
      _mm256_sub_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[3][2]));
  bezout.matrix[3][3][8] =
      _mm256_sub_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[3][3]));
  bezout.matrix[3][3][9] =
      _mm256_sub_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[3][4]));
  bezout.matrix[3][3][10] =
      _mm256_sub_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[3][5]));
  bezout.matrix[3][3][11] =
      _mm256_sub_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[3][6]));
  bezout.matrix[3][3][12] =
      _mm256_sub_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[3][7]));
  bezout.matrix[3][3][6] =
      _mm256_sub_pd(bezout.matrix[3][3][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[3][0]));
  bezout.matrix[3][3][7] =
      _mm256_sub_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[3][1]));
  bezout.matrix[3][3][8] =
      _mm256_sub_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[3][2]));
  bezout.matrix[3][3][9] =
      _mm256_sub_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[3][3]));
  bezout.matrix[3][3][10] =
      _mm256_sub_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[3][4]));
  bezout.matrix[3][3][11] =
      _mm256_sub_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[3][5]));
  bezout.matrix[3][3][12] =
      _mm256_sub_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[3][6]));
  bezout.matrix[3][3][13] =
      _mm256_sub_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[3][7]));
  bezout.matrix[3][3][7] =
      _mm256_sub_pd(bezout.matrix[3][3][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[3][0]));
  bezout.matrix[3][3][8] =
      _mm256_sub_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[3][1]));
  bezout.matrix[3][3][9] =
      _mm256_sub_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[3][2]));
  bezout.matrix[3][3][10] =
      _mm256_sub_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[3][3]));
  bezout.matrix[3][3][11] =
      _mm256_sub_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[3][4]));
  bezout.matrix[3][3][12] =
      _mm256_sub_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[3][5]));
  bezout.matrix[3][3][13] =
      _mm256_sub_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[3][6]));
  bezout.matrix[3][3][14] =
      _mm256_sub_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[3][7]));
  bezout.matrix[3][3][8] =
      _mm256_sub_pd(bezout.matrix[3][3][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[3][0]));
  bezout.matrix[3][3][9] =
      _mm256_sub_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[3][1]));
  bezout.matrix[3][3][10] =
      _mm256_sub_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[3][2]));
  bezout.matrix[3][3][11] =
      _mm256_sub_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[3][3]));
  bezout.matrix[3][3][12] =
      _mm256_sub_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[3][4]));
  bezout.matrix[3][3][13] =
      _mm256_sub_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[3][5]));
  bezout.matrix[3][3][14] =
      _mm256_sub_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[3][6]));
  bezout.matrix[3][3][15] =
      _mm256_sub_pd(bezout.matrix[3][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[3][7]));
  bezout.matrix[3][3][9] =
      _mm256_sub_pd(bezout.matrix[3][3][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[3][0]));
  bezout.matrix[3][3][10] =
      _mm256_sub_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[3][1]));
  bezout.matrix[3][3][11] =
      _mm256_sub_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[3][2]));
  bezout.matrix[3][3][12] =
      _mm256_sub_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[3][3]));
  bezout.matrix[3][3][13] =
      _mm256_sub_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[3][4]));
  bezout.matrix[3][3][14] =
      _mm256_sub_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[3][5]));
  bezout.matrix[3][3][15] =
      _mm256_sub_pd(bezout.matrix[3][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[3][6]));
  bezout.matrix[3][3][10] =
      _mm256_sub_pd(bezout.matrix[3][3][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[3][0]));
  bezout.matrix[3][3][11] =
      _mm256_sub_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[3][1]));
  bezout.matrix[3][3][12] =
      _mm256_sub_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[3][2]));
  bezout.matrix[3][3][13] =
      _mm256_sub_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[3][3]));
  bezout.matrix[3][3][14] =
      _mm256_sub_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[3][4]));
  bezout.matrix[3][3][15] =
      _mm256_sub_pd(bezout.matrix[3][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[3][5]));
  bezout.matrix[3][3][11] =
      _mm256_sub_pd(bezout.matrix[3][3][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[3][0]));
  bezout.matrix[3][3][12] =
      _mm256_sub_pd(bezout.matrix[3][3][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[3][1]));
  bezout.matrix[3][3][13] =
      _mm256_sub_pd(bezout.matrix[3][3][13],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[3][2]));
  bezout.matrix[3][3][14] =
      _mm256_sub_pd(bezout.matrix[3][3][14],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[3][3]));
  bezout.matrix[3][3][15] =
      _mm256_sub_pd(bezout.matrix[3][3][15],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[3][4]));
  bezout.matrix[3][4][0] =
      _mm256_add_pd(bezout.matrix[3][4][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[5][0]));
  bezout.matrix[3][4][1] =
      _mm256_add_pd(bezout.matrix[3][4][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[5][1]));
  bezout.matrix[3][4][2] =
      _mm256_add_pd(bezout.matrix[3][4][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[5][2]));
  bezout.matrix[3][4][3] =
      _mm256_add_pd(bezout.matrix[3][4][3],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[5][3]));
  bezout.matrix[3][4][4] =
      _mm256_add_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[5][4]));
  bezout.matrix[3][4][5] =
      _mm256_add_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[5][5]));
  bezout.matrix[3][4][1] =
      _mm256_add_pd(bezout.matrix[3][4][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[5][0]));
  bezout.matrix[3][4][2] =
      _mm256_add_pd(bezout.matrix[3][4][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[5][1]));
  bezout.matrix[3][4][3] =
      _mm256_add_pd(bezout.matrix[3][4][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[5][2]));
  bezout.matrix[3][4][4] =
      _mm256_add_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[5][3]));
  bezout.matrix[3][4][5] =
      _mm256_add_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[5][4]));
  bezout.matrix[3][4][6] =
      _mm256_add_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[5][5]));
  bezout.matrix[3][4][2] =
      _mm256_add_pd(bezout.matrix[3][4][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[5][0]));
  bezout.matrix[3][4][3] =
      _mm256_add_pd(bezout.matrix[3][4][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[5][1]));
  bezout.matrix[3][4][4] =
      _mm256_add_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[5][2]));
  bezout.matrix[3][4][5] =
      _mm256_add_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[5][3]));
  bezout.matrix[3][4][6] =
      _mm256_add_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[5][4]));
  bezout.matrix[3][4][7] =
      _mm256_add_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[5][5]));
  bezout.matrix[3][4][3] =
      _mm256_add_pd(bezout.matrix[3][4][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[5][0]));
  bezout.matrix[3][4][4] =
      _mm256_add_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[5][1]));
  bezout.matrix[3][4][5] =
      _mm256_add_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[5][2]));
  bezout.matrix[3][4][6] =
      _mm256_add_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[5][3]));
  bezout.matrix[3][4][7] =
      _mm256_add_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[5][4]));
  bezout.matrix[3][4][8] =
      _mm256_add_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[5][5]));
  bezout.matrix[3][4][4] =
      _mm256_add_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[5][0]));
  bezout.matrix[3][4][5] =
      _mm256_add_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[5][1]));
  bezout.matrix[3][4][6] =
      _mm256_add_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[5][2]));
  bezout.matrix[3][4][7] =
      _mm256_add_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[5][3]));
  bezout.matrix[3][4][8] =
      _mm256_add_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[5][4]));
  bezout.matrix[3][4][9] =
      _mm256_add_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[5][5]));
  bezout.matrix[3][4][5] =
      _mm256_add_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[5][0]));
  bezout.matrix[3][4][6] =
      _mm256_add_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[5][1]));
  bezout.matrix[3][4][7] =
      _mm256_add_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[5][2]));
  bezout.matrix[3][4][8] =
      _mm256_add_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[5][3]));
  bezout.matrix[3][4][9] =
      _mm256_add_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[5][4]));
  bezout.matrix[3][4][10] =
      _mm256_add_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[5][5]));
  bezout.matrix[3][4][6] =
      _mm256_add_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[5][0]));
  bezout.matrix[3][4][7] =
      _mm256_add_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[5][1]));
  bezout.matrix[3][4][8] =
      _mm256_add_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[5][2]));
  bezout.matrix[3][4][9] =
      _mm256_add_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[5][3]));
  bezout.matrix[3][4][10] =
      _mm256_add_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[5][4]));
  bezout.matrix[3][4][11] =
      _mm256_add_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[5][5]));
  bezout.matrix[3][4][7] =
      _mm256_add_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[5][0]));
  bezout.matrix[3][4][8] =
      _mm256_add_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[5][1]));
  bezout.matrix[3][4][9] =
      _mm256_add_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[5][2]));
  bezout.matrix[3][4][10] =
      _mm256_add_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[5][3]));
  bezout.matrix[3][4][11] =
      _mm256_add_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[5][4]));
  bezout.matrix[3][4][12] =
      _mm256_add_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[5][5]));
  bezout.matrix[3][4][8] =
      _mm256_add_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[5][0]));
  bezout.matrix[3][4][9] =
      _mm256_add_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[5][1]));
  bezout.matrix[3][4][10] =
      _mm256_add_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[5][2]));
  bezout.matrix[3][4][11] =
      _mm256_add_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[5][3]));
  bezout.matrix[3][4][12] =
      _mm256_add_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[5][4]));
  bezout.matrix[3][4][13] =
      _mm256_add_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[5][5]));
  bezout.matrix[3][4][9] =
      _mm256_add_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[5][0]));
  bezout.matrix[3][4][10] =
      _mm256_add_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[5][1]));
  bezout.matrix[3][4][11] =
      _mm256_add_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[5][2]));
  bezout.matrix[3][4][12] =
      _mm256_add_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[5][3]));
  bezout.matrix[3][4][13] =
      _mm256_add_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[5][4]));
  bezout.matrix[3][4][14] =
      _mm256_add_pd(bezout.matrix[3][4][14],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[5][5]));
  bezout.matrix[3][4][10] =
      _mm256_add_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[5][0]));
  bezout.matrix[3][4][11] =
      _mm256_add_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[5][1]));
  bezout.matrix[3][4][12] =
      _mm256_add_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[5][2]));
  bezout.matrix[3][4][13] =
      _mm256_add_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[5][3]));
  bezout.matrix[3][4][14] =
      _mm256_add_pd(bezout.matrix[3][4][14],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[5][4]));
  bezout.matrix[3][4][15] =
      _mm256_add_pd(bezout.matrix[3][4][15],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[5][5]));
  bezout.matrix[3][4][11] =
      _mm256_add_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[5][0]));
  bezout.matrix[3][4][12] =
      _mm256_add_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[5][1]));
  bezout.matrix[3][4][13] =
      _mm256_add_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[5][2]));
  bezout.matrix[3][4][14] =
      _mm256_add_pd(bezout.matrix[3][4][14],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[5][3]));
  bezout.matrix[3][4][15] =
      _mm256_add_pd(bezout.matrix[3][4][15],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[5][4]));
  bezout.matrix[3][4][12] =
      _mm256_add_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[5][0]));
  bezout.matrix[3][4][13] =
      _mm256_add_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[5][1]));
  bezout.matrix[3][4][14] =
      _mm256_add_pd(bezout.matrix[3][4][14],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[5][2]));
  bezout.matrix[3][4][15] =
      _mm256_add_pd(bezout.matrix[3][4][15],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[5][3]));
  bezout.matrix[3][4][0] =
      _mm256_sub_pd(bezout.matrix[3][4][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[3][0]));
  bezout.matrix[3][4][1] =
      _mm256_sub_pd(bezout.matrix[3][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[3][1]));
  bezout.matrix[3][4][2] =
      _mm256_sub_pd(bezout.matrix[3][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[3][2]));
  bezout.matrix[3][4][3] =
      _mm256_sub_pd(bezout.matrix[3][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[3][3]));
  bezout.matrix[3][4][4] =
      _mm256_sub_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[3][4]));
  bezout.matrix[3][4][5] =
      _mm256_sub_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[3][5]));
  bezout.matrix[3][4][6] =
      _mm256_sub_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[3][6]));
  bezout.matrix[3][4][7] =
      _mm256_sub_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[3][7]));
  bezout.matrix[3][4][1] =
      _mm256_sub_pd(bezout.matrix[3][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[3][0]));
  bezout.matrix[3][4][2] =
      _mm256_sub_pd(bezout.matrix[3][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[3][1]));
  bezout.matrix[3][4][3] =
      _mm256_sub_pd(bezout.matrix[3][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[3][2]));
  bezout.matrix[3][4][4] =
      _mm256_sub_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[3][3]));
  bezout.matrix[3][4][5] =
      _mm256_sub_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[3][4]));
  bezout.matrix[3][4][6] =
      _mm256_sub_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[3][5]));
  bezout.matrix[3][4][7] =
      _mm256_sub_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[3][6]));
  bezout.matrix[3][4][8] =
      _mm256_sub_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[3][7]));
  bezout.matrix[3][4][2] =
      _mm256_sub_pd(bezout.matrix[3][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[3][0]));
  bezout.matrix[3][4][3] =
      _mm256_sub_pd(bezout.matrix[3][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[3][1]));
  bezout.matrix[3][4][4] =
      _mm256_sub_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[3][2]));
  bezout.matrix[3][4][5] =
      _mm256_sub_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[3][3]));
  bezout.matrix[3][4][6] =
      _mm256_sub_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[3][4]));
  bezout.matrix[3][4][7] =
      _mm256_sub_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[3][5]));
  bezout.matrix[3][4][8] =
      _mm256_sub_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[3][6]));
  bezout.matrix[3][4][9] =
      _mm256_sub_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[3][7]));
  bezout.matrix[3][4][3] =
      _mm256_sub_pd(bezout.matrix[3][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[3][0]));
  bezout.matrix[3][4][4] =
      _mm256_sub_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[3][1]));
  bezout.matrix[3][4][5] =
      _mm256_sub_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[3][2]));
  bezout.matrix[3][4][6] =
      _mm256_sub_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[3][3]));
  bezout.matrix[3][4][7] =
      _mm256_sub_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[3][4]));
  bezout.matrix[3][4][8] =
      _mm256_sub_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[3][5]));
  bezout.matrix[3][4][9] =
      _mm256_sub_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[3][6]));
  bezout.matrix[3][4][10] =
      _mm256_sub_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[3][7]));
  bezout.matrix[3][4][4] =
      _mm256_sub_pd(bezout.matrix[3][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[3][0]));
  bezout.matrix[3][4][5] =
      _mm256_sub_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[3][1]));
  bezout.matrix[3][4][6] =
      _mm256_sub_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[3][2]));
  bezout.matrix[3][4][7] =
      _mm256_sub_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[3][3]));
  bezout.matrix[3][4][8] =
      _mm256_sub_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[3][4]));
  bezout.matrix[3][4][9] =
      _mm256_sub_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[3][5]));
  bezout.matrix[3][4][10] =
      _mm256_sub_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[3][6]));
  bezout.matrix[3][4][11] =
      _mm256_sub_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[3][7]));
  bezout.matrix[3][4][5] =
      _mm256_sub_pd(bezout.matrix[3][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[3][0]));
  bezout.matrix[3][4][6] =
      _mm256_sub_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[3][1]));
  bezout.matrix[3][4][7] =
      _mm256_sub_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[3][2]));
  bezout.matrix[3][4][8] =
      _mm256_sub_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[3][3]));
  bezout.matrix[3][4][9] =
      _mm256_sub_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[3][4]));
  bezout.matrix[3][4][10] =
      _mm256_sub_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[3][5]));
  bezout.matrix[3][4][11] =
      _mm256_sub_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[3][6]));
  bezout.matrix[3][4][12] =
      _mm256_sub_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[3][7]));
  bezout.matrix[3][4][6] =
      _mm256_sub_pd(bezout.matrix[3][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[3][0]));
  bezout.matrix[3][4][7] =
      _mm256_sub_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[3][1]));
  bezout.matrix[3][4][8] =
      _mm256_sub_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[3][2]));
  bezout.matrix[3][4][9] =
      _mm256_sub_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[3][3]));
  bezout.matrix[3][4][10] =
      _mm256_sub_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[3][4]));
  bezout.matrix[3][4][11] =
      _mm256_sub_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[3][5]));
  bezout.matrix[3][4][12] =
      _mm256_sub_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[3][6]));
  bezout.matrix[3][4][13] =
      _mm256_sub_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[3][7]));
  bezout.matrix[3][4][7] =
      _mm256_sub_pd(bezout.matrix[3][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[3][0]));
  bezout.matrix[3][4][8] =
      _mm256_sub_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[3][1]));
  bezout.matrix[3][4][9] =
      _mm256_sub_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[3][2]));
  bezout.matrix[3][4][10] =
      _mm256_sub_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[3][3]));
  bezout.matrix[3][4][11] =
      _mm256_sub_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[3][4]));
  bezout.matrix[3][4][12] =
      _mm256_sub_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[3][5]));
  bezout.matrix[3][4][13] =
      _mm256_sub_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[3][6]));
  bezout.matrix[3][4][14] =
      _mm256_sub_pd(bezout.matrix[3][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[3][7]));
  bezout.matrix[3][4][8] =
      _mm256_sub_pd(bezout.matrix[3][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[3][0]));
  bezout.matrix[3][4][9] =
      _mm256_sub_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[3][1]));
  bezout.matrix[3][4][10] =
      _mm256_sub_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[3][2]));
  bezout.matrix[3][4][11] =
      _mm256_sub_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[3][3]));
  bezout.matrix[3][4][12] =
      _mm256_sub_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[3][4]));
  bezout.matrix[3][4][13] =
      _mm256_sub_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[3][5]));
  bezout.matrix[3][4][14] =
      _mm256_sub_pd(bezout.matrix[3][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[3][6]));
  bezout.matrix[3][4][15] =
      _mm256_sub_pd(bezout.matrix[3][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[3][7]));
  bezout.matrix[3][4][9] =
      _mm256_sub_pd(bezout.matrix[3][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[3][0]));
  bezout.matrix[3][4][10] =
      _mm256_sub_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[3][1]));
  bezout.matrix[3][4][11] =
      _mm256_sub_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[3][2]));
  bezout.matrix[3][4][12] =
      _mm256_sub_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[3][3]));
  bezout.matrix[3][4][13] =
      _mm256_sub_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[3][4]));
  bezout.matrix[3][4][14] =
      _mm256_sub_pd(bezout.matrix[3][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[3][5]));
  bezout.matrix[3][4][15] =
      _mm256_sub_pd(bezout.matrix[3][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[3][6]));
  bezout.matrix[3][4][10] =
      _mm256_sub_pd(bezout.matrix[3][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[3][0]));
  bezout.matrix[3][4][11] =
      _mm256_sub_pd(bezout.matrix[3][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[3][1]));
  bezout.matrix[3][4][12] =
      _mm256_sub_pd(bezout.matrix[3][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[3][2]));
  bezout.matrix[3][4][13] =
      _mm256_sub_pd(bezout.matrix[3][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[3][3]));
  bezout.matrix[3][4][14] =
      _mm256_sub_pd(bezout.matrix[3][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[3][4]));
  bezout.matrix[3][4][15] =
      _mm256_sub_pd(bezout.matrix[3][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[3][5]));
  bezout.matrix[3][5][0] =
      _mm256_add_pd(bezout.matrix[3][5][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[6][0]));
  bezout.matrix[3][5][1] =
      _mm256_add_pd(bezout.matrix[3][5][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[6][1]));
  bezout.matrix[3][5][2] =
      _mm256_add_pd(bezout.matrix[3][5][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[6][2]));
  bezout.matrix[3][5][3] =
      _mm256_add_pd(bezout.matrix[3][5][3],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[6][3]));
  bezout.matrix[3][5][4] =
      _mm256_add_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[6][4]));
  bezout.matrix[3][5][1] =
      _mm256_add_pd(bezout.matrix[3][5][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[6][0]));
  bezout.matrix[3][5][2] =
      _mm256_add_pd(bezout.matrix[3][5][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[6][1]));
  bezout.matrix[3][5][3] =
      _mm256_add_pd(bezout.matrix[3][5][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[6][2]));
  bezout.matrix[3][5][4] =
      _mm256_add_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[6][3]));
  bezout.matrix[3][5][5] =
      _mm256_add_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[6][4]));
  bezout.matrix[3][5][2] =
      _mm256_add_pd(bezout.matrix[3][5][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[6][0]));
  bezout.matrix[3][5][3] =
      _mm256_add_pd(bezout.matrix[3][5][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[6][1]));
  bezout.matrix[3][5][4] =
      _mm256_add_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[6][2]));
  bezout.matrix[3][5][5] =
      _mm256_add_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[6][3]));
  bezout.matrix[3][5][6] =
      _mm256_add_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[6][4]));
  bezout.matrix[3][5][3] =
      _mm256_add_pd(bezout.matrix[3][5][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[6][0]));
  bezout.matrix[3][5][4] =
      _mm256_add_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[6][1]));
  bezout.matrix[3][5][5] =
      _mm256_add_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[6][2]));
  bezout.matrix[3][5][6] =
      _mm256_add_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[6][3]));
  bezout.matrix[3][5][7] =
      _mm256_add_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[6][4]));
  bezout.matrix[3][5][4] =
      _mm256_add_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[6][0]));
  bezout.matrix[3][5][5] =
      _mm256_add_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[6][1]));
  bezout.matrix[3][5][6] =
      _mm256_add_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[6][2]));
  bezout.matrix[3][5][7] =
      _mm256_add_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[6][3]));
  bezout.matrix[3][5][8] =
      _mm256_add_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[6][4]));
  bezout.matrix[3][5][5] =
      _mm256_add_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[6][0]));
  bezout.matrix[3][5][6] =
      _mm256_add_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[6][1]));
  bezout.matrix[3][5][7] =
      _mm256_add_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[6][2]));
  bezout.matrix[3][5][8] =
      _mm256_add_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[6][3]));
  bezout.matrix[3][5][9] =
      _mm256_add_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[6][4]));
  bezout.matrix[3][5][6] =
      _mm256_add_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[6][0]));
  bezout.matrix[3][5][7] =
      _mm256_add_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[6][1]));
  bezout.matrix[3][5][8] =
      _mm256_add_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[6][2]));
  bezout.matrix[3][5][9] =
      _mm256_add_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[6][3]));
  bezout.matrix[3][5][10] =
      _mm256_add_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[6][4]));
  bezout.matrix[3][5][7] =
      _mm256_add_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[6][0]));
  bezout.matrix[3][5][8] =
      _mm256_add_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[6][1]));
  bezout.matrix[3][5][9] =
      _mm256_add_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[6][2]));
  bezout.matrix[3][5][10] =
      _mm256_add_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[6][3]));
  bezout.matrix[3][5][11] =
      _mm256_add_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[6][4]));
  bezout.matrix[3][5][8] =
      _mm256_add_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[6][0]));
  bezout.matrix[3][5][9] =
      _mm256_add_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[6][1]));
  bezout.matrix[3][5][10] =
      _mm256_add_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[6][2]));
  bezout.matrix[3][5][11] =
      _mm256_add_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[6][3]));
  bezout.matrix[3][5][12] =
      _mm256_add_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[6][4]));
  bezout.matrix[3][5][9] =
      _mm256_add_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[6][0]));
  bezout.matrix[3][5][10] =
      _mm256_add_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[6][1]));
  bezout.matrix[3][5][11] =
      _mm256_add_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[6][2]));
  bezout.matrix[3][5][12] =
      _mm256_add_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[6][3]));
  bezout.matrix[3][5][13] =
      _mm256_add_pd(bezout.matrix[3][5][13],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[6][4]));
  bezout.matrix[3][5][10] =
      _mm256_add_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[6][0]));
  bezout.matrix[3][5][11] =
      _mm256_add_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[6][1]));
  bezout.matrix[3][5][12] =
      _mm256_add_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[6][2]));
  bezout.matrix[3][5][13] =
      _mm256_add_pd(bezout.matrix[3][5][13],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[6][3]));
  bezout.matrix[3][5][14] =
      _mm256_add_pd(bezout.matrix[3][5][14],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[6][4]));
  bezout.matrix[3][5][11] =
      _mm256_add_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[6][0]));
  bezout.matrix[3][5][12] =
      _mm256_add_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[6][1]));
  bezout.matrix[3][5][13] =
      _mm256_add_pd(bezout.matrix[3][5][13],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[6][2]));
  bezout.matrix[3][5][14] =
      _mm256_add_pd(bezout.matrix[3][5][14],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[6][3]));
  bezout.matrix[3][5][15] =
      _mm256_add_pd(bezout.matrix[3][5][15],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[6][4]));
  bezout.matrix[3][5][12] =
      _mm256_add_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[6][0]));
  bezout.matrix[3][5][13] =
      _mm256_add_pd(bezout.matrix[3][5][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[6][1]));
  bezout.matrix[3][5][14] =
      _mm256_add_pd(bezout.matrix[3][5][14],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[6][2]));
  bezout.matrix[3][5][15] =
      _mm256_add_pd(bezout.matrix[3][5][15],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[6][3]));
  bezout.matrix[3][5][0] =
      _mm256_sub_pd(bezout.matrix[3][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[3][0]));
  bezout.matrix[3][5][1] =
      _mm256_sub_pd(bezout.matrix[3][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[3][1]));
  bezout.matrix[3][5][2] =
      _mm256_sub_pd(bezout.matrix[3][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[3][2]));
  bezout.matrix[3][5][3] =
      _mm256_sub_pd(bezout.matrix[3][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[3][3]));
  bezout.matrix[3][5][4] =
      _mm256_sub_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[3][4]));
  bezout.matrix[3][5][5] =
      _mm256_sub_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[3][5]));
  bezout.matrix[3][5][6] =
      _mm256_sub_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[3][6]));
  bezout.matrix[3][5][7] =
      _mm256_sub_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[3][7]));
  bezout.matrix[3][5][1] =
      _mm256_sub_pd(bezout.matrix[3][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[3][0]));
  bezout.matrix[3][5][2] =
      _mm256_sub_pd(bezout.matrix[3][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[3][1]));
  bezout.matrix[3][5][3] =
      _mm256_sub_pd(bezout.matrix[3][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[3][2]));
  bezout.matrix[3][5][4] =
      _mm256_sub_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[3][3]));
  bezout.matrix[3][5][5] =
      _mm256_sub_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[3][4]));
  bezout.matrix[3][5][6] =
      _mm256_sub_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[3][5]));
  bezout.matrix[3][5][7] =
      _mm256_sub_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[3][6]));
  bezout.matrix[3][5][8] =
      _mm256_sub_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[3][7]));
  bezout.matrix[3][5][2] =
      _mm256_sub_pd(bezout.matrix[3][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[3][0]));
  bezout.matrix[3][5][3] =
      _mm256_sub_pd(bezout.matrix[3][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[3][1]));
  bezout.matrix[3][5][4] =
      _mm256_sub_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[3][2]));
  bezout.matrix[3][5][5] =
      _mm256_sub_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[3][3]));
  bezout.matrix[3][5][6] =
      _mm256_sub_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[3][4]));
  bezout.matrix[3][5][7] =
      _mm256_sub_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[3][5]));
  bezout.matrix[3][5][8] =
      _mm256_sub_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[3][6]));
  bezout.matrix[3][5][9] =
      _mm256_sub_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[3][7]));
  bezout.matrix[3][5][3] =
      _mm256_sub_pd(bezout.matrix[3][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[3][0]));
  bezout.matrix[3][5][4] =
      _mm256_sub_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[3][1]));
  bezout.matrix[3][5][5] =
      _mm256_sub_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[3][2]));
  bezout.matrix[3][5][6] =
      _mm256_sub_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[3][3]));
  bezout.matrix[3][5][7] =
      _mm256_sub_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[3][4]));
  bezout.matrix[3][5][8] =
      _mm256_sub_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[3][5]));
  bezout.matrix[3][5][9] =
      _mm256_sub_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[3][6]));
  bezout.matrix[3][5][10] =
      _mm256_sub_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[3][7]));
  bezout.matrix[3][5][4] =
      _mm256_sub_pd(bezout.matrix[3][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[3][0]));
  bezout.matrix[3][5][5] =
      _mm256_sub_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[3][1]));
  bezout.matrix[3][5][6] =
      _mm256_sub_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[3][2]));
  bezout.matrix[3][5][7] =
      _mm256_sub_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[3][3]));
  bezout.matrix[3][5][8] =
      _mm256_sub_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[3][4]));
  bezout.matrix[3][5][9] =
      _mm256_sub_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[3][5]));
  bezout.matrix[3][5][10] =
      _mm256_sub_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[3][6]));
  bezout.matrix[3][5][11] =
      _mm256_sub_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[3][7]));
  bezout.matrix[3][5][5] =
      _mm256_sub_pd(bezout.matrix[3][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[3][0]));
  bezout.matrix[3][5][6] =
      _mm256_sub_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[3][1]));
  bezout.matrix[3][5][7] =
      _mm256_sub_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[3][2]));
  bezout.matrix[3][5][8] =
      _mm256_sub_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[3][3]));
  bezout.matrix[3][5][9] =
      _mm256_sub_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[3][4]));
  bezout.matrix[3][5][10] =
      _mm256_sub_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[3][5]));
  bezout.matrix[3][5][11] =
      _mm256_sub_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[3][6]));
  bezout.matrix[3][5][12] =
      _mm256_sub_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[3][7]));
  bezout.matrix[3][5][6] =
      _mm256_sub_pd(bezout.matrix[3][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[3][0]));
  bezout.matrix[3][5][7] =
      _mm256_sub_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[3][1]));
  bezout.matrix[3][5][8] =
      _mm256_sub_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[3][2]));
  bezout.matrix[3][5][9] =
      _mm256_sub_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[3][3]));
  bezout.matrix[3][5][10] =
      _mm256_sub_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[3][4]));
  bezout.matrix[3][5][11] =
      _mm256_sub_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[3][5]));
  bezout.matrix[3][5][12] =
      _mm256_sub_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[3][6]));
  bezout.matrix[3][5][13] =
      _mm256_sub_pd(bezout.matrix[3][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[3][7]));
  bezout.matrix[3][5][7] =
      _mm256_sub_pd(bezout.matrix[3][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[3][0]));
  bezout.matrix[3][5][8] =
      _mm256_sub_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[3][1]));
  bezout.matrix[3][5][9] =
      _mm256_sub_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[3][2]));
  bezout.matrix[3][5][10] =
      _mm256_sub_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[3][3]));
  bezout.matrix[3][5][11] =
      _mm256_sub_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[3][4]));
  bezout.matrix[3][5][12] =
      _mm256_sub_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[3][5]));
  bezout.matrix[3][5][13] =
      _mm256_sub_pd(bezout.matrix[3][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[3][6]));
  bezout.matrix[3][5][14] =
      _mm256_sub_pd(bezout.matrix[3][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[3][7]));
  bezout.matrix[3][5][8] =
      _mm256_sub_pd(bezout.matrix[3][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[3][0]));
  bezout.matrix[3][5][9] =
      _mm256_sub_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[3][1]));
  bezout.matrix[3][5][10] =
      _mm256_sub_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[3][2]));
  bezout.matrix[3][5][11] =
      _mm256_sub_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[3][3]));
  bezout.matrix[3][5][12] =
      _mm256_sub_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[3][4]));
  bezout.matrix[3][5][13] =
      _mm256_sub_pd(bezout.matrix[3][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[3][5]));
  bezout.matrix[3][5][14] =
      _mm256_sub_pd(bezout.matrix[3][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[3][6]));
  bezout.matrix[3][5][15] =
      _mm256_sub_pd(bezout.matrix[3][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[3][7]));
  bezout.matrix[3][5][9] =
      _mm256_sub_pd(bezout.matrix[3][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[3][0]));
  bezout.matrix[3][5][10] =
      _mm256_sub_pd(bezout.matrix[3][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[3][1]));
  bezout.matrix[3][5][11] =
      _mm256_sub_pd(bezout.matrix[3][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[3][2]));
  bezout.matrix[3][5][12] =
      _mm256_sub_pd(bezout.matrix[3][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[3][3]));
  bezout.matrix[3][5][13] =
      _mm256_sub_pd(bezout.matrix[3][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[3][4]));
  bezout.matrix[3][5][14] =
      _mm256_sub_pd(bezout.matrix[3][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[3][5]));
  bezout.matrix[3][5][15] =
      _mm256_sub_pd(bezout.matrix[3][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[3][6]));
  bezout.matrix[3][6][0] =
      _mm256_add_pd(bezout.matrix[3][6][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[7][0]));
  bezout.matrix[3][6][1] =
      _mm256_add_pd(bezout.matrix[3][6][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[7][1]));
  bezout.matrix[3][6][2] =
      _mm256_add_pd(bezout.matrix[3][6][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[7][2]));
  bezout.matrix[3][6][3] =
      _mm256_add_pd(bezout.matrix[3][6][3],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[7][3]));
  bezout.matrix[3][6][1] =
      _mm256_add_pd(bezout.matrix[3][6][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[7][0]));
  bezout.matrix[3][6][2] =
      _mm256_add_pd(bezout.matrix[3][6][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[7][1]));
  bezout.matrix[3][6][3] =
      _mm256_add_pd(bezout.matrix[3][6][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[7][2]));
  bezout.matrix[3][6][4] =
      _mm256_add_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[7][3]));
  bezout.matrix[3][6][2] =
      _mm256_add_pd(bezout.matrix[3][6][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[7][0]));
  bezout.matrix[3][6][3] =
      _mm256_add_pd(bezout.matrix[3][6][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[7][1]));
  bezout.matrix[3][6][4] =
      _mm256_add_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[7][2]));
  bezout.matrix[3][6][5] =
      _mm256_add_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[7][3]));
  bezout.matrix[3][6][3] =
      _mm256_add_pd(bezout.matrix[3][6][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[7][0]));
  bezout.matrix[3][6][4] =
      _mm256_add_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[7][1]));
  bezout.matrix[3][6][5] =
      _mm256_add_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[7][2]));
  bezout.matrix[3][6][6] =
      _mm256_add_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[7][3]));
  bezout.matrix[3][6][4] =
      _mm256_add_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[7][0]));
  bezout.matrix[3][6][5] =
      _mm256_add_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[7][1]));
  bezout.matrix[3][6][6] =
      _mm256_add_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[7][2]));
  bezout.matrix[3][6][7] =
      _mm256_add_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[7][3]));
  bezout.matrix[3][6][5] =
      _mm256_add_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[7][0]));
  bezout.matrix[3][6][6] =
      _mm256_add_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[7][1]));
  bezout.matrix[3][6][7] =
      _mm256_add_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[7][2]));
  bezout.matrix[3][6][8] =
      _mm256_add_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[7][3]));
  bezout.matrix[3][6][6] =
      _mm256_add_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[7][0]));
  bezout.matrix[3][6][7] =
      _mm256_add_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[7][1]));
  bezout.matrix[3][6][8] =
      _mm256_add_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[7][2]));
  bezout.matrix[3][6][9] =
      _mm256_add_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[7][3]));
  bezout.matrix[3][6][7] =
      _mm256_add_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[7][0]));
  bezout.matrix[3][6][8] =
      _mm256_add_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[7][1]));
  bezout.matrix[3][6][9] =
      _mm256_add_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[7][2]));
  bezout.matrix[3][6][10] =
      _mm256_add_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[7][3]));
  bezout.matrix[3][6][8] =
      _mm256_add_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[7][0]));
  bezout.matrix[3][6][9] =
      _mm256_add_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[7][1]));
  bezout.matrix[3][6][10] =
      _mm256_add_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[7][2]));
  bezout.matrix[3][6][11] =
      _mm256_add_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[7][3]));
  bezout.matrix[3][6][9] =
      _mm256_add_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[7][0]));
  bezout.matrix[3][6][10] =
      _mm256_add_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[7][1]));
  bezout.matrix[3][6][11] =
      _mm256_add_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[7][2]));
  bezout.matrix[3][6][12] =
      _mm256_add_pd(bezout.matrix[3][6][12],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[7][3]));
  bezout.matrix[3][6][10] =
      _mm256_add_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[7][0]));
  bezout.matrix[3][6][11] =
      _mm256_add_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[7][1]));
  bezout.matrix[3][6][12] =
      _mm256_add_pd(bezout.matrix[3][6][12],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[7][2]));
  bezout.matrix[3][6][13] =
      _mm256_add_pd(bezout.matrix[3][6][13],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[7][3]));
  bezout.matrix[3][6][11] =
      _mm256_add_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[7][0]));
  bezout.matrix[3][6][12] =
      _mm256_add_pd(bezout.matrix[3][6][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[7][1]));
  bezout.matrix[3][6][13] =
      _mm256_add_pd(bezout.matrix[3][6][13],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[7][2]));
  bezout.matrix[3][6][14] =
      _mm256_add_pd(bezout.matrix[3][6][14],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[7][3]));
  bezout.matrix[3][6][12] =
      _mm256_add_pd(bezout.matrix[3][6][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[7][0]));
  bezout.matrix[3][6][13] =
      _mm256_add_pd(bezout.matrix[3][6][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[7][1]));
  bezout.matrix[3][6][14] =
      _mm256_add_pd(bezout.matrix[3][6][14],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[7][2]));
  bezout.matrix[3][6][15] =
      _mm256_add_pd(bezout.matrix[3][6][15],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[7][3]));
  bezout.matrix[3][6][0] =
      _mm256_sub_pd(bezout.matrix[3][6][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[3][0]));
  bezout.matrix[3][6][1] =
      _mm256_sub_pd(bezout.matrix[3][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[3][1]));
  bezout.matrix[3][6][2] =
      _mm256_sub_pd(bezout.matrix[3][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[3][2]));
  bezout.matrix[3][6][3] =
      _mm256_sub_pd(bezout.matrix[3][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[3][3]));
  bezout.matrix[3][6][4] =
      _mm256_sub_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[3][4]));
  bezout.matrix[3][6][5] =
      _mm256_sub_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[3][5]));
  bezout.matrix[3][6][6] =
      _mm256_sub_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[3][6]));
  bezout.matrix[3][6][7] =
      _mm256_sub_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[3][7]));
  bezout.matrix[3][6][1] =
      _mm256_sub_pd(bezout.matrix[3][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[3][0]));
  bezout.matrix[3][6][2] =
      _mm256_sub_pd(bezout.matrix[3][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[3][1]));
  bezout.matrix[3][6][3] =
      _mm256_sub_pd(bezout.matrix[3][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[3][2]));
  bezout.matrix[3][6][4] =
      _mm256_sub_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[3][3]));
  bezout.matrix[3][6][5] =
      _mm256_sub_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[3][4]));
  bezout.matrix[3][6][6] =
      _mm256_sub_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[3][5]));
  bezout.matrix[3][6][7] =
      _mm256_sub_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[3][6]));
  bezout.matrix[3][6][8] =
      _mm256_sub_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[3][7]));
  bezout.matrix[3][6][2] =
      _mm256_sub_pd(bezout.matrix[3][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[3][0]));
  bezout.matrix[3][6][3] =
      _mm256_sub_pd(bezout.matrix[3][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[3][1]));
  bezout.matrix[3][6][4] =
      _mm256_sub_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[3][2]));
  bezout.matrix[3][6][5] =
      _mm256_sub_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[3][3]));
  bezout.matrix[3][6][6] =
      _mm256_sub_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[3][4]));
  bezout.matrix[3][6][7] =
      _mm256_sub_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[3][5]));
  bezout.matrix[3][6][8] =
      _mm256_sub_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[3][6]));
  bezout.matrix[3][6][9] =
      _mm256_sub_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[3][7]));
  bezout.matrix[3][6][3] =
      _mm256_sub_pd(bezout.matrix[3][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[3][0]));
  bezout.matrix[3][6][4] =
      _mm256_sub_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[3][1]));
  bezout.matrix[3][6][5] =
      _mm256_sub_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[3][2]));
  bezout.matrix[3][6][6] =
      _mm256_sub_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[3][3]));
  bezout.matrix[3][6][7] =
      _mm256_sub_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[3][4]));
  bezout.matrix[3][6][8] =
      _mm256_sub_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[3][5]));
  bezout.matrix[3][6][9] =
      _mm256_sub_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[3][6]));
  bezout.matrix[3][6][10] =
      _mm256_sub_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[3][7]));
  bezout.matrix[3][6][4] =
      _mm256_sub_pd(bezout.matrix[3][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[3][0]));
  bezout.matrix[3][6][5] =
      _mm256_sub_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[3][1]));
  bezout.matrix[3][6][6] =
      _mm256_sub_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[3][2]));
  bezout.matrix[3][6][7] =
      _mm256_sub_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[3][3]));
  bezout.matrix[3][6][8] =
      _mm256_sub_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[3][4]));
  bezout.matrix[3][6][9] =
      _mm256_sub_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[3][5]));
  bezout.matrix[3][6][10] =
      _mm256_sub_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[3][6]));
  bezout.matrix[3][6][11] =
      _mm256_sub_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[3][7]));
  bezout.matrix[3][6][5] =
      _mm256_sub_pd(bezout.matrix[3][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[3][0]));
  bezout.matrix[3][6][6] =
      _mm256_sub_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[3][1]));
  bezout.matrix[3][6][7] =
      _mm256_sub_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[3][2]));
  bezout.matrix[3][6][8] =
      _mm256_sub_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[3][3]));
  bezout.matrix[3][6][9] =
      _mm256_sub_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[3][4]));
  bezout.matrix[3][6][10] =
      _mm256_sub_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[3][5]));
  bezout.matrix[3][6][11] =
      _mm256_sub_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[3][6]));
  bezout.matrix[3][6][12] =
      _mm256_sub_pd(bezout.matrix[3][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[3][7]));
  bezout.matrix[3][6][6] =
      _mm256_sub_pd(bezout.matrix[3][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[3][0]));
  bezout.matrix[3][6][7] =
      _mm256_sub_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[3][1]));
  bezout.matrix[3][6][8] =
      _mm256_sub_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[3][2]));
  bezout.matrix[3][6][9] =
      _mm256_sub_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[3][3]));
  bezout.matrix[3][6][10] =
      _mm256_sub_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[3][4]));
  bezout.matrix[3][6][11] =
      _mm256_sub_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[3][5]));
  bezout.matrix[3][6][12] =
      _mm256_sub_pd(bezout.matrix[3][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[3][6]));
  bezout.matrix[3][6][13] =
      _mm256_sub_pd(bezout.matrix[3][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[3][7]));
  bezout.matrix[3][6][7] =
      _mm256_sub_pd(bezout.matrix[3][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[3][0]));
  bezout.matrix[3][6][8] =
      _mm256_sub_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[3][1]));
  bezout.matrix[3][6][9] =
      _mm256_sub_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[3][2]));
  bezout.matrix[3][6][10] =
      _mm256_sub_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[3][3]));
  bezout.matrix[3][6][11] =
      _mm256_sub_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[3][4]));
  bezout.matrix[3][6][12] =
      _mm256_sub_pd(bezout.matrix[3][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[3][5]));
  bezout.matrix[3][6][13] =
      _mm256_sub_pd(bezout.matrix[3][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[3][6]));
  bezout.matrix[3][6][14] =
      _mm256_sub_pd(bezout.matrix[3][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[3][7]));
  bezout.matrix[3][6][8] =
      _mm256_sub_pd(bezout.matrix[3][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[3][0]));
  bezout.matrix[3][6][9] =
      _mm256_sub_pd(bezout.matrix[3][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[3][1]));
  bezout.matrix[3][6][10] =
      _mm256_sub_pd(bezout.matrix[3][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[3][2]));
  bezout.matrix[3][6][11] =
      _mm256_sub_pd(bezout.matrix[3][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[3][3]));
  bezout.matrix[3][6][12] =
      _mm256_sub_pd(bezout.matrix[3][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[3][4]));
  bezout.matrix[3][6][13] =
      _mm256_sub_pd(bezout.matrix[3][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[3][5]));
  bezout.matrix[3][6][14] =
      _mm256_sub_pd(bezout.matrix[3][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[3][6]));
  bezout.matrix[3][6][15] =
      _mm256_sub_pd(bezout.matrix[3][6][15],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[3][7]));
  bezout.matrix[3][7][0] =
      _mm256_add_pd(bezout.matrix[3][7][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[8][0]));
  bezout.matrix[3][7][1] =
      _mm256_add_pd(bezout.matrix[3][7][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[8][1]));
  bezout.matrix[3][7][2] =
      _mm256_add_pd(bezout.matrix[3][7][2],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[8][2]));
  bezout.matrix[3][7][1] =
      _mm256_add_pd(bezout.matrix[3][7][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[8][0]));
  bezout.matrix[3][7][2] =
      _mm256_add_pd(bezout.matrix[3][7][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[8][1]));
  bezout.matrix[3][7][3] =
      _mm256_add_pd(bezout.matrix[3][7][3],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[8][2]));
  bezout.matrix[3][7][2] =
      _mm256_add_pd(bezout.matrix[3][7][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[8][0]));
  bezout.matrix[3][7][3] =
      _mm256_add_pd(bezout.matrix[3][7][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[8][1]));
  bezout.matrix[3][7][4] =
      _mm256_add_pd(bezout.matrix[3][7][4],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[8][2]));
  bezout.matrix[3][7][3] =
      _mm256_add_pd(bezout.matrix[3][7][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[8][0]));
  bezout.matrix[3][7][4] =
      _mm256_add_pd(bezout.matrix[3][7][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[8][1]));
  bezout.matrix[3][7][5] =
      _mm256_add_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[8][2]));
  bezout.matrix[3][7][4] =
      _mm256_add_pd(bezout.matrix[3][7][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[8][0]));
  bezout.matrix[3][7][5] =
      _mm256_add_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[8][1]));
  bezout.matrix[3][7][6] =
      _mm256_add_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[8][2]));
  bezout.matrix[3][7][5] =
      _mm256_add_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[8][0]));
  bezout.matrix[3][7][6] =
      _mm256_add_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[8][1]));
  bezout.matrix[3][7][7] =
      _mm256_add_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[8][2]));
  bezout.matrix[3][7][6] =
      _mm256_add_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[8][0]));
  bezout.matrix[3][7][7] =
      _mm256_add_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[8][1]));
  bezout.matrix[3][7][8] =
      _mm256_add_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[8][2]));
  bezout.matrix[3][7][7] =
      _mm256_add_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[8][0]));
  bezout.matrix[3][7][8] =
      _mm256_add_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[8][1]));
  bezout.matrix[3][7][9] =
      _mm256_add_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[8][2]));
  bezout.matrix[3][7][8] =
      _mm256_add_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[8][0]));
  bezout.matrix[3][7][9] =
      _mm256_add_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[8][1]));
  bezout.matrix[3][7][10] =
      _mm256_add_pd(bezout.matrix[3][7][10],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[8][2]));
  bezout.matrix[3][7][9] =
      _mm256_add_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[8][0]));
  bezout.matrix[3][7][10] =
      _mm256_add_pd(bezout.matrix[3][7][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[8][1]));
  bezout.matrix[3][7][11] =
      _mm256_add_pd(bezout.matrix[3][7][11],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[8][2]));
  bezout.matrix[3][7][10] =
      _mm256_add_pd(bezout.matrix[3][7][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[8][0]));
  bezout.matrix[3][7][11] =
      _mm256_add_pd(bezout.matrix[3][7][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[8][1]));
  bezout.matrix[3][7][12] =
      _mm256_add_pd(bezout.matrix[3][7][12],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[8][2]));
  bezout.matrix[3][7][11] =
      _mm256_add_pd(bezout.matrix[3][7][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[8][0]));
  bezout.matrix[3][7][12] =
      _mm256_add_pd(bezout.matrix[3][7][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[8][1]));
  bezout.matrix[3][7][13] =
      _mm256_add_pd(bezout.matrix[3][7][13],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[8][2]));
  bezout.matrix[3][7][12] =
      _mm256_add_pd(bezout.matrix[3][7][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[8][0]));
  bezout.matrix[3][7][13] =
      _mm256_add_pd(bezout.matrix[3][7][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[8][1]));
  bezout.matrix[3][7][14] =
      _mm256_add_pd(bezout.matrix[3][7][14],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[8][2]));
  bezout.matrix[3][7][0] =
      _mm256_sub_pd(bezout.matrix[3][7][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[3][0]));
  bezout.matrix[3][7][1] =
      _mm256_sub_pd(bezout.matrix[3][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[3][1]));
  bezout.matrix[3][7][2] =
      _mm256_sub_pd(bezout.matrix[3][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[3][2]));
  bezout.matrix[3][7][3] =
      _mm256_sub_pd(bezout.matrix[3][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[3][3]));
  bezout.matrix[3][7][4] =
      _mm256_sub_pd(bezout.matrix[3][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[3][4]));
  bezout.matrix[3][7][5] =
      _mm256_sub_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[3][5]));
  bezout.matrix[3][7][6] =
      _mm256_sub_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[3][6]));
  bezout.matrix[3][7][7] =
      _mm256_sub_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[3][7]));
  bezout.matrix[3][7][1] =
      _mm256_sub_pd(bezout.matrix[3][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[3][0]));
  bezout.matrix[3][7][2] =
      _mm256_sub_pd(bezout.matrix[3][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[3][1]));
  bezout.matrix[3][7][3] =
      _mm256_sub_pd(bezout.matrix[3][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[3][2]));
  bezout.matrix[3][7][4] =
      _mm256_sub_pd(bezout.matrix[3][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[3][3]));
  bezout.matrix[3][7][5] =
      _mm256_sub_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[3][4]));
  bezout.matrix[3][7][6] =
      _mm256_sub_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[3][5]));
  bezout.matrix[3][7][7] =
      _mm256_sub_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[3][6]));
  bezout.matrix[3][7][8] =
      _mm256_sub_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[3][7]));
  bezout.matrix[3][7][2] =
      _mm256_sub_pd(bezout.matrix[3][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[3][0]));
  bezout.matrix[3][7][3] =
      _mm256_sub_pd(bezout.matrix[3][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[3][1]));
  bezout.matrix[3][7][4] =
      _mm256_sub_pd(bezout.matrix[3][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[3][2]));
  bezout.matrix[3][7][5] =
      _mm256_sub_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[3][3]));
  bezout.matrix[3][7][6] =
      _mm256_sub_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[3][4]));
  bezout.matrix[3][7][7] =
      _mm256_sub_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[3][5]));
  bezout.matrix[3][7][8] =
      _mm256_sub_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[3][6]));
  bezout.matrix[3][7][9] =
      _mm256_sub_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[3][7]));
  bezout.matrix[3][7][3] =
      _mm256_sub_pd(bezout.matrix[3][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[3][0]));
  bezout.matrix[3][7][4] =
      _mm256_sub_pd(bezout.matrix[3][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[3][1]));
  bezout.matrix[3][7][5] =
      _mm256_sub_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[3][2]));
  bezout.matrix[3][7][6] =
      _mm256_sub_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[3][3]));
  bezout.matrix[3][7][7] =
      _mm256_sub_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[3][4]));
  bezout.matrix[3][7][8] =
      _mm256_sub_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[3][5]));
  bezout.matrix[3][7][9] =
      _mm256_sub_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[3][6]));
  bezout.matrix[3][7][10] =
      _mm256_sub_pd(bezout.matrix[3][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[3][7]));
  bezout.matrix[3][7][4] =
      _mm256_sub_pd(bezout.matrix[3][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[3][0]));
  bezout.matrix[3][7][5] =
      _mm256_sub_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[3][1]));
  bezout.matrix[3][7][6] =
      _mm256_sub_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[3][2]));
  bezout.matrix[3][7][7] =
      _mm256_sub_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[3][3]));
  bezout.matrix[3][7][8] =
      _mm256_sub_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[3][4]));
  bezout.matrix[3][7][9] =
      _mm256_sub_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[3][5]));
  bezout.matrix[3][7][10] =
      _mm256_sub_pd(bezout.matrix[3][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[3][6]));
  bezout.matrix[3][7][11] =
      _mm256_sub_pd(bezout.matrix[3][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[3][7]));
  bezout.matrix[3][7][5] =
      _mm256_sub_pd(bezout.matrix[3][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[3][0]));
  bezout.matrix[3][7][6] =
      _mm256_sub_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[3][1]));
  bezout.matrix[3][7][7] =
      _mm256_sub_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[3][2]));
  bezout.matrix[3][7][8] =
      _mm256_sub_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[3][3]));
  bezout.matrix[3][7][9] =
      _mm256_sub_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[3][4]));
  bezout.matrix[3][7][10] =
      _mm256_sub_pd(bezout.matrix[3][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[3][5]));
  bezout.matrix[3][7][11] =
      _mm256_sub_pd(bezout.matrix[3][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[3][6]));
  bezout.matrix[3][7][12] =
      _mm256_sub_pd(bezout.matrix[3][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[3][7]));
  bezout.matrix[3][7][6] =
      _mm256_sub_pd(bezout.matrix[3][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[3][0]));
  bezout.matrix[3][7][7] =
      _mm256_sub_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[3][1]));
  bezout.matrix[3][7][8] =
      _mm256_sub_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[3][2]));
  bezout.matrix[3][7][9] =
      _mm256_sub_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[3][3]));
  bezout.matrix[3][7][10] =
      _mm256_sub_pd(bezout.matrix[3][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[3][4]));
  bezout.matrix[3][7][11] =
      _mm256_sub_pd(bezout.matrix[3][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[3][5]));
  bezout.matrix[3][7][12] =
      _mm256_sub_pd(bezout.matrix[3][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[3][6]));
  bezout.matrix[3][7][13] =
      _mm256_sub_pd(bezout.matrix[3][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[3][7]));
  bezout.matrix[3][7][7] =
      _mm256_sub_pd(bezout.matrix[3][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[3][0]));
  bezout.matrix[3][7][8] =
      _mm256_sub_pd(bezout.matrix[3][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[3][1]));
  bezout.matrix[3][7][9] =
      _mm256_sub_pd(bezout.matrix[3][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[3][2]));
  bezout.matrix[3][7][10] =
      _mm256_sub_pd(bezout.matrix[3][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[3][3]));
  bezout.matrix[3][7][11] =
      _mm256_sub_pd(bezout.matrix[3][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[3][4]));
  bezout.matrix[3][7][12] =
      _mm256_sub_pd(bezout.matrix[3][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[3][5]));
  bezout.matrix[3][7][13] =
      _mm256_sub_pd(bezout.matrix[3][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[3][6]));
  bezout.matrix[3][7][14] =
      _mm256_sub_pd(bezout.matrix[3][7][14],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[3][7]));
  bezout.matrix[3][8][0] =
      _mm256_add_pd(bezout.matrix[3][8][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[9][0]));
  bezout.matrix[3][8][1] =
      _mm256_add_pd(bezout.matrix[3][8][1],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[9][1]));
  bezout.matrix[3][8][1] =
      _mm256_add_pd(bezout.matrix[3][8][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[9][0]));
  bezout.matrix[3][8][2] =
      _mm256_add_pd(bezout.matrix[3][8][2],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[9][1]));
  bezout.matrix[3][8][2] =
      _mm256_add_pd(bezout.matrix[3][8][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[9][0]));
  bezout.matrix[3][8][3] =
      _mm256_add_pd(bezout.matrix[3][8][3],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[9][1]));
  bezout.matrix[3][8][3] =
      _mm256_add_pd(bezout.matrix[3][8][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[9][0]));
  bezout.matrix[3][8][4] =
      _mm256_add_pd(bezout.matrix[3][8][4],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[9][1]));
  bezout.matrix[3][8][4] =
      _mm256_add_pd(bezout.matrix[3][8][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[9][0]));
  bezout.matrix[3][8][5] =
      _mm256_add_pd(bezout.matrix[3][8][5],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[9][1]));
  bezout.matrix[3][8][5] =
      _mm256_add_pd(bezout.matrix[3][8][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[9][0]));
  bezout.matrix[3][8][6] =
      _mm256_add_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[9][1]));
  bezout.matrix[3][8][6] =
      _mm256_add_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[9][0]));
  bezout.matrix[3][8][7] =
      _mm256_add_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[9][1]));
  bezout.matrix[3][8][7] =
      _mm256_add_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[9][0]));
  bezout.matrix[3][8][8] =
      _mm256_add_pd(bezout.matrix[3][8][8],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[9][1]));
  bezout.matrix[3][8][8] =
      _mm256_add_pd(bezout.matrix[3][8][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[9][0]));
  bezout.matrix[3][8][9] =
      _mm256_add_pd(bezout.matrix[3][8][9],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[9][1]));
  bezout.matrix[3][8][9] =
      _mm256_add_pd(bezout.matrix[3][8][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[9][0]));
  bezout.matrix[3][8][10] =
      _mm256_add_pd(bezout.matrix[3][8][10],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[9][1]));
  bezout.matrix[3][8][10] =
      _mm256_add_pd(bezout.matrix[3][8][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[9][0]));
  bezout.matrix[3][8][11] =
      _mm256_add_pd(bezout.matrix[3][8][11],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[9][1]));
  bezout.matrix[3][8][11] =
      _mm256_add_pd(bezout.matrix[3][8][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[9][0]));
  bezout.matrix[3][8][12] =
      _mm256_add_pd(bezout.matrix[3][8][12],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[9][1]));
  bezout.matrix[3][8][12] =
      _mm256_add_pd(bezout.matrix[3][8][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[9][0]));
  bezout.matrix[3][8][13] =
      _mm256_add_pd(bezout.matrix[3][8][13],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[9][1]));
  bezout.matrix[3][8][0] =
      _mm256_sub_pd(bezout.matrix[3][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[3][0]));
  bezout.matrix[3][8][1] =
      _mm256_sub_pd(bezout.matrix[3][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[3][1]));
  bezout.matrix[3][8][2] =
      _mm256_sub_pd(bezout.matrix[3][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[3][2]));
  bezout.matrix[3][8][3] =
      _mm256_sub_pd(bezout.matrix[3][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[3][3]));
  bezout.matrix[3][8][4] =
      _mm256_sub_pd(bezout.matrix[3][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[3][4]));
  bezout.matrix[3][8][5] =
      _mm256_sub_pd(bezout.matrix[3][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[3][5]));
  bezout.matrix[3][8][6] =
      _mm256_sub_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[3][6]));
  bezout.matrix[3][8][7] =
      _mm256_sub_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[3][7]));
  bezout.matrix[3][8][1] =
      _mm256_sub_pd(bezout.matrix[3][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[3][0]));
  bezout.matrix[3][8][2] =
      _mm256_sub_pd(bezout.matrix[3][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[3][1]));
  bezout.matrix[3][8][3] =
      _mm256_sub_pd(bezout.matrix[3][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[3][2]));
  bezout.matrix[3][8][4] =
      _mm256_sub_pd(bezout.matrix[3][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[3][3]));
  bezout.matrix[3][8][5] =
      _mm256_sub_pd(bezout.matrix[3][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[3][4]));
  bezout.matrix[3][8][6] =
      _mm256_sub_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[3][5]));
  bezout.matrix[3][8][7] =
      _mm256_sub_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[3][6]));
  bezout.matrix[3][8][8] =
      _mm256_sub_pd(bezout.matrix[3][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[3][7]));
  bezout.matrix[3][8][2] =
      _mm256_sub_pd(bezout.matrix[3][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[3][0]));
  bezout.matrix[3][8][3] =
      _mm256_sub_pd(bezout.matrix[3][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[3][1]));
  bezout.matrix[3][8][4] =
      _mm256_sub_pd(bezout.matrix[3][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[3][2]));
  bezout.matrix[3][8][5] =
      _mm256_sub_pd(bezout.matrix[3][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[3][3]));
  bezout.matrix[3][8][6] =
      _mm256_sub_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[3][4]));
  bezout.matrix[3][8][7] =
      _mm256_sub_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[3][5]));
  bezout.matrix[3][8][8] =
      _mm256_sub_pd(bezout.matrix[3][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[3][6]));
  bezout.matrix[3][8][9] =
      _mm256_sub_pd(bezout.matrix[3][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[3][7]));
  bezout.matrix[3][8][3] =
      _mm256_sub_pd(bezout.matrix[3][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[3][0]));
  bezout.matrix[3][8][4] =
      _mm256_sub_pd(bezout.matrix[3][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[3][1]));
  bezout.matrix[3][8][5] =
      _mm256_sub_pd(bezout.matrix[3][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[3][2]));
  bezout.matrix[3][8][6] =
      _mm256_sub_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[3][3]));
  bezout.matrix[3][8][7] =
      _mm256_sub_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[3][4]));
  bezout.matrix[3][8][8] =
      _mm256_sub_pd(bezout.matrix[3][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[3][5]));
  bezout.matrix[3][8][9] =
      _mm256_sub_pd(bezout.matrix[3][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[3][6]));
  bezout.matrix[3][8][10] =
      _mm256_sub_pd(bezout.matrix[3][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[3][7]));
  bezout.matrix[3][8][4] =
      _mm256_sub_pd(bezout.matrix[3][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[3][0]));
  bezout.matrix[3][8][5] =
      _mm256_sub_pd(bezout.matrix[3][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[3][1]));
  bezout.matrix[3][8][6] =
      _mm256_sub_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[3][2]));
  bezout.matrix[3][8][7] =
      _mm256_sub_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[3][3]));
  bezout.matrix[3][8][8] =
      _mm256_sub_pd(bezout.matrix[3][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[3][4]));
  bezout.matrix[3][8][9] =
      _mm256_sub_pd(bezout.matrix[3][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[3][5]));
  bezout.matrix[3][8][10] =
      _mm256_sub_pd(bezout.matrix[3][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[3][6]));
  bezout.matrix[3][8][11] =
      _mm256_sub_pd(bezout.matrix[3][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[3][7]));
  bezout.matrix[3][8][5] =
      _mm256_sub_pd(bezout.matrix[3][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[3][0]));
  bezout.matrix[3][8][6] =
      _mm256_sub_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[3][1]));
  bezout.matrix[3][8][7] =
      _mm256_sub_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[3][2]));
  bezout.matrix[3][8][8] =
      _mm256_sub_pd(bezout.matrix[3][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[3][3]));
  bezout.matrix[3][8][9] =
      _mm256_sub_pd(bezout.matrix[3][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[3][4]));
  bezout.matrix[3][8][10] =
      _mm256_sub_pd(bezout.matrix[3][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[3][5]));
  bezout.matrix[3][8][11] =
      _mm256_sub_pd(bezout.matrix[3][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[3][6]));
  bezout.matrix[3][8][12] =
      _mm256_sub_pd(bezout.matrix[3][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[3][7]));
  bezout.matrix[3][8][6] =
      _mm256_sub_pd(bezout.matrix[3][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[3][0]));
  bezout.matrix[3][8][7] =
      _mm256_sub_pd(bezout.matrix[3][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[3][1]));
  bezout.matrix[3][8][8] =
      _mm256_sub_pd(bezout.matrix[3][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[3][2]));
  bezout.matrix[3][8][9] =
      _mm256_sub_pd(bezout.matrix[3][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[3][3]));
  bezout.matrix[3][8][10] =
      _mm256_sub_pd(bezout.matrix[3][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[3][4]));
  bezout.matrix[3][8][11] =
      _mm256_sub_pd(bezout.matrix[3][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[3][5]));
  bezout.matrix[3][8][12] =
      _mm256_sub_pd(bezout.matrix[3][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[3][6]));
  bezout.matrix[3][8][13] =
      _mm256_sub_pd(bezout.matrix[3][8][13],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[3][7]));
  bezout.matrix[3][9][0] =
      _mm256_add_pd(bezout.matrix[3][9][0],
                    _mm256_mul_pd(poly1.coeffs[3][0], poly2.coeffs[10][0]));
  bezout.matrix[3][9][1] =
      _mm256_add_pd(bezout.matrix[3][9][1],
                    _mm256_mul_pd(poly1.coeffs[3][1], poly2.coeffs[10][0]));
  bezout.matrix[3][9][2] =
      _mm256_add_pd(bezout.matrix[3][9][2],
                    _mm256_mul_pd(poly1.coeffs[3][2], poly2.coeffs[10][0]));
  bezout.matrix[3][9][3] =
      _mm256_add_pd(bezout.matrix[3][9][3],
                    _mm256_mul_pd(poly1.coeffs[3][3], poly2.coeffs[10][0]));
  bezout.matrix[3][9][4] =
      _mm256_add_pd(bezout.matrix[3][9][4],
                    _mm256_mul_pd(poly1.coeffs[3][4], poly2.coeffs[10][0]));
  bezout.matrix[3][9][5] =
      _mm256_add_pd(bezout.matrix[3][9][5],
                    _mm256_mul_pd(poly1.coeffs[3][5], poly2.coeffs[10][0]));
  bezout.matrix[3][9][6] =
      _mm256_add_pd(bezout.matrix[3][9][6],
                    _mm256_mul_pd(poly1.coeffs[3][6], poly2.coeffs[10][0]));
  bezout.matrix[3][9][7] =
      _mm256_add_pd(bezout.matrix[3][9][7],
                    _mm256_mul_pd(poly1.coeffs[3][7], poly2.coeffs[10][0]));
  bezout.matrix[3][9][8] =
      _mm256_add_pd(bezout.matrix[3][9][8],
                    _mm256_mul_pd(poly1.coeffs[3][8], poly2.coeffs[10][0]));
  bezout.matrix[3][9][9] =
      _mm256_add_pd(bezout.matrix[3][9][9],
                    _mm256_mul_pd(poly1.coeffs[3][9], poly2.coeffs[10][0]));
  bezout.matrix[3][9][10] =
      _mm256_add_pd(bezout.matrix[3][9][10],
                    _mm256_mul_pd(poly1.coeffs[3][10], poly2.coeffs[10][0]));
  bezout.matrix[3][9][11] =
      _mm256_add_pd(bezout.matrix[3][9][11],
                    _mm256_mul_pd(poly1.coeffs[3][11], poly2.coeffs[10][0]));
  bezout.matrix[3][9][12] =
      _mm256_add_pd(bezout.matrix[3][9][12],
                    _mm256_mul_pd(poly1.coeffs[3][12], poly2.coeffs[10][0]));
  bezout.matrix[3][9][0] =
      _mm256_sub_pd(bezout.matrix[3][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[3][0]));
  bezout.matrix[3][9][1] =
      _mm256_sub_pd(bezout.matrix[3][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[3][1]));
  bezout.matrix[3][9][2] =
      _mm256_sub_pd(bezout.matrix[3][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[3][2]));
  bezout.matrix[3][9][3] =
      _mm256_sub_pd(bezout.matrix[3][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[3][3]));
  bezout.matrix[3][9][4] =
      _mm256_sub_pd(bezout.matrix[3][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[3][4]));
  bezout.matrix[3][9][5] =
      _mm256_sub_pd(bezout.matrix[3][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[3][5]));
  bezout.matrix[3][9][6] =
      _mm256_sub_pd(bezout.matrix[3][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[3][6]));
  bezout.matrix[3][9][7] =
      _mm256_sub_pd(bezout.matrix[3][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[3][7]));
  bezout.matrix[3][9][1] =
      _mm256_sub_pd(bezout.matrix[3][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[3][0]));
  bezout.matrix[3][9][2] =
      _mm256_sub_pd(bezout.matrix[3][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[3][1]));
  bezout.matrix[3][9][3] =
      _mm256_sub_pd(bezout.matrix[3][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[3][2]));
  bezout.matrix[3][9][4] =
      _mm256_sub_pd(bezout.matrix[3][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[3][3]));
  bezout.matrix[3][9][5] =
      _mm256_sub_pd(bezout.matrix[3][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[3][4]));
  bezout.matrix[3][9][6] =
      _mm256_sub_pd(bezout.matrix[3][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[3][5]));
  bezout.matrix[3][9][7] =
      _mm256_sub_pd(bezout.matrix[3][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[3][6]));
  bezout.matrix[3][9][8] =
      _mm256_sub_pd(bezout.matrix[3][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[3][7]));
  bezout.matrix[3][9][2] =
      _mm256_sub_pd(bezout.matrix[3][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[3][0]));
  bezout.matrix[3][9][3] =
      _mm256_sub_pd(bezout.matrix[3][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[3][1]));
  bezout.matrix[3][9][4] =
      _mm256_sub_pd(bezout.matrix[3][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[3][2]));
  bezout.matrix[3][9][5] =
      _mm256_sub_pd(bezout.matrix[3][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[3][3]));
  bezout.matrix[3][9][6] =
      _mm256_sub_pd(bezout.matrix[3][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[3][4]));
  bezout.matrix[3][9][7] =
      _mm256_sub_pd(bezout.matrix[3][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[3][5]));
  bezout.matrix[3][9][8] =
      _mm256_sub_pd(bezout.matrix[3][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[3][6]));
  bezout.matrix[3][9][9] =
      _mm256_sub_pd(bezout.matrix[3][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[3][7]));
  bezout.matrix[3][9][3] =
      _mm256_sub_pd(bezout.matrix[3][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[3][0]));
  bezout.matrix[3][9][4] =
      _mm256_sub_pd(bezout.matrix[3][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[3][1]));
  bezout.matrix[3][9][5] =
      _mm256_sub_pd(bezout.matrix[3][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[3][2]));
  bezout.matrix[3][9][6] =
      _mm256_sub_pd(bezout.matrix[3][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[3][3]));
  bezout.matrix[3][9][7] =
      _mm256_sub_pd(bezout.matrix[3][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[3][4]));
  bezout.matrix[3][9][8] =
      _mm256_sub_pd(bezout.matrix[3][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[3][5]));
  bezout.matrix[3][9][9] =
      _mm256_sub_pd(bezout.matrix[3][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[3][6]));
  bezout.matrix[3][9][10] =
      _mm256_sub_pd(bezout.matrix[3][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[3][7]));
  bezout.matrix[3][9][4] =
      _mm256_sub_pd(bezout.matrix[3][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[3][0]));
  bezout.matrix[3][9][5] =
      _mm256_sub_pd(bezout.matrix[3][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[3][1]));
  bezout.matrix[3][9][6] =
      _mm256_sub_pd(bezout.matrix[3][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[3][2]));
  bezout.matrix[3][9][7] =
      _mm256_sub_pd(bezout.matrix[3][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[3][3]));
  bezout.matrix[3][9][8] =
      _mm256_sub_pd(bezout.matrix[3][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[3][4]));
  bezout.matrix[3][9][9] =
      _mm256_sub_pd(bezout.matrix[3][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[3][5]));
  bezout.matrix[3][9][10] =
      _mm256_sub_pd(bezout.matrix[3][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[3][6]));
  bezout.matrix[3][9][11] =
      _mm256_sub_pd(bezout.matrix[3][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[3][7]));
  bezout.matrix[3][9][5] =
      _mm256_sub_pd(bezout.matrix[3][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[3][0]));
  bezout.matrix[3][9][6] =
      _mm256_sub_pd(bezout.matrix[3][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[3][1]));
  bezout.matrix[3][9][7] =
      _mm256_sub_pd(bezout.matrix[3][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[3][2]));
  bezout.matrix[3][9][8] =
      _mm256_sub_pd(bezout.matrix[3][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[3][3]));
  bezout.matrix[3][9][9] =
      _mm256_sub_pd(bezout.matrix[3][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[3][4]));
  bezout.matrix[3][9][10] =
      _mm256_sub_pd(bezout.matrix[3][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[3][5]));
  bezout.matrix[3][9][11] =
      _mm256_sub_pd(bezout.matrix[3][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[3][6]));
  bezout.matrix[3][9][12] =
      _mm256_sub_pd(bezout.matrix[3][9][12],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[3][7]));
  bezout.matrix[3][10][0] =
      _mm256_sub_pd(bezout.matrix[3][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[3][0]));
  bezout.matrix[3][10][1] =
      _mm256_sub_pd(bezout.matrix[3][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[3][1]));
  bezout.matrix[3][10][2] =
      _mm256_sub_pd(bezout.matrix[3][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[3][2]));
  bezout.matrix[3][10][3] =
      _mm256_sub_pd(bezout.matrix[3][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[3][3]));
  bezout.matrix[3][10][4] =
      _mm256_sub_pd(bezout.matrix[3][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[3][4]));
  bezout.matrix[3][10][5] =
      _mm256_sub_pd(bezout.matrix[3][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[3][5]));
  bezout.matrix[3][10][6] =
      _mm256_sub_pd(bezout.matrix[3][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[3][6]));
  bezout.matrix[3][10][7] =
      _mm256_sub_pd(bezout.matrix[3][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[3][7]));
  bezout.matrix[3][10][1] =
      _mm256_sub_pd(bezout.matrix[3][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[3][0]));
  bezout.matrix[3][10][2] =
      _mm256_sub_pd(bezout.matrix[3][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[3][1]));
  bezout.matrix[3][10][3] =
      _mm256_sub_pd(bezout.matrix[3][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[3][2]));
  bezout.matrix[3][10][4] =
      _mm256_sub_pd(bezout.matrix[3][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[3][3]));
  bezout.matrix[3][10][5] =
      _mm256_sub_pd(bezout.matrix[3][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[3][4]));
  bezout.matrix[3][10][6] =
      _mm256_sub_pd(bezout.matrix[3][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[3][5]));
  bezout.matrix[3][10][7] =
      _mm256_sub_pd(bezout.matrix[3][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[3][6]));
  bezout.matrix[3][10][8] =
      _mm256_sub_pd(bezout.matrix[3][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[3][7]));
  bezout.matrix[3][10][2] =
      _mm256_sub_pd(bezout.matrix[3][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[3][0]));
  bezout.matrix[3][10][3] =
      _mm256_sub_pd(bezout.matrix[3][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[3][1]));
  bezout.matrix[3][10][4] =
      _mm256_sub_pd(bezout.matrix[3][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[3][2]));
  bezout.matrix[3][10][5] =
      _mm256_sub_pd(bezout.matrix[3][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[3][3]));
  bezout.matrix[3][10][6] =
      _mm256_sub_pd(bezout.matrix[3][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[3][4]));
  bezout.matrix[3][10][7] =
      _mm256_sub_pd(bezout.matrix[3][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[3][5]));
  bezout.matrix[3][10][8] =
      _mm256_sub_pd(bezout.matrix[3][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[3][6]));
  bezout.matrix[3][10][9] =
      _mm256_sub_pd(bezout.matrix[3][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[3][7]));
  bezout.matrix[3][10][3] =
      _mm256_sub_pd(bezout.matrix[3][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[3][0]));
  bezout.matrix[3][10][4] =
      _mm256_sub_pd(bezout.matrix[3][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[3][1]));
  bezout.matrix[3][10][5] =
      _mm256_sub_pd(bezout.matrix[3][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[3][2]));
  bezout.matrix[3][10][6] =
      _mm256_sub_pd(bezout.matrix[3][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[3][3]));
  bezout.matrix[3][10][7] =
      _mm256_sub_pd(bezout.matrix[3][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[3][4]));
  bezout.matrix[3][10][8] =
      _mm256_sub_pd(bezout.matrix[3][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[3][5]));
  bezout.matrix[3][10][9] =
      _mm256_sub_pd(bezout.matrix[3][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[3][6]));
  bezout.matrix[3][10][10] =
      _mm256_sub_pd(bezout.matrix[3][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[3][7]));
  bezout.matrix[3][10][4] =
      _mm256_sub_pd(bezout.matrix[3][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[3][0]));
  bezout.matrix[3][10][5] =
      _mm256_sub_pd(bezout.matrix[3][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[3][1]));
  bezout.matrix[3][10][6] =
      _mm256_sub_pd(bezout.matrix[3][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[3][2]));
  bezout.matrix[3][10][7] =
      _mm256_sub_pd(bezout.matrix[3][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[3][3]));
  bezout.matrix[3][10][8] =
      _mm256_sub_pd(bezout.matrix[3][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[3][4]));
  bezout.matrix[3][10][9] =
      _mm256_sub_pd(bezout.matrix[3][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[3][5]));
  bezout.matrix[3][10][10] =
      _mm256_sub_pd(bezout.matrix[3][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[3][6]));
  bezout.matrix[3][10][11] =
      _mm256_sub_pd(bezout.matrix[3][10][11],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[3][7]));
  bezout.matrix[3][11][0] =
      _mm256_sub_pd(bezout.matrix[3][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[3][0]));
  bezout.matrix[3][11][1] =
      _mm256_sub_pd(bezout.matrix[3][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[3][1]));
  bezout.matrix[3][11][2] =
      _mm256_sub_pd(bezout.matrix[3][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[3][2]));
  bezout.matrix[3][11][3] =
      _mm256_sub_pd(bezout.matrix[3][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[3][3]));
  bezout.matrix[3][11][4] =
      _mm256_sub_pd(bezout.matrix[3][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[3][4]));
  bezout.matrix[3][11][5] =
      _mm256_sub_pd(bezout.matrix[3][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[3][5]));
  bezout.matrix[3][11][6] =
      _mm256_sub_pd(bezout.matrix[3][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[3][6]));
  bezout.matrix[3][11][7] =
      _mm256_sub_pd(bezout.matrix[3][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[3][7]));
  bezout.matrix[3][11][1] =
      _mm256_sub_pd(bezout.matrix[3][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[3][0]));
  bezout.matrix[3][11][2] =
      _mm256_sub_pd(bezout.matrix[3][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[3][1]));
  bezout.matrix[3][11][3] =
      _mm256_sub_pd(bezout.matrix[3][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[3][2]));
  bezout.matrix[3][11][4] =
      _mm256_sub_pd(bezout.matrix[3][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[3][3]));
  bezout.matrix[3][11][5] =
      _mm256_sub_pd(bezout.matrix[3][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[3][4]));
  bezout.matrix[3][11][6] =
      _mm256_sub_pd(bezout.matrix[3][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[3][5]));
  bezout.matrix[3][11][7] =
      _mm256_sub_pd(bezout.matrix[3][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[3][6]));
  bezout.matrix[3][11][8] =
      _mm256_sub_pd(bezout.matrix[3][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[3][7]));
  bezout.matrix[3][11][2] =
      _mm256_sub_pd(bezout.matrix[3][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[3][0]));
  bezout.matrix[3][11][3] =
      _mm256_sub_pd(bezout.matrix[3][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[3][1]));
  bezout.matrix[3][11][4] =
      _mm256_sub_pd(bezout.matrix[3][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[3][2]));
  bezout.matrix[3][11][5] =
      _mm256_sub_pd(bezout.matrix[3][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[3][3]));
  bezout.matrix[3][11][6] =
      _mm256_sub_pd(bezout.matrix[3][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[3][4]));
  bezout.matrix[3][11][7] =
      _mm256_sub_pd(bezout.matrix[3][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[3][5]));
  bezout.matrix[3][11][8] =
      _mm256_sub_pd(bezout.matrix[3][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[3][6]));
  bezout.matrix[3][11][9] =
      _mm256_sub_pd(bezout.matrix[3][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[3][7]));
  bezout.matrix[3][11][3] =
      _mm256_sub_pd(bezout.matrix[3][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[3][0]));
  bezout.matrix[3][11][4] =
      _mm256_sub_pd(bezout.matrix[3][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[3][1]));
  bezout.matrix[3][11][5] =
      _mm256_sub_pd(bezout.matrix[3][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[3][2]));
  bezout.matrix[3][11][6] =
      _mm256_sub_pd(bezout.matrix[3][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[3][3]));
  bezout.matrix[3][11][7] =
      _mm256_sub_pd(bezout.matrix[3][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[3][4]));
  bezout.matrix[3][11][8] =
      _mm256_sub_pd(bezout.matrix[3][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[3][5]));
  bezout.matrix[3][11][9] =
      _mm256_sub_pd(bezout.matrix[3][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[3][6]));
  bezout.matrix[3][11][10] =
      _mm256_sub_pd(bezout.matrix[3][11][10],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[3][7]));
  bezout.matrix[3][12][0] =
      _mm256_sub_pd(bezout.matrix[3][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[3][0]));
  bezout.matrix[3][12][1] =
      _mm256_sub_pd(bezout.matrix[3][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[3][1]));
  bezout.matrix[3][12][2] =
      _mm256_sub_pd(bezout.matrix[3][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[3][2]));
  bezout.matrix[3][12][3] =
      _mm256_sub_pd(bezout.matrix[3][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[3][3]));
  bezout.matrix[3][12][4] =
      _mm256_sub_pd(bezout.matrix[3][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[3][4]));
  bezout.matrix[3][12][5] =
      _mm256_sub_pd(bezout.matrix[3][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[3][5]));
  bezout.matrix[3][12][6] =
      _mm256_sub_pd(bezout.matrix[3][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[3][6]));
  bezout.matrix[3][12][7] =
      _mm256_sub_pd(bezout.matrix[3][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[3][7]));
  bezout.matrix[3][12][1] =
      _mm256_sub_pd(bezout.matrix[3][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[3][0]));
  bezout.matrix[3][12][2] =
      _mm256_sub_pd(bezout.matrix[3][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[3][1]));
  bezout.matrix[3][12][3] =
      _mm256_sub_pd(bezout.matrix[3][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[3][2]));
  bezout.matrix[3][12][4] =
      _mm256_sub_pd(bezout.matrix[3][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[3][3]));
  bezout.matrix[3][12][5] =
      _mm256_sub_pd(bezout.matrix[3][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[3][4]));
  bezout.matrix[3][12][6] =
      _mm256_sub_pd(bezout.matrix[3][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[3][5]));
  bezout.matrix[3][12][7] =
      _mm256_sub_pd(bezout.matrix[3][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[3][6]));
  bezout.matrix[3][12][8] =
      _mm256_sub_pd(bezout.matrix[3][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[3][7]));
  bezout.matrix[3][12][2] =
      _mm256_sub_pd(bezout.matrix[3][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[3][0]));
  bezout.matrix[3][12][3] =
      _mm256_sub_pd(bezout.matrix[3][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[3][1]));
  bezout.matrix[3][12][4] =
      _mm256_sub_pd(bezout.matrix[3][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[3][2]));
  bezout.matrix[3][12][5] =
      _mm256_sub_pd(bezout.matrix[3][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[3][3]));
  bezout.matrix[3][12][6] =
      _mm256_sub_pd(bezout.matrix[3][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[3][4]));
  bezout.matrix[3][12][7] =
      _mm256_sub_pd(bezout.matrix[3][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[3][5]));
  bezout.matrix[3][12][8] =
      _mm256_sub_pd(bezout.matrix[3][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[3][6]));
  bezout.matrix[3][12][9] =
      _mm256_sub_pd(bezout.matrix[3][12][9],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[3][7]));
  bezout.matrix[3][13][0] =
      _mm256_sub_pd(bezout.matrix[3][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[3][0]));
  bezout.matrix[3][13][1] =
      _mm256_sub_pd(bezout.matrix[3][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[3][1]));
  bezout.matrix[3][13][2] =
      _mm256_sub_pd(bezout.matrix[3][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[3][2]));
  bezout.matrix[3][13][3] =
      _mm256_sub_pd(bezout.matrix[3][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[3][3]));
  bezout.matrix[3][13][4] =
      _mm256_sub_pd(bezout.matrix[3][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[3][4]));
  bezout.matrix[3][13][5] =
      _mm256_sub_pd(bezout.matrix[3][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[3][5]));
  bezout.matrix[3][13][6] =
      _mm256_sub_pd(bezout.matrix[3][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[3][6]));
  bezout.matrix[3][13][7] =
      _mm256_sub_pd(bezout.matrix[3][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[3][7]));
  bezout.matrix[3][13][1] =
      _mm256_sub_pd(bezout.matrix[3][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[3][0]));
  bezout.matrix[3][13][2] =
      _mm256_sub_pd(bezout.matrix[3][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[3][1]));
  bezout.matrix[3][13][3] =
      _mm256_sub_pd(bezout.matrix[3][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[3][2]));
  bezout.matrix[3][13][4] =
      _mm256_sub_pd(bezout.matrix[3][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[3][3]));
  bezout.matrix[3][13][5] =
      _mm256_sub_pd(bezout.matrix[3][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[3][4]));
  bezout.matrix[3][13][6] =
      _mm256_sub_pd(bezout.matrix[3][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[3][5]));
  bezout.matrix[3][13][7] =
      _mm256_sub_pd(bezout.matrix[3][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[3][6]));
  bezout.matrix[3][13][8] =
      _mm256_sub_pd(bezout.matrix[3][13][8],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[3][7]));
  bezout.matrix[3][14][0] =
      _mm256_sub_pd(bezout.matrix[3][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[3][0]));
  bezout.matrix[3][14][1] =
      _mm256_sub_pd(bezout.matrix[3][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[3][1]));
  bezout.matrix[3][14][2] =
      _mm256_sub_pd(bezout.matrix[3][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[3][2]));
  bezout.matrix[3][14][3] =
      _mm256_sub_pd(bezout.matrix[3][14][3],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[3][3]));
  bezout.matrix[3][14][4] =
      _mm256_sub_pd(bezout.matrix[3][14][4],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[3][4]));
  bezout.matrix[3][14][5] =
      _mm256_sub_pd(bezout.matrix[3][14][5],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[3][5]));
  bezout.matrix[3][14][6] =
      _mm256_sub_pd(bezout.matrix[3][14][6],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[3][6]));
  bezout.matrix[3][14][7] =
      _mm256_sub_pd(bezout.matrix[3][14][7],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[3][7]));
  bezout.matrix[4][4][0] =
      _mm256_add_pd(bezout.matrix[4][4][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[5][0]));
  bezout.matrix[4][4][1] =
      _mm256_add_pd(bezout.matrix[4][4][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[5][1]));
  bezout.matrix[4][4][2] =
      _mm256_add_pd(bezout.matrix[4][4][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[5][2]));
  bezout.matrix[4][4][3] =
      _mm256_add_pd(bezout.matrix[4][4][3],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[5][3]));
  bezout.matrix[4][4][4] =
      _mm256_add_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[5][4]));
  bezout.matrix[4][4][5] =
      _mm256_add_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[5][5]));
  bezout.matrix[4][4][1] =
      _mm256_add_pd(bezout.matrix[4][4][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[5][0]));
  bezout.matrix[4][4][2] =
      _mm256_add_pd(bezout.matrix[4][4][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[5][1]));
  bezout.matrix[4][4][3] =
      _mm256_add_pd(bezout.matrix[4][4][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[5][2]));
  bezout.matrix[4][4][4] =
      _mm256_add_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[5][3]));
  bezout.matrix[4][4][5] =
      _mm256_add_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[5][4]));
  bezout.matrix[4][4][6] =
      _mm256_add_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[5][5]));
  bezout.matrix[4][4][2] =
      _mm256_add_pd(bezout.matrix[4][4][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[5][0]));
  bezout.matrix[4][4][3] =
      _mm256_add_pd(bezout.matrix[4][4][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[5][1]));
  bezout.matrix[4][4][4] =
      _mm256_add_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[5][2]));
  bezout.matrix[4][4][5] =
      _mm256_add_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[5][3]));
  bezout.matrix[4][4][6] =
      _mm256_add_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[5][4]));
  bezout.matrix[4][4][7] =
      _mm256_add_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[5][5]));
  bezout.matrix[4][4][3] =
      _mm256_add_pd(bezout.matrix[4][4][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[5][0]));
  bezout.matrix[4][4][4] =
      _mm256_add_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[5][1]));
  bezout.matrix[4][4][5] =
      _mm256_add_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[5][2]));
  bezout.matrix[4][4][6] =
      _mm256_add_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[5][3]));
  bezout.matrix[4][4][7] =
      _mm256_add_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[5][4]));
  bezout.matrix[4][4][8] =
      _mm256_add_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[5][5]));
  bezout.matrix[4][4][4] =
      _mm256_add_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[5][0]));
  bezout.matrix[4][4][5] =
      _mm256_add_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[5][1]));
  bezout.matrix[4][4][6] =
      _mm256_add_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[5][2]));
  bezout.matrix[4][4][7] =
      _mm256_add_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[5][3]));
  bezout.matrix[4][4][8] =
      _mm256_add_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[5][4]));
  bezout.matrix[4][4][9] =
      _mm256_add_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[5][5]));
  bezout.matrix[4][4][5] =
      _mm256_add_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[5][0]));
  bezout.matrix[4][4][6] =
      _mm256_add_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[5][1]));
  bezout.matrix[4][4][7] =
      _mm256_add_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[5][2]));
  bezout.matrix[4][4][8] =
      _mm256_add_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[5][3]));
  bezout.matrix[4][4][9] =
      _mm256_add_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[5][4]));
  bezout.matrix[4][4][10] =
      _mm256_add_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[5][5]));
  bezout.matrix[4][4][6] =
      _mm256_add_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[5][0]));
  bezout.matrix[4][4][7] =
      _mm256_add_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[5][1]));
  bezout.matrix[4][4][8] =
      _mm256_add_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[5][2]));
  bezout.matrix[4][4][9] =
      _mm256_add_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[5][3]));
  bezout.matrix[4][4][10] =
      _mm256_add_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[5][4]));
  bezout.matrix[4][4][11] =
      _mm256_add_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[5][5]));
  bezout.matrix[4][4][7] =
      _mm256_add_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[5][0]));
  bezout.matrix[4][4][8] =
      _mm256_add_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[5][1]));
  bezout.matrix[4][4][9] =
      _mm256_add_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[5][2]));
  bezout.matrix[4][4][10] =
      _mm256_add_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[5][3]));
  bezout.matrix[4][4][11] =
      _mm256_add_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[5][4]));
  bezout.matrix[4][4][12] =
      _mm256_add_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[5][5]));
  bezout.matrix[4][4][8] =
      _mm256_add_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[5][0]));
  bezout.matrix[4][4][9] =
      _mm256_add_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[5][1]));
  bezout.matrix[4][4][10] =
      _mm256_add_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[5][2]));
  bezout.matrix[4][4][11] =
      _mm256_add_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[5][3]));
  bezout.matrix[4][4][12] =
      _mm256_add_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[5][4]));
  bezout.matrix[4][4][13] =
      _mm256_add_pd(bezout.matrix[4][4][13],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[5][5]));
  bezout.matrix[4][4][9] =
      _mm256_add_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[5][0]));
  bezout.matrix[4][4][10] =
      _mm256_add_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[5][1]));
  bezout.matrix[4][4][11] =
      _mm256_add_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[5][2]));
  bezout.matrix[4][4][12] =
      _mm256_add_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[5][3]));
  bezout.matrix[4][4][13] =
      _mm256_add_pd(bezout.matrix[4][4][13],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[5][4]));
  bezout.matrix[4][4][14] =
      _mm256_add_pd(bezout.matrix[4][4][14],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[5][5]));
  bezout.matrix[4][4][10] =
      _mm256_add_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[5][0]));
  bezout.matrix[4][4][11] =
      _mm256_add_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[5][1]));
  bezout.matrix[4][4][12] =
      _mm256_add_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[5][2]));
  bezout.matrix[4][4][13] =
      _mm256_add_pd(bezout.matrix[4][4][13],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[5][3]));
  bezout.matrix[4][4][14] =
      _mm256_add_pd(bezout.matrix[4][4][14],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[5][4]));
  bezout.matrix[4][4][15] =
      _mm256_add_pd(bezout.matrix[4][4][15],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[5][5]));
  bezout.matrix[4][4][11] =
      _mm256_add_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[5][0]));
  bezout.matrix[4][4][12] =
      _mm256_add_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[5][1]));
  bezout.matrix[4][4][13] =
      _mm256_add_pd(bezout.matrix[4][4][13],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[5][2]));
  bezout.matrix[4][4][14] =
      _mm256_add_pd(bezout.matrix[4][4][14],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[5][3]));
  bezout.matrix[4][4][15] =
      _mm256_add_pd(bezout.matrix[4][4][15],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[5][4]));
  bezout.matrix[4][4][0] =
      _mm256_sub_pd(bezout.matrix[4][4][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[4][0]));
  bezout.matrix[4][4][1] =
      _mm256_sub_pd(bezout.matrix[4][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[4][1]));
  bezout.matrix[4][4][2] =
      _mm256_sub_pd(bezout.matrix[4][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[4][2]));
  bezout.matrix[4][4][3] =
      _mm256_sub_pd(bezout.matrix[4][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[4][3]));
  bezout.matrix[4][4][4] =
      _mm256_sub_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[4][4]));
  bezout.matrix[4][4][5] =
      _mm256_sub_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[4][5]));
  bezout.matrix[4][4][6] =
      _mm256_sub_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[4][6]));
  bezout.matrix[4][4][1] =
      _mm256_sub_pd(bezout.matrix[4][4][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[4][0]));
  bezout.matrix[4][4][2] =
      _mm256_sub_pd(bezout.matrix[4][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[4][1]));
  bezout.matrix[4][4][3] =
      _mm256_sub_pd(bezout.matrix[4][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[4][2]));
  bezout.matrix[4][4][4] =
      _mm256_sub_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[4][3]));
  bezout.matrix[4][4][5] =
      _mm256_sub_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[4][4]));
  bezout.matrix[4][4][6] =
      _mm256_sub_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[4][5]));
  bezout.matrix[4][4][7] =
      _mm256_sub_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[4][6]));
  bezout.matrix[4][4][2] =
      _mm256_sub_pd(bezout.matrix[4][4][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[4][0]));
  bezout.matrix[4][4][3] =
      _mm256_sub_pd(bezout.matrix[4][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[4][1]));
  bezout.matrix[4][4][4] =
      _mm256_sub_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[4][2]));
  bezout.matrix[4][4][5] =
      _mm256_sub_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[4][3]));
  bezout.matrix[4][4][6] =
      _mm256_sub_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[4][4]));
  bezout.matrix[4][4][7] =
      _mm256_sub_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[4][5]));
  bezout.matrix[4][4][8] =
      _mm256_sub_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[4][6]));
  bezout.matrix[4][4][3] =
      _mm256_sub_pd(bezout.matrix[4][4][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[4][0]));
  bezout.matrix[4][4][4] =
      _mm256_sub_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[4][1]));
  bezout.matrix[4][4][5] =
      _mm256_sub_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[4][2]));
  bezout.matrix[4][4][6] =
      _mm256_sub_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[4][3]));
  bezout.matrix[4][4][7] =
      _mm256_sub_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[4][4]));
  bezout.matrix[4][4][8] =
      _mm256_sub_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[4][5]));
  bezout.matrix[4][4][9] =
      _mm256_sub_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[4][6]));
  bezout.matrix[4][4][4] =
      _mm256_sub_pd(bezout.matrix[4][4][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[4][0]));
  bezout.matrix[4][4][5] =
      _mm256_sub_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[4][1]));
  bezout.matrix[4][4][6] =
      _mm256_sub_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[4][2]));
  bezout.matrix[4][4][7] =
      _mm256_sub_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[4][3]));
  bezout.matrix[4][4][8] =
      _mm256_sub_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[4][4]));
  bezout.matrix[4][4][9] =
      _mm256_sub_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[4][5]));
  bezout.matrix[4][4][10] =
      _mm256_sub_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[4][6]));
  bezout.matrix[4][4][5] =
      _mm256_sub_pd(bezout.matrix[4][4][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[4][0]));
  bezout.matrix[4][4][6] =
      _mm256_sub_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[4][1]));
  bezout.matrix[4][4][7] =
      _mm256_sub_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[4][2]));
  bezout.matrix[4][4][8] =
      _mm256_sub_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[4][3]));
  bezout.matrix[4][4][9] =
      _mm256_sub_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[4][4]));
  bezout.matrix[4][4][10] =
      _mm256_sub_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[4][5]));
  bezout.matrix[4][4][11] =
      _mm256_sub_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[4][6]));
  bezout.matrix[4][4][6] =
      _mm256_sub_pd(bezout.matrix[4][4][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[4][0]));
  bezout.matrix[4][4][7] =
      _mm256_sub_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[4][1]));
  bezout.matrix[4][4][8] =
      _mm256_sub_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[4][2]));
  bezout.matrix[4][4][9] =
      _mm256_sub_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[4][3]));
  bezout.matrix[4][4][10] =
      _mm256_sub_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[4][4]));
  bezout.matrix[4][4][11] =
      _mm256_sub_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[4][5]));
  bezout.matrix[4][4][12] =
      _mm256_sub_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[4][6]));
  bezout.matrix[4][4][7] =
      _mm256_sub_pd(bezout.matrix[4][4][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[4][0]));
  bezout.matrix[4][4][8] =
      _mm256_sub_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[4][1]));
  bezout.matrix[4][4][9] =
      _mm256_sub_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[4][2]));
  bezout.matrix[4][4][10] =
      _mm256_sub_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[4][3]));
  bezout.matrix[4][4][11] =
      _mm256_sub_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[4][4]));
  bezout.matrix[4][4][12] =
      _mm256_sub_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[4][5]));
  bezout.matrix[4][4][13] =
      _mm256_sub_pd(bezout.matrix[4][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[4][6]));
  bezout.matrix[4][4][8] =
      _mm256_sub_pd(bezout.matrix[4][4][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[4][0]));
  bezout.matrix[4][4][9] =
      _mm256_sub_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[4][1]));
  bezout.matrix[4][4][10] =
      _mm256_sub_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[4][2]));
  bezout.matrix[4][4][11] =
      _mm256_sub_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[4][3]));
  bezout.matrix[4][4][12] =
      _mm256_sub_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[4][4]));
  bezout.matrix[4][4][13] =
      _mm256_sub_pd(bezout.matrix[4][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[4][5]));
  bezout.matrix[4][4][14] =
      _mm256_sub_pd(bezout.matrix[4][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[4][6]));
  bezout.matrix[4][4][9] =
      _mm256_sub_pd(bezout.matrix[4][4][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[4][0]));
  bezout.matrix[4][4][10] =
      _mm256_sub_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[4][1]));
  bezout.matrix[4][4][11] =
      _mm256_sub_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[4][2]));
  bezout.matrix[4][4][12] =
      _mm256_sub_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[4][3]));
  bezout.matrix[4][4][13] =
      _mm256_sub_pd(bezout.matrix[4][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[4][4]));
  bezout.matrix[4][4][14] =
      _mm256_sub_pd(bezout.matrix[4][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[4][5]));
  bezout.matrix[4][4][15] =
      _mm256_sub_pd(bezout.matrix[4][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[4][6]));
  bezout.matrix[4][4][10] =
      _mm256_sub_pd(bezout.matrix[4][4][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[4][0]));
  bezout.matrix[4][4][11] =
      _mm256_sub_pd(bezout.matrix[4][4][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[4][1]));
  bezout.matrix[4][4][12] =
      _mm256_sub_pd(bezout.matrix[4][4][12],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[4][2]));
  bezout.matrix[4][4][13] =
      _mm256_sub_pd(bezout.matrix[4][4][13],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[4][3]));
  bezout.matrix[4][4][14] =
      _mm256_sub_pd(bezout.matrix[4][4][14],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[4][4]));
  bezout.matrix[4][4][15] =
      _mm256_sub_pd(bezout.matrix[4][4][15],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[4][5]));
  bezout.matrix[4][5][0] =
      _mm256_add_pd(bezout.matrix[4][5][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[6][0]));
  bezout.matrix[4][5][1] =
      _mm256_add_pd(bezout.matrix[4][5][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[6][1]));
  bezout.matrix[4][5][2] =
      _mm256_add_pd(bezout.matrix[4][5][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[6][2]));
  bezout.matrix[4][5][3] =
      _mm256_add_pd(bezout.matrix[4][5][3],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[6][3]));
  bezout.matrix[4][5][4] =
      _mm256_add_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[6][4]));
  bezout.matrix[4][5][1] =
      _mm256_add_pd(bezout.matrix[4][5][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[6][0]));
  bezout.matrix[4][5][2] =
      _mm256_add_pd(bezout.matrix[4][5][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[6][1]));
  bezout.matrix[4][5][3] =
      _mm256_add_pd(bezout.matrix[4][5][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[6][2]));
  bezout.matrix[4][5][4] =
      _mm256_add_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[6][3]));
  bezout.matrix[4][5][5] =
      _mm256_add_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[6][4]));
  bezout.matrix[4][5][2] =
      _mm256_add_pd(bezout.matrix[4][5][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[6][0]));
  bezout.matrix[4][5][3] =
      _mm256_add_pd(bezout.matrix[4][5][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[6][1]));
  bezout.matrix[4][5][4] =
      _mm256_add_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[6][2]));
  bezout.matrix[4][5][5] =
      _mm256_add_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[6][3]));
  bezout.matrix[4][5][6] =
      _mm256_add_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[6][4]));
  bezout.matrix[4][5][3] =
      _mm256_add_pd(bezout.matrix[4][5][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[6][0]));
  bezout.matrix[4][5][4] =
      _mm256_add_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[6][1]));
  bezout.matrix[4][5][5] =
      _mm256_add_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[6][2]));
  bezout.matrix[4][5][6] =
      _mm256_add_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[6][3]));
  bezout.matrix[4][5][7] =
      _mm256_add_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[6][4]));
  bezout.matrix[4][5][4] =
      _mm256_add_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[6][0]));
  bezout.matrix[4][5][5] =
      _mm256_add_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[6][1]));
  bezout.matrix[4][5][6] =
      _mm256_add_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[6][2]));
  bezout.matrix[4][5][7] =
      _mm256_add_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[6][3]));
  bezout.matrix[4][5][8] =
      _mm256_add_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[6][4]));
  bezout.matrix[4][5][5] =
      _mm256_add_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[6][0]));
  bezout.matrix[4][5][6] =
      _mm256_add_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[6][1]));
  bezout.matrix[4][5][7] =
      _mm256_add_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[6][2]));
  bezout.matrix[4][5][8] =
      _mm256_add_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[6][3]));
  bezout.matrix[4][5][9] =
      _mm256_add_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[6][4]));
  bezout.matrix[4][5][6] =
      _mm256_add_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[6][0]));
  bezout.matrix[4][5][7] =
      _mm256_add_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[6][1]));
  bezout.matrix[4][5][8] =
      _mm256_add_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[6][2]));
  bezout.matrix[4][5][9] =
      _mm256_add_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[6][3]));
  bezout.matrix[4][5][10] =
      _mm256_add_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[6][4]));
  bezout.matrix[4][5][7] =
      _mm256_add_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[6][0]));
  bezout.matrix[4][5][8] =
      _mm256_add_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[6][1]));
  bezout.matrix[4][5][9] =
      _mm256_add_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[6][2]));
  bezout.matrix[4][5][10] =
      _mm256_add_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[6][3]));
  bezout.matrix[4][5][11] =
      _mm256_add_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[6][4]));
  bezout.matrix[4][5][8] =
      _mm256_add_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[6][0]));
  bezout.matrix[4][5][9] =
      _mm256_add_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[6][1]));
  bezout.matrix[4][5][10] =
      _mm256_add_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[6][2]));
  bezout.matrix[4][5][11] =
      _mm256_add_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[6][3]));
  bezout.matrix[4][5][12] =
      _mm256_add_pd(bezout.matrix[4][5][12],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[6][4]));
  bezout.matrix[4][5][9] =
      _mm256_add_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[6][0]));
  bezout.matrix[4][5][10] =
      _mm256_add_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[6][1]));
  bezout.matrix[4][5][11] =
      _mm256_add_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[6][2]));
  bezout.matrix[4][5][12] =
      _mm256_add_pd(bezout.matrix[4][5][12],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[6][3]));
  bezout.matrix[4][5][13] =
      _mm256_add_pd(bezout.matrix[4][5][13],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[6][4]));
  bezout.matrix[4][5][10] =
      _mm256_add_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[6][0]));
  bezout.matrix[4][5][11] =
      _mm256_add_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[6][1]));
  bezout.matrix[4][5][12] =
      _mm256_add_pd(bezout.matrix[4][5][12],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[6][2]));
  bezout.matrix[4][5][13] =
      _mm256_add_pd(bezout.matrix[4][5][13],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[6][3]));
  bezout.matrix[4][5][14] =
      _mm256_add_pd(bezout.matrix[4][5][14],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[6][4]));
  bezout.matrix[4][5][11] =
      _mm256_add_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[6][0]));
  bezout.matrix[4][5][12] =
      _mm256_add_pd(bezout.matrix[4][5][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[6][1]));
  bezout.matrix[4][5][13] =
      _mm256_add_pd(bezout.matrix[4][5][13],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[6][2]));
  bezout.matrix[4][5][14] =
      _mm256_add_pd(bezout.matrix[4][5][14],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[6][3]));
  bezout.matrix[4][5][15] =
      _mm256_add_pd(bezout.matrix[4][5][15],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[6][4]));
  bezout.matrix[4][5][0] =
      _mm256_sub_pd(bezout.matrix[4][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[4][0]));
  bezout.matrix[4][5][1] =
      _mm256_sub_pd(bezout.matrix[4][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[4][1]));
  bezout.matrix[4][5][2] =
      _mm256_sub_pd(bezout.matrix[4][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[4][2]));
  bezout.matrix[4][5][3] =
      _mm256_sub_pd(bezout.matrix[4][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[4][3]));
  bezout.matrix[4][5][4] =
      _mm256_sub_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[4][4]));
  bezout.matrix[4][5][5] =
      _mm256_sub_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[4][5]));
  bezout.matrix[4][5][6] =
      _mm256_sub_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[4][6]));
  bezout.matrix[4][5][1] =
      _mm256_sub_pd(bezout.matrix[4][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[4][0]));
  bezout.matrix[4][5][2] =
      _mm256_sub_pd(bezout.matrix[4][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[4][1]));
  bezout.matrix[4][5][3] =
      _mm256_sub_pd(bezout.matrix[4][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[4][2]));
  bezout.matrix[4][5][4] =
      _mm256_sub_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[4][3]));
  bezout.matrix[4][5][5] =
      _mm256_sub_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[4][4]));
  bezout.matrix[4][5][6] =
      _mm256_sub_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[4][5]));
  bezout.matrix[4][5][7] =
      _mm256_sub_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[4][6]));
  bezout.matrix[4][5][2] =
      _mm256_sub_pd(bezout.matrix[4][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[4][0]));
  bezout.matrix[4][5][3] =
      _mm256_sub_pd(bezout.matrix[4][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[4][1]));
  bezout.matrix[4][5][4] =
      _mm256_sub_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[4][2]));
  bezout.matrix[4][5][5] =
      _mm256_sub_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[4][3]));
  bezout.matrix[4][5][6] =
      _mm256_sub_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[4][4]));
  bezout.matrix[4][5][7] =
      _mm256_sub_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[4][5]));
  bezout.matrix[4][5][8] =
      _mm256_sub_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[4][6]));
  bezout.matrix[4][5][3] =
      _mm256_sub_pd(bezout.matrix[4][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[4][0]));
  bezout.matrix[4][5][4] =
      _mm256_sub_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[4][1]));
  bezout.matrix[4][5][5] =
      _mm256_sub_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[4][2]));
  bezout.matrix[4][5][6] =
      _mm256_sub_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[4][3]));
  bezout.matrix[4][5][7] =
      _mm256_sub_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[4][4]));
  bezout.matrix[4][5][8] =
      _mm256_sub_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[4][5]));
  bezout.matrix[4][5][9] =
      _mm256_sub_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[4][6]));
  bezout.matrix[4][5][4] =
      _mm256_sub_pd(bezout.matrix[4][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[4][0]));
  bezout.matrix[4][5][5] =
      _mm256_sub_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[4][1]));
  bezout.matrix[4][5][6] =
      _mm256_sub_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[4][2]));
  bezout.matrix[4][5][7] =
      _mm256_sub_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[4][3]));
  bezout.matrix[4][5][8] =
      _mm256_sub_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[4][4]));
  bezout.matrix[4][5][9] =
      _mm256_sub_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[4][5]));
  bezout.matrix[4][5][10] =
      _mm256_sub_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[4][6]));
  bezout.matrix[4][5][5] =
      _mm256_sub_pd(bezout.matrix[4][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[4][0]));
  bezout.matrix[4][5][6] =
      _mm256_sub_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[4][1]));
  bezout.matrix[4][5][7] =
      _mm256_sub_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[4][2]));
  bezout.matrix[4][5][8] =
      _mm256_sub_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[4][3]));
  bezout.matrix[4][5][9] =
      _mm256_sub_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[4][4]));
  bezout.matrix[4][5][10] =
      _mm256_sub_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[4][5]));
  bezout.matrix[4][5][11] =
      _mm256_sub_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[4][6]));
  bezout.matrix[4][5][6] =
      _mm256_sub_pd(bezout.matrix[4][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[4][0]));
  bezout.matrix[4][5][7] =
      _mm256_sub_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[4][1]));
  bezout.matrix[4][5][8] =
      _mm256_sub_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[4][2]));
  bezout.matrix[4][5][9] =
      _mm256_sub_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[4][3]));
  bezout.matrix[4][5][10] =
      _mm256_sub_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[4][4]));
  bezout.matrix[4][5][11] =
      _mm256_sub_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[4][5]));
  bezout.matrix[4][5][12] =
      _mm256_sub_pd(bezout.matrix[4][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[4][6]));
  bezout.matrix[4][5][7] =
      _mm256_sub_pd(bezout.matrix[4][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[4][0]));
  bezout.matrix[4][5][8] =
      _mm256_sub_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[4][1]));
  bezout.matrix[4][5][9] =
      _mm256_sub_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[4][2]));
  bezout.matrix[4][5][10] =
      _mm256_sub_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[4][3]));
  bezout.matrix[4][5][11] =
      _mm256_sub_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[4][4]));
  bezout.matrix[4][5][12] =
      _mm256_sub_pd(bezout.matrix[4][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[4][5]));
  bezout.matrix[4][5][13] =
      _mm256_sub_pd(bezout.matrix[4][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[4][6]));
  bezout.matrix[4][5][8] =
      _mm256_sub_pd(bezout.matrix[4][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[4][0]));
  bezout.matrix[4][5][9] =
      _mm256_sub_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[4][1]));
  bezout.matrix[4][5][10] =
      _mm256_sub_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[4][2]));
  bezout.matrix[4][5][11] =
      _mm256_sub_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[4][3]));
  bezout.matrix[4][5][12] =
      _mm256_sub_pd(bezout.matrix[4][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[4][4]));
  bezout.matrix[4][5][13] =
      _mm256_sub_pd(bezout.matrix[4][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[4][5]));
  bezout.matrix[4][5][14] =
      _mm256_sub_pd(bezout.matrix[4][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[4][6]));
  bezout.matrix[4][5][9] =
      _mm256_sub_pd(bezout.matrix[4][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[4][0]));
  bezout.matrix[4][5][10] =
      _mm256_sub_pd(bezout.matrix[4][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[4][1]));
  bezout.matrix[4][5][11] =
      _mm256_sub_pd(bezout.matrix[4][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[4][2]));
  bezout.matrix[4][5][12] =
      _mm256_sub_pd(bezout.matrix[4][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[4][3]));
  bezout.matrix[4][5][13] =
      _mm256_sub_pd(bezout.matrix[4][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[4][4]));
  bezout.matrix[4][5][14] =
      _mm256_sub_pd(bezout.matrix[4][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[4][5]));
  bezout.matrix[4][5][15] =
      _mm256_sub_pd(bezout.matrix[4][5][15],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[4][6]));
  bezout.matrix[4][6][0] =
      _mm256_add_pd(bezout.matrix[4][6][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[7][0]));
  bezout.matrix[4][6][1] =
      _mm256_add_pd(bezout.matrix[4][6][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[7][1]));
  bezout.matrix[4][6][2] =
      _mm256_add_pd(bezout.matrix[4][6][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[7][2]));
  bezout.matrix[4][6][3] =
      _mm256_add_pd(bezout.matrix[4][6][3],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[7][3]));
  bezout.matrix[4][6][1] =
      _mm256_add_pd(bezout.matrix[4][6][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[7][0]));
  bezout.matrix[4][6][2] =
      _mm256_add_pd(bezout.matrix[4][6][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[7][1]));
  bezout.matrix[4][6][3] =
      _mm256_add_pd(bezout.matrix[4][6][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[7][2]));
  bezout.matrix[4][6][4] =
      _mm256_add_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[7][3]));
  bezout.matrix[4][6][2] =
      _mm256_add_pd(bezout.matrix[4][6][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[7][0]));
  bezout.matrix[4][6][3] =
      _mm256_add_pd(bezout.matrix[4][6][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[7][1]));
  bezout.matrix[4][6][4] =
      _mm256_add_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[7][2]));
  bezout.matrix[4][6][5] =
      _mm256_add_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[7][3]));
  bezout.matrix[4][6][3] =
      _mm256_add_pd(bezout.matrix[4][6][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[7][0]));
  bezout.matrix[4][6][4] =
      _mm256_add_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[7][1]));
  bezout.matrix[4][6][5] =
      _mm256_add_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[7][2]));
  bezout.matrix[4][6][6] =
      _mm256_add_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[7][3]));
  bezout.matrix[4][6][4] =
      _mm256_add_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[7][0]));
  bezout.matrix[4][6][5] =
      _mm256_add_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[7][1]));
  bezout.matrix[4][6][6] =
      _mm256_add_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[7][2]));
  bezout.matrix[4][6][7] =
      _mm256_add_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[7][3]));
  bezout.matrix[4][6][5] =
      _mm256_add_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[7][0]));
  bezout.matrix[4][6][6] =
      _mm256_add_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[7][1]));
  bezout.matrix[4][6][7] =
      _mm256_add_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[7][2]));
  bezout.matrix[4][6][8] =
      _mm256_add_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[7][3]));
  bezout.matrix[4][6][6] =
      _mm256_add_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[7][0]));
  bezout.matrix[4][6][7] =
      _mm256_add_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[7][1]));
  bezout.matrix[4][6][8] =
      _mm256_add_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[7][2]));
  bezout.matrix[4][6][9] =
      _mm256_add_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[7][3]));
  bezout.matrix[4][6][7] =
      _mm256_add_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[7][0]));
  bezout.matrix[4][6][8] =
      _mm256_add_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[7][1]));
  bezout.matrix[4][6][9] =
      _mm256_add_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[7][2]));
  bezout.matrix[4][6][10] =
      _mm256_add_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[7][3]));
  bezout.matrix[4][6][8] =
      _mm256_add_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[7][0]));
  bezout.matrix[4][6][9] =
      _mm256_add_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[7][1]));
  bezout.matrix[4][6][10] =
      _mm256_add_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[7][2]));
  bezout.matrix[4][6][11] =
      _mm256_add_pd(bezout.matrix[4][6][11],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[7][3]));
  bezout.matrix[4][6][9] =
      _mm256_add_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[7][0]));
  bezout.matrix[4][6][10] =
      _mm256_add_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[7][1]));
  bezout.matrix[4][6][11] =
      _mm256_add_pd(bezout.matrix[4][6][11],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[7][2]));
  bezout.matrix[4][6][12] =
      _mm256_add_pd(bezout.matrix[4][6][12],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[7][3]));
  bezout.matrix[4][6][10] =
      _mm256_add_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[7][0]));
  bezout.matrix[4][6][11] =
      _mm256_add_pd(bezout.matrix[4][6][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[7][1]));
  bezout.matrix[4][6][12] =
      _mm256_add_pd(bezout.matrix[4][6][12],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[7][2]));
  bezout.matrix[4][6][13] =
      _mm256_add_pd(bezout.matrix[4][6][13],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[7][3]));
  bezout.matrix[4][6][11] =
      _mm256_add_pd(bezout.matrix[4][6][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[7][0]));
  bezout.matrix[4][6][12] =
      _mm256_add_pd(bezout.matrix[4][6][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[7][1]));
  bezout.matrix[4][6][13] =
      _mm256_add_pd(bezout.matrix[4][6][13],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[7][2]));
  bezout.matrix[4][6][14] =
      _mm256_add_pd(bezout.matrix[4][6][14],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[7][3]));
  bezout.matrix[4][6][0] =
      _mm256_sub_pd(bezout.matrix[4][6][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[4][0]));
  bezout.matrix[4][6][1] =
      _mm256_sub_pd(bezout.matrix[4][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[4][1]));
  bezout.matrix[4][6][2] =
      _mm256_sub_pd(bezout.matrix[4][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[4][2]));
  bezout.matrix[4][6][3] =
      _mm256_sub_pd(bezout.matrix[4][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[4][3]));
  bezout.matrix[4][6][4] =
      _mm256_sub_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[4][4]));
  bezout.matrix[4][6][5] =
      _mm256_sub_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[4][5]));
  bezout.matrix[4][6][6] =
      _mm256_sub_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[4][6]));
  bezout.matrix[4][6][1] =
      _mm256_sub_pd(bezout.matrix[4][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[4][0]));
  bezout.matrix[4][6][2] =
      _mm256_sub_pd(bezout.matrix[4][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[4][1]));
  bezout.matrix[4][6][3] =
      _mm256_sub_pd(bezout.matrix[4][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[4][2]));
  bezout.matrix[4][6][4] =
      _mm256_sub_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[4][3]));
  bezout.matrix[4][6][5] =
      _mm256_sub_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[4][4]));
  bezout.matrix[4][6][6] =
      _mm256_sub_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[4][5]));
  bezout.matrix[4][6][7] =
      _mm256_sub_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[4][6]));
  bezout.matrix[4][6][2] =
      _mm256_sub_pd(bezout.matrix[4][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[4][0]));
  bezout.matrix[4][6][3] =
      _mm256_sub_pd(bezout.matrix[4][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[4][1]));
  bezout.matrix[4][6][4] =
      _mm256_sub_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[4][2]));
  bezout.matrix[4][6][5] =
      _mm256_sub_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[4][3]));
  bezout.matrix[4][6][6] =
      _mm256_sub_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[4][4]));
  bezout.matrix[4][6][7] =
      _mm256_sub_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[4][5]));
  bezout.matrix[4][6][8] =
      _mm256_sub_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[4][6]));
  bezout.matrix[4][6][3] =
      _mm256_sub_pd(bezout.matrix[4][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[4][0]));
  bezout.matrix[4][6][4] =
      _mm256_sub_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[4][1]));
  bezout.matrix[4][6][5] =
      _mm256_sub_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[4][2]));
  bezout.matrix[4][6][6] =
      _mm256_sub_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[4][3]));
  bezout.matrix[4][6][7] =
      _mm256_sub_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[4][4]));
  bezout.matrix[4][6][8] =
      _mm256_sub_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[4][5]));
  bezout.matrix[4][6][9] =
      _mm256_sub_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[4][6]));
  bezout.matrix[4][6][4] =
      _mm256_sub_pd(bezout.matrix[4][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[4][0]));
  bezout.matrix[4][6][5] =
      _mm256_sub_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[4][1]));
  bezout.matrix[4][6][6] =
      _mm256_sub_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[4][2]));
  bezout.matrix[4][6][7] =
      _mm256_sub_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[4][3]));
  bezout.matrix[4][6][8] =
      _mm256_sub_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[4][4]));
  bezout.matrix[4][6][9] =
      _mm256_sub_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[4][5]));
  bezout.matrix[4][6][10] =
      _mm256_sub_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[4][6]));
  bezout.matrix[4][6][5] =
      _mm256_sub_pd(bezout.matrix[4][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[4][0]));
  bezout.matrix[4][6][6] =
      _mm256_sub_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[4][1]));
  bezout.matrix[4][6][7] =
      _mm256_sub_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[4][2]));
  bezout.matrix[4][6][8] =
      _mm256_sub_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[4][3]));
  bezout.matrix[4][6][9] =
      _mm256_sub_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[4][4]));
  bezout.matrix[4][6][10] =
      _mm256_sub_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[4][5]));
  bezout.matrix[4][6][11] =
      _mm256_sub_pd(bezout.matrix[4][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[4][6]));
  bezout.matrix[4][6][6] =
      _mm256_sub_pd(bezout.matrix[4][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[4][0]));
  bezout.matrix[4][6][7] =
      _mm256_sub_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[4][1]));
  bezout.matrix[4][6][8] =
      _mm256_sub_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[4][2]));
  bezout.matrix[4][6][9] =
      _mm256_sub_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[4][3]));
  bezout.matrix[4][6][10] =
      _mm256_sub_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[4][4]));
  bezout.matrix[4][6][11] =
      _mm256_sub_pd(bezout.matrix[4][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[4][5]));
  bezout.matrix[4][6][12] =
      _mm256_sub_pd(bezout.matrix[4][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[4][6]));
  bezout.matrix[4][6][7] =
      _mm256_sub_pd(bezout.matrix[4][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[4][0]));
  bezout.matrix[4][6][8] =
      _mm256_sub_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[4][1]));
  bezout.matrix[4][6][9] =
      _mm256_sub_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[4][2]));
  bezout.matrix[4][6][10] =
      _mm256_sub_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[4][3]));
  bezout.matrix[4][6][11] =
      _mm256_sub_pd(bezout.matrix[4][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[4][4]));
  bezout.matrix[4][6][12] =
      _mm256_sub_pd(bezout.matrix[4][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[4][5]));
  bezout.matrix[4][6][13] =
      _mm256_sub_pd(bezout.matrix[4][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[4][6]));
  bezout.matrix[4][6][8] =
      _mm256_sub_pd(bezout.matrix[4][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[4][0]));
  bezout.matrix[4][6][9] =
      _mm256_sub_pd(bezout.matrix[4][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[4][1]));
  bezout.matrix[4][6][10] =
      _mm256_sub_pd(bezout.matrix[4][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[4][2]));
  bezout.matrix[4][6][11] =
      _mm256_sub_pd(bezout.matrix[4][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[4][3]));
  bezout.matrix[4][6][12] =
      _mm256_sub_pd(bezout.matrix[4][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[4][4]));
  bezout.matrix[4][6][13] =
      _mm256_sub_pd(bezout.matrix[4][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[4][5]));
  bezout.matrix[4][6][14] =
      _mm256_sub_pd(bezout.matrix[4][6][14],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[4][6]));
  bezout.matrix[4][7][0] =
      _mm256_add_pd(bezout.matrix[4][7][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[8][0]));
  bezout.matrix[4][7][1] =
      _mm256_add_pd(bezout.matrix[4][7][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[8][1]));
  bezout.matrix[4][7][2] =
      _mm256_add_pd(bezout.matrix[4][7][2],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[8][2]));
  bezout.matrix[4][7][1] =
      _mm256_add_pd(bezout.matrix[4][7][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[8][0]));
  bezout.matrix[4][7][2] =
      _mm256_add_pd(bezout.matrix[4][7][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[8][1]));
  bezout.matrix[4][7][3] =
      _mm256_add_pd(bezout.matrix[4][7][3],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[8][2]));
  bezout.matrix[4][7][2] =
      _mm256_add_pd(bezout.matrix[4][7][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[8][0]));
  bezout.matrix[4][7][3] =
      _mm256_add_pd(bezout.matrix[4][7][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[8][1]));
  bezout.matrix[4][7][4] =
      _mm256_add_pd(bezout.matrix[4][7][4],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[8][2]));
  bezout.matrix[4][7][3] =
      _mm256_add_pd(bezout.matrix[4][7][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[8][0]));
  bezout.matrix[4][7][4] =
      _mm256_add_pd(bezout.matrix[4][7][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[8][1]));
  bezout.matrix[4][7][5] =
      _mm256_add_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[8][2]));
  bezout.matrix[4][7][4] =
      _mm256_add_pd(bezout.matrix[4][7][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[8][0]));
  bezout.matrix[4][7][5] =
      _mm256_add_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[8][1]));
  bezout.matrix[4][7][6] =
      _mm256_add_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[8][2]));
  bezout.matrix[4][7][5] =
      _mm256_add_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[8][0]));
  bezout.matrix[4][7][6] =
      _mm256_add_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[8][1]));
  bezout.matrix[4][7][7] =
      _mm256_add_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[8][2]));
  bezout.matrix[4][7][6] =
      _mm256_add_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[8][0]));
  bezout.matrix[4][7][7] =
      _mm256_add_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[8][1]));
  bezout.matrix[4][7][8] =
      _mm256_add_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[8][2]));
  bezout.matrix[4][7][7] =
      _mm256_add_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[8][0]));
  bezout.matrix[4][7][8] =
      _mm256_add_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[8][1]));
  bezout.matrix[4][7][9] =
      _mm256_add_pd(bezout.matrix[4][7][9],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[8][2]));
  bezout.matrix[4][7][8] =
      _mm256_add_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[8][0]));
  bezout.matrix[4][7][9] =
      _mm256_add_pd(bezout.matrix[4][7][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[8][1]));
  bezout.matrix[4][7][10] =
      _mm256_add_pd(bezout.matrix[4][7][10],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[8][2]));
  bezout.matrix[4][7][9] =
      _mm256_add_pd(bezout.matrix[4][7][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[8][0]));
  bezout.matrix[4][7][10] =
      _mm256_add_pd(bezout.matrix[4][7][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[8][1]));
  bezout.matrix[4][7][11] =
      _mm256_add_pd(bezout.matrix[4][7][11],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[8][2]));
  bezout.matrix[4][7][10] =
      _mm256_add_pd(bezout.matrix[4][7][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[8][0]));
  bezout.matrix[4][7][11] =
      _mm256_add_pd(bezout.matrix[4][7][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[8][1]));
  bezout.matrix[4][7][12] =
      _mm256_add_pd(bezout.matrix[4][7][12],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[8][2]));
  bezout.matrix[4][7][11] =
      _mm256_add_pd(bezout.matrix[4][7][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[8][0]));
  bezout.matrix[4][7][12] =
      _mm256_add_pd(bezout.matrix[4][7][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[8][1]));
  bezout.matrix[4][7][13] =
      _mm256_add_pd(bezout.matrix[4][7][13],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[8][2]));
  bezout.matrix[4][7][0] =
      _mm256_sub_pd(bezout.matrix[4][7][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[4][0]));
  bezout.matrix[4][7][1] =
      _mm256_sub_pd(bezout.matrix[4][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[4][1]));
  bezout.matrix[4][7][2] =
      _mm256_sub_pd(bezout.matrix[4][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[4][2]));
  bezout.matrix[4][7][3] =
      _mm256_sub_pd(bezout.matrix[4][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[4][3]));
  bezout.matrix[4][7][4] =
      _mm256_sub_pd(bezout.matrix[4][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[4][4]));
  bezout.matrix[4][7][5] =
      _mm256_sub_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[4][5]));
  bezout.matrix[4][7][6] =
      _mm256_sub_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[4][6]));
  bezout.matrix[4][7][1] =
      _mm256_sub_pd(bezout.matrix[4][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[4][0]));
  bezout.matrix[4][7][2] =
      _mm256_sub_pd(bezout.matrix[4][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[4][1]));
  bezout.matrix[4][7][3] =
      _mm256_sub_pd(bezout.matrix[4][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[4][2]));
  bezout.matrix[4][7][4] =
      _mm256_sub_pd(bezout.matrix[4][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[4][3]));
  bezout.matrix[4][7][5] =
      _mm256_sub_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[4][4]));
  bezout.matrix[4][7][6] =
      _mm256_sub_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[4][5]));
  bezout.matrix[4][7][7] =
      _mm256_sub_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[4][6]));
  bezout.matrix[4][7][2] =
      _mm256_sub_pd(bezout.matrix[4][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[4][0]));
  bezout.matrix[4][7][3] =
      _mm256_sub_pd(bezout.matrix[4][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[4][1]));
  bezout.matrix[4][7][4] =
      _mm256_sub_pd(bezout.matrix[4][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[4][2]));
  bezout.matrix[4][7][5] =
      _mm256_sub_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[4][3]));
  bezout.matrix[4][7][6] =
      _mm256_sub_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[4][4]));
  bezout.matrix[4][7][7] =
      _mm256_sub_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[4][5]));
  bezout.matrix[4][7][8] =
      _mm256_sub_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[4][6]));
  bezout.matrix[4][7][3] =
      _mm256_sub_pd(bezout.matrix[4][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[4][0]));
  bezout.matrix[4][7][4] =
      _mm256_sub_pd(bezout.matrix[4][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[4][1]));
  bezout.matrix[4][7][5] =
      _mm256_sub_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[4][2]));
  bezout.matrix[4][7][6] =
      _mm256_sub_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[4][3]));
  bezout.matrix[4][7][7] =
      _mm256_sub_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[4][4]));
  bezout.matrix[4][7][8] =
      _mm256_sub_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[4][5]));
  bezout.matrix[4][7][9] =
      _mm256_sub_pd(bezout.matrix[4][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[4][6]));
  bezout.matrix[4][7][4] =
      _mm256_sub_pd(bezout.matrix[4][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[4][0]));
  bezout.matrix[4][7][5] =
      _mm256_sub_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[4][1]));
  bezout.matrix[4][7][6] =
      _mm256_sub_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[4][2]));
  bezout.matrix[4][7][7] =
      _mm256_sub_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[4][3]));
  bezout.matrix[4][7][8] =
      _mm256_sub_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[4][4]));
  bezout.matrix[4][7][9] =
      _mm256_sub_pd(bezout.matrix[4][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[4][5]));
  bezout.matrix[4][7][10] =
      _mm256_sub_pd(bezout.matrix[4][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[4][6]));
  bezout.matrix[4][7][5] =
      _mm256_sub_pd(bezout.matrix[4][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[4][0]));
  bezout.matrix[4][7][6] =
      _mm256_sub_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[4][1]));
  bezout.matrix[4][7][7] =
      _mm256_sub_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[4][2]));
  bezout.matrix[4][7][8] =
      _mm256_sub_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[4][3]));
  bezout.matrix[4][7][9] =
      _mm256_sub_pd(bezout.matrix[4][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[4][4]));
  bezout.matrix[4][7][10] =
      _mm256_sub_pd(bezout.matrix[4][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[4][5]));
  bezout.matrix[4][7][11] =
      _mm256_sub_pd(bezout.matrix[4][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[4][6]));
  bezout.matrix[4][7][6] =
      _mm256_sub_pd(bezout.matrix[4][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[4][0]));
  bezout.matrix[4][7][7] =
      _mm256_sub_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[4][1]));
  bezout.matrix[4][7][8] =
      _mm256_sub_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[4][2]));
  bezout.matrix[4][7][9] =
      _mm256_sub_pd(bezout.matrix[4][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[4][3]));
  bezout.matrix[4][7][10] =
      _mm256_sub_pd(bezout.matrix[4][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[4][4]));
  bezout.matrix[4][7][11] =
      _mm256_sub_pd(bezout.matrix[4][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[4][5]));
  bezout.matrix[4][7][12] =
      _mm256_sub_pd(bezout.matrix[4][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[4][6]));
  bezout.matrix[4][7][7] =
      _mm256_sub_pd(bezout.matrix[4][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[4][0]));
  bezout.matrix[4][7][8] =
      _mm256_sub_pd(bezout.matrix[4][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[4][1]));
  bezout.matrix[4][7][9] =
      _mm256_sub_pd(bezout.matrix[4][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[4][2]));
  bezout.matrix[4][7][10] =
      _mm256_sub_pd(bezout.matrix[4][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[4][3]));
  bezout.matrix[4][7][11] =
      _mm256_sub_pd(bezout.matrix[4][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[4][4]));
  bezout.matrix[4][7][12] =
      _mm256_sub_pd(bezout.matrix[4][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[4][5]));
  bezout.matrix[4][7][13] =
      _mm256_sub_pd(bezout.matrix[4][7][13],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[4][6]));
  bezout.matrix[4][8][0] =
      _mm256_add_pd(bezout.matrix[4][8][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[9][0]));
  bezout.matrix[4][8][1] =
      _mm256_add_pd(bezout.matrix[4][8][1],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[9][1]));
  bezout.matrix[4][8][1] =
      _mm256_add_pd(bezout.matrix[4][8][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[9][0]));
  bezout.matrix[4][8][2] =
      _mm256_add_pd(bezout.matrix[4][8][2],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[9][1]));
  bezout.matrix[4][8][2] =
      _mm256_add_pd(bezout.matrix[4][8][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[9][0]));
  bezout.matrix[4][8][3] =
      _mm256_add_pd(bezout.matrix[4][8][3],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[9][1]));
  bezout.matrix[4][8][3] =
      _mm256_add_pd(bezout.matrix[4][8][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[9][0]));
  bezout.matrix[4][8][4] =
      _mm256_add_pd(bezout.matrix[4][8][4],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[9][1]));
  bezout.matrix[4][8][4] =
      _mm256_add_pd(bezout.matrix[4][8][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[9][0]));
  bezout.matrix[4][8][5] =
      _mm256_add_pd(bezout.matrix[4][8][5],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[9][1]));
  bezout.matrix[4][8][5] =
      _mm256_add_pd(bezout.matrix[4][8][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[9][0]));
  bezout.matrix[4][8][6] =
      _mm256_add_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[9][1]));
  bezout.matrix[4][8][6] =
      _mm256_add_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[9][0]));
  bezout.matrix[4][8][7] =
      _mm256_add_pd(bezout.matrix[4][8][7],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[9][1]));
  bezout.matrix[4][8][7] =
      _mm256_add_pd(bezout.matrix[4][8][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[9][0]));
  bezout.matrix[4][8][8] =
      _mm256_add_pd(bezout.matrix[4][8][8],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[9][1]));
  bezout.matrix[4][8][8] =
      _mm256_add_pd(bezout.matrix[4][8][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[9][0]));
  bezout.matrix[4][8][9] =
      _mm256_add_pd(bezout.matrix[4][8][9],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[9][1]));
  bezout.matrix[4][8][9] =
      _mm256_add_pd(bezout.matrix[4][8][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[9][0]));
  bezout.matrix[4][8][10] =
      _mm256_add_pd(bezout.matrix[4][8][10],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[9][1]));
  bezout.matrix[4][8][10] =
      _mm256_add_pd(bezout.matrix[4][8][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[9][0]));
  bezout.matrix[4][8][11] =
      _mm256_add_pd(bezout.matrix[4][8][11],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[9][1]));
  bezout.matrix[4][8][11] =
      _mm256_add_pd(bezout.matrix[4][8][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[9][0]));
  bezout.matrix[4][8][12] =
      _mm256_add_pd(bezout.matrix[4][8][12],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[9][1]));
  bezout.matrix[4][8][0] =
      _mm256_sub_pd(bezout.matrix[4][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[4][0]));
  bezout.matrix[4][8][1] =
      _mm256_sub_pd(bezout.matrix[4][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[4][1]));
  bezout.matrix[4][8][2] =
      _mm256_sub_pd(bezout.matrix[4][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[4][2]));
  bezout.matrix[4][8][3] =
      _mm256_sub_pd(bezout.matrix[4][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[4][3]));
  bezout.matrix[4][8][4] =
      _mm256_sub_pd(bezout.matrix[4][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[4][4]));
  bezout.matrix[4][8][5] =
      _mm256_sub_pd(bezout.matrix[4][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[4][5]));
  bezout.matrix[4][8][6] =
      _mm256_sub_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[4][6]));
  bezout.matrix[4][8][1] =
      _mm256_sub_pd(bezout.matrix[4][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[4][0]));
  bezout.matrix[4][8][2] =
      _mm256_sub_pd(bezout.matrix[4][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[4][1]));
  bezout.matrix[4][8][3] =
      _mm256_sub_pd(bezout.matrix[4][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[4][2]));
  bezout.matrix[4][8][4] =
      _mm256_sub_pd(bezout.matrix[4][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[4][3]));
  bezout.matrix[4][8][5] =
      _mm256_sub_pd(bezout.matrix[4][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[4][4]));
  bezout.matrix[4][8][6] =
      _mm256_sub_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[4][5]));
  bezout.matrix[4][8][7] =
      _mm256_sub_pd(bezout.matrix[4][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[4][6]));
  bezout.matrix[4][8][2] =
      _mm256_sub_pd(bezout.matrix[4][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[4][0]));
  bezout.matrix[4][8][3] =
      _mm256_sub_pd(bezout.matrix[4][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[4][1]));
  bezout.matrix[4][8][4] =
      _mm256_sub_pd(bezout.matrix[4][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[4][2]));
  bezout.matrix[4][8][5] =
      _mm256_sub_pd(bezout.matrix[4][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[4][3]));
  bezout.matrix[4][8][6] =
      _mm256_sub_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[4][4]));
  bezout.matrix[4][8][7] =
      _mm256_sub_pd(bezout.matrix[4][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[4][5]));
  bezout.matrix[4][8][8] =
      _mm256_sub_pd(bezout.matrix[4][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[4][6]));
  bezout.matrix[4][8][3] =
      _mm256_sub_pd(bezout.matrix[4][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[4][0]));
  bezout.matrix[4][8][4] =
      _mm256_sub_pd(bezout.matrix[4][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[4][1]));
  bezout.matrix[4][8][5] =
      _mm256_sub_pd(bezout.matrix[4][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[4][2]));
  bezout.matrix[4][8][6] =
      _mm256_sub_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[4][3]));
  bezout.matrix[4][8][7] =
      _mm256_sub_pd(bezout.matrix[4][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[4][4]));
  bezout.matrix[4][8][8] =
      _mm256_sub_pd(bezout.matrix[4][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[4][5]));
  bezout.matrix[4][8][9] =
      _mm256_sub_pd(bezout.matrix[4][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[4][6]));
  bezout.matrix[4][8][4] =
      _mm256_sub_pd(bezout.matrix[4][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[4][0]));
  bezout.matrix[4][8][5] =
      _mm256_sub_pd(bezout.matrix[4][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[4][1]));
  bezout.matrix[4][8][6] =
      _mm256_sub_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[4][2]));
  bezout.matrix[4][8][7] =
      _mm256_sub_pd(bezout.matrix[4][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[4][3]));
  bezout.matrix[4][8][8] =
      _mm256_sub_pd(bezout.matrix[4][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[4][4]));
  bezout.matrix[4][8][9] =
      _mm256_sub_pd(bezout.matrix[4][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[4][5]));
  bezout.matrix[4][8][10] =
      _mm256_sub_pd(bezout.matrix[4][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[4][6]));
  bezout.matrix[4][8][5] =
      _mm256_sub_pd(bezout.matrix[4][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[4][0]));
  bezout.matrix[4][8][6] =
      _mm256_sub_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[4][1]));
  bezout.matrix[4][8][7] =
      _mm256_sub_pd(bezout.matrix[4][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[4][2]));
  bezout.matrix[4][8][8] =
      _mm256_sub_pd(bezout.matrix[4][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[4][3]));
  bezout.matrix[4][8][9] =
      _mm256_sub_pd(bezout.matrix[4][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[4][4]));
  bezout.matrix[4][8][10] =
      _mm256_sub_pd(bezout.matrix[4][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[4][5]));
  bezout.matrix[4][8][11] =
      _mm256_sub_pd(bezout.matrix[4][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[4][6]));
  bezout.matrix[4][8][6] =
      _mm256_sub_pd(bezout.matrix[4][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[4][0]));
  bezout.matrix[4][8][7] =
      _mm256_sub_pd(bezout.matrix[4][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[4][1]));
  bezout.matrix[4][8][8] =
      _mm256_sub_pd(bezout.matrix[4][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[4][2]));
  bezout.matrix[4][8][9] =
      _mm256_sub_pd(bezout.matrix[4][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[4][3]));
  bezout.matrix[4][8][10] =
      _mm256_sub_pd(bezout.matrix[4][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[4][4]));
  bezout.matrix[4][8][11] =
      _mm256_sub_pd(bezout.matrix[4][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[4][5]));
  bezout.matrix[4][8][12] =
      _mm256_sub_pd(bezout.matrix[4][8][12],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[4][6]));
  bezout.matrix[4][9][0] =
      _mm256_add_pd(bezout.matrix[4][9][0],
                    _mm256_mul_pd(poly1.coeffs[4][0], poly2.coeffs[10][0]));
  bezout.matrix[4][9][1] =
      _mm256_add_pd(bezout.matrix[4][9][1],
                    _mm256_mul_pd(poly1.coeffs[4][1], poly2.coeffs[10][0]));
  bezout.matrix[4][9][2] =
      _mm256_add_pd(bezout.matrix[4][9][2],
                    _mm256_mul_pd(poly1.coeffs[4][2], poly2.coeffs[10][0]));
  bezout.matrix[4][9][3] =
      _mm256_add_pd(bezout.matrix[4][9][3],
                    _mm256_mul_pd(poly1.coeffs[4][3], poly2.coeffs[10][0]));
  bezout.matrix[4][9][4] =
      _mm256_add_pd(bezout.matrix[4][9][4],
                    _mm256_mul_pd(poly1.coeffs[4][4], poly2.coeffs[10][0]));
  bezout.matrix[4][9][5] =
      _mm256_add_pd(bezout.matrix[4][9][5],
                    _mm256_mul_pd(poly1.coeffs[4][5], poly2.coeffs[10][0]));
  bezout.matrix[4][9][6] =
      _mm256_add_pd(bezout.matrix[4][9][6],
                    _mm256_mul_pd(poly1.coeffs[4][6], poly2.coeffs[10][0]));
  bezout.matrix[4][9][7] =
      _mm256_add_pd(bezout.matrix[4][9][7],
                    _mm256_mul_pd(poly1.coeffs[4][7], poly2.coeffs[10][0]));
  bezout.matrix[4][9][8] =
      _mm256_add_pd(bezout.matrix[4][9][8],
                    _mm256_mul_pd(poly1.coeffs[4][8], poly2.coeffs[10][0]));
  bezout.matrix[4][9][9] =
      _mm256_add_pd(bezout.matrix[4][9][9],
                    _mm256_mul_pd(poly1.coeffs[4][9], poly2.coeffs[10][0]));
  bezout.matrix[4][9][10] =
      _mm256_add_pd(bezout.matrix[4][9][10],
                    _mm256_mul_pd(poly1.coeffs[4][10], poly2.coeffs[10][0]));
  bezout.matrix[4][9][11] =
      _mm256_add_pd(bezout.matrix[4][9][11],
                    _mm256_mul_pd(poly1.coeffs[4][11], poly2.coeffs[10][0]));
  bezout.matrix[4][9][0] =
      _mm256_sub_pd(bezout.matrix[4][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[4][0]));
  bezout.matrix[4][9][1] =
      _mm256_sub_pd(bezout.matrix[4][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[4][1]));
  bezout.matrix[4][9][2] =
      _mm256_sub_pd(bezout.matrix[4][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[4][2]));
  bezout.matrix[4][9][3] =
      _mm256_sub_pd(bezout.matrix[4][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[4][3]));
  bezout.matrix[4][9][4] =
      _mm256_sub_pd(bezout.matrix[4][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[4][4]));
  bezout.matrix[4][9][5] =
      _mm256_sub_pd(bezout.matrix[4][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[4][5]));
  bezout.matrix[4][9][6] =
      _mm256_sub_pd(bezout.matrix[4][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[4][6]));
  bezout.matrix[4][9][1] =
      _mm256_sub_pd(bezout.matrix[4][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[4][0]));
  bezout.matrix[4][9][2] =
      _mm256_sub_pd(bezout.matrix[4][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[4][1]));
  bezout.matrix[4][9][3] =
      _mm256_sub_pd(bezout.matrix[4][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[4][2]));
  bezout.matrix[4][9][4] =
      _mm256_sub_pd(bezout.matrix[4][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[4][3]));
  bezout.matrix[4][9][5] =
      _mm256_sub_pd(bezout.matrix[4][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[4][4]));
  bezout.matrix[4][9][6] =
      _mm256_sub_pd(bezout.matrix[4][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[4][5]));
  bezout.matrix[4][9][7] =
      _mm256_sub_pd(bezout.matrix[4][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[4][6]));
  bezout.matrix[4][9][2] =
      _mm256_sub_pd(bezout.matrix[4][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[4][0]));
  bezout.matrix[4][9][3] =
      _mm256_sub_pd(bezout.matrix[4][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[4][1]));
  bezout.matrix[4][9][4] =
      _mm256_sub_pd(bezout.matrix[4][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[4][2]));
  bezout.matrix[4][9][5] =
      _mm256_sub_pd(bezout.matrix[4][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[4][3]));
  bezout.matrix[4][9][6] =
      _mm256_sub_pd(bezout.matrix[4][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[4][4]));
  bezout.matrix[4][9][7] =
      _mm256_sub_pd(bezout.matrix[4][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[4][5]));
  bezout.matrix[4][9][8] =
      _mm256_sub_pd(bezout.matrix[4][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[4][6]));
  bezout.matrix[4][9][3] =
      _mm256_sub_pd(bezout.matrix[4][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[4][0]));
  bezout.matrix[4][9][4] =
      _mm256_sub_pd(bezout.matrix[4][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[4][1]));
  bezout.matrix[4][9][5] =
      _mm256_sub_pd(bezout.matrix[4][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[4][2]));
  bezout.matrix[4][9][6] =
      _mm256_sub_pd(bezout.matrix[4][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[4][3]));
  bezout.matrix[4][9][7] =
      _mm256_sub_pd(bezout.matrix[4][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[4][4]));
  bezout.matrix[4][9][8] =
      _mm256_sub_pd(bezout.matrix[4][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[4][5]));
  bezout.matrix[4][9][9] =
      _mm256_sub_pd(bezout.matrix[4][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[4][6]));
  bezout.matrix[4][9][4] =
      _mm256_sub_pd(bezout.matrix[4][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[4][0]));
  bezout.matrix[4][9][5] =
      _mm256_sub_pd(bezout.matrix[4][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[4][1]));
  bezout.matrix[4][9][6] =
      _mm256_sub_pd(bezout.matrix[4][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[4][2]));
  bezout.matrix[4][9][7] =
      _mm256_sub_pd(bezout.matrix[4][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[4][3]));
  bezout.matrix[4][9][8] =
      _mm256_sub_pd(bezout.matrix[4][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[4][4]));
  bezout.matrix[4][9][9] =
      _mm256_sub_pd(bezout.matrix[4][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[4][5]));
  bezout.matrix[4][9][10] =
      _mm256_sub_pd(bezout.matrix[4][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[4][6]));
  bezout.matrix[4][9][5] =
      _mm256_sub_pd(bezout.matrix[4][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[4][0]));
  bezout.matrix[4][9][6] =
      _mm256_sub_pd(bezout.matrix[4][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[4][1]));
  bezout.matrix[4][9][7] =
      _mm256_sub_pd(bezout.matrix[4][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[4][2]));
  bezout.matrix[4][9][8] =
      _mm256_sub_pd(bezout.matrix[4][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[4][3]));
  bezout.matrix[4][9][9] =
      _mm256_sub_pd(bezout.matrix[4][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[4][4]));
  bezout.matrix[4][9][10] =
      _mm256_sub_pd(bezout.matrix[4][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[4][5]));
  bezout.matrix[4][9][11] =
      _mm256_sub_pd(bezout.matrix[4][9][11],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[4][6]));
  bezout.matrix[4][10][0] =
      _mm256_sub_pd(bezout.matrix[4][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[4][0]));
  bezout.matrix[4][10][1] =
      _mm256_sub_pd(bezout.matrix[4][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[4][1]));
  bezout.matrix[4][10][2] =
      _mm256_sub_pd(bezout.matrix[4][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[4][2]));
  bezout.matrix[4][10][3] =
      _mm256_sub_pd(bezout.matrix[4][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[4][3]));
  bezout.matrix[4][10][4] =
      _mm256_sub_pd(bezout.matrix[4][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[4][4]));
  bezout.matrix[4][10][5] =
      _mm256_sub_pd(bezout.matrix[4][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[4][5]));
  bezout.matrix[4][10][6] =
      _mm256_sub_pd(bezout.matrix[4][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[4][6]));
  bezout.matrix[4][10][1] =
      _mm256_sub_pd(bezout.matrix[4][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[4][0]));
  bezout.matrix[4][10][2] =
      _mm256_sub_pd(bezout.matrix[4][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[4][1]));
  bezout.matrix[4][10][3] =
      _mm256_sub_pd(bezout.matrix[4][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[4][2]));
  bezout.matrix[4][10][4] =
      _mm256_sub_pd(bezout.matrix[4][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[4][3]));
  bezout.matrix[4][10][5] =
      _mm256_sub_pd(bezout.matrix[4][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[4][4]));
  bezout.matrix[4][10][6] =
      _mm256_sub_pd(bezout.matrix[4][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[4][5]));
  bezout.matrix[4][10][7] =
      _mm256_sub_pd(bezout.matrix[4][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[4][6]));
  bezout.matrix[4][10][2] =
      _mm256_sub_pd(bezout.matrix[4][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[4][0]));
  bezout.matrix[4][10][3] =
      _mm256_sub_pd(bezout.matrix[4][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[4][1]));
  bezout.matrix[4][10][4] =
      _mm256_sub_pd(bezout.matrix[4][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[4][2]));
  bezout.matrix[4][10][5] =
      _mm256_sub_pd(bezout.matrix[4][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[4][3]));
  bezout.matrix[4][10][6] =
      _mm256_sub_pd(bezout.matrix[4][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[4][4]));
  bezout.matrix[4][10][7] =
      _mm256_sub_pd(bezout.matrix[4][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[4][5]));
  bezout.matrix[4][10][8] =
      _mm256_sub_pd(bezout.matrix[4][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[4][6]));
  bezout.matrix[4][10][3] =
      _mm256_sub_pd(bezout.matrix[4][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[4][0]));
  bezout.matrix[4][10][4] =
      _mm256_sub_pd(bezout.matrix[4][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[4][1]));
  bezout.matrix[4][10][5] =
      _mm256_sub_pd(bezout.matrix[4][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[4][2]));
  bezout.matrix[4][10][6] =
      _mm256_sub_pd(bezout.matrix[4][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[4][3]));
  bezout.matrix[4][10][7] =
      _mm256_sub_pd(bezout.matrix[4][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[4][4]));
  bezout.matrix[4][10][8] =
      _mm256_sub_pd(bezout.matrix[4][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[4][5]));
  bezout.matrix[4][10][9] =
      _mm256_sub_pd(bezout.matrix[4][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[4][6]));
  bezout.matrix[4][10][4] =
      _mm256_sub_pd(bezout.matrix[4][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[4][0]));
  bezout.matrix[4][10][5] =
      _mm256_sub_pd(bezout.matrix[4][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[4][1]));
  bezout.matrix[4][10][6] =
      _mm256_sub_pd(bezout.matrix[4][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[4][2]));
  bezout.matrix[4][10][7] =
      _mm256_sub_pd(bezout.matrix[4][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[4][3]));
  bezout.matrix[4][10][8] =
      _mm256_sub_pd(bezout.matrix[4][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[4][4]));
  bezout.matrix[4][10][9] =
      _mm256_sub_pd(bezout.matrix[4][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[4][5]));
  bezout.matrix[4][10][10] =
      _mm256_sub_pd(bezout.matrix[4][10][10],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[4][6]));
  bezout.matrix[4][11][0] =
      _mm256_sub_pd(bezout.matrix[4][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[4][0]));
  bezout.matrix[4][11][1] =
      _mm256_sub_pd(bezout.matrix[4][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[4][1]));
  bezout.matrix[4][11][2] =
      _mm256_sub_pd(bezout.matrix[4][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[4][2]));
  bezout.matrix[4][11][3] =
      _mm256_sub_pd(bezout.matrix[4][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[4][3]));
  bezout.matrix[4][11][4] =
      _mm256_sub_pd(bezout.matrix[4][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[4][4]));
  bezout.matrix[4][11][5] =
      _mm256_sub_pd(bezout.matrix[4][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[4][5]));
  bezout.matrix[4][11][6] =
      _mm256_sub_pd(bezout.matrix[4][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[4][6]));
  bezout.matrix[4][11][1] =
      _mm256_sub_pd(bezout.matrix[4][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[4][0]));
  bezout.matrix[4][11][2] =
      _mm256_sub_pd(bezout.matrix[4][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[4][1]));
  bezout.matrix[4][11][3] =
      _mm256_sub_pd(bezout.matrix[4][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[4][2]));
  bezout.matrix[4][11][4] =
      _mm256_sub_pd(bezout.matrix[4][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[4][3]));
  bezout.matrix[4][11][5] =
      _mm256_sub_pd(bezout.matrix[4][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[4][4]));
  bezout.matrix[4][11][6] =
      _mm256_sub_pd(bezout.matrix[4][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[4][5]));
  bezout.matrix[4][11][7] =
      _mm256_sub_pd(bezout.matrix[4][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[4][6]));
  bezout.matrix[4][11][2] =
      _mm256_sub_pd(bezout.matrix[4][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[4][0]));
  bezout.matrix[4][11][3] =
      _mm256_sub_pd(bezout.matrix[4][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[4][1]));
  bezout.matrix[4][11][4] =
      _mm256_sub_pd(bezout.matrix[4][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[4][2]));
  bezout.matrix[4][11][5] =
      _mm256_sub_pd(bezout.matrix[4][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[4][3]));
  bezout.matrix[4][11][6] =
      _mm256_sub_pd(bezout.matrix[4][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[4][4]));
  bezout.matrix[4][11][7] =
      _mm256_sub_pd(bezout.matrix[4][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[4][5]));
  bezout.matrix[4][11][8] =
      _mm256_sub_pd(bezout.matrix[4][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[4][6]));
  bezout.matrix[4][11][3] =
      _mm256_sub_pd(bezout.matrix[4][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[4][0]));
  bezout.matrix[4][11][4] =
      _mm256_sub_pd(bezout.matrix[4][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[4][1]));
  bezout.matrix[4][11][5] =
      _mm256_sub_pd(bezout.matrix[4][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[4][2]));
  bezout.matrix[4][11][6] =
      _mm256_sub_pd(bezout.matrix[4][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[4][3]));
  bezout.matrix[4][11][7] =
      _mm256_sub_pd(bezout.matrix[4][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[4][4]));
  bezout.matrix[4][11][8] =
      _mm256_sub_pd(bezout.matrix[4][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[4][5]));
  bezout.matrix[4][11][9] =
      _mm256_sub_pd(bezout.matrix[4][11][9],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[4][6]));
  bezout.matrix[4][12][0] =
      _mm256_sub_pd(bezout.matrix[4][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[4][0]));
  bezout.matrix[4][12][1] =
      _mm256_sub_pd(bezout.matrix[4][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[4][1]));
  bezout.matrix[4][12][2] =
      _mm256_sub_pd(bezout.matrix[4][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[4][2]));
  bezout.matrix[4][12][3] =
      _mm256_sub_pd(bezout.matrix[4][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[4][3]));
  bezout.matrix[4][12][4] =
      _mm256_sub_pd(bezout.matrix[4][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[4][4]));
  bezout.matrix[4][12][5] =
      _mm256_sub_pd(bezout.matrix[4][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[4][5]));
  bezout.matrix[4][12][6] =
      _mm256_sub_pd(bezout.matrix[4][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[4][6]));
  bezout.matrix[4][12][1] =
      _mm256_sub_pd(bezout.matrix[4][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[4][0]));
  bezout.matrix[4][12][2] =
      _mm256_sub_pd(bezout.matrix[4][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[4][1]));
  bezout.matrix[4][12][3] =
      _mm256_sub_pd(bezout.matrix[4][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[4][2]));
  bezout.matrix[4][12][4] =
      _mm256_sub_pd(bezout.matrix[4][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[4][3]));
  bezout.matrix[4][12][5] =
      _mm256_sub_pd(bezout.matrix[4][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[4][4]));
  bezout.matrix[4][12][6] =
      _mm256_sub_pd(bezout.matrix[4][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[4][5]));
  bezout.matrix[4][12][7] =
      _mm256_sub_pd(bezout.matrix[4][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[4][6]));
  bezout.matrix[4][12][2] =
      _mm256_sub_pd(bezout.matrix[4][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[4][0]));
  bezout.matrix[4][12][3] =
      _mm256_sub_pd(bezout.matrix[4][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[4][1]));
  bezout.matrix[4][12][4] =
      _mm256_sub_pd(bezout.matrix[4][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[4][2]));
  bezout.matrix[4][12][5] =
      _mm256_sub_pd(bezout.matrix[4][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[4][3]));
  bezout.matrix[4][12][6] =
      _mm256_sub_pd(bezout.matrix[4][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[4][4]));
  bezout.matrix[4][12][7] =
      _mm256_sub_pd(bezout.matrix[4][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[4][5]));
  bezout.matrix[4][12][8] =
      _mm256_sub_pd(bezout.matrix[4][12][8],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[4][6]));
  bezout.matrix[4][13][0] =
      _mm256_sub_pd(bezout.matrix[4][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[4][0]));
  bezout.matrix[4][13][1] =
      _mm256_sub_pd(bezout.matrix[4][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[4][1]));
  bezout.matrix[4][13][2] =
      _mm256_sub_pd(bezout.matrix[4][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[4][2]));
  bezout.matrix[4][13][3] =
      _mm256_sub_pd(bezout.matrix[4][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[4][3]));
  bezout.matrix[4][13][4] =
      _mm256_sub_pd(bezout.matrix[4][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[4][4]));
  bezout.matrix[4][13][5] =
      _mm256_sub_pd(bezout.matrix[4][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[4][5]));
  bezout.matrix[4][13][6] =
      _mm256_sub_pd(bezout.matrix[4][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[4][6]));
  bezout.matrix[4][13][1] =
      _mm256_sub_pd(bezout.matrix[4][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[4][0]));
  bezout.matrix[4][13][2] =
      _mm256_sub_pd(bezout.matrix[4][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[4][1]));
  bezout.matrix[4][13][3] =
      _mm256_sub_pd(bezout.matrix[4][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[4][2]));
  bezout.matrix[4][13][4] =
      _mm256_sub_pd(bezout.matrix[4][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[4][3]));
  bezout.matrix[4][13][5] =
      _mm256_sub_pd(bezout.matrix[4][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[4][4]));
  bezout.matrix[4][13][6] =
      _mm256_sub_pd(bezout.matrix[4][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[4][5]));
  bezout.matrix[4][13][7] =
      _mm256_sub_pd(bezout.matrix[4][13][7],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[4][6]));
  bezout.matrix[4][14][0] =
      _mm256_sub_pd(bezout.matrix[4][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[4][0]));
  bezout.matrix[4][14][1] =
      _mm256_sub_pd(bezout.matrix[4][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[4][1]));
  bezout.matrix[4][14][2] =
      _mm256_sub_pd(bezout.matrix[4][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[4][2]));
  bezout.matrix[4][14][3] =
      _mm256_sub_pd(bezout.matrix[4][14][3],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[4][3]));
  bezout.matrix[4][14][4] =
      _mm256_sub_pd(bezout.matrix[4][14][4],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[4][4]));
  bezout.matrix[4][14][5] =
      _mm256_sub_pd(bezout.matrix[4][14][5],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[4][5]));
  bezout.matrix[4][14][6] =
      _mm256_sub_pd(bezout.matrix[4][14][6],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[4][6]));
  bezout.matrix[5][5][0] =
      _mm256_add_pd(bezout.matrix[5][5][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[6][0]));
  bezout.matrix[5][5][1] =
      _mm256_add_pd(bezout.matrix[5][5][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[6][1]));
  bezout.matrix[5][5][2] =
      _mm256_add_pd(bezout.matrix[5][5][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[6][2]));
  bezout.matrix[5][5][3] =
      _mm256_add_pd(bezout.matrix[5][5][3],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[6][3]));
  bezout.matrix[5][5][4] =
      _mm256_add_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[6][4]));
  bezout.matrix[5][5][1] =
      _mm256_add_pd(bezout.matrix[5][5][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[6][0]));
  bezout.matrix[5][5][2] =
      _mm256_add_pd(bezout.matrix[5][5][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[6][1]));
  bezout.matrix[5][5][3] =
      _mm256_add_pd(bezout.matrix[5][5][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[6][2]));
  bezout.matrix[5][5][4] =
      _mm256_add_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[6][3]));
  bezout.matrix[5][5][5] =
      _mm256_add_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[6][4]));
  bezout.matrix[5][5][2] =
      _mm256_add_pd(bezout.matrix[5][5][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[6][0]));
  bezout.matrix[5][5][3] =
      _mm256_add_pd(bezout.matrix[5][5][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[6][1]));
  bezout.matrix[5][5][4] =
      _mm256_add_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[6][2]));
  bezout.matrix[5][5][5] =
      _mm256_add_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[6][3]));
  bezout.matrix[5][5][6] =
      _mm256_add_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[6][4]));
  bezout.matrix[5][5][3] =
      _mm256_add_pd(bezout.matrix[5][5][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[6][0]));
  bezout.matrix[5][5][4] =
      _mm256_add_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[6][1]));
  bezout.matrix[5][5][5] =
      _mm256_add_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[6][2]));
  bezout.matrix[5][5][6] =
      _mm256_add_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[6][3]));
  bezout.matrix[5][5][7] =
      _mm256_add_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[6][4]));
  bezout.matrix[5][5][4] =
      _mm256_add_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[6][0]));
  bezout.matrix[5][5][5] =
      _mm256_add_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[6][1]));
  bezout.matrix[5][5][6] =
      _mm256_add_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[6][2]));
  bezout.matrix[5][5][7] =
      _mm256_add_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[6][3]));
  bezout.matrix[5][5][8] =
      _mm256_add_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[6][4]));
  bezout.matrix[5][5][5] =
      _mm256_add_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[6][0]));
  bezout.matrix[5][5][6] =
      _mm256_add_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[6][1]));
  bezout.matrix[5][5][7] =
      _mm256_add_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[6][2]));
  bezout.matrix[5][5][8] =
      _mm256_add_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[6][3]));
  bezout.matrix[5][5][9] =
      _mm256_add_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[6][4]));
  bezout.matrix[5][5][6] =
      _mm256_add_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[6][0]));
  bezout.matrix[5][5][7] =
      _mm256_add_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[6][1]));
  bezout.matrix[5][5][8] =
      _mm256_add_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[6][2]));
  bezout.matrix[5][5][9] =
      _mm256_add_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[6][3]));
  bezout.matrix[5][5][10] =
      _mm256_add_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[6][4]));
  bezout.matrix[5][5][7] =
      _mm256_add_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[6][0]));
  bezout.matrix[5][5][8] =
      _mm256_add_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[6][1]));
  bezout.matrix[5][5][9] =
      _mm256_add_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[6][2]));
  bezout.matrix[5][5][10] =
      _mm256_add_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[6][3]));
  bezout.matrix[5][5][11] =
      _mm256_add_pd(bezout.matrix[5][5][11],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[6][4]));
  bezout.matrix[5][5][8] =
      _mm256_add_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[6][0]));
  bezout.matrix[5][5][9] =
      _mm256_add_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[6][1]));
  bezout.matrix[5][5][10] =
      _mm256_add_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[6][2]));
  bezout.matrix[5][5][11] =
      _mm256_add_pd(bezout.matrix[5][5][11],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[6][3]));
  bezout.matrix[5][5][12] =
      _mm256_add_pd(bezout.matrix[5][5][12],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[6][4]));
  bezout.matrix[5][5][9] =
      _mm256_add_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[6][0]));
  bezout.matrix[5][5][10] =
      _mm256_add_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[6][1]));
  bezout.matrix[5][5][11] =
      _mm256_add_pd(bezout.matrix[5][5][11],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[6][2]));
  bezout.matrix[5][5][12] =
      _mm256_add_pd(bezout.matrix[5][5][12],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[6][3]));
  bezout.matrix[5][5][13] =
      _mm256_add_pd(bezout.matrix[5][5][13],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[6][4]));
  bezout.matrix[5][5][10] =
      _mm256_add_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[6][0]));
  bezout.matrix[5][5][11] =
      _mm256_add_pd(bezout.matrix[5][5][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[6][1]));
  bezout.matrix[5][5][12] =
      _mm256_add_pd(bezout.matrix[5][5][12],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[6][2]));
  bezout.matrix[5][5][13] =
      _mm256_add_pd(bezout.matrix[5][5][13],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[6][3]));
  bezout.matrix[5][5][14] =
      _mm256_add_pd(bezout.matrix[5][5][14],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[6][4]));
  bezout.matrix[5][5][0] =
      _mm256_sub_pd(bezout.matrix[5][5][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[5][0]));
  bezout.matrix[5][5][1] =
      _mm256_sub_pd(bezout.matrix[5][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[5][1]));
  bezout.matrix[5][5][2] =
      _mm256_sub_pd(bezout.matrix[5][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[5][2]));
  bezout.matrix[5][5][3] =
      _mm256_sub_pd(bezout.matrix[5][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[5][3]));
  bezout.matrix[5][5][4] =
      _mm256_sub_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[5][4]));
  bezout.matrix[5][5][5] =
      _mm256_sub_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[5][5]));
  bezout.matrix[5][5][1] =
      _mm256_sub_pd(bezout.matrix[5][5][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[5][0]));
  bezout.matrix[5][5][2] =
      _mm256_sub_pd(bezout.matrix[5][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[5][1]));
  bezout.matrix[5][5][3] =
      _mm256_sub_pd(bezout.matrix[5][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[5][2]));
  bezout.matrix[5][5][4] =
      _mm256_sub_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[5][3]));
  bezout.matrix[5][5][5] =
      _mm256_sub_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[5][4]));
  bezout.matrix[5][5][6] =
      _mm256_sub_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[5][5]));
  bezout.matrix[5][5][2] =
      _mm256_sub_pd(bezout.matrix[5][5][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[5][0]));
  bezout.matrix[5][5][3] =
      _mm256_sub_pd(bezout.matrix[5][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[5][1]));
  bezout.matrix[5][5][4] =
      _mm256_sub_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[5][2]));
  bezout.matrix[5][5][5] =
      _mm256_sub_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[5][3]));
  bezout.matrix[5][5][6] =
      _mm256_sub_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[5][4]));
  bezout.matrix[5][5][7] =
      _mm256_sub_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[5][5]));
  bezout.matrix[5][5][3] =
      _mm256_sub_pd(bezout.matrix[5][5][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[5][0]));
  bezout.matrix[5][5][4] =
      _mm256_sub_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[5][1]));
  bezout.matrix[5][5][5] =
      _mm256_sub_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[5][2]));
  bezout.matrix[5][5][6] =
      _mm256_sub_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[5][3]));
  bezout.matrix[5][5][7] =
      _mm256_sub_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[5][4]));
  bezout.matrix[5][5][8] =
      _mm256_sub_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[5][5]));
  bezout.matrix[5][5][4] =
      _mm256_sub_pd(bezout.matrix[5][5][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[5][0]));
  bezout.matrix[5][5][5] =
      _mm256_sub_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[5][1]));
  bezout.matrix[5][5][6] =
      _mm256_sub_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[5][2]));
  bezout.matrix[5][5][7] =
      _mm256_sub_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[5][3]));
  bezout.matrix[5][5][8] =
      _mm256_sub_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[5][4]));
  bezout.matrix[5][5][9] =
      _mm256_sub_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[5][5]));
  bezout.matrix[5][5][5] =
      _mm256_sub_pd(bezout.matrix[5][5][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[5][0]));
  bezout.matrix[5][5][6] =
      _mm256_sub_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[5][1]));
  bezout.matrix[5][5][7] =
      _mm256_sub_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[5][2]));
  bezout.matrix[5][5][8] =
      _mm256_sub_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[5][3]));
  bezout.matrix[5][5][9] =
      _mm256_sub_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[5][4]));
  bezout.matrix[5][5][10] =
      _mm256_sub_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[5][5]));
  bezout.matrix[5][5][6] =
      _mm256_sub_pd(bezout.matrix[5][5][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[5][0]));
  bezout.matrix[5][5][7] =
      _mm256_sub_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[5][1]));
  bezout.matrix[5][5][8] =
      _mm256_sub_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[5][2]));
  bezout.matrix[5][5][9] =
      _mm256_sub_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[5][3]));
  bezout.matrix[5][5][10] =
      _mm256_sub_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[5][4]));
  bezout.matrix[5][5][11] =
      _mm256_sub_pd(bezout.matrix[5][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[5][5]));
  bezout.matrix[5][5][7] =
      _mm256_sub_pd(bezout.matrix[5][5][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[5][0]));
  bezout.matrix[5][5][8] =
      _mm256_sub_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[5][1]));
  bezout.matrix[5][5][9] =
      _mm256_sub_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[5][2]));
  bezout.matrix[5][5][10] =
      _mm256_sub_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[5][3]));
  bezout.matrix[5][5][11] =
      _mm256_sub_pd(bezout.matrix[5][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[5][4]));
  bezout.matrix[5][5][12] =
      _mm256_sub_pd(bezout.matrix[5][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[5][5]));
  bezout.matrix[5][5][8] =
      _mm256_sub_pd(bezout.matrix[5][5][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[5][0]));
  bezout.matrix[5][5][9] =
      _mm256_sub_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[5][1]));
  bezout.matrix[5][5][10] =
      _mm256_sub_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[5][2]));
  bezout.matrix[5][5][11] =
      _mm256_sub_pd(bezout.matrix[5][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[5][3]));
  bezout.matrix[5][5][12] =
      _mm256_sub_pd(bezout.matrix[5][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[5][4]));
  bezout.matrix[5][5][13] =
      _mm256_sub_pd(bezout.matrix[5][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[5][5]));
  bezout.matrix[5][5][9] =
      _mm256_sub_pd(bezout.matrix[5][5][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[5][0]));
  bezout.matrix[5][5][10] =
      _mm256_sub_pd(bezout.matrix[5][5][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[5][1]));
  bezout.matrix[5][5][11] =
      _mm256_sub_pd(bezout.matrix[5][5][11],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[5][2]));
  bezout.matrix[5][5][12] =
      _mm256_sub_pd(bezout.matrix[5][5][12],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[5][3]));
  bezout.matrix[5][5][13] =
      _mm256_sub_pd(bezout.matrix[5][5][13],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[5][4]));
  bezout.matrix[5][5][14] =
      _mm256_sub_pd(bezout.matrix[5][5][14],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[5][5]));
  bezout.matrix[5][6][0] =
      _mm256_add_pd(bezout.matrix[5][6][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[7][0]));
  bezout.matrix[5][6][1] =
      _mm256_add_pd(bezout.matrix[5][6][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[7][1]));
  bezout.matrix[5][6][2] =
      _mm256_add_pd(bezout.matrix[5][6][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[7][2]));
  bezout.matrix[5][6][3] =
      _mm256_add_pd(bezout.matrix[5][6][3],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[7][3]));
  bezout.matrix[5][6][1] =
      _mm256_add_pd(bezout.matrix[5][6][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[7][0]));
  bezout.matrix[5][6][2] =
      _mm256_add_pd(bezout.matrix[5][6][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[7][1]));
  bezout.matrix[5][6][3] =
      _mm256_add_pd(bezout.matrix[5][6][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[7][2]));
  bezout.matrix[5][6][4] =
      _mm256_add_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[7][3]));
  bezout.matrix[5][6][2] =
      _mm256_add_pd(bezout.matrix[5][6][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[7][0]));
  bezout.matrix[5][6][3] =
      _mm256_add_pd(bezout.matrix[5][6][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[7][1]));
  bezout.matrix[5][6][4] =
      _mm256_add_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[7][2]));
  bezout.matrix[5][6][5] =
      _mm256_add_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[7][3]));
  bezout.matrix[5][6][3] =
      _mm256_add_pd(bezout.matrix[5][6][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[7][0]));
  bezout.matrix[5][6][4] =
      _mm256_add_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[7][1]));
  bezout.matrix[5][6][5] =
      _mm256_add_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[7][2]));
  bezout.matrix[5][6][6] =
      _mm256_add_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[7][3]));
  bezout.matrix[5][6][4] =
      _mm256_add_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[7][0]));
  bezout.matrix[5][6][5] =
      _mm256_add_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[7][1]));
  bezout.matrix[5][6][6] =
      _mm256_add_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[7][2]));
  bezout.matrix[5][6][7] =
      _mm256_add_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[7][3]));
  bezout.matrix[5][6][5] =
      _mm256_add_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[7][0]));
  bezout.matrix[5][6][6] =
      _mm256_add_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[7][1]));
  bezout.matrix[5][6][7] =
      _mm256_add_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[7][2]));
  bezout.matrix[5][6][8] =
      _mm256_add_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[7][3]));
  bezout.matrix[5][6][6] =
      _mm256_add_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[7][0]));
  bezout.matrix[5][6][7] =
      _mm256_add_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[7][1]));
  bezout.matrix[5][6][8] =
      _mm256_add_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[7][2]));
  bezout.matrix[5][6][9] =
      _mm256_add_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[7][3]));
  bezout.matrix[5][6][7] =
      _mm256_add_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[7][0]));
  bezout.matrix[5][6][8] =
      _mm256_add_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[7][1]));
  bezout.matrix[5][6][9] =
      _mm256_add_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[7][2]));
  bezout.matrix[5][6][10] =
      _mm256_add_pd(bezout.matrix[5][6][10],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[7][3]));
  bezout.matrix[5][6][8] =
      _mm256_add_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[7][0]));
  bezout.matrix[5][6][9] =
      _mm256_add_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[7][1]));
  bezout.matrix[5][6][10] =
      _mm256_add_pd(bezout.matrix[5][6][10],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[7][2]));
  bezout.matrix[5][6][11] =
      _mm256_add_pd(bezout.matrix[5][6][11],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[7][3]));
  bezout.matrix[5][6][9] =
      _mm256_add_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[7][0]));
  bezout.matrix[5][6][10] =
      _mm256_add_pd(bezout.matrix[5][6][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[7][1]));
  bezout.matrix[5][6][11] =
      _mm256_add_pd(bezout.matrix[5][6][11],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[7][2]));
  bezout.matrix[5][6][12] =
      _mm256_add_pd(bezout.matrix[5][6][12],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[7][3]));
  bezout.matrix[5][6][10] =
      _mm256_add_pd(bezout.matrix[5][6][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[7][0]));
  bezout.matrix[5][6][11] =
      _mm256_add_pd(bezout.matrix[5][6][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[7][1]));
  bezout.matrix[5][6][12] =
      _mm256_add_pd(bezout.matrix[5][6][12],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[7][2]));
  bezout.matrix[5][6][13] =
      _mm256_add_pd(bezout.matrix[5][6][13],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[7][3]));
  bezout.matrix[5][6][0] =
      _mm256_sub_pd(bezout.matrix[5][6][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[5][0]));
  bezout.matrix[5][6][1] =
      _mm256_sub_pd(bezout.matrix[5][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[5][1]));
  bezout.matrix[5][6][2] =
      _mm256_sub_pd(bezout.matrix[5][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[5][2]));
  bezout.matrix[5][6][3] =
      _mm256_sub_pd(bezout.matrix[5][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[5][3]));
  bezout.matrix[5][6][4] =
      _mm256_sub_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[5][4]));
  bezout.matrix[5][6][5] =
      _mm256_sub_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[5][5]));
  bezout.matrix[5][6][1] =
      _mm256_sub_pd(bezout.matrix[5][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[5][0]));
  bezout.matrix[5][6][2] =
      _mm256_sub_pd(bezout.matrix[5][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[5][1]));
  bezout.matrix[5][6][3] =
      _mm256_sub_pd(bezout.matrix[5][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[5][2]));
  bezout.matrix[5][6][4] =
      _mm256_sub_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[5][3]));
  bezout.matrix[5][6][5] =
      _mm256_sub_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[5][4]));
  bezout.matrix[5][6][6] =
      _mm256_sub_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[5][5]));
  bezout.matrix[5][6][2] =
      _mm256_sub_pd(bezout.matrix[5][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[5][0]));
  bezout.matrix[5][6][3] =
      _mm256_sub_pd(bezout.matrix[5][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[5][1]));
  bezout.matrix[5][6][4] =
      _mm256_sub_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[5][2]));
  bezout.matrix[5][6][5] =
      _mm256_sub_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[5][3]));
  bezout.matrix[5][6][6] =
      _mm256_sub_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[5][4]));
  bezout.matrix[5][6][7] =
      _mm256_sub_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[5][5]));
  bezout.matrix[5][6][3] =
      _mm256_sub_pd(bezout.matrix[5][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[5][0]));
  bezout.matrix[5][6][4] =
      _mm256_sub_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[5][1]));
  bezout.matrix[5][6][5] =
      _mm256_sub_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[5][2]));
  bezout.matrix[5][6][6] =
      _mm256_sub_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[5][3]));
  bezout.matrix[5][6][7] =
      _mm256_sub_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[5][4]));
  bezout.matrix[5][6][8] =
      _mm256_sub_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[5][5]));
  bezout.matrix[5][6][4] =
      _mm256_sub_pd(bezout.matrix[5][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[5][0]));
  bezout.matrix[5][6][5] =
      _mm256_sub_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[5][1]));
  bezout.matrix[5][6][6] =
      _mm256_sub_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[5][2]));
  bezout.matrix[5][6][7] =
      _mm256_sub_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[5][3]));
  bezout.matrix[5][6][8] =
      _mm256_sub_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[5][4]));
  bezout.matrix[5][6][9] =
      _mm256_sub_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[5][5]));
  bezout.matrix[5][6][5] =
      _mm256_sub_pd(bezout.matrix[5][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[5][0]));
  bezout.matrix[5][6][6] =
      _mm256_sub_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[5][1]));
  bezout.matrix[5][6][7] =
      _mm256_sub_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[5][2]));
  bezout.matrix[5][6][8] =
      _mm256_sub_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[5][3]));
  bezout.matrix[5][6][9] =
      _mm256_sub_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[5][4]));
  bezout.matrix[5][6][10] =
      _mm256_sub_pd(bezout.matrix[5][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[5][5]));
  bezout.matrix[5][6][6] =
      _mm256_sub_pd(bezout.matrix[5][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[5][0]));
  bezout.matrix[5][6][7] =
      _mm256_sub_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[5][1]));
  bezout.matrix[5][6][8] =
      _mm256_sub_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[5][2]));
  bezout.matrix[5][6][9] =
      _mm256_sub_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[5][3]));
  bezout.matrix[5][6][10] =
      _mm256_sub_pd(bezout.matrix[5][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[5][4]));
  bezout.matrix[5][6][11] =
      _mm256_sub_pd(bezout.matrix[5][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[5][5]));
  bezout.matrix[5][6][7] =
      _mm256_sub_pd(bezout.matrix[5][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[5][0]));
  bezout.matrix[5][6][8] =
      _mm256_sub_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[5][1]));
  bezout.matrix[5][6][9] =
      _mm256_sub_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[5][2]));
  bezout.matrix[5][6][10] =
      _mm256_sub_pd(bezout.matrix[5][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[5][3]));
  bezout.matrix[5][6][11] =
      _mm256_sub_pd(bezout.matrix[5][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[5][4]));
  bezout.matrix[5][6][12] =
      _mm256_sub_pd(bezout.matrix[5][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[5][5]));
  bezout.matrix[5][6][8] =
      _mm256_sub_pd(bezout.matrix[5][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[5][0]));
  bezout.matrix[5][6][9] =
      _mm256_sub_pd(bezout.matrix[5][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[5][1]));
  bezout.matrix[5][6][10] =
      _mm256_sub_pd(bezout.matrix[5][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[5][2]));
  bezout.matrix[5][6][11] =
      _mm256_sub_pd(bezout.matrix[5][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[5][3]));
  bezout.matrix[5][6][12] =
      _mm256_sub_pd(bezout.matrix[5][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[5][4]));
  bezout.matrix[5][6][13] =
      _mm256_sub_pd(bezout.matrix[5][6][13],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[5][5]));
  bezout.matrix[5][7][0] =
      _mm256_add_pd(bezout.matrix[5][7][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[8][0]));
  bezout.matrix[5][7][1] =
      _mm256_add_pd(bezout.matrix[5][7][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[8][1]));
  bezout.matrix[5][7][2] =
      _mm256_add_pd(bezout.matrix[5][7][2],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[8][2]));
  bezout.matrix[5][7][1] =
      _mm256_add_pd(bezout.matrix[5][7][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[8][0]));
  bezout.matrix[5][7][2] =
      _mm256_add_pd(bezout.matrix[5][7][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[8][1]));
  bezout.matrix[5][7][3] =
      _mm256_add_pd(bezout.matrix[5][7][3],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[8][2]));
  bezout.matrix[5][7][2] =
      _mm256_add_pd(bezout.matrix[5][7][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[8][0]));
  bezout.matrix[5][7][3] =
      _mm256_add_pd(bezout.matrix[5][7][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[8][1]));
  bezout.matrix[5][7][4] =
      _mm256_add_pd(bezout.matrix[5][7][4],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[8][2]));
  bezout.matrix[5][7][3] =
      _mm256_add_pd(bezout.matrix[5][7][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[8][0]));
  bezout.matrix[5][7][4] =
      _mm256_add_pd(bezout.matrix[5][7][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[8][1]));
  bezout.matrix[5][7][5] =
      _mm256_add_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[8][2]));
  bezout.matrix[5][7][4] =
      _mm256_add_pd(bezout.matrix[5][7][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[8][0]));
  bezout.matrix[5][7][5] =
      _mm256_add_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[8][1]));
  bezout.matrix[5][7][6] =
      _mm256_add_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[8][2]));
  bezout.matrix[5][7][5] =
      _mm256_add_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[8][0]));
  bezout.matrix[5][7][6] =
      _mm256_add_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[8][1]));
  bezout.matrix[5][7][7] =
      _mm256_add_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[8][2]));
  bezout.matrix[5][7][6] =
      _mm256_add_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[8][0]));
  bezout.matrix[5][7][7] =
      _mm256_add_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[8][1]));
  bezout.matrix[5][7][8] =
      _mm256_add_pd(bezout.matrix[5][7][8],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[8][2]));
  bezout.matrix[5][7][7] =
      _mm256_add_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[8][0]));
  bezout.matrix[5][7][8] =
      _mm256_add_pd(bezout.matrix[5][7][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[8][1]));
  bezout.matrix[5][7][9] =
      _mm256_add_pd(bezout.matrix[5][7][9],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[8][2]));
  bezout.matrix[5][7][8] =
      _mm256_add_pd(bezout.matrix[5][7][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[8][0]));
  bezout.matrix[5][7][9] =
      _mm256_add_pd(bezout.matrix[5][7][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[8][1]));
  bezout.matrix[5][7][10] =
      _mm256_add_pd(bezout.matrix[5][7][10],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[8][2]));
  bezout.matrix[5][7][9] =
      _mm256_add_pd(bezout.matrix[5][7][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[8][0]));
  bezout.matrix[5][7][10] =
      _mm256_add_pd(bezout.matrix[5][7][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[8][1]));
  bezout.matrix[5][7][11] =
      _mm256_add_pd(bezout.matrix[5][7][11],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[8][2]));
  bezout.matrix[5][7][10] =
      _mm256_add_pd(bezout.matrix[5][7][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[8][0]));
  bezout.matrix[5][7][11] =
      _mm256_add_pd(bezout.matrix[5][7][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[8][1]));
  bezout.matrix[5][7][12] =
      _mm256_add_pd(bezout.matrix[5][7][12],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[8][2]));
  bezout.matrix[5][7][0] =
      _mm256_sub_pd(bezout.matrix[5][7][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[5][0]));
  bezout.matrix[5][7][1] =
      _mm256_sub_pd(bezout.matrix[5][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[5][1]));
  bezout.matrix[5][7][2] =
      _mm256_sub_pd(bezout.matrix[5][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[5][2]));
  bezout.matrix[5][7][3] =
      _mm256_sub_pd(bezout.matrix[5][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[5][3]));
  bezout.matrix[5][7][4] =
      _mm256_sub_pd(bezout.matrix[5][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[5][4]));
  bezout.matrix[5][7][5] =
      _mm256_sub_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[5][5]));
  bezout.matrix[5][7][1] =
      _mm256_sub_pd(bezout.matrix[5][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[5][0]));
  bezout.matrix[5][7][2] =
      _mm256_sub_pd(bezout.matrix[5][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[5][1]));
  bezout.matrix[5][7][3] =
      _mm256_sub_pd(bezout.matrix[5][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[5][2]));
  bezout.matrix[5][7][4] =
      _mm256_sub_pd(bezout.matrix[5][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[5][3]));
  bezout.matrix[5][7][5] =
      _mm256_sub_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[5][4]));
  bezout.matrix[5][7][6] =
      _mm256_sub_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[5][5]));
  bezout.matrix[5][7][2] =
      _mm256_sub_pd(bezout.matrix[5][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[5][0]));
  bezout.matrix[5][7][3] =
      _mm256_sub_pd(bezout.matrix[5][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[5][1]));
  bezout.matrix[5][7][4] =
      _mm256_sub_pd(bezout.matrix[5][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[5][2]));
  bezout.matrix[5][7][5] =
      _mm256_sub_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[5][3]));
  bezout.matrix[5][7][6] =
      _mm256_sub_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[5][4]));
  bezout.matrix[5][7][7] =
      _mm256_sub_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[5][5]));
  bezout.matrix[5][7][3] =
      _mm256_sub_pd(bezout.matrix[5][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[5][0]));
  bezout.matrix[5][7][4] =
      _mm256_sub_pd(bezout.matrix[5][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[5][1]));
  bezout.matrix[5][7][5] =
      _mm256_sub_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[5][2]));
  bezout.matrix[5][7][6] =
      _mm256_sub_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[5][3]));
  bezout.matrix[5][7][7] =
      _mm256_sub_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[5][4]));
  bezout.matrix[5][7][8] =
      _mm256_sub_pd(bezout.matrix[5][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[5][5]));
  bezout.matrix[5][7][4] =
      _mm256_sub_pd(bezout.matrix[5][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[5][0]));
  bezout.matrix[5][7][5] =
      _mm256_sub_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[5][1]));
  bezout.matrix[5][7][6] =
      _mm256_sub_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[5][2]));
  bezout.matrix[5][7][7] =
      _mm256_sub_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[5][3]));
  bezout.matrix[5][7][8] =
      _mm256_sub_pd(bezout.matrix[5][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[5][4]));
  bezout.matrix[5][7][9] =
      _mm256_sub_pd(bezout.matrix[5][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[5][5]));
  bezout.matrix[5][7][5] =
      _mm256_sub_pd(bezout.matrix[5][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[5][0]));
  bezout.matrix[5][7][6] =
      _mm256_sub_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[5][1]));
  bezout.matrix[5][7][7] =
      _mm256_sub_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[5][2]));
  bezout.matrix[5][7][8] =
      _mm256_sub_pd(bezout.matrix[5][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[5][3]));
  bezout.matrix[5][7][9] =
      _mm256_sub_pd(bezout.matrix[5][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[5][4]));
  bezout.matrix[5][7][10] =
      _mm256_sub_pd(bezout.matrix[5][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[5][5]));
  bezout.matrix[5][7][6] =
      _mm256_sub_pd(bezout.matrix[5][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[5][0]));
  bezout.matrix[5][7][7] =
      _mm256_sub_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[5][1]));
  bezout.matrix[5][7][8] =
      _mm256_sub_pd(bezout.matrix[5][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[5][2]));
  bezout.matrix[5][7][9] =
      _mm256_sub_pd(bezout.matrix[5][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[5][3]));
  bezout.matrix[5][7][10] =
      _mm256_sub_pd(bezout.matrix[5][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[5][4]));
  bezout.matrix[5][7][11] =
      _mm256_sub_pd(bezout.matrix[5][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[5][5]));
  bezout.matrix[5][7][7] =
      _mm256_sub_pd(bezout.matrix[5][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[5][0]));
  bezout.matrix[5][7][8] =
      _mm256_sub_pd(bezout.matrix[5][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[5][1]));
  bezout.matrix[5][7][9] =
      _mm256_sub_pd(bezout.matrix[5][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[5][2]));
  bezout.matrix[5][7][10] =
      _mm256_sub_pd(bezout.matrix[5][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[5][3]));
  bezout.matrix[5][7][11] =
      _mm256_sub_pd(bezout.matrix[5][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[5][4]));
  bezout.matrix[5][7][12] =
      _mm256_sub_pd(bezout.matrix[5][7][12],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[5][5]));
  bezout.matrix[5][8][0] =
      _mm256_add_pd(bezout.matrix[5][8][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[9][0]));
  bezout.matrix[5][8][1] =
      _mm256_add_pd(bezout.matrix[5][8][1],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[9][1]));
  bezout.matrix[5][8][1] =
      _mm256_add_pd(bezout.matrix[5][8][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[9][0]));
  bezout.matrix[5][8][2] =
      _mm256_add_pd(bezout.matrix[5][8][2],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[9][1]));
  bezout.matrix[5][8][2] =
      _mm256_add_pd(bezout.matrix[5][8][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[9][0]));
  bezout.matrix[5][8][3] =
      _mm256_add_pd(bezout.matrix[5][8][3],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[9][1]));
  bezout.matrix[5][8][3] =
      _mm256_add_pd(bezout.matrix[5][8][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[9][0]));
  bezout.matrix[5][8][4] =
      _mm256_add_pd(bezout.matrix[5][8][4],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[9][1]));
  bezout.matrix[5][8][4] =
      _mm256_add_pd(bezout.matrix[5][8][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[9][0]));
  bezout.matrix[5][8][5] =
      _mm256_add_pd(bezout.matrix[5][8][5],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[9][1]));
  bezout.matrix[5][8][5] =
      _mm256_add_pd(bezout.matrix[5][8][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[9][0]));
  bezout.matrix[5][8][6] =
      _mm256_add_pd(bezout.matrix[5][8][6],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[9][1]));
  bezout.matrix[5][8][6] =
      _mm256_add_pd(bezout.matrix[5][8][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[9][0]));
  bezout.matrix[5][8][7] =
      _mm256_add_pd(bezout.matrix[5][8][7],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[9][1]));
  bezout.matrix[5][8][7] =
      _mm256_add_pd(bezout.matrix[5][8][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[9][0]));
  bezout.matrix[5][8][8] =
      _mm256_add_pd(bezout.matrix[5][8][8],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[9][1]));
  bezout.matrix[5][8][8] =
      _mm256_add_pd(bezout.matrix[5][8][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[9][0]));
  bezout.matrix[5][8][9] =
      _mm256_add_pd(bezout.matrix[5][8][9],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[9][1]));
  bezout.matrix[5][8][9] =
      _mm256_add_pd(bezout.matrix[5][8][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[9][0]));
  bezout.matrix[5][8][10] =
      _mm256_add_pd(bezout.matrix[5][8][10],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[9][1]));
  bezout.matrix[5][8][10] =
      _mm256_add_pd(bezout.matrix[5][8][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[9][0]));
  bezout.matrix[5][8][11] =
      _mm256_add_pd(bezout.matrix[5][8][11],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[9][1]));
  bezout.matrix[5][8][0] =
      _mm256_sub_pd(bezout.matrix[5][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[5][0]));
  bezout.matrix[5][8][1] =
      _mm256_sub_pd(bezout.matrix[5][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[5][1]));
  bezout.matrix[5][8][2] =
      _mm256_sub_pd(bezout.matrix[5][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[5][2]));
  bezout.matrix[5][8][3] =
      _mm256_sub_pd(bezout.matrix[5][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[5][3]));
  bezout.matrix[5][8][4] =
      _mm256_sub_pd(bezout.matrix[5][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[5][4]));
  bezout.matrix[5][8][5] =
      _mm256_sub_pd(bezout.matrix[5][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[5][5]));
  bezout.matrix[5][8][1] =
      _mm256_sub_pd(bezout.matrix[5][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[5][0]));
  bezout.matrix[5][8][2] =
      _mm256_sub_pd(bezout.matrix[5][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[5][1]));
  bezout.matrix[5][8][3] =
      _mm256_sub_pd(bezout.matrix[5][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[5][2]));
  bezout.matrix[5][8][4] =
      _mm256_sub_pd(bezout.matrix[5][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[5][3]));
  bezout.matrix[5][8][5] =
      _mm256_sub_pd(bezout.matrix[5][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[5][4]));
  bezout.matrix[5][8][6] =
      _mm256_sub_pd(bezout.matrix[5][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[5][5]));
  bezout.matrix[5][8][2] =
      _mm256_sub_pd(bezout.matrix[5][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[5][0]));
  bezout.matrix[5][8][3] =
      _mm256_sub_pd(bezout.matrix[5][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[5][1]));
  bezout.matrix[5][8][4] =
      _mm256_sub_pd(bezout.matrix[5][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[5][2]));
  bezout.matrix[5][8][5] =
      _mm256_sub_pd(bezout.matrix[5][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[5][3]));
  bezout.matrix[5][8][6] =
      _mm256_sub_pd(bezout.matrix[5][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[5][4]));
  bezout.matrix[5][8][7] =
      _mm256_sub_pd(bezout.matrix[5][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[5][5]));
  bezout.matrix[5][8][3] =
      _mm256_sub_pd(bezout.matrix[5][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[5][0]));
  bezout.matrix[5][8][4] =
      _mm256_sub_pd(bezout.matrix[5][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[5][1]));
  bezout.matrix[5][8][5] =
      _mm256_sub_pd(bezout.matrix[5][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[5][2]));
  bezout.matrix[5][8][6] =
      _mm256_sub_pd(bezout.matrix[5][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[5][3]));
  bezout.matrix[5][8][7] =
      _mm256_sub_pd(bezout.matrix[5][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[5][4]));
  bezout.matrix[5][8][8] =
      _mm256_sub_pd(bezout.matrix[5][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[5][5]));
  bezout.matrix[5][8][4] =
      _mm256_sub_pd(bezout.matrix[5][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[5][0]));
  bezout.matrix[5][8][5] =
      _mm256_sub_pd(bezout.matrix[5][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[5][1]));
  bezout.matrix[5][8][6] =
      _mm256_sub_pd(bezout.matrix[5][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[5][2]));
  bezout.matrix[5][8][7] =
      _mm256_sub_pd(bezout.matrix[5][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[5][3]));
  bezout.matrix[5][8][8] =
      _mm256_sub_pd(bezout.matrix[5][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[5][4]));
  bezout.matrix[5][8][9] =
      _mm256_sub_pd(bezout.matrix[5][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[5][5]));
  bezout.matrix[5][8][5] =
      _mm256_sub_pd(bezout.matrix[5][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[5][0]));
  bezout.matrix[5][8][6] =
      _mm256_sub_pd(bezout.matrix[5][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[5][1]));
  bezout.matrix[5][8][7] =
      _mm256_sub_pd(bezout.matrix[5][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[5][2]));
  bezout.matrix[5][8][8] =
      _mm256_sub_pd(bezout.matrix[5][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[5][3]));
  bezout.matrix[5][8][9] =
      _mm256_sub_pd(bezout.matrix[5][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[5][4]));
  bezout.matrix[5][8][10] =
      _mm256_sub_pd(bezout.matrix[5][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[5][5]));
  bezout.matrix[5][8][6] =
      _mm256_sub_pd(bezout.matrix[5][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[5][0]));
  bezout.matrix[5][8][7] =
      _mm256_sub_pd(bezout.matrix[5][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[5][1]));
  bezout.matrix[5][8][8] =
      _mm256_sub_pd(bezout.matrix[5][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[5][2]));
  bezout.matrix[5][8][9] =
      _mm256_sub_pd(bezout.matrix[5][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[5][3]));
  bezout.matrix[5][8][10] =
      _mm256_sub_pd(bezout.matrix[5][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[5][4]));
  bezout.matrix[5][8][11] =
      _mm256_sub_pd(bezout.matrix[5][8][11],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[5][5]));
  bezout.matrix[5][9][0] =
      _mm256_add_pd(bezout.matrix[5][9][0],
                    _mm256_mul_pd(poly1.coeffs[5][0], poly2.coeffs[10][0]));
  bezout.matrix[5][9][1] =
      _mm256_add_pd(bezout.matrix[5][9][1],
                    _mm256_mul_pd(poly1.coeffs[5][1], poly2.coeffs[10][0]));
  bezout.matrix[5][9][2] =
      _mm256_add_pd(bezout.matrix[5][9][2],
                    _mm256_mul_pd(poly1.coeffs[5][2], poly2.coeffs[10][0]));
  bezout.matrix[5][9][3] =
      _mm256_add_pd(bezout.matrix[5][9][3],
                    _mm256_mul_pd(poly1.coeffs[5][3], poly2.coeffs[10][0]));
  bezout.matrix[5][9][4] =
      _mm256_add_pd(bezout.matrix[5][9][4],
                    _mm256_mul_pd(poly1.coeffs[5][4], poly2.coeffs[10][0]));
  bezout.matrix[5][9][5] =
      _mm256_add_pd(bezout.matrix[5][9][5],
                    _mm256_mul_pd(poly1.coeffs[5][5], poly2.coeffs[10][0]));
  bezout.matrix[5][9][6] =
      _mm256_add_pd(bezout.matrix[5][9][6],
                    _mm256_mul_pd(poly1.coeffs[5][6], poly2.coeffs[10][0]));
  bezout.matrix[5][9][7] =
      _mm256_add_pd(bezout.matrix[5][9][7],
                    _mm256_mul_pd(poly1.coeffs[5][7], poly2.coeffs[10][0]));
  bezout.matrix[5][9][8] =
      _mm256_add_pd(bezout.matrix[5][9][8],
                    _mm256_mul_pd(poly1.coeffs[5][8], poly2.coeffs[10][0]));
  bezout.matrix[5][9][9] =
      _mm256_add_pd(bezout.matrix[5][9][9],
                    _mm256_mul_pd(poly1.coeffs[5][9], poly2.coeffs[10][0]));
  bezout.matrix[5][9][10] =
      _mm256_add_pd(bezout.matrix[5][9][10],
                    _mm256_mul_pd(poly1.coeffs[5][10], poly2.coeffs[10][0]));
  bezout.matrix[5][9][0] =
      _mm256_sub_pd(bezout.matrix[5][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[5][0]));
  bezout.matrix[5][9][1] =
      _mm256_sub_pd(bezout.matrix[5][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[5][1]));
  bezout.matrix[5][9][2] =
      _mm256_sub_pd(bezout.matrix[5][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[5][2]));
  bezout.matrix[5][9][3] =
      _mm256_sub_pd(bezout.matrix[5][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[5][3]));
  bezout.matrix[5][9][4] =
      _mm256_sub_pd(bezout.matrix[5][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[5][4]));
  bezout.matrix[5][9][5] =
      _mm256_sub_pd(bezout.matrix[5][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[5][5]));
  bezout.matrix[5][9][1] =
      _mm256_sub_pd(bezout.matrix[5][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[5][0]));
  bezout.matrix[5][9][2] =
      _mm256_sub_pd(bezout.matrix[5][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[5][1]));
  bezout.matrix[5][9][3] =
      _mm256_sub_pd(bezout.matrix[5][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[5][2]));
  bezout.matrix[5][9][4] =
      _mm256_sub_pd(bezout.matrix[5][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[5][3]));
  bezout.matrix[5][9][5] =
      _mm256_sub_pd(bezout.matrix[5][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[5][4]));
  bezout.matrix[5][9][6] =
      _mm256_sub_pd(bezout.matrix[5][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[5][5]));
  bezout.matrix[5][9][2] =
      _mm256_sub_pd(bezout.matrix[5][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[5][0]));
  bezout.matrix[5][9][3] =
      _mm256_sub_pd(bezout.matrix[5][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[5][1]));
  bezout.matrix[5][9][4] =
      _mm256_sub_pd(bezout.matrix[5][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[5][2]));
  bezout.matrix[5][9][5] =
      _mm256_sub_pd(bezout.matrix[5][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[5][3]));
  bezout.matrix[5][9][6] =
      _mm256_sub_pd(bezout.matrix[5][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[5][4]));
  bezout.matrix[5][9][7] =
      _mm256_sub_pd(bezout.matrix[5][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[5][5]));
  bezout.matrix[5][9][3] =
      _mm256_sub_pd(bezout.matrix[5][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[5][0]));
  bezout.matrix[5][9][4] =
      _mm256_sub_pd(bezout.matrix[5][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[5][1]));
  bezout.matrix[5][9][5] =
      _mm256_sub_pd(bezout.matrix[5][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[5][2]));
  bezout.matrix[5][9][6] =
      _mm256_sub_pd(bezout.matrix[5][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[5][3]));
  bezout.matrix[5][9][7] =
      _mm256_sub_pd(bezout.matrix[5][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[5][4]));
  bezout.matrix[5][9][8] =
      _mm256_sub_pd(bezout.matrix[5][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[5][5]));
  bezout.matrix[5][9][4] =
      _mm256_sub_pd(bezout.matrix[5][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[5][0]));
  bezout.matrix[5][9][5] =
      _mm256_sub_pd(bezout.matrix[5][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[5][1]));
  bezout.matrix[5][9][6] =
      _mm256_sub_pd(bezout.matrix[5][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[5][2]));
  bezout.matrix[5][9][7] =
      _mm256_sub_pd(bezout.matrix[5][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[5][3]));
  bezout.matrix[5][9][8] =
      _mm256_sub_pd(bezout.matrix[5][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[5][4]));
  bezout.matrix[5][9][9] =
      _mm256_sub_pd(bezout.matrix[5][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[5][5]));
  bezout.matrix[5][9][5] =
      _mm256_sub_pd(bezout.matrix[5][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[5][0]));
  bezout.matrix[5][9][6] =
      _mm256_sub_pd(bezout.matrix[5][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[5][1]));
  bezout.matrix[5][9][7] =
      _mm256_sub_pd(bezout.matrix[5][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[5][2]));
  bezout.matrix[5][9][8] =
      _mm256_sub_pd(bezout.matrix[5][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[5][3]));
  bezout.matrix[5][9][9] =
      _mm256_sub_pd(bezout.matrix[5][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[5][4]));
  bezout.matrix[5][9][10] =
      _mm256_sub_pd(bezout.matrix[5][9][10],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[5][5]));
  bezout.matrix[5][10][0] =
      _mm256_sub_pd(bezout.matrix[5][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[5][0]));
  bezout.matrix[5][10][1] =
      _mm256_sub_pd(bezout.matrix[5][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[5][1]));
  bezout.matrix[5][10][2] =
      _mm256_sub_pd(bezout.matrix[5][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[5][2]));
  bezout.matrix[5][10][3] =
      _mm256_sub_pd(bezout.matrix[5][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[5][3]));
  bezout.matrix[5][10][4] =
      _mm256_sub_pd(bezout.matrix[5][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[5][4]));
  bezout.matrix[5][10][5] =
      _mm256_sub_pd(bezout.matrix[5][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[5][5]));
  bezout.matrix[5][10][1] =
      _mm256_sub_pd(bezout.matrix[5][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[5][0]));
  bezout.matrix[5][10][2] =
      _mm256_sub_pd(bezout.matrix[5][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[5][1]));
  bezout.matrix[5][10][3] =
      _mm256_sub_pd(bezout.matrix[5][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[5][2]));
  bezout.matrix[5][10][4] =
      _mm256_sub_pd(bezout.matrix[5][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[5][3]));
  bezout.matrix[5][10][5] =
      _mm256_sub_pd(bezout.matrix[5][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[5][4]));
  bezout.matrix[5][10][6] =
      _mm256_sub_pd(bezout.matrix[5][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[5][5]));
  bezout.matrix[5][10][2] =
      _mm256_sub_pd(bezout.matrix[5][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[5][0]));
  bezout.matrix[5][10][3] =
      _mm256_sub_pd(bezout.matrix[5][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[5][1]));
  bezout.matrix[5][10][4] =
      _mm256_sub_pd(bezout.matrix[5][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[5][2]));
  bezout.matrix[5][10][5] =
      _mm256_sub_pd(bezout.matrix[5][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[5][3]));
  bezout.matrix[5][10][6] =
      _mm256_sub_pd(bezout.matrix[5][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[5][4]));
  bezout.matrix[5][10][7] =
      _mm256_sub_pd(bezout.matrix[5][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[5][5]));
  bezout.matrix[5][10][3] =
      _mm256_sub_pd(bezout.matrix[5][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[5][0]));
  bezout.matrix[5][10][4] =
      _mm256_sub_pd(bezout.matrix[5][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[5][1]));
  bezout.matrix[5][10][5] =
      _mm256_sub_pd(bezout.matrix[5][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[5][2]));
  bezout.matrix[5][10][6] =
      _mm256_sub_pd(bezout.matrix[5][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[5][3]));
  bezout.matrix[5][10][7] =
      _mm256_sub_pd(bezout.matrix[5][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[5][4]));
  bezout.matrix[5][10][8] =
      _mm256_sub_pd(bezout.matrix[5][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[5][5]));
  bezout.matrix[5][10][4] =
      _mm256_sub_pd(bezout.matrix[5][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[5][0]));
  bezout.matrix[5][10][5] =
      _mm256_sub_pd(bezout.matrix[5][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[5][1]));
  bezout.matrix[5][10][6] =
      _mm256_sub_pd(bezout.matrix[5][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[5][2]));
  bezout.matrix[5][10][7] =
      _mm256_sub_pd(bezout.matrix[5][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[5][3]));
  bezout.matrix[5][10][8] =
      _mm256_sub_pd(bezout.matrix[5][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[5][4]));
  bezout.matrix[5][10][9] =
      _mm256_sub_pd(bezout.matrix[5][10][9],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[5][5]));
  bezout.matrix[5][11][0] =
      _mm256_sub_pd(bezout.matrix[5][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[5][0]));
  bezout.matrix[5][11][1] =
      _mm256_sub_pd(bezout.matrix[5][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[5][1]));
  bezout.matrix[5][11][2] =
      _mm256_sub_pd(bezout.matrix[5][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[5][2]));
  bezout.matrix[5][11][3] =
      _mm256_sub_pd(bezout.matrix[5][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[5][3]));
  bezout.matrix[5][11][4] =
      _mm256_sub_pd(bezout.matrix[5][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[5][4]));
  bezout.matrix[5][11][5] =
      _mm256_sub_pd(bezout.matrix[5][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[5][5]));
  bezout.matrix[5][11][1] =
      _mm256_sub_pd(bezout.matrix[5][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[5][0]));
  bezout.matrix[5][11][2] =
      _mm256_sub_pd(bezout.matrix[5][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[5][1]));
  bezout.matrix[5][11][3] =
      _mm256_sub_pd(bezout.matrix[5][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[5][2]));
  bezout.matrix[5][11][4] =
      _mm256_sub_pd(bezout.matrix[5][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[5][3]));
  bezout.matrix[5][11][5] =
      _mm256_sub_pd(bezout.matrix[5][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[5][4]));
  bezout.matrix[5][11][6] =
      _mm256_sub_pd(bezout.matrix[5][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[5][5]));
  bezout.matrix[5][11][2] =
      _mm256_sub_pd(bezout.matrix[5][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[5][0]));
  bezout.matrix[5][11][3] =
      _mm256_sub_pd(bezout.matrix[5][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[5][1]));
  bezout.matrix[5][11][4] =
      _mm256_sub_pd(bezout.matrix[5][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[5][2]));
  bezout.matrix[5][11][5] =
      _mm256_sub_pd(bezout.matrix[5][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[5][3]));
  bezout.matrix[5][11][6] =
      _mm256_sub_pd(bezout.matrix[5][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[5][4]));
  bezout.matrix[5][11][7] =
      _mm256_sub_pd(bezout.matrix[5][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[5][5]));
  bezout.matrix[5][11][3] =
      _mm256_sub_pd(bezout.matrix[5][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[5][0]));
  bezout.matrix[5][11][4] =
      _mm256_sub_pd(bezout.matrix[5][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[5][1]));
  bezout.matrix[5][11][5] =
      _mm256_sub_pd(bezout.matrix[5][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[5][2]));
  bezout.matrix[5][11][6] =
      _mm256_sub_pd(bezout.matrix[5][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[5][3]));
  bezout.matrix[5][11][7] =
      _mm256_sub_pd(bezout.matrix[5][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[5][4]));
  bezout.matrix[5][11][8] =
      _mm256_sub_pd(bezout.matrix[5][11][8],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[5][5]));
  bezout.matrix[5][12][0] =
      _mm256_sub_pd(bezout.matrix[5][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[5][0]));
  bezout.matrix[5][12][1] =
      _mm256_sub_pd(bezout.matrix[5][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[5][1]));
  bezout.matrix[5][12][2] =
      _mm256_sub_pd(bezout.matrix[5][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[5][2]));
  bezout.matrix[5][12][3] =
      _mm256_sub_pd(bezout.matrix[5][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[5][3]));
  bezout.matrix[5][12][4] =
      _mm256_sub_pd(bezout.matrix[5][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[5][4]));
  bezout.matrix[5][12][5] =
      _mm256_sub_pd(bezout.matrix[5][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[5][5]));
  bezout.matrix[5][12][1] =
      _mm256_sub_pd(bezout.matrix[5][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[5][0]));
  bezout.matrix[5][12][2] =
      _mm256_sub_pd(bezout.matrix[5][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[5][1]));
  bezout.matrix[5][12][3] =
      _mm256_sub_pd(bezout.matrix[5][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[5][2]));
  bezout.matrix[5][12][4] =
      _mm256_sub_pd(bezout.matrix[5][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[5][3]));
  bezout.matrix[5][12][5] =
      _mm256_sub_pd(bezout.matrix[5][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[5][4]));
  bezout.matrix[5][12][6] =
      _mm256_sub_pd(bezout.matrix[5][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[5][5]));
  bezout.matrix[5][12][2] =
      _mm256_sub_pd(bezout.matrix[5][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[5][0]));
  bezout.matrix[5][12][3] =
      _mm256_sub_pd(bezout.matrix[5][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[5][1]));
  bezout.matrix[5][12][4] =
      _mm256_sub_pd(bezout.matrix[5][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[5][2]));
  bezout.matrix[5][12][5] =
      _mm256_sub_pd(bezout.matrix[5][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[5][3]));
  bezout.matrix[5][12][6] =
      _mm256_sub_pd(bezout.matrix[5][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[5][4]));
  bezout.matrix[5][12][7] =
      _mm256_sub_pd(bezout.matrix[5][12][7],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[5][5]));
  bezout.matrix[5][13][0] =
      _mm256_sub_pd(bezout.matrix[5][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[5][0]));
  bezout.matrix[5][13][1] =
      _mm256_sub_pd(bezout.matrix[5][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[5][1]));
  bezout.matrix[5][13][2] =
      _mm256_sub_pd(bezout.matrix[5][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[5][2]));
  bezout.matrix[5][13][3] =
      _mm256_sub_pd(bezout.matrix[5][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[5][3]));
  bezout.matrix[5][13][4] =
      _mm256_sub_pd(bezout.matrix[5][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[5][4]));
  bezout.matrix[5][13][5] =
      _mm256_sub_pd(bezout.matrix[5][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[5][5]));
  bezout.matrix[5][13][1] =
      _mm256_sub_pd(bezout.matrix[5][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[5][0]));
  bezout.matrix[5][13][2] =
      _mm256_sub_pd(bezout.matrix[5][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[5][1]));
  bezout.matrix[5][13][3] =
      _mm256_sub_pd(bezout.matrix[5][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[5][2]));
  bezout.matrix[5][13][4] =
      _mm256_sub_pd(bezout.matrix[5][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[5][3]));
  bezout.matrix[5][13][5] =
      _mm256_sub_pd(bezout.matrix[5][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[5][4]));
  bezout.matrix[5][13][6] =
      _mm256_sub_pd(bezout.matrix[5][13][6],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[5][5]));
  bezout.matrix[5][14][0] =
      _mm256_sub_pd(bezout.matrix[5][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[5][0]));
  bezout.matrix[5][14][1] =
      _mm256_sub_pd(bezout.matrix[5][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[5][1]));
  bezout.matrix[5][14][2] =
      _mm256_sub_pd(bezout.matrix[5][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[5][2]));
  bezout.matrix[5][14][3] =
      _mm256_sub_pd(bezout.matrix[5][14][3],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[5][3]));
  bezout.matrix[5][14][4] =
      _mm256_sub_pd(bezout.matrix[5][14][4],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[5][4]));
  bezout.matrix[5][14][5] =
      _mm256_sub_pd(bezout.matrix[5][14][5],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[5][5]));
  bezout.matrix[6][6][0] =
      _mm256_add_pd(bezout.matrix[6][6][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[7][0]));
  bezout.matrix[6][6][1] =
      _mm256_add_pd(bezout.matrix[6][6][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[7][1]));
  bezout.matrix[6][6][2] =
      _mm256_add_pd(bezout.matrix[6][6][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[7][2]));
  bezout.matrix[6][6][3] =
      _mm256_add_pd(bezout.matrix[6][6][3],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[7][3]));
  bezout.matrix[6][6][1] =
      _mm256_add_pd(bezout.matrix[6][6][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[7][0]));
  bezout.matrix[6][6][2] =
      _mm256_add_pd(bezout.matrix[6][6][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[7][1]));
  bezout.matrix[6][6][3] =
      _mm256_add_pd(bezout.matrix[6][6][3],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[7][2]));
  bezout.matrix[6][6][4] =
      _mm256_add_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[7][3]));
  bezout.matrix[6][6][2] =
      _mm256_add_pd(bezout.matrix[6][6][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[7][0]));
  bezout.matrix[6][6][3] =
      _mm256_add_pd(bezout.matrix[6][6][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[7][1]));
  bezout.matrix[6][6][4] =
      _mm256_add_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[7][2]));
  bezout.matrix[6][6][5] =
      _mm256_add_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[7][3]));
  bezout.matrix[6][6][3] =
      _mm256_add_pd(bezout.matrix[6][6][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[7][0]));
  bezout.matrix[6][6][4] =
      _mm256_add_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[7][1]));
  bezout.matrix[6][6][5] =
      _mm256_add_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[7][2]));
  bezout.matrix[6][6][6] =
      _mm256_add_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[7][3]));
  bezout.matrix[6][6][4] =
      _mm256_add_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[7][0]));
  bezout.matrix[6][6][5] =
      _mm256_add_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[7][1]));
  bezout.matrix[6][6][6] =
      _mm256_add_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[7][2]));
  bezout.matrix[6][6][7] =
      _mm256_add_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[7][3]));
  bezout.matrix[6][6][5] =
      _mm256_add_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[7][0]));
  bezout.matrix[6][6][6] =
      _mm256_add_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[7][1]));
  bezout.matrix[6][6][7] =
      _mm256_add_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[7][2]));
  bezout.matrix[6][6][8] =
      _mm256_add_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[7][3]));
  bezout.matrix[6][6][6] =
      _mm256_add_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[7][0]));
  bezout.matrix[6][6][7] =
      _mm256_add_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[7][1]));
  bezout.matrix[6][6][8] =
      _mm256_add_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[7][2]));
  bezout.matrix[6][6][9] =
      _mm256_add_pd(bezout.matrix[6][6][9],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[7][3]));
  bezout.matrix[6][6][7] =
      _mm256_add_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[7][0]));
  bezout.matrix[6][6][8] =
      _mm256_add_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[7][1]));
  bezout.matrix[6][6][9] =
      _mm256_add_pd(bezout.matrix[6][6][9],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[7][2]));
  bezout.matrix[6][6][10] =
      _mm256_add_pd(bezout.matrix[6][6][10],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[7][3]));
  bezout.matrix[6][6][8] =
      _mm256_add_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[7][0]));
  bezout.matrix[6][6][9] =
      _mm256_add_pd(bezout.matrix[6][6][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[7][1]));
  bezout.matrix[6][6][10] =
      _mm256_add_pd(bezout.matrix[6][6][10],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[7][2]));
  bezout.matrix[6][6][11] =
      _mm256_add_pd(bezout.matrix[6][6][11],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[7][3]));
  bezout.matrix[6][6][9] =
      _mm256_add_pd(bezout.matrix[6][6][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[7][0]));
  bezout.matrix[6][6][10] =
      _mm256_add_pd(bezout.matrix[6][6][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[7][1]));
  bezout.matrix[6][6][11] =
      _mm256_add_pd(bezout.matrix[6][6][11],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[7][2]));
  bezout.matrix[6][6][12] =
      _mm256_add_pd(bezout.matrix[6][6][12],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[7][3]));
  bezout.matrix[6][6][0] =
      _mm256_sub_pd(bezout.matrix[6][6][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[6][0]));
  bezout.matrix[6][6][1] =
      _mm256_sub_pd(bezout.matrix[6][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[6][1]));
  bezout.matrix[6][6][2] =
      _mm256_sub_pd(bezout.matrix[6][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[6][2]));
  bezout.matrix[6][6][3] =
      _mm256_sub_pd(bezout.matrix[6][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[6][3]));
  bezout.matrix[6][6][4] =
      _mm256_sub_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[6][4]));
  bezout.matrix[6][6][1] =
      _mm256_sub_pd(bezout.matrix[6][6][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[6][0]));
  bezout.matrix[6][6][2] =
      _mm256_sub_pd(bezout.matrix[6][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[6][1]));
  bezout.matrix[6][6][3] =
      _mm256_sub_pd(bezout.matrix[6][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[6][2]));
  bezout.matrix[6][6][4] =
      _mm256_sub_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[6][3]));
  bezout.matrix[6][6][5] =
      _mm256_sub_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[6][4]));
  bezout.matrix[6][6][2] =
      _mm256_sub_pd(bezout.matrix[6][6][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[6][0]));
  bezout.matrix[6][6][3] =
      _mm256_sub_pd(bezout.matrix[6][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[6][1]));
  bezout.matrix[6][6][4] =
      _mm256_sub_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[6][2]));
  bezout.matrix[6][6][5] =
      _mm256_sub_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[6][3]));
  bezout.matrix[6][6][6] =
      _mm256_sub_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[6][4]));
  bezout.matrix[6][6][3] =
      _mm256_sub_pd(bezout.matrix[6][6][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[6][0]));
  bezout.matrix[6][6][4] =
      _mm256_sub_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[6][1]));
  bezout.matrix[6][6][5] =
      _mm256_sub_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[6][2]));
  bezout.matrix[6][6][6] =
      _mm256_sub_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[6][3]));
  bezout.matrix[6][6][7] =
      _mm256_sub_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[6][4]));
  bezout.matrix[6][6][4] =
      _mm256_sub_pd(bezout.matrix[6][6][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[6][0]));
  bezout.matrix[6][6][5] =
      _mm256_sub_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[6][1]));
  bezout.matrix[6][6][6] =
      _mm256_sub_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[6][2]));
  bezout.matrix[6][6][7] =
      _mm256_sub_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[6][3]));
  bezout.matrix[6][6][8] =
      _mm256_sub_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[6][4]));
  bezout.matrix[6][6][5] =
      _mm256_sub_pd(bezout.matrix[6][6][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[6][0]));
  bezout.matrix[6][6][6] =
      _mm256_sub_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[6][1]));
  bezout.matrix[6][6][7] =
      _mm256_sub_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[6][2]));
  bezout.matrix[6][6][8] =
      _mm256_sub_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[6][3]));
  bezout.matrix[6][6][9] =
      _mm256_sub_pd(bezout.matrix[6][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[6][4]));
  bezout.matrix[6][6][6] =
      _mm256_sub_pd(bezout.matrix[6][6][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[6][0]));
  bezout.matrix[6][6][7] =
      _mm256_sub_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[6][1]));
  bezout.matrix[6][6][8] =
      _mm256_sub_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[6][2]));
  bezout.matrix[6][6][9] =
      _mm256_sub_pd(bezout.matrix[6][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[6][3]));
  bezout.matrix[6][6][10] =
      _mm256_sub_pd(bezout.matrix[6][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[6][4]));
  bezout.matrix[6][6][7] =
      _mm256_sub_pd(bezout.matrix[6][6][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[6][0]));
  bezout.matrix[6][6][8] =
      _mm256_sub_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[6][1]));
  bezout.matrix[6][6][9] =
      _mm256_sub_pd(bezout.matrix[6][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[6][2]));
  bezout.matrix[6][6][10] =
      _mm256_sub_pd(bezout.matrix[6][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[6][3]));
  bezout.matrix[6][6][11] =
      _mm256_sub_pd(bezout.matrix[6][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[6][4]));
  bezout.matrix[6][6][8] =
      _mm256_sub_pd(bezout.matrix[6][6][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[6][0]));
  bezout.matrix[6][6][9] =
      _mm256_sub_pd(bezout.matrix[6][6][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[6][1]));
  bezout.matrix[6][6][10] =
      _mm256_sub_pd(bezout.matrix[6][6][10],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[6][2]));
  bezout.matrix[6][6][11] =
      _mm256_sub_pd(bezout.matrix[6][6][11],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[6][3]));
  bezout.matrix[6][6][12] =
      _mm256_sub_pd(bezout.matrix[6][6][12],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[6][4]));
  bezout.matrix[6][7][0] =
      _mm256_add_pd(bezout.matrix[6][7][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[8][0]));
  bezout.matrix[6][7][1] =
      _mm256_add_pd(bezout.matrix[6][7][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[8][1]));
  bezout.matrix[6][7][2] =
      _mm256_add_pd(bezout.matrix[6][7][2],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[8][2]));
  bezout.matrix[6][7][1] =
      _mm256_add_pd(bezout.matrix[6][7][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[8][0]));
  bezout.matrix[6][7][2] =
      _mm256_add_pd(bezout.matrix[6][7][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[8][1]));
  bezout.matrix[6][7][3] =
      _mm256_add_pd(bezout.matrix[6][7][3],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[8][2]));
  bezout.matrix[6][7][2] =
      _mm256_add_pd(bezout.matrix[6][7][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[8][0]));
  bezout.matrix[6][7][3] =
      _mm256_add_pd(bezout.matrix[6][7][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[8][1]));
  bezout.matrix[6][7][4] =
      _mm256_add_pd(bezout.matrix[6][7][4],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[8][2]));
  bezout.matrix[6][7][3] =
      _mm256_add_pd(bezout.matrix[6][7][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[8][0]));
  bezout.matrix[6][7][4] =
      _mm256_add_pd(bezout.matrix[6][7][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[8][1]));
  bezout.matrix[6][7][5] =
      _mm256_add_pd(bezout.matrix[6][7][5],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[8][2]));
  bezout.matrix[6][7][4] =
      _mm256_add_pd(bezout.matrix[6][7][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[8][0]));
  bezout.matrix[6][7][5] =
      _mm256_add_pd(bezout.matrix[6][7][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[8][1]));
  bezout.matrix[6][7][6] =
      _mm256_add_pd(bezout.matrix[6][7][6],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[8][2]));
  bezout.matrix[6][7][5] =
      _mm256_add_pd(bezout.matrix[6][7][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[8][0]));
  bezout.matrix[6][7][6] =
      _mm256_add_pd(bezout.matrix[6][7][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[8][1]));
  bezout.matrix[6][7][7] =
      _mm256_add_pd(bezout.matrix[6][7][7],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[8][2]));
  bezout.matrix[6][7][6] =
      _mm256_add_pd(bezout.matrix[6][7][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[8][0]));
  bezout.matrix[6][7][7] =
      _mm256_add_pd(bezout.matrix[6][7][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[8][1]));
  bezout.matrix[6][7][8] =
      _mm256_add_pd(bezout.matrix[6][7][8],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[8][2]));
  bezout.matrix[6][7][7] =
      _mm256_add_pd(bezout.matrix[6][7][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[8][0]));
  bezout.matrix[6][7][8] =
      _mm256_add_pd(bezout.matrix[6][7][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[8][1]));
  bezout.matrix[6][7][9] =
      _mm256_add_pd(bezout.matrix[6][7][9],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[8][2]));
  bezout.matrix[6][7][8] =
      _mm256_add_pd(bezout.matrix[6][7][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[8][0]));
  bezout.matrix[6][7][9] =
      _mm256_add_pd(bezout.matrix[6][7][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[8][1]));
  bezout.matrix[6][7][10] =
      _mm256_add_pd(bezout.matrix[6][7][10],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[8][2]));
  bezout.matrix[6][7][9] =
      _mm256_add_pd(bezout.matrix[6][7][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[8][0]));
  bezout.matrix[6][7][10] =
      _mm256_add_pd(bezout.matrix[6][7][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[8][1]));
  bezout.matrix[6][7][11] =
      _mm256_add_pd(bezout.matrix[6][7][11],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[8][2]));
  bezout.matrix[6][7][0] =
      _mm256_sub_pd(bezout.matrix[6][7][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[6][0]));
  bezout.matrix[6][7][1] =
      _mm256_sub_pd(bezout.matrix[6][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[6][1]));
  bezout.matrix[6][7][2] =
      _mm256_sub_pd(bezout.matrix[6][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[6][2]));
  bezout.matrix[6][7][3] =
      _mm256_sub_pd(bezout.matrix[6][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[6][3]));
  bezout.matrix[6][7][4] =
      _mm256_sub_pd(bezout.matrix[6][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[6][4]));
  bezout.matrix[6][7][1] =
      _mm256_sub_pd(bezout.matrix[6][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[6][0]));
  bezout.matrix[6][7][2] =
      _mm256_sub_pd(bezout.matrix[6][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[6][1]));
  bezout.matrix[6][7][3] =
      _mm256_sub_pd(bezout.matrix[6][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[6][2]));
  bezout.matrix[6][7][4] =
      _mm256_sub_pd(bezout.matrix[6][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[6][3]));
  bezout.matrix[6][7][5] =
      _mm256_sub_pd(bezout.matrix[6][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[6][4]));
  bezout.matrix[6][7][2] =
      _mm256_sub_pd(bezout.matrix[6][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[6][0]));
  bezout.matrix[6][7][3] =
      _mm256_sub_pd(bezout.matrix[6][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[6][1]));
  bezout.matrix[6][7][4] =
      _mm256_sub_pd(bezout.matrix[6][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[6][2]));
  bezout.matrix[6][7][5] =
      _mm256_sub_pd(bezout.matrix[6][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[6][3]));
  bezout.matrix[6][7][6] =
      _mm256_sub_pd(bezout.matrix[6][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[6][4]));
  bezout.matrix[6][7][3] =
      _mm256_sub_pd(bezout.matrix[6][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[6][0]));
  bezout.matrix[6][7][4] =
      _mm256_sub_pd(bezout.matrix[6][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[6][1]));
  bezout.matrix[6][7][5] =
      _mm256_sub_pd(bezout.matrix[6][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[6][2]));
  bezout.matrix[6][7][6] =
      _mm256_sub_pd(bezout.matrix[6][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[6][3]));
  bezout.matrix[6][7][7] =
      _mm256_sub_pd(bezout.matrix[6][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[6][4]));
  bezout.matrix[6][7][4] =
      _mm256_sub_pd(bezout.matrix[6][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[6][0]));
  bezout.matrix[6][7][5] =
      _mm256_sub_pd(bezout.matrix[6][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[6][1]));
  bezout.matrix[6][7][6] =
      _mm256_sub_pd(bezout.matrix[6][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[6][2]));
  bezout.matrix[6][7][7] =
      _mm256_sub_pd(bezout.matrix[6][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[6][3]));
  bezout.matrix[6][7][8] =
      _mm256_sub_pd(bezout.matrix[6][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[6][4]));
  bezout.matrix[6][7][5] =
      _mm256_sub_pd(bezout.matrix[6][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[6][0]));
  bezout.matrix[6][7][6] =
      _mm256_sub_pd(bezout.matrix[6][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[6][1]));
  bezout.matrix[6][7][7] =
      _mm256_sub_pd(bezout.matrix[6][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[6][2]));
  bezout.matrix[6][7][8] =
      _mm256_sub_pd(bezout.matrix[6][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[6][3]));
  bezout.matrix[6][7][9] =
      _mm256_sub_pd(bezout.matrix[6][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[6][4]));
  bezout.matrix[6][7][6] =
      _mm256_sub_pd(bezout.matrix[6][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[6][0]));
  bezout.matrix[6][7][7] =
      _mm256_sub_pd(bezout.matrix[6][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[6][1]));
  bezout.matrix[6][7][8] =
      _mm256_sub_pd(bezout.matrix[6][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[6][2]));
  bezout.matrix[6][7][9] =
      _mm256_sub_pd(bezout.matrix[6][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[6][3]));
  bezout.matrix[6][7][10] =
      _mm256_sub_pd(bezout.matrix[6][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[6][4]));
  bezout.matrix[6][7][7] =
      _mm256_sub_pd(bezout.matrix[6][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[6][0]));
  bezout.matrix[6][7][8] =
      _mm256_sub_pd(bezout.matrix[6][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[6][1]));
  bezout.matrix[6][7][9] =
      _mm256_sub_pd(bezout.matrix[6][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[6][2]));
  bezout.matrix[6][7][10] =
      _mm256_sub_pd(bezout.matrix[6][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[6][3]));
  bezout.matrix[6][7][11] =
      _mm256_sub_pd(bezout.matrix[6][7][11],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[6][4]));
  bezout.matrix[6][8][0] =
      _mm256_add_pd(bezout.matrix[6][8][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[9][0]));
  bezout.matrix[6][8][1] =
      _mm256_add_pd(bezout.matrix[6][8][1],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[9][1]));
  bezout.matrix[6][8][1] =
      _mm256_add_pd(bezout.matrix[6][8][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[9][0]));
  bezout.matrix[6][8][2] =
      _mm256_add_pd(bezout.matrix[6][8][2],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[9][1]));
  bezout.matrix[6][8][2] =
      _mm256_add_pd(bezout.matrix[6][8][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[9][0]));
  bezout.matrix[6][8][3] =
      _mm256_add_pd(bezout.matrix[6][8][3],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[9][1]));
  bezout.matrix[6][8][3] =
      _mm256_add_pd(bezout.matrix[6][8][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[9][0]));
  bezout.matrix[6][8][4] =
      _mm256_add_pd(bezout.matrix[6][8][4],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[9][1]));
  bezout.matrix[6][8][4] =
      _mm256_add_pd(bezout.matrix[6][8][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[9][0]));
  bezout.matrix[6][8][5] =
      _mm256_add_pd(bezout.matrix[6][8][5],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[9][1]));
  bezout.matrix[6][8][5] =
      _mm256_add_pd(bezout.matrix[6][8][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[9][0]));
  bezout.matrix[6][8][6] =
      _mm256_add_pd(bezout.matrix[6][8][6],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[9][1]));
  bezout.matrix[6][8][6] =
      _mm256_add_pd(bezout.matrix[6][8][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[9][0]));
  bezout.matrix[6][8][7] =
      _mm256_add_pd(bezout.matrix[6][8][7],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[9][1]));
  bezout.matrix[6][8][7] =
      _mm256_add_pd(bezout.matrix[6][8][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[9][0]));
  bezout.matrix[6][8][8] =
      _mm256_add_pd(bezout.matrix[6][8][8],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[9][1]));
  bezout.matrix[6][8][8] =
      _mm256_add_pd(bezout.matrix[6][8][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[9][0]));
  bezout.matrix[6][8][9] =
      _mm256_add_pd(bezout.matrix[6][8][9],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[9][1]));
  bezout.matrix[6][8][9] =
      _mm256_add_pd(bezout.matrix[6][8][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[9][0]));
  bezout.matrix[6][8][10] =
      _mm256_add_pd(bezout.matrix[6][8][10],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[9][1]));
  bezout.matrix[6][8][0] =
      _mm256_sub_pd(bezout.matrix[6][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[6][0]));
  bezout.matrix[6][8][1] =
      _mm256_sub_pd(bezout.matrix[6][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[6][1]));
  bezout.matrix[6][8][2] =
      _mm256_sub_pd(bezout.matrix[6][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[6][2]));
  bezout.matrix[6][8][3] =
      _mm256_sub_pd(bezout.matrix[6][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[6][3]));
  bezout.matrix[6][8][4] =
      _mm256_sub_pd(bezout.matrix[6][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[6][4]));
  bezout.matrix[6][8][1] =
      _mm256_sub_pd(bezout.matrix[6][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[6][0]));
  bezout.matrix[6][8][2] =
      _mm256_sub_pd(bezout.matrix[6][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[6][1]));
  bezout.matrix[6][8][3] =
      _mm256_sub_pd(bezout.matrix[6][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[6][2]));
  bezout.matrix[6][8][4] =
      _mm256_sub_pd(bezout.matrix[6][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[6][3]));
  bezout.matrix[6][8][5] =
      _mm256_sub_pd(bezout.matrix[6][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[6][4]));
  bezout.matrix[6][8][2] =
      _mm256_sub_pd(bezout.matrix[6][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[6][0]));
  bezout.matrix[6][8][3] =
      _mm256_sub_pd(bezout.matrix[6][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[6][1]));
  bezout.matrix[6][8][4] =
      _mm256_sub_pd(bezout.matrix[6][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[6][2]));
  bezout.matrix[6][8][5] =
      _mm256_sub_pd(bezout.matrix[6][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[6][3]));
  bezout.matrix[6][8][6] =
      _mm256_sub_pd(bezout.matrix[6][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[6][4]));
  bezout.matrix[6][8][3] =
      _mm256_sub_pd(bezout.matrix[6][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[6][0]));
  bezout.matrix[6][8][4] =
      _mm256_sub_pd(bezout.matrix[6][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[6][1]));
  bezout.matrix[6][8][5] =
      _mm256_sub_pd(bezout.matrix[6][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[6][2]));
  bezout.matrix[6][8][6] =
      _mm256_sub_pd(bezout.matrix[6][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[6][3]));
  bezout.matrix[6][8][7] =
      _mm256_sub_pd(bezout.matrix[6][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[6][4]));
  bezout.matrix[6][8][4] =
      _mm256_sub_pd(bezout.matrix[6][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[6][0]));
  bezout.matrix[6][8][5] =
      _mm256_sub_pd(bezout.matrix[6][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[6][1]));
  bezout.matrix[6][8][6] =
      _mm256_sub_pd(bezout.matrix[6][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[6][2]));
  bezout.matrix[6][8][7] =
      _mm256_sub_pd(bezout.matrix[6][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[6][3]));
  bezout.matrix[6][8][8] =
      _mm256_sub_pd(bezout.matrix[6][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[6][4]));
  bezout.matrix[6][8][5] =
      _mm256_sub_pd(bezout.matrix[6][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[6][0]));
  bezout.matrix[6][8][6] =
      _mm256_sub_pd(bezout.matrix[6][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[6][1]));
  bezout.matrix[6][8][7] =
      _mm256_sub_pd(bezout.matrix[6][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[6][2]));
  bezout.matrix[6][8][8] =
      _mm256_sub_pd(bezout.matrix[6][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[6][3]));
  bezout.matrix[6][8][9] =
      _mm256_sub_pd(bezout.matrix[6][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[6][4]));
  bezout.matrix[6][8][6] =
      _mm256_sub_pd(bezout.matrix[6][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[6][0]));
  bezout.matrix[6][8][7] =
      _mm256_sub_pd(bezout.matrix[6][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[6][1]));
  bezout.matrix[6][8][8] =
      _mm256_sub_pd(bezout.matrix[6][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[6][2]));
  bezout.matrix[6][8][9] =
      _mm256_sub_pd(bezout.matrix[6][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[6][3]));
  bezout.matrix[6][8][10] =
      _mm256_sub_pd(bezout.matrix[6][8][10],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[6][4]));
  bezout.matrix[6][9][0] =
      _mm256_add_pd(bezout.matrix[6][9][0],
                    _mm256_mul_pd(poly1.coeffs[6][0], poly2.coeffs[10][0]));
  bezout.matrix[6][9][1] =
      _mm256_add_pd(bezout.matrix[6][9][1],
                    _mm256_mul_pd(poly1.coeffs[6][1], poly2.coeffs[10][0]));
  bezout.matrix[6][9][2] =
      _mm256_add_pd(bezout.matrix[6][9][2],
                    _mm256_mul_pd(poly1.coeffs[6][2], poly2.coeffs[10][0]));
  bezout.matrix[6][9][3] =
      _mm256_add_pd(bezout.matrix[6][9][3],
                    _mm256_mul_pd(poly1.coeffs[6][3], poly2.coeffs[10][0]));
  bezout.matrix[6][9][4] =
      _mm256_add_pd(bezout.matrix[6][9][4],
                    _mm256_mul_pd(poly1.coeffs[6][4], poly2.coeffs[10][0]));
  bezout.matrix[6][9][5] =
      _mm256_add_pd(bezout.matrix[6][9][5],
                    _mm256_mul_pd(poly1.coeffs[6][5], poly2.coeffs[10][0]));
  bezout.matrix[6][9][6] =
      _mm256_add_pd(bezout.matrix[6][9][6],
                    _mm256_mul_pd(poly1.coeffs[6][6], poly2.coeffs[10][0]));
  bezout.matrix[6][9][7] =
      _mm256_add_pd(bezout.matrix[6][9][7],
                    _mm256_mul_pd(poly1.coeffs[6][7], poly2.coeffs[10][0]));
  bezout.matrix[6][9][8] =
      _mm256_add_pd(bezout.matrix[6][9][8],
                    _mm256_mul_pd(poly1.coeffs[6][8], poly2.coeffs[10][0]));
  bezout.matrix[6][9][9] =
      _mm256_add_pd(bezout.matrix[6][9][9],
                    _mm256_mul_pd(poly1.coeffs[6][9], poly2.coeffs[10][0]));
  bezout.matrix[6][9][0] =
      _mm256_sub_pd(bezout.matrix[6][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[6][0]));
  bezout.matrix[6][9][1] =
      _mm256_sub_pd(bezout.matrix[6][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[6][1]));
  bezout.matrix[6][9][2] =
      _mm256_sub_pd(bezout.matrix[6][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[6][2]));
  bezout.matrix[6][9][3] =
      _mm256_sub_pd(bezout.matrix[6][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[6][3]));
  bezout.matrix[6][9][4] =
      _mm256_sub_pd(bezout.matrix[6][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[6][4]));
  bezout.matrix[6][9][1] =
      _mm256_sub_pd(bezout.matrix[6][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[6][0]));
  bezout.matrix[6][9][2] =
      _mm256_sub_pd(bezout.matrix[6][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[6][1]));
  bezout.matrix[6][9][3] =
      _mm256_sub_pd(bezout.matrix[6][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[6][2]));
  bezout.matrix[6][9][4] =
      _mm256_sub_pd(bezout.matrix[6][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[6][3]));
  bezout.matrix[6][9][5] =
      _mm256_sub_pd(bezout.matrix[6][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[6][4]));
  bezout.matrix[6][9][2] =
      _mm256_sub_pd(bezout.matrix[6][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[6][0]));
  bezout.matrix[6][9][3] =
      _mm256_sub_pd(bezout.matrix[6][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[6][1]));
  bezout.matrix[6][9][4] =
      _mm256_sub_pd(bezout.matrix[6][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[6][2]));
  bezout.matrix[6][9][5] =
      _mm256_sub_pd(bezout.matrix[6][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[6][3]));
  bezout.matrix[6][9][6] =
      _mm256_sub_pd(bezout.matrix[6][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[6][4]));
  bezout.matrix[6][9][3] =
      _mm256_sub_pd(bezout.matrix[6][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[6][0]));
  bezout.matrix[6][9][4] =
      _mm256_sub_pd(bezout.matrix[6][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[6][1]));
  bezout.matrix[6][9][5] =
      _mm256_sub_pd(bezout.matrix[6][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[6][2]));
  bezout.matrix[6][9][6] =
      _mm256_sub_pd(bezout.matrix[6][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[6][3]));
  bezout.matrix[6][9][7] =
      _mm256_sub_pd(bezout.matrix[6][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[6][4]));
  bezout.matrix[6][9][4] =
      _mm256_sub_pd(bezout.matrix[6][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[6][0]));
  bezout.matrix[6][9][5] =
      _mm256_sub_pd(bezout.matrix[6][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[6][1]));
  bezout.matrix[6][9][6] =
      _mm256_sub_pd(bezout.matrix[6][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[6][2]));
  bezout.matrix[6][9][7] =
      _mm256_sub_pd(bezout.matrix[6][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[6][3]));
  bezout.matrix[6][9][8] =
      _mm256_sub_pd(bezout.matrix[6][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[6][4]));
  bezout.matrix[6][9][5] =
      _mm256_sub_pd(bezout.matrix[6][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[6][0]));
  bezout.matrix[6][9][6] =
      _mm256_sub_pd(bezout.matrix[6][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[6][1]));
  bezout.matrix[6][9][7] =
      _mm256_sub_pd(bezout.matrix[6][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[6][2]));
  bezout.matrix[6][9][8] =
      _mm256_sub_pd(bezout.matrix[6][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[6][3]));
  bezout.matrix[6][9][9] =
      _mm256_sub_pd(bezout.matrix[6][9][9],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[6][4]));
  bezout.matrix[6][10][0] =
      _mm256_sub_pd(bezout.matrix[6][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[6][0]));
  bezout.matrix[6][10][1] =
      _mm256_sub_pd(bezout.matrix[6][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[6][1]));
  bezout.matrix[6][10][2] =
      _mm256_sub_pd(bezout.matrix[6][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[6][2]));
  bezout.matrix[6][10][3] =
      _mm256_sub_pd(bezout.matrix[6][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[6][3]));
  bezout.matrix[6][10][4] =
      _mm256_sub_pd(bezout.matrix[6][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[6][4]));
  bezout.matrix[6][10][1] =
      _mm256_sub_pd(bezout.matrix[6][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[6][0]));
  bezout.matrix[6][10][2] =
      _mm256_sub_pd(bezout.matrix[6][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[6][1]));
  bezout.matrix[6][10][3] =
      _mm256_sub_pd(bezout.matrix[6][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[6][2]));
  bezout.matrix[6][10][4] =
      _mm256_sub_pd(bezout.matrix[6][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[6][3]));
  bezout.matrix[6][10][5] =
      _mm256_sub_pd(bezout.matrix[6][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[6][4]));
  bezout.matrix[6][10][2] =
      _mm256_sub_pd(bezout.matrix[6][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[6][0]));
  bezout.matrix[6][10][3] =
      _mm256_sub_pd(bezout.matrix[6][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[6][1]));
  bezout.matrix[6][10][4] =
      _mm256_sub_pd(bezout.matrix[6][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[6][2]));
  bezout.matrix[6][10][5] =
      _mm256_sub_pd(bezout.matrix[6][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[6][3]));
  bezout.matrix[6][10][6] =
      _mm256_sub_pd(bezout.matrix[6][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[6][4]));
  bezout.matrix[6][10][3] =
      _mm256_sub_pd(bezout.matrix[6][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[6][0]));
  bezout.matrix[6][10][4] =
      _mm256_sub_pd(bezout.matrix[6][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[6][1]));
  bezout.matrix[6][10][5] =
      _mm256_sub_pd(bezout.matrix[6][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[6][2]));
  bezout.matrix[6][10][6] =
      _mm256_sub_pd(bezout.matrix[6][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[6][3]));
  bezout.matrix[6][10][7] =
      _mm256_sub_pd(bezout.matrix[6][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[6][4]));
  bezout.matrix[6][10][4] =
      _mm256_sub_pd(bezout.matrix[6][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[6][0]));
  bezout.matrix[6][10][5] =
      _mm256_sub_pd(bezout.matrix[6][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[6][1]));
  bezout.matrix[6][10][6] =
      _mm256_sub_pd(bezout.matrix[6][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[6][2]));
  bezout.matrix[6][10][7] =
      _mm256_sub_pd(bezout.matrix[6][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[6][3]));
  bezout.matrix[6][10][8] =
      _mm256_sub_pd(bezout.matrix[6][10][8],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[6][4]));
  bezout.matrix[6][11][0] =
      _mm256_sub_pd(bezout.matrix[6][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[6][0]));
  bezout.matrix[6][11][1] =
      _mm256_sub_pd(bezout.matrix[6][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[6][1]));
  bezout.matrix[6][11][2] =
      _mm256_sub_pd(bezout.matrix[6][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[6][2]));
  bezout.matrix[6][11][3] =
      _mm256_sub_pd(bezout.matrix[6][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[6][3]));
  bezout.matrix[6][11][4] =
      _mm256_sub_pd(bezout.matrix[6][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[6][4]));
  bezout.matrix[6][11][1] =
      _mm256_sub_pd(bezout.matrix[6][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[6][0]));
  bezout.matrix[6][11][2] =
      _mm256_sub_pd(bezout.matrix[6][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[6][1]));
  bezout.matrix[6][11][3] =
      _mm256_sub_pd(bezout.matrix[6][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[6][2]));
  bezout.matrix[6][11][4] =
      _mm256_sub_pd(bezout.matrix[6][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[6][3]));
  bezout.matrix[6][11][5] =
      _mm256_sub_pd(bezout.matrix[6][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[6][4]));
  bezout.matrix[6][11][2] =
      _mm256_sub_pd(bezout.matrix[6][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[6][0]));
  bezout.matrix[6][11][3] =
      _mm256_sub_pd(bezout.matrix[6][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[6][1]));
  bezout.matrix[6][11][4] =
      _mm256_sub_pd(bezout.matrix[6][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[6][2]));
  bezout.matrix[6][11][5] =
      _mm256_sub_pd(bezout.matrix[6][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[6][3]));
  bezout.matrix[6][11][6] =
      _mm256_sub_pd(bezout.matrix[6][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[6][4]));
  bezout.matrix[6][11][3] =
      _mm256_sub_pd(bezout.matrix[6][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[6][0]));
  bezout.matrix[6][11][4] =
      _mm256_sub_pd(bezout.matrix[6][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[6][1]));
  bezout.matrix[6][11][5] =
      _mm256_sub_pd(bezout.matrix[6][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[6][2]));
  bezout.matrix[6][11][6] =
      _mm256_sub_pd(bezout.matrix[6][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[6][3]));
  bezout.matrix[6][11][7] =
      _mm256_sub_pd(bezout.matrix[6][11][7],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[6][4]));
  bezout.matrix[6][12][0] =
      _mm256_sub_pd(bezout.matrix[6][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[6][0]));
  bezout.matrix[6][12][1] =
      _mm256_sub_pd(bezout.matrix[6][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[6][1]));
  bezout.matrix[6][12][2] =
      _mm256_sub_pd(bezout.matrix[6][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[6][2]));
  bezout.matrix[6][12][3] =
      _mm256_sub_pd(bezout.matrix[6][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[6][3]));
  bezout.matrix[6][12][4] =
      _mm256_sub_pd(bezout.matrix[6][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[6][4]));
  bezout.matrix[6][12][1] =
      _mm256_sub_pd(bezout.matrix[6][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[6][0]));
  bezout.matrix[6][12][2] =
      _mm256_sub_pd(bezout.matrix[6][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[6][1]));
  bezout.matrix[6][12][3] =
      _mm256_sub_pd(bezout.matrix[6][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[6][2]));
  bezout.matrix[6][12][4] =
      _mm256_sub_pd(bezout.matrix[6][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[6][3]));
  bezout.matrix[6][12][5] =
      _mm256_sub_pd(bezout.matrix[6][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[6][4]));
  bezout.matrix[6][12][2] =
      _mm256_sub_pd(bezout.matrix[6][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[6][0]));
  bezout.matrix[6][12][3] =
      _mm256_sub_pd(bezout.matrix[6][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[6][1]));
  bezout.matrix[6][12][4] =
      _mm256_sub_pd(bezout.matrix[6][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[6][2]));
  bezout.matrix[6][12][5] =
      _mm256_sub_pd(bezout.matrix[6][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[6][3]));
  bezout.matrix[6][12][6] =
      _mm256_sub_pd(bezout.matrix[6][12][6],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[6][4]));
  bezout.matrix[6][13][0] =
      _mm256_sub_pd(bezout.matrix[6][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[6][0]));
  bezout.matrix[6][13][1] =
      _mm256_sub_pd(bezout.matrix[6][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[6][1]));
  bezout.matrix[6][13][2] =
      _mm256_sub_pd(bezout.matrix[6][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[6][2]));
  bezout.matrix[6][13][3] =
      _mm256_sub_pd(bezout.matrix[6][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[6][3]));
  bezout.matrix[6][13][4] =
      _mm256_sub_pd(bezout.matrix[6][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[6][4]));
  bezout.matrix[6][13][1] =
      _mm256_sub_pd(bezout.matrix[6][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[6][0]));
  bezout.matrix[6][13][2] =
      _mm256_sub_pd(bezout.matrix[6][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[6][1]));
  bezout.matrix[6][13][3] =
      _mm256_sub_pd(bezout.matrix[6][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[6][2]));
  bezout.matrix[6][13][4] =
      _mm256_sub_pd(bezout.matrix[6][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[6][3]));
  bezout.matrix[6][13][5] =
      _mm256_sub_pd(bezout.matrix[6][13][5],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[6][4]));
  bezout.matrix[6][14][0] =
      _mm256_sub_pd(bezout.matrix[6][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[6][0]));
  bezout.matrix[6][14][1] =
      _mm256_sub_pd(bezout.matrix[6][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[6][1]));
  bezout.matrix[6][14][2] =
      _mm256_sub_pd(bezout.matrix[6][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[6][2]));
  bezout.matrix[6][14][3] =
      _mm256_sub_pd(bezout.matrix[6][14][3],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[6][3]));
  bezout.matrix[6][14][4] =
      _mm256_sub_pd(bezout.matrix[6][14][4],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[6][4]));
  bezout.matrix[7][7][0] =
      _mm256_add_pd(bezout.matrix[7][7][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[8][0]));
  bezout.matrix[7][7][1] =
      _mm256_add_pd(bezout.matrix[7][7][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[8][1]));
  bezout.matrix[7][7][2] =
      _mm256_add_pd(bezout.matrix[7][7][2],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[8][2]));
  bezout.matrix[7][7][1] =
      _mm256_add_pd(bezout.matrix[7][7][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[8][0]));
  bezout.matrix[7][7][2] =
      _mm256_add_pd(bezout.matrix[7][7][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[8][1]));
  bezout.matrix[7][7][3] =
      _mm256_add_pd(bezout.matrix[7][7][3],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[8][2]));
  bezout.matrix[7][7][2] =
      _mm256_add_pd(bezout.matrix[7][7][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[8][0]));
  bezout.matrix[7][7][3] =
      _mm256_add_pd(bezout.matrix[7][7][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[8][1]));
  bezout.matrix[7][7][4] =
      _mm256_add_pd(bezout.matrix[7][7][4],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[8][2]));
  bezout.matrix[7][7][3] =
      _mm256_add_pd(bezout.matrix[7][7][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[8][0]));
  bezout.matrix[7][7][4] =
      _mm256_add_pd(bezout.matrix[7][7][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[8][1]));
  bezout.matrix[7][7][5] =
      _mm256_add_pd(bezout.matrix[7][7][5],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[8][2]));
  bezout.matrix[7][7][4] =
      _mm256_add_pd(bezout.matrix[7][7][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[8][0]));
  bezout.matrix[7][7][5] =
      _mm256_add_pd(bezout.matrix[7][7][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[8][1]));
  bezout.matrix[7][7][6] =
      _mm256_add_pd(bezout.matrix[7][7][6],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[8][2]));
  bezout.matrix[7][7][5] =
      _mm256_add_pd(bezout.matrix[7][7][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[8][0]));
  bezout.matrix[7][7][6] =
      _mm256_add_pd(bezout.matrix[7][7][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[8][1]));
  bezout.matrix[7][7][7] =
      _mm256_add_pd(bezout.matrix[7][7][7],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[8][2]));
  bezout.matrix[7][7][6] =
      _mm256_add_pd(bezout.matrix[7][7][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[8][0]));
  bezout.matrix[7][7][7] =
      _mm256_add_pd(bezout.matrix[7][7][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[8][1]));
  bezout.matrix[7][7][8] =
      _mm256_add_pd(bezout.matrix[7][7][8],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[8][2]));
  bezout.matrix[7][7][7] =
      _mm256_add_pd(bezout.matrix[7][7][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[8][0]));
  bezout.matrix[7][7][8] =
      _mm256_add_pd(bezout.matrix[7][7][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[8][1]));
  bezout.matrix[7][7][9] =
      _mm256_add_pd(bezout.matrix[7][7][9],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[8][2]));
  bezout.matrix[7][7][8] =
      _mm256_add_pd(bezout.matrix[7][7][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[8][0]));
  bezout.matrix[7][7][9] =
      _mm256_add_pd(bezout.matrix[7][7][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[8][1]));
  bezout.matrix[7][7][10] =
      _mm256_add_pd(bezout.matrix[7][7][10],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[8][2]));
  bezout.matrix[7][7][0] =
      _mm256_sub_pd(bezout.matrix[7][7][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[7][0]));
  bezout.matrix[7][7][1] =
      _mm256_sub_pd(bezout.matrix[7][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[7][1]));
  bezout.matrix[7][7][2] =
      _mm256_sub_pd(bezout.matrix[7][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[7][2]));
  bezout.matrix[7][7][3] =
      _mm256_sub_pd(bezout.matrix[7][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[7][3]));
  bezout.matrix[7][7][1] =
      _mm256_sub_pd(bezout.matrix[7][7][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[7][0]));
  bezout.matrix[7][7][2] =
      _mm256_sub_pd(bezout.matrix[7][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[7][1]));
  bezout.matrix[7][7][3] =
      _mm256_sub_pd(bezout.matrix[7][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[7][2]));
  bezout.matrix[7][7][4] =
      _mm256_sub_pd(bezout.matrix[7][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[7][3]));
  bezout.matrix[7][7][2] =
      _mm256_sub_pd(bezout.matrix[7][7][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[7][0]));
  bezout.matrix[7][7][3] =
      _mm256_sub_pd(bezout.matrix[7][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[7][1]));
  bezout.matrix[7][7][4] =
      _mm256_sub_pd(bezout.matrix[7][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[7][2]));
  bezout.matrix[7][7][5] =
      _mm256_sub_pd(bezout.matrix[7][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[7][3]));
  bezout.matrix[7][7][3] =
      _mm256_sub_pd(bezout.matrix[7][7][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[7][0]));
  bezout.matrix[7][7][4] =
      _mm256_sub_pd(bezout.matrix[7][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[7][1]));
  bezout.matrix[7][7][5] =
      _mm256_sub_pd(bezout.matrix[7][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[7][2]));
  bezout.matrix[7][7][6] =
      _mm256_sub_pd(bezout.matrix[7][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[7][3]));
  bezout.matrix[7][7][4] =
      _mm256_sub_pd(bezout.matrix[7][7][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[7][0]));
  bezout.matrix[7][7][5] =
      _mm256_sub_pd(bezout.matrix[7][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[7][1]));
  bezout.matrix[7][7][6] =
      _mm256_sub_pd(bezout.matrix[7][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[7][2]));
  bezout.matrix[7][7][7] =
      _mm256_sub_pd(bezout.matrix[7][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[7][3]));
  bezout.matrix[7][7][5] =
      _mm256_sub_pd(bezout.matrix[7][7][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[7][0]));
  bezout.matrix[7][7][6] =
      _mm256_sub_pd(bezout.matrix[7][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[7][1]));
  bezout.matrix[7][7][7] =
      _mm256_sub_pd(bezout.matrix[7][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[7][2]));
  bezout.matrix[7][7][8] =
      _mm256_sub_pd(bezout.matrix[7][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[7][3]));
  bezout.matrix[7][7][6] =
      _mm256_sub_pd(bezout.matrix[7][7][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[7][0]));
  bezout.matrix[7][7][7] =
      _mm256_sub_pd(bezout.matrix[7][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[7][1]));
  bezout.matrix[7][7][8] =
      _mm256_sub_pd(bezout.matrix[7][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[7][2]));
  bezout.matrix[7][7][9] =
      _mm256_sub_pd(bezout.matrix[7][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[7][3]));
  bezout.matrix[7][7][7] =
      _mm256_sub_pd(bezout.matrix[7][7][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[7][0]));
  bezout.matrix[7][7][8] =
      _mm256_sub_pd(bezout.matrix[7][7][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[7][1]));
  bezout.matrix[7][7][9] =
      _mm256_sub_pd(bezout.matrix[7][7][9],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[7][2]));
  bezout.matrix[7][7][10] =
      _mm256_sub_pd(bezout.matrix[7][7][10],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[7][3]));
  bezout.matrix[7][8][0] =
      _mm256_add_pd(bezout.matrix[7][8][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[9][0]));
  bezout.matrix[7][8][1] =
      _mm256_add_pd(bezout.matrix[7][8][1],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[9][1]));
  bezout.matrix[7][8][1] =
      _mm256_add_pd(bezout.matrix[7][8][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[9][0]));
  bezout.matrix[7][8][2] =
      _mm256_add_pd(bezout.matrix[7][8][2],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[9][1]));
  bezout.matrix[7][8][2] =
      _mm256_add_pd(bezout.matrix[7][8][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[9][0]));
  bezout.matrix[7][8][3] =
      _mm256_add_pd(bezout.matrix[7][8][3],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[9][1]));
  bezout.matrix[7][8][3] =
      _mm256_add_pd(bezout.matrix[7][8][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[9][0]));
  bezout.matrix[7][8][4] =
      _mm256_add_pd(bezout.matrix[7][8][4],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[9][1]));
  bezout.matrix[7][8][4] =
      _mm256_add_pd(bezout.matrix[7][8][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[9][0]));
  bezout.matrix[7][8][5] =
      _mm256_add_pd(bezout.matrix[7][8][5],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[9][1]));
  bezout.matrix[7][8][5] =
      _mm256_add_pd(bezout.matrix[7][8][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[9][0]));
  bezout.matrix[7][8][6] =
      _mm256_add_pd(bezout.matrix[7][8][6],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[9][1]));
  bezout.matrix[7][8][6] =
      _mm256_add_pd(bezout.matrix[7][8][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[9][0]));
  bezout.matrix[7][8][7] =
      _mm256_add_pd(bezout.matrix[7][8][7],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[9][1]));
  bezout.matrix[7][8][7] =
      _mm256_add_pd(bezout.matrix[7][8][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[9][0]));
  bezout.matrix[7][8][8] =
      _mm256_add_pd(bezout.matrix[7][8][8],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[9][1]));
  bezout.matrix[7][8][8] =
      _mm256_add_pd(bezout.matrix[7][8][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[9][0]));
  bezout.matrix[7][8][9] =
      _mm256_add_pd(bezout.matrix[7][8][9],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[9][1]));
  bezout.matrix[7][8][0] =
      _mm256_sub_pd(bezout.matrix[7][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[7][0]));
  bezout.matrix[7][8][1] =
      _mm256_sub_pd(bezout.matrix[7][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[7][1]));
  bezout.matrix[7][8][2] =
      _mm256_sub_pd(bezout.matrix[7][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[7][2]));
  bezout.matrix[7][8][3] =
      _mm256_sub_pd(bezout.matrix[7][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[7][3]));
  bezout.matrix[7][8][1] =
      _mm256_sub_pd(bezout.matrix[7][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[7][0]));
  bezout.matrix[7][8][2] =
      _mm256_sub_pd(bezout.matrix[7][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[7][1]));
  bezout.matrix[7][8][3] =
      _mm256_sub_pd(bezout.matrix[7][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[7][2]));
  bezout.matrix[7][8][4] =
      _mm256_sub_pd(bezout.matrix[7][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[7][3]));
  bezout.matrix[7][8][2] =
      _mm256_sub_pd(bezout.matrix[7][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[7][0]));
  bezout.matrix[7][8][3] =
      _mm256_sub_pd(bezout.matrix[7][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[7][1]));
  bezout.matrix[7][8][4] =
      _mm256_sub_pd(bezout.matrix[7][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[7][2]));
  bezout.matrix[7][8][5] =
      _mm256_sub_pd(bezout.matrix[7][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[7][3]));
  bezout.matrix[7][8][3] =
      _mm256_sub_pd(bezout.matrix[7][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[7][0]));
  bezout.matrix[7][8][4] =
      _mm256_sub_pd(bezout.matrix[7][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[7][1]));
  bezout.matrix[7][8][5] =
      _mm256_sub_pd(bezout.matrix[7][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[7][2]));
  bezout.matrix[7][8][6] =
      _mm256_sub_pd(bezout.matrix[7][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[7][3]));
  bezout.matrix[7][8][4] =
      _mm256_sub_pd(bezout.matrix[7][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[7][0]));
  bezout.matrix[7][8][5] =
      _mm256_sub_pd(bezout.matrix[7][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[7][1]));
  bezout.matrix[7][8][6] =
      _mm256_sub_pd(bezout.matrix[7][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[7][2]));
  bezout.matrix[7][8][7] =
      _mm256_sub_pd(bezout.matrix[7][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[7][3]));
  bezout.matrix[7][8][5] =
      _mm256_sub_pd(bezout.matrix[7][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[7][0]));
  bezout.matrix[7][8][6] =
      _mm256_sub_pd(bezout.matrix[7][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[7][1]));
  bezout.matrix[7][8][7] =
      _mm256_sub_pd(bezout.matrix[7][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[7][2]));
  bezout.matrix[7][8][8] =
      _mm256_sub_pd(bezout.matrix[7][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[7][3]));
  bezout.matrix[7][8][6] =
      _mm256_sub_pd(bezout.matrix[7][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[7][0]));
  bezout.matrix[7][8][7] =
      _mm256_sub_pd(bezout.matrix[7][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[7][1]));
  bezout.matrix[7][8][8] =
      _mm256_sub_pd(bezout.matrix[7][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[7][2]));
  bezout.matrix[7][8][9] =
      _mm256_sub_pd(bezout.matrix[7][8][9],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[7][3]));
  bezout.matrix[7][9][0] =
      _mm256_add_pd(bezout.matrix[7][9][0],
                    _mm256_mul_pd(poly1.coeffs[7][0], poly2.coeffs[10][0]));
  bezout.matrix[7][9][1] =
      _mm256_add_pd(bezout.matrix[7][9][1],
                    _mm256_mul_pd(poly1.coeffs[7][1], poly2.coeffs[10][0]));
  bezout.matrix[7][9][2] =
      _mm256_add_pd(bezout.matrix[7][9][2],
                    _mm256_mul_pd(poly1.coeffs[7][2], poly2.coeffs[10][0]));
  bezout.matrix[7][9][3] =
      _mm256_add_pd(bezout.matrix[7][9][3],
                    _mm256_mul_pd(poly1.coeffs[7][3], poly2.coeffs[10][0]));
  bezout.matrix[7][9][4] =
      _mm256_add_pd(bezout.matrix[7][9][4],
                    _mm256_mul_pd(poly1.coeffs[7][4], poly2.coeffs[10][0]));
  bezout.matrix[7][9][5] =
      _mm256_add_pd(bezout.matrix[7][9][5],
                    _mm256_mul_pd(poly1.coeffs[7][5], poly2.coeffs[10][0]));
  bezout.matrix[7][9][6] =
      _mm256_add_pd(bezout.matrix[7][9][6],
                    _mm256_mul_pd(poly1.coeffs[7][6], poly2.coeffs[10][0]));
  bezout.matrix[7][9][7] =
      _mm256_add_pd(bezout.matrix[7][9][7],
                    _mm256_mul_pd(poly1.coeffs[7][7], poly2.coeffs[10][0]));
  bezout.matrix[7][9][8] =
      _mm256_add_pd(bezout.matrix[7][9][8],
                    _mm256_mul_pd(poly1.coeffs[7][8], poly2.coeffs[10][0]));
  bezout.matrix[7][9][0] =
      _mm256_sub_pd(bezout.matrix[7][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[7][0]));
  bezout.matrix[7][9][1] =
      _mm256_sub_pd(bezout.matrix[7][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[7][1]));
  bezout.matrix[7][9][2] =
      _mm256_sub_pd(bezout.matrix[7][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[7][2]));
  bezout.matrix[7][9][3] =
      _mm256_sub_pd(bezout.matrix[7][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[7][3]));
  bezout.matrix[7][9][1] =
      _mm256_sub_pd(bezout.matrix[7][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[7][0]));
  bezout.matrix[7][9][2] =
      _mm256_sub_pd(bezout.matrix[7][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[7][1]));
  bezout.matrix[7][9][3] =
      _mm256_sub_pd(bezout.matrix[7][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[7][2]));
  bezout.matrix[7][9][4] =
      _mm256_sub_pd(bezout.matrix[7][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[7][3]));
  bezout.matrix[7][9][2] =
      _mm256_sub_pd(bezout.matrix[7][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[7][0]));
  bezout.matrix[7][9][3] =
      _mm256_sub_pd(bezout.matrix[7][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[7][1]));
  bezout.matrix[7][9][4] =
      _mm256_sub_pd(bezout.matrix[7][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[7][2]));
  bezout.matrix[7][9][5] =
      _mm256_sub_pd(bezout.matrix[7][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[7][3]));
  bezout.matrix[7][9][3] =
      _mm256_sub_pd(bezout.matrix[7][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[7][0]));
  bezout.matrix[7][9][4] =
      _mm256_sub_pd(bezout.matrix[7][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[7][1]));
  bezout.matrix[7][9][5] =
      _mm256_sub_pd(bezout.matrix[7][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[7][2]));
  bezout.matrix[7][9][6] =
      _mm256_sub_pd(bezout.matrix[7][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[7][3]));
  bezout.matrix[7][9][4] =
      _mm256_sub_pd(bezout.matrix[7][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[7][0]));
  bezout.matrix[7][9][5] =
      _mm256_sub_pd(bezout.matrix[7][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[7][1]));
  bezout.matrix[7][9][6] =
      _mm256_sub_pd(bezout.matrix[7][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[7][2]));
  bezout.matrix[7][9][7] =
      _mm256_sub_pd(bezout.matrix[7][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[7][3]));
  bezout.matrix[7][9][5] =
      _mm256_sub_pd(bezout.matrix[7][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[7][0]));
  bezout.matrix[7][9][6] =
      _mm256_sub_pd(bezout.matrix[7][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[7][1]));
  bezout.matrix[7][9][7] =
      _mm256_sub_pd(bezout.matrix[7][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[7][2]));
  bezout.matrix[7][9][8] =
      _mm256_sub_pd(bezout.matrix[7][9][8],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[7][3]));
  bezout.matrix[7][10][0] =
      _mm256_sub_pd(bezout.matrix[7][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[7][0]));
  bezout.matrix[7][10][1] =
      _mm256_sub_pd(bezout.matrix[7][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[7][1]));
  bezout.matrix[7][10][2] =
      _mm256_sub_pd(bezout.matrix[7][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[7][2]));
  bezout.matrix[7][10][3] =
      _mm256_sub_pd(bezout.matrix[7][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[7][3]));
  bezout.matrix[7][10][1] =
      _mm256_sub_pd(bezout.matrix[7][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[7][0]));
  bezout.matrix[7][10][2] =
      _mm256_sub_pd(bezout.matrix[7][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[7][1]));
  bezout.matrix[7][10][3] =
      _mm256_sub_pd(bezout.matrix[7][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[7][2]));
  bezout.matrix[7][10][4] =
      _mm256_sub_pd(bezout.matrix[7][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[7][3]));
  bezout.matrix[7][10][2] =
      _mm256_sub_pd(bezout.matrix[7][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[7][0]));
  bezout.matrix[7][10][3] =
      _mm256_sub_pd(bezout.matrix[7][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[7][1]));
  bezout.matrix[7][10][4] =
      _mm256_sub_pd(bezout.matrix[7][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[7][2]));
  bezout.matrix[7][10][5] =
      _mm256_sub_pd(bezout.matrix[7][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[7][3]));
  bezout.matrix[7][10][3] =
      _mm256_sub_pd(bezout.matrix[7][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[7][0]));
  bezout.matrix[7][10][4] =
      _mm256_sub_pd(bezout.matrix[7][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[7][1]));
  bezout.matrix[7][10][5] =
      _mm256_sub_pd(bezout.matrix[7][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[7][2]));
  bezout.matrix[7][10][6] =
      _mm256_sub_pd(bezout.matrix[7][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[7][3]));
  bezout.matrix[7][10][4] =
      _mm256_sub_pd(bezout.matrix[7][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[7][0]));
  bezout.matrix[7][10][5] =
      _mm256_sub_pd(bezout.matrix[7][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[7][1]));
  bezout.matrix[7][10][6] =
      _mm256_sub_pd(bezout.matrix[7][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[7][2]));
  bezout.matrix[7][10][7] =
      _mm256_sub_pd(bezout.matrix[7][10][7],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[7][3]));
  bezout.matrix[7][11][0] =
      _mm256_sub_pd(bezout.matrix[7][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[7][0]));
  bezout.matrix[7][11][1] =
      _mm256_sub_pd(bezout.matrix[7][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[7][1]));
  bezout.matrix[7][11][2] =
      _mm256_sub_pd(bezout.matrix[7][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[7][2]));
  bezout.matrix[7][11][3] =
      _mm256_sub_pd(bezout.matrix[7][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[7][3]));
  bezout.matrix[7][11][1] =
      _mm256_sub_pd(bezout.matrix[7][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[7][0]));
  bezout.matrix[7][11][2] =
      _mm256_sub_pd(bezout.matrix[7][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[7][1]));
  bezout.matrix[7][11][3] =
      _mm256_sub_pd(bezout.matrix[7][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[7][2]));
  bezout.matrix[7][11][4] =
      _mm256_sub_pd(bezout.matrix[7][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[7][3]));
  bezout.matrix[7][11][2] =
      _mm256_sub_pd(bezout.matrix[7][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[7][0]));
  bezout.matrix[7][11][3] =
      _mm256_sub_pd(bezout.matrix[7][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[7][1]));
  bezout.matrix[7][11][4] =
      _mm256_sub_pd(bezout.matrix[7][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[7][2]));
  bezout.matrix[7][11][5] =
      _mm256_sub_pd(bezout.matrix[7][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[7][3]));
  bezout.matrix[7][11][3] =
      _mm256_sub_pd(bezout.matrix[7][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[7][0]));
  bezout.matrix[7][11][4] =
      _mm256_sub_pd(bezout.matrix[7][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[7][1]));
  bezout.matrix[7][11][5] =
      _mm256_sub_pd(bezout.matrix[7][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[7][2]));
  bezout.matrix[7][11][6] =
      _mm256_sub_pd(bezout.matrix[7][11][6],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[7][3]));
  bezout.matrix[7][12][0] =
      _mm256_sub_pd(bezout.matrix[7][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[7][0]));
  bezout.matrix[7][12][1] =
      _mm256_sub_pd(bezout.matrix[7][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[7][1]));
  bezout.matrix[7][12][2] =
      _mm256_sub_pd(bezout.matrix[7][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[7][2]));
  bezout.matrix[7][12][3] =
      _mm256_sub_pd(bezout.matrix[7][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[7][3]));
  bezout.matrix[7][12][1] =
      _mm256_sub_pd(bezout.matrix[7][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[7][0]));
  bezout.matrix[7][12][2] =
      _mm256_sub_pd(bezout.matrix[7][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[7][1]));
  bezout.matrix[7][12][3] =
      _mm256_sub_pd(bezout.matrix[7][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[7][2]));
  bezout.matrix[7][12][4] =
      _mm256_sub_pd(bezout.matrix[7][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[7][3]));
  bezout.matrix[7][12][2] =
      _mm256_sub_pd(bezout.matrix[7][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[7][0]));
  bezout.matrix[7][12][3] =
      _mm256_sub_pd(bezout.matrix[7][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[7][1]));
  bezout.matrix[7][12][4] =
      _mm256_sub_pd(bezout.matrix[7][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[7][2]));
  bezout.matrix[7][12][5] =
      _mm256_sub_pd(bezout.matrix[7][12][5],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[7][3]));
  bezout.matrix[7][13][0] =
      _mm256_sub_pd(bezout.matrix[7][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[7][0]));
  bezout.matrix[7][13][1] =
      _mm256_sub_pd(bezout.matrix[7][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[7][1]));
  bezout.matrix[7][13][2] =
      _mm256_sub_pd(bezout.matrix[7][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[7][2]));
  bezout.matrix[7][13][3] =
      _mm256_sub_pd(bezout.matrix[7][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[7][3]));
  bezout.matrix[7][13][1] =
      _mm256_sub_pd(bezout.matrix[7][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[7][0]));
  bezout.matrix[7][13][2] =
      _mm256_sub_pd(bezout.matrix[7][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[7][1]));
  bezout.matrix[7][13][3] =
      _mm256_sub_pd(bezout.matrix[7][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[7][2]));
  bezout.matrix[7][13][4] =
      _mm256_sub_pd(bezout.matrix[7][13][4],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[7][3]));
  bezout.matrix[7][14][0] =
      _mm256_sub_pd(bezout.matrix[7][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[7][0]));
  bezout.matrix[7][14][1] =
      _mm256_sub_pd(bezout.matrix[7][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[7][1]));
  bezout.matrix[7][14][2] =
      _mm256_sub_pd(bezout.matrix[7][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[7][2]));
  bezout.matrix[7][14][3] =
      _mm256_sub_pd(bezout.matrix[7][14][3],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[7][3]));
  bezout.matrix[8][8][0] =
      _mm256_add_pd(bezout.matrix[8][8][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[9][0]));
  bezout.matrix[8][8][1] =
      _mm256_add_pd(bezout.matrix[8][8][1],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[9][1]));
  bezout.matrix[8][8][1] =
      _mm256_add_pd(bezout.matrix[8][8][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[9][0]));
  bezout.matrix[8][8][2] =
      _mm256_add_pd(bezout.matrix[8][8][2],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[9][1]));
  bezout.matrix[8][8][2] =
      _mm256_add_pd(bezout.matrix[8][8][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[9][0]));
  bezout.matrix[8][8][3] =
      _mm256_add_pd(bezout.matrix[8][8][3],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[9][1]));
  bezout.matrix[8][8][3] =
      _mm256_add_pd(bezout.matrix[8][8][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[9][0]));
  bezout.matrix[8][8][4] =
      _mm256_add_pd(bezout.matrix[8][8][4],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[9][1]));
  bezout.matrix[8][8][4] =
      _mm256_add_pd(bezout.matrix[8][8][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[9][0]));
  bezout.matrix[8][8][5] =
      _mm256_add_pd(bezout.matrix[8][8][5],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[9][1]));
  bezout.matrix[8][8][5] =
      _mm256_add_pd(bezout.matrix[8][8][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[9][0]));
  bezout.matrix[8][8][6] =
      _mm256_add_pd(bezout.matrix[8][8][6],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[9][1]));
  bezout.matrix[8][8][6] =
      _mm256_add_pd(bezout.matrix[8][8][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[9][0]));
  bezout.matrix[8][8][7] =
      _mm256_add_pd(bezout.matrix[8][8][7],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[9][1]));
  bezout.matrix[8][8][7] =
      _mm256_add_pd(bezout.matrix[8][8][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[9][0]));
  bezout.matrix[8][8][8] =
      _mm256_add_pd(bezout.matrix[8][8][8],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[9][1]));
  bezout.matrix[8][8][0] =
      _mm256_sub_pd(bezout.matrix[8][8][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[8][0]));
  bezout.matrix[8][8][1] =
      _mm256_sub_pd(bezout.matrix[8][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[8][1]));
  bezout.matrix[8][8][2] =
      _mm256_sub_pd(bezout.matrix[8][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[8][2]));
  bezout.matrix[8][8][1] =
      _mm256_sub_pd(bezout.matrix[8][8][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[8][0]));
  bezout.matrix[8][8][2] =
      _mm256_sub_pd(bezout.matrix[8][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[8][1]));
  bezout.matrix[8][8][3] =
      _mm256_sub_pd(bezout.matrix[8][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[8][2]));
  bezout.matrix[8][8][2] =
      _mm256_sub_pd(bezout.matrix[8][8][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[8][0]));
  bezout.matrix[8][8][3] =
      _mm256_sub_pd(bezout.matrix[8][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[8][1]));
  bezout.matrix[8][8][4] =
      _mm256_sub_pd(bezout.matrix[8][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[8][2]));
  bezout.matrix[8][8][3] =
      _mm256_sub_pd(bezout.matrix[8][8][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[8][0]));
  bezout.matrix[8][8][4] =
      _mm256_sub_pd(bezout.matrix[8][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[8][1]));
  bezout.matrix[8][8][5] =
      _mm256_sub_pd(bezout.matrix[8][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[8][2]));
  bezout.matrix[8][8][4] =
      _mm256_sub_pd(bezout.matrix[8][8][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[8][0]));
  bezout.matrix[8][8][5] =
      _mm256_sub_pd(bezout.matrix[8][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[8][1]));
  bezout.matrix[8][8][6] =
      _mm256_sub_pd(bezout.matrix[8][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[8][2]));
  bezout.matrix[8][8][5] =
      _mm256_sub_pd(bezout.matrix[8][8][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[8][0]));
  bezout.matrix[8][8][6] =
      _mm256_sub_pd(bezout.matrix[8][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[8][1]));
  bezout.matrix[8][8][7] =
      _mm256_sub_pd(bezout.matrix[8][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[8][2]));
  bezout.matrix[8][8][6] =
      _mm256_sub_pd(bezout.matrix[8][8][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[8][0]));
  bezout.matrix[8][8][7] =
      _mm256_sub_pd(bezout.matrix[8][8][7],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[8][1]));
  bezout.matrix[8][8][8] =
      _mm256_sub_pd(bezout.matrix[8][8][8],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[8][2]));
  bezout.matrix[8][9][0] =
      _mm256_add_pd(bezout.matrix[8][9][0],
                    _mm256_mul_pd(poly1.coeffs[8][0], poly2.coeffs[10][0]));
  bezout.matrix[8][9][1] =
      _mm256_add_pd(bezout.matrix[8][9][1],
                    _mm256_mul_pd(poly1.coeffs[8][1], poly2.coeffs[10][0]));
  bezout.matrix[8][9][2] =
      _mm256_add_pd(bezout.matrix[8][9][2],
                    _mm256_mul_pd(poly1.coeffs[8][2], poly2.coeffs[10][0]));
  bezout.matrix[8][9][3] =
      _mm256_add_pd(bezout.matrix[8][9][3],
                    _mm256_mul_pd(poly1.coeffs[8][3], poly2.coeffs[10][0]));
  bezout.matrix[8][9][4] =
      _mm256_add_pd(bezout.matrix[8][9][4],
                    _mm256_mul_pd(poly1.coeffs[8][4], poly2.coeffs[10][0]));
  bezout.matrix[8][9][5] =
      _mm256_add_pd(bezout.matrix[8][9][5],
                    _mm256_mul_pd(poly1.coeffs[8][5], poly2.coeffs[10][0]));
  bezout.matrix[8][9][6] =
      _mm256_add_pd(bezout.matrix[8][9][6],
                    _mm256_mul_pd(poly1.coeffs[8][6], poly2.coeffs[10][0]));
  bezout.matrix[8][9][7] =
      _mm256_add_pd(bezout.matrix[8][9][7],
                    _mm256_mul_pd(poly1.coeffs[8][7], poly2.coeffs[10][0]));
  bezout.matrix[8][9][0] =
      _mm256_sub_pd(bezout.matrix[8][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[8][0]));
  bezout.matrix[8][9][1] =
      _mm256_sub_pd(bezout.matrix[8][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[8][1]));
  bezout.matrix[8][9][2] =
      _mm256_sub_pd(bezout.matrix[8][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[8][2]));
  bezout.matrix[8][9][1] =
      _mm256_sub_pd(bezout.matrix[8][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[8][0]));
  bezout.matrix[8][9][2] =
      _mm256_sub_pd(bezout.matrix[8][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[8][1]));
  bezout.matrix[8][9][3] =
      _mm256_sub_pd(bezout.matrix[8][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[8][2]));
  bezout.matrix[8][9][2] =
      _mm256_sub_pd(bezout.matrix[8][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[8][0]));
  bezout.matrix[8][9][3] =
      _mm256_sub_pd(bezout.matrix[8][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[8][1]));
  bezout.matrix[8][9][4] =
      _mm256_sub_pd(bezout.matrix[8][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[8][2]));
  bezout.matrix[8][9][3] =
      _mm256_sub_pd(bezout.matrix[8][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[8][0]));
  bezout.matrix[8][9][4] =
      _mm256_sub_pd(bezout.matrix[8][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[8][1]));
  bezout.matrix[8][9][5] =
      _mm256_sub_pd(bezout.matrix[8][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[8][2]));
  bezout.matrix[8][9][4] =
      _mm256_sub_pd(bezout.matrix[8][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[8][0]));
  bezout.matrix[8][9][5] =
      _mm256_sub_pd(bezout.matrix[8][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[8][1]));
  bezout.matrix[8][9][6] =
      _mm256_sub_pd(bezout.matrix[8][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[8][2]));
  bezout.matrix[8][9][5] =
      _mm256_sub_pd(bezout.matrix[8][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[8][0]));
  bezout.matrix[8][9][6] =
      _mm256_sub_pd(bezout.matrix[8][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[8][1]));
  bezout.matrix[8][9][7] =
      _mm256_sub_pd(bezout.matrix[8][9][7],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[8][2]));
  bezout.matrix[8][10][0] =
      _mm256_sub_pd(bezout.matrix[8][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[8][0]));
  bezout.matrix[8][10][1] =
      _mm256_sub_pd(bezout.matrix[8][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[8][1]));
  bezout.matrix[8][10][2] =
      _mm256_sub_pd(bezout.matrix[8][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[8][2]));
  bezout.matrix[8][10][1] =
      _mm256_sub_pd(bezout.matrix[8][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[8][0]));
  bezout.matrix[8][10][2] =
      _mm256_sub_pd(bezout.matrix[8][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[8][1]));
  bezout.matrix[8][10][3] =
      _mm256_sub_pd(bezout.matrix[8][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[8][2]));
  bezout.matrix[8][10][2] =
      _mm256_sub_pd(bezout.matrix[8][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[8][0]));
  bezout.matrix[8][10][3] =
      _mm256_sub_pd(bezout.matrix[8][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[8][1]));
  bezout.matrix[8][10][4] =
      _mm256_sub_pd(bezout.matrix[8][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[8][2]));
  bezout.matrix[8][10][3] =
      _mm256_sub_pd(bezout.matrix[8][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[8][0]));
  bezout.matrix[8][10][4] =
      _mm256_sub_pd(bezout.matrix[8][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[8][1]));
  bezout.matrix[8][10][5] =
      _mm256_sub_pd(bezout.matrix[8][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[8][2]));
  bezout.matrix[8][10][4] =
      _mm256_sub_pd(bezout.matrix[8][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[8][0]));
  bezout.matrix[8][10][5] =
      _mm256_sub_pd(bezout.matrix[8][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[8][1]));
  bezout.matrix[8][10][6] =
      _mm256_sub_pd(bezout.matrix[8][10][6],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[8][2]));
  bezout.matrix[8][11][0] =
      _mm256_sub_pd(bezout.matrix[8][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[8][0]));
  bezout.matrix[8][11][1] =
      _mm256_sub_pd(bezout.matrix[8][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[8][1]));
  bezout.matrix[8][11][2] =
      _mm256_sub_pd(bezout.matrix[8][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[8][2]));
  bezout.matrix[8][11][1] =
      _mm256_sub_pd(bezout.matrix[8][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[8][0]));
  bezout.matrix[8][11][2] =
      _mm256_sub_pd(bezout.matrix[8][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[8][1]));
  bezout.matrix[8][11][3] =
      _mm256_sub_pd(bezout.matrix[8][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[8][2]));
  bezout.matrix[8][11][2] =
      _mm256_sub_pd(bezout.matrix[8][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[8][0]));
  bezout.matrix[8][11][3] =
      _mm256_sub_pd(bezout.matrix[8][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[8][1]));
  bezout.matrix[8][11][4] =
      _mm256_sub_pd(bezout.matrix[8][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[8][2]));
  bezout.matrix[8][11][3] =
      _mm256_sub_pd(bezout.matrix[8][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[8][0]));
  bezout.matrix[8][11][4] =
      _mm256_sub_pd(bezout.matrix[8][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[8][1]));
  bezout.matrix[8][11][5] =
      _mm256_sub_pd(bezout.matrix[8][11][5],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[8][2]));
  bezout.matrix[8][12][0] =
      _mm256_sub_pd(bezout.matrix[8][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[8][0]));
  bezout.matrix[8][12][1] =
      _mm256_sub_pd(bezout.matrix[8][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[8][1]));
  bezout.matrix[8][12][2] =
      _mm256_sub_pd(bezout.matrix[8][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[8][2]));
  bezout.matrix[8][12][1] =
      _mm256_sub_pd(bezout.matrix[8][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[8][0]));
  bezout.matrix[8][12][2] =
      _mm256_sub_pd(bezout.matrix[8][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[8][1]));
  bezout.matrix[8][12][3] =
      _mm256_sub_pd(bezout.matrix[8][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[8][2]));
  bezout.matrix[8][12][2] =
      _mm256_sub_pd(bezout.matrix[8][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[8][0]));
  bezout.matrix[8][12][3] =
      _mm256_sub_pd(bezout.matrix[8][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[8][1]));
  bezout.matrix[8][12][4] =
      _mm256_sub_pd(bezout.matrix[8][12][4],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[8][2]));
  bezout.matrix[8][13][0] =
      _mm256_sub_pd(bezout.matrix[8][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[8][0]));
  bezout.matrix[8][13][1] =
      _mm256_sub_pd(bezout.matrix[8][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[8][1]));
  bezout.matrix[8][13][2] =
      _mm256_sub_pd(bezout.matrix[8][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[8][2]));
  bezout.matrix[8][13][1] =
      _mm256_sub_pd(bezout.matrix[8][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[8][0]));
  bezout.matrix[8][13][2] =
      _mm256_sub_pd(bezout.matrix[8][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[8][1]));
  bezout.matrix[8][13][3] =
      _mm256_sub_pd(bezout.matrix[8][13][3],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[8][2]));
  bezout.matrix[8][14][0] =
      _mm256_sub_pd(bezout.matrix[8][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[8][0]));
  bezout.matrix[8][14][1] =
      _mm256_sub_pd(bezout.matrix[8][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[8][1]));
  bezout.matrix[8][14][2] =
      _mm256_sub_pd(bezout.matrix[8][14][2],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[8][2]));
  bezout.matrix[9][9][0] =
      _mm256_add_pd(bezout.matrix[9][9][0],
                    _mm256_mul_pd(poly1.coeffs[9][0], poly2.coeffs[10][0]));
  bezout.matrix[9][9][1] =
      _mm256_add_pd(bezout.matrix[9][9][1],
                    _mm256_mul_pd(poly1.coeffs[9][1], poly2.coeffs[10][0]));
  bezout.matrix[9][9][2] =
      _mm256_add_pd(bezout.matrix[9][9][2],
                    _mm256_mul_pd(poly1.coeffs[9][2], poly2.coeffs[10][0]));
  bezout.matrix[9][9][3] =
      _mm256_add_pd(bezout.matrix[9][9][3],
                    _mm256_mul_pd(poly1.coeffs[9][3], poly2.coeffs[10][0]));
  bezout.matrix[9][9][4] =
      _mm256_add_pd(bezout.matrix[9][9][4],
                    _mm256_mul_pd(poly1.coeffs[9][4], poly2.coeffs[10][0]));
  bezout.matrix[9][9][5] =
      _mm256_add_pd(bezout.matrix[9][9][5],
                    _mm256_mul_pd(poly1.coeffs[9][5], poly2.coeffs[10][0]));
  bezout.matrix[9][9][6] =
      _mm256_add_pd(bezout.matrix[9][9][6],
                    _mm256_mul_pd(poly1.coeffs[9][6], poly2.coeffs[10][0]));
  bezout.matrix[9][9][0] =
      _mm256_sub_pd(bezout.matrix[9][9][0],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[9][0]));
  bezout.matrix[9][9][1] =
      _mm256_sub_pd(bezout.matrix[9][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][0], poly2.coeffs[9][1]));
  bezout.matrix[9][9][1] =
      _mm256_sub_pd(bezout.matrix[9][9][1],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[9][0]));
  bezout.matrix[9][9][2] =
      _mm256_sub_pd(bezout.matrix[9][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][1], poly2.coeffs[9][1]));
  bezout.matrix[9][9][2] =
      _mm256_sub_pd(bezout.matrix[9][9][2],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[9][0]));
  bezout.matrix[9][9][3] =
      _mm256_sub_pd(bezout.matrix[9][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][2], poly2.coeffs[9][1]));
  bezout.matrix[9][9][3] =
      _mm256_sub_pd(bezout.matrix[9][9][3],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[9][0]));
  bezout.matrix[9][9][4] =
      _mm256_sub_pd(bezout.matrix[9][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][3], poly2.coeffs[9][1]));
  bezout.matrix[9][9][4] =
      _mm256_sub_pd(bezout.matrix[9][9][4],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[9][0]));
  bezout.matrix[9][9][5] =
      _mm256_sub_pd(bezout.matrix[9][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][4], poly2.coeffs[9][1]));
  bezout.matrix[9][9][5] =
      _mm256_sub_pd(bezout.matrix[9][9][5],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[9][0]));
  bezout.matrix[9][9][6] =
      _mm256_sub_pd(bezout.matrix[9][9][6],
                    _mm256_mul_pd(poly1.coeffs[10][5], poly2.coeffs[9][1]));
  bezout.matrix[9][10][0] =
      _mm256_sub_pd(bezout.matrix[9][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[9][0]));
  bezout.matrix[9][10][1] =
      _mm256_sub_pd(bezout.matrix[9][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[9][1]));
  bezout.matrix[9][10][1] =
      _mm256_sub_pd(bezout.matrix[9][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[9][0]));
  bezout.matrix[9][10][2] =
      _mm256_sub_pd(bezout.matrix[9][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[9][1]));
  bezout.matrix[9][10][2] =
      _mm256_sub_pd(bezout.matrix[9][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[9][0]));
  bezout.matrix[9][10][3] =
      _mm256_sub_pd(bezout.matrix[9][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[9][1]));
  bezout.matrix[9][10][3] =
      _mm256_sub_pd(bezout.matrix[9][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[9][0]));
  bezout.matrix[9][10][4] =
      _mm256_sub_pd(bezout.matrix[9][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[9][1]));
  bezout.matrix[9][10][4] =
      _mm256_sub_pd(bezout.matrix[9][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[9][0]));
  bezout.matrix[9][10][5] =
      _mm256_sub_pd(bezout.matrix[9][10][5],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[9][1]));
  bezout.matrix[9][11][0] =
      _mm256_sub_pd(bezout.matrix[9][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[9][0]));
  bezout.matrix[9][11][1] =
      _mm256_sub_pd(bezout.matrix[9][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[9][1]));
  bezout.matrix[9][11][1] =
      _mm256_sub_pd(bezout.matrix[9][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[9][0]));
  bezout.matrix[9][11][2] =
      _mm256_sub_pd(bezout.matrix[9][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[9][1]));
  bezout.matrix[9][11][2] =
      _mm256_sub_pd(bezout.matrix[9][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[9][0]));
  bezout.matrix[9][11][3] =
      _mm256_sub_pd(bezout.matrix[9][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[9][1]));
  bezout.matrix[9][11][3] =
      _mm256_sub_pd(bezout.matrix[9][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[9][0]));
  bezout.matrix[9][11][4] =
      _mm256_sub_pd(bezout.matrix[9][11][4],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[9][1]));
  bezout.matrix[9][12][0] =
      _mm256_sub_pd(bezout.matrix[9][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[9][0]));
  bezout.matrix[9][12][1] =
      _mm256_sub_pd(bezout.matrix[9][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[9][1]));
  bezout.matrix[9][12][1] =
      _mm256_sub_pd(bezout.matrix[9][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[9][0]));
  bezout.matrix[9][12][2] =
      _mm256_sub_pd(bezout.matrix[9][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[9][1]));
  bezout.matrix[9][12][2] =
      _mm256_sub_pd(bezout.matrix[9][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[9][0]));
  bezout.matrix[9][12][3] =
      _mm256_sub_pd(bezout.matrix[9][12][3],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[9][1]));
  bezout.matrix[9][13][0] =
      _mm256_sub_pd(bezout.matrix[9][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[9][0]));
  bezout.matrix[9][13][1] =
      _mm256_sub_pd(bezout.matrix[9][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[9][1]));
  bezout.matrix[9][13][1] =
      _mm256_sub_pd(bezout.matrix[9][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[9][0]));
  bezout.matrix[9][13][2] =
      _mm256_sub_pd(bezout.matrix[9][13][2],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[9][1]));
  bezout.matrix[9][14][0] =
      _mm256_sub_pd(bezout.matrix[9][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[9][0]));
  bezout.matrix[9][14][1] =
      _mm256_sub_pd(bezout.matrix[9][14][1],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[9][1]));
  bezout.matrix[10][10][0] =
      _mm256_sub_pd(bezout.matrix[10][10][0],
                    _mm256_mul_pd(poly1.coeffs[11][0], poly2.coeffs[10][0]));
  bezout.matrix[10][10][1] =
      _mm256_sub_pd(bezout.matrix[10][10][1],
                    _mm256_mul_pd(poly1.coeffs[11][1], poly2.coeffs[10][0]));
  bezout.matrix[10][10][2] =
      _mm256_sub_pd(bezout.matrix[10][10][2],
                    _mm256_mul_pd(poly1.coeffs[11][2], poly2.coeffs[10][0]));
  bezout.matrix[10][10][3] =
      _mm256_sub_pd(bezout.matrix[10][10][3],
                    _mm256_mul_pd(poly1.coeffs[11][3], poly2.coeffs[10][0]));
  bezout.matrix[10][10][4] =
      _mm256_sub_pd(bezout.matrix[10][10][4],
                    _mm256_mul_pd(poly1.coeffs[11][4], poly2.coeffs[10][0]));
  bezout.matrix[10][11][0] =
      _mm256_sub_pd(bezout.matrix[10][11][0],
                    _mm256_mul_pd(poly1.coeffs[12][0], poly2.coeffs[10][0]));
  bezout.matrix[10][11][1] =
      _mm256_sub_pd(bezout.matrix[10][11][1],
                    _mm256_mul_pd(poly1.coeffs[12][1], poly2.coeffs[10][0]));
  bezout.matrix[10][11][2] =
      _mm256_sub_pd(bezout.matrix[10][11][2],
                    _mm256_mul_pd(poly1.coeffs[12][2], poly2.coeffs[10][0]));
  bezout.matrix[10][11][3] =
      _mm256_sub_pd(bezout.matrix[10][11][3],
                    _mm256_mul_pd(poly1.coeffs[12][3], poly2.coeffs[10][0]));
  bezout.matrix[10][12][0] =
      _mm256_sub_pd(bezout.matrix[10][12][0],
                    _mm256_mul_pd(poly1.coeffs[13][0], poly2.coeffs[10][0]));
  bezout.matrix[10][12][1] =
      _mm256_sub_pd(bezout.matrix[10][12][1],
                    _mm256_mul_pd(poly1.coeffs[13][1], poly2.coeffs[10][0]));
  bezout.matrix[10][12][2] =
      _mm256_sub_pd(bezout.matrix[10][12][2],
                    _mm256_mul_pd(poly1.coeffs[13][2], poly2.coeffs[10][0]));
  bezout.matrix[10][13][0] =
      _mm256_sub_pd(bezout.matrix[10][13][0],
                    _mm256_mul_pd(poly1.coeffs[14][0], poly2.coeffs[10][0]));
  bezout.matrix[10][13][1] =
      _mm256_sub_pd(bezout.matrix[10][13][1],
                    _mm256_mul_pd(poly1.coeffs[14][1], poly2.coeffs[10][0]));
  bezout.matrix[10][14][0] =
      _mm256_sub_pd(bezout.matrix[10][14][0],
                    _mm256_mul_pd(poly1.coeffs[15][0], poly2.coeffs[10][0]));
  bezout.matrix[1][1][0] =
      _mm256_add_pd(bezout.matrix[1][1][0], bezout.matrix[0][2][0]);
  bezout.matrix[1][1][1] =
      _mm256_add_pd(bezout.matrix[1][1][1], bezout.matrix[0][2][1]);
  bezout.matrix[1][1][2] =
      _mm256_add_pd(bezout.matrix[1][1][2], bezout.matrix[0][2][2]);
  bezout.matrix[1][1][3] =
      _mm256_add_pd(bezout.matrix[1][1][3], bezout.matrix[0][2][3]);
  bezout.matrix[1][1][4] =
      _mm256_add_pd(bezout.matrix[1][1][4], bezout.matrix[0][2][4]);
  bezout.matrix[1][1][5] =
      _mm256_add_pd(bezout.matrix[1][1][5], bezout.matrix[0][2][5]);
  bezout.matrix[1][1][6] =
      _mm256_add_pd(bezout.matrix[1][1][6], bezout.matrix[0][2][6]);
  bezout.matrix[1][1][7] =
      _mm256_add_pd(bezout.matrix[1][1][7], bezout.matrix[0][2][7]);
  bezout.matrix[1][1][8] =
      _mm256_add_pd(bezout.matrix[1][1][8], bezout.matrix[0][2][8]);
  bezout.matrix[1][1][9] =
      _mm256_add_pd(bezout.matrix[1][1][9], bezout.matrix[0][2][9]);
  bezout.matrix[1][1][10] =
      _mm256_add_pd(bezout.matrix[1][1][10], bezout.matrix[0][2][10]);
  bezout.matrix[1][1][11] =
      _mm256_add_pd(bezout.matrix[1][1][11], bezout.matrix[0][2][11]);
  bezout.matrix[1][1][12] =
      _mm256_add_pd(bezout.matrix[1][1][12], bezout.matrix[0][2][12]);
  bezout.matrix[1][1][13] =
      _mm256_add_pd(bezout.matrix[1][1][13], bezout.matrix[0][2][13]);
  bezout.matrix[1][1][14] =
      _mm256_add_pd(bezout.matrix[1][1][14], bezout.matrix[0][2][14]);
  bezout.matrix[1][1][15] =
      _mm256_add_pd(bezout.matrix[1][1][15], bezout.matrix[0][2][15]);
  bezout.matrix[1][2][0] =
      _mm256_add_pd(bezout.matrix[1][2][0], bezout.matrix[0][3][0]);
  bezout.matrix[1][2][1] =
      _mm256_add_pd(bezout.matrix[1][2][1], bezout.matrix[0][3][1]);
  bezout.matrix[1][2][2] =
      _mm256_add_pd(bezout.matrix[1][2][2], bezout.matrix[0][3][2]);
  bezout.matrix[1][2][3] =
      _mm256_add_pd(bezout.matrix[1][2][3], bezout.matrix[0][3][3]);
  bezout.matrix[1][2][4] =
      _mm256_add_pd(bezout.matrix[1][2][4], bezout.matrix[0][3][4]);
  bezout.matrix[1][2][5] =
      _mm256_add_pd(bezout.matrix[1][2][5], bezout.matrix[0][3][5]);
  bezout.matrix[1][2][6] =
      _mm256_add_pd(bezout.matrix[1][2][6], bezout.matrix[0][3][6]);
  bezout.matrix[1][2][7] =
      _mm256_add_pd(bezout.matrix[1][2][7], bezout.matrix[0][3][7]);
  bezout.matrix[1][2][8] =
      _mm256_add_pd(bezout.matrix[1][2][8], bezout.matrix[0][3][8]);
  bezout.matrix[1][2][9] =
      _mm256_add_pd(bezout.matrix[1][2][9], bezout.matrix[0][3][9]);
  bezout.matrix[1][2][10] =
      _mm256_add_pd(bezout.matrix[1][2][10], bezout.matrix[0][3][10]);
  bezout.matrix[1][2][11] =
      _mm256_add_pd(bezout.matrix[1][2][11], bezout.matrix[0][3][11]);
  bezout.matrix[1][2][12] =
      _mm256_add_pd(bezout.matrix[1][2][12], bezout.matrix[0][3][12]);
  bezout.matrix[1][2][13] =
      _mm256_add_pd(bezout.matrix[1][2][13], bezout.matrix[0][3][13]);
  bezout.matrix[1][2][14] =
      _mm256_add_pd(bezout.matrix[1][2][14], bezout.matrix[0][3][14]);
  bezout.matrix[1][2][15] =
      _mm256_add_pd(bezout.matrix[1][2][15], bezout.matrix[0][3][15]);
  bezout.matrix[1][3][0] =
      _mm256_add_pd(bezout.matrix[1][3][0], bezout.matrix[0][4][0]);
  bezout.matrix[1][3][1] =
      _mm256_add_pd(bezout.matrix[1][3][1], bezout.matrix[0][4][1]);
  bezout.matrix[1][3][2] =
      _mm256_add_pd(bezout.matrix[1][3][2], bezout.matrix[0][4][2]);
  bezout.matrix[1][3][3] =
      _mm256_add_pd(bezout.matrix[1][3][3], bezout.matrix[0][4][3]);
  bezout.matrix[1][3][4] =
      _mm256_add_pd(bezout.matrix[1][3][4], bezout.matrix[0][4][4]);
  bezout.matrix[1][3][5] =
      _mm256_add_pd(bezout.matrix[1][3][5], bezout.matrix[0][4][5]);
  bezout.matrix[1][3][6] =
      _mm256_add_pd(bezout.matrix[1][3][6], bezout.matrix[0][4][6]);
  bezout.matrix[1][3][7] =
      _mm256_add_pd(bezout.matrix[1][3][7], bezout.matrix[0][4][7]);
  bezout.matrix[1][3][8] =
      _mm256_add_pd(bezout.matrix[1][3][8], bezout.matrix[0][4][8]);
  bezout.matrix[1][3][9] =
      _mm256_add_pd(bezout.matrix[1][3][9], bezout.matrix[0][4][9]);
  bezout.matrix[1][3][10] =
      _mm256_add_pd(bezout.matrix[1][3][10], bezout.matrix[0][4][10]);
  bezout.matrix[1][3][11] =
      _mm256_add_pd(bezout.matrix[1][3][11], bezout.matrix[0][4][11]);
  bezout.matrix[1][3][12] =
      _mm256_add_pd(bezout.matrix[1][3][12], bezout.matrix[0][4][12]);
  bezout.matrix[1][3][13] =
      _mm256_add_pd(bezout.matrix[1][3][13], bezout.matrix[0][4][13]);
  bezout.matrix[1][3][14] =
      _mm256_add_pd(bezout.matrix[1][3][14], bezout.matrix[0][4][14]);
  bezout.matrix[1][3][15] =
      _mm256_add_pd(bezout.matrix[1][3][15], bezout.matrix[0][4][15]);
  bezout.matrix[1][4][0] =
      _mm256_add_pd(bezout.matrix[1][4][0], bezout.matrix[0][5][0]);
  bezout.matrix[1][4][1] =
      _mm256_add_pd(bezout.matrix[1][4][1], bezout.matrix[0][5][1]);
  bezout.matrix[1][4][2] =
      _mm256_add_pd(bezout.matrix[1][4][2], bezout.matrix[0][5][2]);
  bezout.matrix[1][4][3] =
      _mm256_add_pd(bezout.matrix[1][4][3], bezout.matrix[0][5][3]);
  bezout.matrix[1][4][4] =
      _mm256_add_pd(bezout.matrix[1][4][4], bezout.matrix[0][5][4]);
  bezout.matrix[1][4][5] =
      _mm256_add_pd(bezout.matrix[1][4][5], bezout.matrix[0][5][5]);
  bezout.matrix[1][4][6] =
      _mm256_add_pd(bezout.matrix[1][4][6], bezout.matrix[0][5][6]);
  bezout.matrix[1][4][7] =
      _mm256_add_pd(bezout.matrix[1][4][7], bezout.matrix[0][5][7]);
  bezout.matrix[1][4][8] =
      _mm256_add_pd(bezout.matrix[1][4][8], bezout.matrix[0][5][8]);
  bezout.matrix[1][4][9] =
      _mm256_add_pd(bezout.matrix[1][4][9], bezout.matrix[0][5][9]);
  bezout.matrix[1][4][10] =
      _mm256_add_pd(bezout.matrix[1][4][10], bezout.matrix[0][5][10]);
  bezout.matrix[1][4][11] =
      _mm256_add_pd(bezout.matrix[1][4][11], bezout.matrix[0][5][11]);
  bezout.matrix[1][4][12] =
      _mm256_add_pd(bezout.matrix[1][4][12], bezout.matrix[0][5][12]);
  bezout.matrix[1][4][13] =
      _mm256_add_pd(bezout.matrix[1][4][13], bezout.matrix[0][5][13]);
  bezout.matrix[1][4][14] =
      _mm256_add_pd(bezout.matrix[1][4][14], bezout.matrix[0][5][14]);
  bezout.matrix[1][4][15] =
      _mm256_add_pd(bezout.matrix[1][4][15], bezout.matrix[0][5][15]);
  bezout.matrix[1][5][0] =
      _mm256_add_pd(bezout.matrix[1][5][0], bezout.matrix[0][6][0]);
  bezout.matrix[1][5][1] =
      _mm256_add_pd(bezout.matrix[1][5][1], bezout.matrix[0][6][1]);
  bezout.matrix[1][5][2] =
      _mm256_add_pd(bezout.matrix[1][5][2], bezout.matrix[0][6][2]);
  bezout.matrix[1][5][3] =
      _mm256_add_pd(bezout.matrix[1][5][3], bezout.matrix[0][6][3]);
  bezout.matrix[1][5][4] =
      _mm256_add_pd(bezout.matrix[1][5][4], bezout.matrix[0][6][4]);
  bezout.matrix[1][5][5] =
      _mm256_add_pd(bezout.matrix[1][5][5], bezout.matrix[0][6][5]);
  bezout.matrix[1][5][6] =
      _mm256_add_pd(bezout.matrix[1][5][6], bezout.matrix[0][6][6]);
  bezout.matrix[1][5][7] =
      _mm256_add_pd(bezout.matrix[1][5][7], bezout.matrix[0][6][7]);
  bezout.matrix[1][5][8] =
      _mm256_add_pd(bezout.matrix[1][5][8], bezout.matrix[0][6][8]);
  bezout.matrix[1][5][9] =
      _mm256_add_pd(bezout.matrix[1][5][9], bezout.matrix[0][6][9]);
  bezout.matrix[1][5][10] =
      _mm256_add_pd(bezout.matrix[1][5][10], bezout.matrix[0][6][10]);
  bezout.matrix[1][5][11] =
      _mm256_add_pd(bezout.matrix[1][5][11], bezout.matrix[0][6][11]);
  bezout.matrix[1][5][12] =
      _mm256_add_pd(bezout.matrix[1][5][12], bezout.matrix[0][6][12]);
  bezout.matrix[1][5][13] =
      _mm256_add_pd(bezout.matrix[1][5][13], bezout.matrix[0][6][13]);
  bezout.matrix[1][5][14] =
      _mm256_add_pd(bezout.matrix[1][5][14], bezout.matrix[0][6][14]);
  bezout.matrix[1][5][15] =
      _mm256_add_pd(bezout.matrix[1][5][15], bezout.matrix[0][6][15]);
  bezout.matrix[1][6][0] =
      _mm256_add_pd(bezout.matrix[1][6][0], bezout.matrix[0][7][0]);
  bezout.matrix[1][6][1] =
      _mm256_add_pd(bezout.matrix[1][6][1], bezout.matrix[0][7][1]);
  bezout.matrix[1][6][2] =
      _mm256_add_pd(bezout.matrix[1][6][2], bezout.matrix[0][7][2]);
  bezout.matrix[1][6][3] =
      _mm256_add_pd(bezout.matrix[1][6][3], bezout.matrix[0][7][3]);
  bezout.matrix[1][6][4] =
      _mm256_add_pd(bezout.matrix[1][6][4], bezout.matrix[0][7][4]);
  bezout.matrix[1][6][5] =
      _mm256_add_pd(bezout.matrix[1][6][5], bezout.matrix[0][7][5]);
  bezout.matrix[1][6][6] =
      _mm256_add_pd(bezout.matrix[1][6][6], bezout.matrix[0][7][6]);
  bezout.matrix[1][6][7] =
      _mm256_add_pd(bezout.matrix[1][6][7], bezout.matrix[0][7][7]);
  bezout.matrix[1][6][8] =
      _mm256_add_pd(bezout.matrix[1][6][8], bezout.matrix[0][7][8]);
  bezout.matrix[1][6][9] =
      _mm256_add_pd(bezout.matrix[1][6][9], bezout.matrix[0][7][9]);
  bezout.matrix[1][6][10] =
      _mm256_add_pd(bezout.matrix[1][6][10], bezout.matrix[0][7][10]);
  bezout.matrix[1][6][11] =
      _mm256_add_pd(bezout.matrix[1][6][11], bezout.matrix[0][7][11]);
  bezout.matrix[1][6][12] =
      _mm256_add_pd(bezout.matrix[1][6][12], bezout.matrix[0][7][12]);
  bezout.matrix[1][6][13] =
      _mm256_add_pd(bezout.matrix[1][6][13], bezout.matrix[0][7][13]);
  bezout.matrix[1][6][14] =
      _mm256_add_pd(bezout.matrix[1][6][14], bezout.matrix[0][7][14]);
  bezout.matrix[1][6][15] =
      _mm256_add_pd(bezout.matrix[1][6][15], bezout.matrix[0][7][15]);
  bezout.matrix[1][7][0] =
      _mm256_add_pd(bezout.matrix[1][7][0], bezout.matrix[0][8][0]);
  bezout.matrix[1][7][1] =
      _mm256_add_pd(bezout.matrix[1][7][1], bezout.matrix[0][8][1]);
  bezout.matrix[1][7][2] =
      _mm256_add_pd(bezout.matrix[1][7][2], bezout.matrix[0][8][2]);
  bezout.matrix[1][7][3] =
      _mm256_add_pd(bezout.matrix[1][7][3], bezout.matrix[0][8][3]);
  bezout.matrix[1][7][4] =
      _mm256_add_pd(bezout.matrix[1][7][4], bezout.matrix[0][8][4]);
  bezout.matrix[1][7][5] =
      _mm256_add_pd(bezout.matrix[1][7][5], bezout.matrix[0][8][5]);
  bezout.matrix[1][7][6] =
      _mm256_add_pd(bezout.matrix[1][7][6], bezout.matrix[0][8][6]);
  bezout.matrix[1][7][7] =
      _mm256_add_pd(bezout.matrix[1][7][7], bezout.matrix[0][8][7]);
  bezout.matrix[1][7][8] =
      _mm256_add_pd(bezout.matrix[1][7][8], bezout.matrix[0][8][8]);
  bezout.matrix[1][7][9] =
      _mm256_add_pd(bezout.matrix[1][7][9], bezout.matrix[0][8][9]);
  bezout.matrix[1][7][10] =
      _mm256_add_pd(bezout.matrix[1][7][10], bezout.matrix[0][8][10]);
  bezout.matrix[1][7][11] =
      _mm256_add_pd(bezout.matrix[1][7][11], bezout.matrix[0][8][11]);
  bezout.matrix[1][7][12] =
      _mm256_add_pd(bezout.matrix[1][7][12], bezout.matrix[0][8][12]);
  bezout.matrix[1][7][13] =
      _mm256_add_pd(bezout.matrix[1][7][13], bezout.matrix[0][8][13]);
  bezout.matrix[1][7][14] =
      _mm256_add_pd(bezout.matrix[1][7][14], bezout.matrix[0][8][14]);
  bezout.matrix[1][7][15] =
      _mm256_add_pd(bezout.matrix[1][7][15], bezout.matrix[0][8][15]);
  bezout.matrix[1][8][0] =
      _mm256_add_pd(bezout.matrix[1][8][0], bezout.matrix[0][9][0]);
  bezout.matrix[1][8][1] =
      _mm256_add_pd(bezout.matrix[1][8][1], bezout.matrix[0][9][1]);
  bezout.matrix[1][8][2] =
      _mm256_add_pd(bezout.matrix[1][8][2], bezout.matrix[0][9][2]);
  bezout.matrix[1][8][3] =
      _mm256_add_pd(bezout.matrix[1][8][3], bezout.matrix[0][9][3]);
  bezout.matrix[1][8][4] =
      _mm256_add_pd(bezout.matrix[1][8][4], bezout.matrix[0][9][4]);
  bezout.matrix[1][8][5] =
      _mm256_add_pd(bezout.matrix[1][8][5], bezout.matrix[0][9][5]);
  bezout.matrix[1][8][6] =
      _mm256_add_pd(bezout.matrix[1][8][6], bezout.matrix[0][9][6]);
  bezout.matrix[1][8][7] =
      _mm256_add_pd(bezout.matrix[1][8][7], bezout.matrix[0][9][7]);
  bezout.matrix[1][8][8] =
      _mm256_add_pd(bezout.matrix[1][8][8], bezout.matrix[0][9][8]);
  bezout.matrix[1][8][9] =
      _mm256_add_pd(bezout.matrix[1][8][9], bezout.matrix[0][9][9]);
  bezout.matrix[1][8][10] =
      _mm256_add_pd(bezout.matrix[1][8][10], bezout.matrix[0][9][10]);
  bezout.matrix[1][8][11] =
      _mm256_add_pd(bezout.matrix[1][8][11], bezout.matrix[0][9][11]);
  bezout.matrix[1][8][12] =
      _mm256_add_pd(bezout.matrix[1][8][12], bezout.matrix[0][9][12]);
  bezout.matrix[1][8][13] =
      _mm256_add_pd(bezout.matrix[1][8][13], bezout.matrix[0][9][13]);
  bezout.matrix[1][8][14] =
      _mm256_add_pd(bezout.matrix[1][8][14], bezout.matrix[0][9][14]);
  bezout.matrix[1][8][15] =
      _mm256_add_pd(bezout.matrix[1][8][15], bezout.matrix[0][9][15]);
  bezout.matrix[1][9][0] =
      _mm256_add_pd(bezout.matrix[1][9][0], bezout.matrix[0][10][0]);
  bezout.matrix[1][9][1] =
      _mm256_add_pd(bezout.matrix[1][9][1], bezout.matrix[0][10][1]);
  bezout.matrix[1][9][2] =
      _mm256_add_pd(bezout.matrix[1][9][2], bezout.matrix[0][10][2]);
  bezout.matrix[1][9][3] =
      _mm256_add_pd(bezout.matrix[1][9][3], bezout.matrix[0][10][3]);
  bezout.matrix[1][9][4] =
      _mm256_add_pd(bezout.matrix[1][9][4], bezout.matrix[0][10][4]);
  bezout.matrix[1][9][5] =
      _mm256_add_pd(bezout.matrix[1][9][5], bezout.matrix[0][10][5]);
  bezout.matrix[1][9][6] =
      _mm256_add_pd(bezout.matrix[1][9][6], bezout.matrix[0][10][6]);
  bezout.matrix[1][9][7] =
      _mm256_add_pd(bezout.matrix[1][9][7], bezout.matrix[0][10][7]);
  bezout.matrix[1][9][8] =
      _mm256_add_pd(bezout.matrix[1][9][8], bezout.matrix[0][10][8]);
  bezout.matrix[1][9][9] =
      _mm256_add_pd(bezout.matrix[1][9][9], bezout.matrix[0][10][9]);
  bezout.matrix[1][9][10] =
      _mm256_add_pd(bezout.matrix[1][9][10], bezout.matrix[0][10][10]);
  bezout.matrix[1][9][11] =
      _mm256_add_pd(bezout.matrix[1][9][11], bezout.matrix[0][10][11]);
  bezout.matrix[1][9][12] =
      _mm256_add_pd(bezout.matrix[1][9][12], bezout.matrix[0][10][12]);
  bezout.matrix[1][9][13] =
      _mm256_add_pd(bezout.matrix[1][9][13], bezout.matrix[0][10][13]);
  bezout.matrix[1][9][14] =
      _mm256_add_pd(bezout.matrix[1][9][14], bezout.matrix[0][10][14]);
  bezout.matrix[1][9][15] =
      _mm256_add_pd(bezout.matrix[1][9][15], bezout.matrix[0][10][15]);
  bezout.matrix[1][10][0] =
      _mm256_add_pd(bezout.matrix[1][10][0], bezout.matrix[0][11][0]);
  bezout.matrix[1][10][1] =
      _mm256_add_pd(bezout.matrix[1][10][1], bezout.matrix[0][11][1]);
  bezout.matrix[1][10][2] =
      _mm256_add_pd(bezout.matrix[1][10][2], bezout.matrix[0][11][2]);
  bezout.matrix[1][10][3] =
      _mm256_add_pd(bezout.matrix[1][10][3], bezout.matrix[0][11][3]);
  bezout.matrix[1][10][4] =
      _mm256_add_pd(bezout.matrix[1][10][4], bezout.matrix[0][11][4]);
  bezout.matrix[1][10][5] =
      _mm256_add_pd(bezout.matrix[1][10][5], bezout.matrix[0][11][5]);
  bezout.matrix[1][10][6] =
      _mm256_add_pd(bezout.matrix[1][10][6], bezout.matrix[0][11][6]);
  bezout.matrix[1][10][7] =
      _mm256_add_pd(bezout.matrix[1][10][7], bezout.matrix[0][11][7]);
  bezout.matrix[1][10][8] =
      _mm256_add_pd(bezout.matrix[1][10][8], bezout.matrix[0][11][8]);
  bezout.matrix[1][10][9] =
      _mm256_add_pd(bezout.matrix[1][10][9], bezout.matrix[0][11][9]);
  bezout.matrix[1][10][10] =
      _mm256_add_pd(bezout.matrix[1][10][10], bezout.matrix[0][11][10]);
  bezout.matrix[1][10][11] =
      _mm256_add_pd(bezout.matrix[1][10][11], bezout.matrix[0][11][11]);
  bezout.matrix[1][10][12] =
      _mm256_add_pd(bezout.matrix[1][10][12], bezout.matrix[0][11][12]);
  bezout.matrix[1][10][13] =
      _mm256_add_pd(bezout.matrix[1][10][13], bezout.matrix[0][11][13]);
  bezout.matrix[1][10][14] =
      _mm256_add_pd(bezout.matrix[1][10][14], bezout.matrix[0][11][14]);
  bezout.matrix[1][10][15] =
      _mm256_add_pd(bezout.matrix[1][10][15], bezout.matrix[0][11][15]);
  bezout.matrix[1][11][0] =
      _mm256_add_pd(bezout.matrix[1][11][0], bezout.matrix[0][12][0]);
  bezout.matrix[1][11][1] =
      _mm256_add_pd(bezout.matrix[1][11][1], bezout.matrix[0][12][1]);
  bezout.matrix[1][11][2] =
      _mm256_add_pd(bezout.matrix[1][11][2], bezout.matrix[0][12][2]);
  bezout.matrix[1][11][3] =
      _mm256_add_pd(bezout.matrix[1][11][3], bezout.matrix[0][12][3]);
  bezout.matrix[1][11][4] =
      _mm256_add_pd(bezout.matrix[1][11][4], bezout.matrix[0][12][4]);
  bezout.matrix[1][11][5] =
      _mm256_add_pd(bezout.matrix[1][11][5], bezout.matrix[0][12][5]);
  bezout.matrix[1][11][6] =
      _mm256_add_pd(bezout.matrix[1][11][6], bezout.matrix[0][12][6]);
  bezout.matrix[1][11][7] =
      _mm256_add_pd(bezout.matrix[1][11][7], bezout.matrix[0][12][7]);
  bezout.matrix[1][11][8] =
      _mm256_add_pd(bezout.matrix[1][11][8], bezout.matrix[0][12][8]);
  bezout.matrix[1][11][9] =
      _mm256_add_pd(bezout.matrix[1][11][9], bezout.matrix[0][12][9]);
  bezout.matrix[1][11][10] =
      _mm256_add_pd(bezout.matrix[1][11][10], bezout.matrix[0][12][10]);
  bezout.matrix[1][11][11] =
      _mm256_add_pd(bezout.matrix[1][11][11], bezout.matrix[0][12][11]);
  bezout.matrix[1][11][12] =
      _mm256_add_pd(bezout.matrix[1][11][12], bezout.matrix[0][12][12]);
  bezout.matrix[1][11][13] =
      _mm256_add_pd(bezout.matrix[1][11][13], bezout.matrix[0][12][13]);
  bezout.matrix[1][11][14] =
      _mm256_add_pd(bezout.matrix[1][11][14], bezout.matrix[0][12][14]);
  bezout.matrix[1][11][15] =
      _mm256_add_pd(bezout.matrix[1][11][15], bezout.matrix[0][12][15]);
  bezout.matrix[1][12][0] =
      _mm256_add_pd(bezout.matrix[1][12][0], bezout.matrix[0][13][0]);
  bezout.matrix[1][12][1] =
      _mm256_add_pd(bezout.matrix[1][12][1], bezout.matrix[0][13][1]);
  bezout.matrix[1][12][2] =
      _mm256_add_pd(bezout.matrix[1][12][2], bezout.matrix[0][13][2]);
  bezout.matrix[1][12][3] =
      _mm256_add_pd(bezout.matrix[1][12][3], bezout.matrix[0][13][3]);
  bezout.matrix[1][12][4] =
      _mm256_add_pd(bezout.matrix[1][12][4], bezout.matrix[0][13][4]);
  bezout.matrix[1][12][5] =
      _mm256_add_pd(bezout.matrix[1][12][5], bezout.matrix[0][13][5]);
  bezout.matrix[1][12][6] =
      _mm256_add_pd(bezout.matrix[1][12][6], bezout.matrix[0][13][6]);
  bezout.matrix[1][12][7] =
      _mm256_add_pd(bezout.matrix[1][12][7], bezout.matrix[0][13][7]);
  bezout.matrix[1][12][8] =
      _mm256_add_pd(bezout.matrix[1][12][8], bezout.matrix[0][13][8]);
  bezout.matrix[1][12][9] =
      _mm256_add_pd(bezout.matrix[1][12][9], bezout.matrix[0][13][9]);
  bezout.matrix[1][12][10] =
      _mm256_add_pd(bezout.matrix[1][12][10], bezout.matrix[0][13][10]);
  bezout.matrix[1][12][11] =
      _mm256_add_pd(bezout.matrix[1][12][11], bezout.matrix[0][13][11]);
  bezout.matrix[1][12][12] =
      _mm256_add_pd(bezout.matrix[1][12][12], bezout.matrix[0][13][12]);
  bezout.matrix[1][12][13] =
      _mm256_add_pd(bezout.matrix[1][12][13], bezout.matrix[0][13][13]);
  bezout.matrix[1][12][14] =
      _mm256_add_pd(bezout.matrix[1][12][14], bezout.matrix[0][13][14]);
  bezout.matrix[1][12][15] =
      _mm256_add_pd(bezout.matrix[1][12][15], bezout.matrix[0][13][15]);
  bezout.matrix[1][13][0] =
      _mm256_add_pd(bezout.matrix[1][13][0], bezout.matrix[0][14][0]);
  bezout.matrix[1][13][1] =
      _mm256_add_pd(bezout.matrix[1][13][1], bezout.matrix[0][14][1]);
  bezout.matrix[1][13][2] =
      _mm256_add_pd(bezout.matrix[1][13][2], bezout.matrix[0][14][2]);
  bezout.matrix[1][13][3] =
      _mm256_add_pd(bezout.matrix[1][13][3], bezout.matrix[0][14][3]);
  bezout.matrix[1][13][4] =
      _mm256_add_pd(bezout.matrix[1][13][4], bezout.matrix[0][14][4]);
  bezout.matrix[1][13][5] =
      _mm256_add_pd(bezout.matrix[1][13][5], bezout.matrix[0][14][5]);
  bezout.matrix[1][13][6] =
      _mm256_add_pd(bezout.matrix[1][13][6], bezout.matrix[0][14][6]);
  bezout.matrix[1][13][7] =
      _mm256_add_pd(bezout.matrix[1][13][7], bezout.matrix[0][14][7]);
  bezout.matrix[1][13][8] =
      _mm256_add_pd(bezout.matrix[1][13][8], bezout.matrix[0][14][8]);
  bezout.matrix[1][13][9] =
      _mm256_add_pd(bezout.matrix[1][13][9], bezout.matrix[0][14][9]);
  bezout.matrix[1][13][10] =
      _mm256_add_pd(bezout.matrix[1][13][10], bezout.matrix[0][14][10]);
  bezout.matrix[1][13][11] =
      _mm256_add_pd(bezout.matrix[1][13][11], bezout.matrix[0][14][11]);
  bezout.matrix[1][13][12] =
      _mm256_add_pd(bezout.matrix[1][13][12], bezout.matrix[0][14][12]);
  bezout.matrix[1][13][13] =
      _mm256_add_pd(bezout.matrix[1][13][13], bezout.matrix[0][14][13]);
  bezout.matrix[1][13][14] =
      _mm256_add_pd(bezout.matrix[1][13][14], bezout.matrix[0][14][14]);
  bezout.matrix[1][13][15] =
      _mm256_add_pd(bezout.matrix[1][13][15], bezout.matrix[0][14][15]);
  bezout.matrix[2][2][0] =
      _mm256_add_pd(bezout.matrix[2][2][0], bezout.matrix[1][3][0]);
  bezout.matrix[2][2][1] =
      _mm256_add_pd(bezout.matrix[2][2][1], bezout.matrix[1][3][1]);
  bezout.matrix[2][2][2] =
      _mm256_add_pd(bezout.matrix[2][2][2], bezout.matrix[1][3][2]);
  bezout.matrix[2][2][3] =
      _mm256_add_pd(bezout.matrix[2][2][3], bezout.matrix[1][3][3]);
  bezout.matrix[2][2][4] =
      _mm256_add_pd(bezout.matrix[2][2][4], bezout.matrix[1][3][4]);
  bezout.matrix[2][2][5] =
      _mm256_add_pd(bezout.matrix[2][2][5], bezout.matrix[1][3][5]);
  bezout.matrix[2][2][6] =
      _mm256_add_pd(bezout.matrix[2][2][6], bezout.matrix[1][3][6]);
  bezout.matrix[2][2][7] =
      _mm256_add_pd(bezout.matrix[2][2][7], bezout.matrix[1][3][7]);
  bezout.matrix[2][2][8] =
      _mm256_add_pd(bezout.matrix[2][2][8], bezout.matrix[1][3][8]);
  bezout.matrix[2][2][9] =
      _mm256_add_pd(bezout.matrix[2][2][9], bezout.matrix[1][3][9]);
  bezout.matrix[2][2][10] =
      _mm256_add_pd(bezout.matrix[2][2][10], bezout.matrix[1][3][10]);
  bezout.matrix[2][2][11] =
      _mm256_add_pd(bezout.matrix[2][2][11], bezout.matrix[1][3][11]);
  bezout.matrix[2][2][12] =
      _mm256_add_pd(bezout.matrix[2][2][12], bezout.matrix[1][3][12]);
  bezout.matrix[2][2][13] =
      _mm256_add_pd(bezout.matrix[2][2][13], bezout.matrix[1][3][13]);
  bezout.matrix[2][2][14] =
      _mm256_add_pd(bezout.matrix[2][2][14], bezout.matrix[1][3][14]);
  bezout.matrix[2][2][15] =
      _mm256_add_pd(bezout.matrix[2][2][15], bezout.matrix[1][3][15]);
  bezout.matrix[2][3][0] =
      _mm256_add_pd(bezout.matrix[2][3][0], bezout.matrix[1][4][0]);
  bezout.matrix[2][3][1] =
      _mm256_add_pd(bezout.matrix[2][3][1], bezout.matrix[1][4][1]);
  bezout.matrix[2][3][2] =
      _mm256_add_pd(bezout.matrix[2][3][2], bezout.matrix[1][4][2]);
  bezout.matrix[2][3][3] =
      _mm256_add_pd(bezout.matrix[2][3][3], bezout.matrix[1][4][3]);
  bezout.matrix[2][3][4] =
      _mm256_add_pd(bezout.matrix[2][3][4], bezout.matrix[1][4][4]);
  bezout.matrix[2][3][5] =
      _mm256_add_pd(bezout.matrix[2][3][5], bezout.matrix[1][4][5]);
  bezout.matrix[2][3][6] =
      _mm256_add_pd(bezout.matrix[2][3][6], bezout.matrix[1][4][6]);
  bezout.matrix[2][3][7] =
      _mm256_add_pd(bezout.matrix[2][3][7], bezout.matrix[1][4][7]);
  bezout.matrix[2][3][8] =
      _mm256_add_pd(bezout.matrix[2][3][8], bezout.matrix[1][4][8]);
  bezout.matrix[2][3][9] =
      _mm256_add_pd(bezout.matrix[2][3][9], bezout.matrix[1][4][9]);
  bezout.matrix[2][3][10] =
      _mm256_add_pd(bezout.matrix[2][3][10], bezout.matrix[1][4][10]);
  bezout.matrix[2][3][11] =
      _mm256_add_pd(bezout.matrix[2][3][11], bezout.matrix[1][4][11]);
  bezout.matrix[2][3][12] =
      _mm256_add_pd(bezout.matrix[2][3][12], bezout.matrix[1][4][12]);
  bezout.matrix[2][3][13] =
      _mm256_add_pd(bezout.matrix[2][3][13], bezout.matrix[1][4][13]);
  bezout.matrix[2][3][14] =
      _mm256_add_pd(bezout.matrix[2][3][14], bezout.matrix[1][4][14]);
  bezout.matrix[2][3][15] =
      _mm256_add_pd(bezout.matrix[2][3][15], bezout.matrix[1][4][15]);
  bezout.matrix[2][4][0] =
      _mm256_add_pd(bezout.matrix[2][4][0], bezout.matrix[1][5][0]);
  bezout.matrix[2][4][1] =
      _mm256_add_pd(bezout.matrix[2][4][1], bezout.matrix[1][5][1]);
  bezout.matrix[2][4][2] =
      _mm256_add_pd(bezout.matrix[2][4][2], bezout.matrix[1][5][2]);
  bezout.matrix[2][4][3] =
      _mm256_add_pd(bezout.matrix[2][4][3], bezout.matrix[1][5][3]);
  bezout.matrix[2][4][4] =
      _mm256_add_pd(bezout.matrix[2][4][4], bezout.matrix[1][5][4]);
  bezout.matrix[2][4][5] =
      _mm256_add_pd(bezout.matrix[2][4][5], bezout.matrix[1][5][5]);
  bezout.matrix[2][4][6] =
      _mm256_add_pd(bezout.matrix[2][4][6], bezout.matrix[1][5][6]);
  bezout.matrix[2][4][7] =
      _mm256_add_pd(bezout.matrix[2][4][7], bezout.matrix[1][5][7]);
  bezout.matrix[2][4][8] =
      _mm256_add_pd(bezout.matrix[2][4][8], bezout.matrix[1][5][8]);
  bezout.matrix[2][4][9] =
      _mm256_add_pd(bezout.matrix[2][4][9], bezout.matrix[1][5][9]);
  bezout.matrix[2][4][10] =
      _mm256_add_pd(bezout.matrix[2][4][10], bezout.matrix[1][5][10]);
  bezout.matrix[2][4][11] =
      _mm256_add_pd(bezout.matrix[2][4][11], bezout.matrix[1][5][11]);
  bezout.matrix[2][4][12] =
      _mm256_add_pd(bezout.matrix[2][4][12], bezout.matrix[1][5][12]);
  bezout.matrix[2][4][13] =
      _mm256_add_pd(bezout.matrix[2][4][13], bezout.matrix[1][5][13]);
  bezout.matrix[2][4][14] =
      _mm256_add_pd(bezout.matrix[2][4][14], bezout.matrix[1][5][14]);
  bezout.matrix[2][4][15] =
      _mm256_add_pd(bezout.matrix[2][4][15], bezout.matrix[1][5][15]);
  bezout.matrix[2][5][0] =
      _mm256_add_pd(bezout.matrix[2][5][0], bezout.matrix[1][6][0]);
  bezout.matrix[2][5][1] =
      _mm256_add_pd(bezout.matrix[2][5][1], bezout.matrix[1][6][1]);
  bezout.matrix[2][5][2] =
      _mm256_add_pd(bezout.matrix[2][5][2], bezout.matrix[1][6][2]);
  bezout.matrix[2][5][3] =
      _mm256_add_pd(bezout.matrix[2][5][3], bezout.matrix[1][6][3]);
  bezout.matrix[2][5][4] =
      _mm256_add_pd(bezout.matrix[2][5][4], bezout.matrix[1][6][4]);
  bezout.matrix[2][5][5] =
      _mm256_add_pd(bezout.matrix[2][5][5], bezout.matrix[1][6][5]);
  bezout.matrix[2][5][6] =
      _mm256_add_pd(bezout.matrix[2][5][6], bezout.matrix[1][6][6]);
  bezout.matrix[2][5][7] =
      _mm256_add_pd(bezout.matrix[2][5][7], bezout.matrix[1][6][7]);
  bezout.matrix[2][5][8] =
      _mm256_add_pd(bezout.matrix[2][5][8], bezout.matrix[1][6][8]);
  bezout.matrix[2][5][9] =
      _mm256_add_pd(bezout.matrix[2][5][9], bezout.matrix[1][6][9]);
  bezout.matrix[2][5][10] =
      _mm256_add_pd(bezout.matrix[2][5][10], bezout.matrix[1][6][10]);
  bezout.matrix[2][5][11] =
      _mm256_add_pd(bezout.matrix[2][5][11], bezout.matrix[1][6][11]);
  bezout.matrix[2][5][12] =
      _mm256_add_pd(bezout.matrix[2][5][12], bezout.matrix[1][6][12]);
  bezout.matrix[2][5][13] =
      _mm256_add_pd(bezout.matrix[2][5][13], bezout.matrix[1][6][13]);
  bezout.matrix[2][5][14] =
      _mm256_add_pd(bezout.matrix[2][5][14], bezout.matrix[1][6][14]);
  bezout.matrix[2][5][15] =
      _mm256_add_pd(bezout.matrix[2][5][15], bezout.matrix[1][6][15]);
  bezout.matrix[2][6][0] =
      _mm256_add_pd(bezout.matrix[2][6][0], bezout.matrix[1][7][0]);
  bezout.matrix[2][6][1] =
      _mm256_add_pd(bezout.matrix[2][6][1], bezout.matrix[1][7][1]);
  bezout.matrix[2][6][2] =
      _mm256_add_pd(bezout.matrix[2][6][2], bezout.matrix[1][7][2]);
  bezout.matrix[2][6][3] =
      _mm256_add_pd(bezout.matrix[2][6][3], bezout.matrix[1][7][3]);
  bezout.matrix[2][6][4] =
      _mm256_add_pd(bezout.matrix[2][6][4], bezout.matrix[1][7][4]);
  bezout.matrix[2][6][5] =
      _mm256_add_pd(bezout.matrix[2][6][5], bezout.matrix[1][7][5]);
  bezout.matrix[2][6][6] =
      _mm256_add_pd(bezout.matrix[2][6][6], bezout.matrix[1][7][6]);
  bezout.matrix[2][6][7] =
      _mm256_add_pd(bezout.matrix[2][6][7], bezout.matrix[1][7][7]);
  bezout.matrix[2][6][8] =
      _mm256_add_pd(bezout.matrix[2][6][8], bezout.matrix[1][7][8]);
  bezout.matrix[2][6][9] =
      _mm256_add_pd(bezout.matrix[2][6][9], bezout.matrix[1][7][9]);
  bezout.matrix[2][6][10] =
      _mm256_add_pd(bezout.matrix[2][6][10], bezout.matrix[1][7][10]);
  bezout.matrix[2][6][11] =
      _mm256_add_pd(bezout.matrix[2][6][11], bezout.matrix[1][7][11]);
  bezout.matrix[2][6][12] =
      _mm256_add_pd(bezout.matrix[2][6][12], bezout.matrix[1][7][12]);
  bezout.matrix[2][6][13] =
      _mm256_add_pd(bezout.matrix[2][6][13], bezout.matrix[1][7][13]);
  bezout.matrix[2][6][14] =
      _mm256_add_pd(bezout.matrix[2][6][14], bezout.matrix[1][7][14]);
  bezout.matrix[2][6][15] =
      _mm256_add_pd(bezout.matrix[2][6][15], bezout.matrix[1][7][15]);
  bezout.matrix[2][7][0] =
      _mm256_add_pd(bezout.matrix[2][7][0], bezout.matrix[1][8][0]);
  bezout.matrix[2][7][1] =
      _mm256_add_pd(bezout.matrix[2][7][1], bezout.matrix[1][8][1]);
  bezout.matrix[2][7][2] =
      _mm256_add_pd(bezout.matrix[2][7][2], bezout.matrix[1][8][2]);
  bezout.matrix[2][7][3] =
      _mm256_add_pd(bezout.matrix[2][7][3], bezout.matrix[1][8][3]);
  bezout.matrix[2][7][4] =
      _mm256_add_pd(bezout.matrix[2][7][4], bezout.matrix[1][8][4]);
  bezout.matrix[2][7][5] =
      _mm256_add_pd(bezout.matrix[2][7][5], bezout.matrix[1][8][5]);
  bezout.matrix[2][7][6] =
      _mm256_add_pd(bezout.matrix[2][7][6], bezout.matrix[1][8][6]);
  bezout.matrix[2][7][7] =
      _mm256_add_pd(bezout.matrix[2][7][7], bezout.matrix[1][8][7]);
  bezout.matrix[2][7][8] =
      _mm256_add_pd(bezout.matrix[2][7][8], bezout.matrix[1][8][8]);
  bezout.matrix[2][7][9] =
      _mm256_add_pd(bezout.matrix[2][7][9], bezout.matrix[1][8][9]);
  bezout.matrix[2][7][10] =
      _mm256_add_pd(bezout.matrix[2][7][10], bezout.matrix[1][8][10]);
  bezout.matrix[2][7][11] =
      _mm256_add_pd(bezout.matrix[2][7][11], bezout.matrix[1][8][11]);
  bezout.matrix[2][7][12] =
      _mm256_add_pd(bezout.matrix[2][7][12], bezout.matrix[1][8][12]);
  bezout.matrix[2][7][13] =
      _mm256_add_pd(bezout.matrix[2][7][13], bezout.matrix[1][8][13]);
  bezout.matrix[2][7][14] =
      _mm256_add_pd(bezout.matrix[2][7][14], bezout.matrix[1][8][14]);
  bezout.matrix[2][7][15] =
      _mm256_add_pd(bezout.matrix[2][7][15], bezout.matrix[1][8][15]);
  bezout.matrix[2][8][0] =
      _mm256_add_pd(bezout.matrix[2][8][0], bezout.matrix[1][9][0]);
  bezout.matrix[2][8][1] =
      _mm256_add_pd(bezout.matrix[2][8][1], bezout.matrix[1][9][1]);
  bezout.matrix[2][8][2] =
      _mm256_add_pd(bezout.matrix[2][8][2], bezout.matrix[1][9][2]);
  bezout.matrix[2][8][3] =
      _mm256_add_pd(bezout.matrix[2][8][3], bezout.matrix[1][9][3]);
  bezout.matrix[2][8][4] =
      _mm256_add_pd(bezout.matrix[2][8][4], bezout.matrix[1][9][4]);
  bezout.matrix[2][8][5] =
      _mm256_add_pd(bezout.matrix[2][8][5], bezout.matrix[1][9][5]);
  bezout.matrix[2][8][6] =
      _mm256_add_pd(bezout.matrix[2][8][6], bezout.matrix[1][9][6]);
  bezout.matrix[2][8][7] =
      _mm256_add_pd(bezout.matrix[2][8][7], bezout.matrix[1][9][7]);
  bezout.matrix[2][8][8] =
      _mm256_add_pd(bezout.matrix[2][8][8], bezout.matrix[1][9][8]);
  bezout.matrix[2][8][9] =
      _mm256_add_pd(bezout.matrix[2][8][9], bezout.matrix[1][9][9]);
  bezout.matrix[2][8][10] =
      _mm256_add_pd(bezout.matrix[2][8][10], bezout.matrix[1][9][10]);
  bezout.matrix[2][8][11] =
      _mm256_add_pd(bezout.matrix[2][8][11], bezout.matrix[1][9][11]);
  bezout.matrix[2][8][12] =
      _mm256_add_pd(bezout.matrix[2][8][12], bezout.matrix[1][9][12]);
  bezout.matrix[2][8][13] =
      _mm256_add_pd(bezout.matrix[2][8][13], bezout.matrix[1][9][13]);
  bezout.matrix[2][8][14] =
      _mm256_add_pd(bezout.matrix[2][8][14], bezout.matrix[1][9][14]);
  bezout.matrix[2][8][15] =
      _mm256_add_pd(bezout.matrix[2][8][15], bezout.matrix[1][9][15]);
  bezout.matrix[2][9][0] =
      _mm256_add_pd(bezout.matrix[2][9][0], bezout.matrix[1][10][0]);
  bezout.matrix[2][9][1] =
      _mm256_add_pd(bezout.matrix[2][9][1], bezout.matrix[1][10][1]);
  bezout.matrix[2][9][2] =
      _mm256_add_pd(bezout.matrix[2][9][2], bezout.matrix[1][10][2]);
  bezout.matrix[2][9][3] =
      _mm256_add_pd(bezout.matrix[2][9][3], bezout.matrix[1][10][3]);
  bezout.matrix[2][9][4] =
      _mm256_add_pd(bezout.matrix[2][9][4], bezout.matrix[1][10][4]);
  bezout.matrix[2][9][5] =
      _mm256_add_pd(bezout.matrix[2][9][5], bezout.matrix[1][10][5]);
  bezout.matrix[2][9][6] =
      _mm256_add_pd(bezout.matrix[2][9][6], bezout.matrix[1][10][6]);
  bezout.matrix[2][9][7] =
      _mm256_add_pd(bezout.matrix[2][9][7], bezout.matrix[1][10][7]);
  bezout.matrix[2][9][8] =
      _mm256_add_pd(bezout.matrix[2][9][8], bezout.matrix[1][10][8]);
  bezout.matrix[2][9][9] =
      _mm256_add_pd(bezout.matrix[2][9][9], bezout.matrix[1][10][9]);
  bezout.matrix[2][9][10] =
      _mm256_add_pd(bezout.matrix[2][9][10], bezout.matrix[1][10][10]);
  bezout.matrix[2][9][11] =
      _mm256_add_pd(bezout.matrix[2][9][11], bezout.matrix[1][10][11]);
  bezout.matrix[2][9][12] =
      _mm256_add_pd(bezout.matrix[2][9][12], bezout.matrix[1][10][12]);
  bezout.matrix[2][9][13] =
      _mm256_add_pd(bezout.matrix[2][9][13], bezout.matrix[1][10][13]);
  bezout.matrix[2][9][14] =
      _mm256_add_pd(bezout.matrix[2][9][14], bezout.matrix[1][10][14]);
  bezout.matrix[2][9][15] =
      _mm256_add_pd(bezout.matrix[2][9][15], bezout.matrix[1][10][15]);
  bezout.matrix[2][10][0] =
      _mm256_add_pd(bezout.matrix[2][10][0], bezout.matrix[1][11][0]);
  bezout.matrix[2][10][1] =
      _mm256_add_pd(bezout.matrix[2][10][1], bezout.matrix[1][11][1]);
  bezout.matrix[2][10][2] =
      _mm256_add_pd(bezout.matrix[2][10][2], bezout.matrix[1][11][2]);
  bezout.matrix[2][10][3] =
      _mm256_add_pd(bezout.matrix[2][10][3], bezout.matrix[1][11][3]);
  bezout.matrix[2][10][4] =
      _mm256_add_pd(bezout.matrix[2][10][4], bezout.matrix[1][11][4]);
  bezout.matrix[2][10][5] =
      _mm256_add_pd(bezout.matrix[2][10][5], bezout.matrix[1][11][5]);
  bezout.matrix[2][10][6] =
      _mm256_add_pd(bezout.matrix[2][10][6], bezout.matrix[1][11][6]);
  bezout.matrix[2][10][7] =
      _mm256_add_pd(bezout.matrix[2][10][7], bezout.matrix[1][11][7]);
  bezout.matrix[2][10][8] =
      _mm256_add_pd(bezout.matrix[2][10][8], bezout.matrix[1][11][8]);
  bezout.matrix[2][10][9] =
      _mm256_add_pd(bezout.matrix[2][10][9], bezout.matrix[1][11][9]);
  bezout.matrix[2][10][10] =
      _mm256_add_pd(bezout.matrix[2][10][10], bezout.matrix[1][11][10]);
  bezout.matrix[2][10][11] =
      _mm256_add_pd(bezout.matrix[2][10][11], bezout.matrix[1][11][11]);
  bezout.matrix[2][10][12] =
      _mm256_add_pd(bezout.matrix[2][10][12], bezout.matrix[1][11][12]);
  bezout.matrix[2][10][13] =
      _mm256_add_pd(bezout.matrix[2][10][13], bezout.matrix[1][11][13]);
  bezout.matrix[2][10][14] =
      _mm256_add_pd(bezout.matrix[2][10][14], bezout.matrix[1][11][14]);
  bezout.matrix[2][10][15] =
      _mm256_add_pd(bezout.matrix[2][10][15], bezout.matrix[1][11][15]);
  bezout.matrix[2][11][0] =
      _mm256_add_pd(bezout.matrix[2][11][0], bezout.matrix[1][12][0]);
  bezout.matrix[2][11][1] =
      _mm256_add_pd(bezout.matrix[2][11][1], bezout.matrix[1][12][1]);
  bezout.matrix[2][11][2] =
      _mm256_add_pd(bezout.matrix[2][11][2], bezout.matrix[1][12][2]);
  bezout.matrix[2][11][3] =
      _mm256_add_pd(bezout.matrix[2][11][3], bezout.matrix[1][12][3]);
  bezout.matrix[2][11][4] =
      _mm256_add_pd(bezout.matrix[2][11][4], bezout.matrix[1][12][4]);
  bezout.matrix[2][11][5] =
      _mm256_add_pd(bezout.matrix[2][11][5], bezout.matrix[1][12][5]);
  bezout.matrix[2][11][6] =
      _mm256_add_pd(bezout.matrix[2][11][6], bezout.matrix[1][12][6]);
  bezout.matrix[2][11][7] =
      _mm256_add_pd(bezout.matrix[2][11][7], bezout.matrix[1][12][7]);
  bezout.matrix[2][11][8] =
      _mm256_add_pd(bezout.matrix[2][11][8], bezout.matrix[1][12][8]);
  bezout.matrix[2][11][9] =
      _mm256_add_pd(bezout.matrix[2][11][9], bezout.matrix[1][12][9]);
  bezout.matrix[2][11][10] =
      _mm256_add_pd(bezout.matrix[2][11][10], bezout.matrix[1][12][10]);
  bezout.matrix[2][11][11] =
      _mm256_add_pd(bezout.matrix[2][11][11], bezout.matrix[1][12][11]);
  bezout.matrix[2][11][12] =
      _mm256_add_pd(bezout.matrix[2][11][12], bezout.matrix[1][12][12]);
  bezout.matrix[2][11][13] =
      _mm256_add_pd(bezout.matrix[2][11][13], bezout.matrix[1][12][13]);
  bezout.matrix[2][11][14] =
      _mm256_add_pd(bezout.matrix[2][11][14], bezout.matrix[1][12][14]);
  bezout.matrix[2][11][15] =
      _mm256_add_pd(bezout.matrix[2][11][15], bezout.matrix[1][12][15]);
  bezout.matrix[2][12][0] =
      _mm256_add_pd(bezout.matrix[2][12][0], bezout.matrix[1][13][0]);
  bezout.matrix[2][12][1] =
      _mm256_add_pd(bezout.matrix[2][12][1], bezout.matrix[1][13][1]);
  bezout.matrix[2][12][2] =
      _mm256_add_pd(bezout.matrix[2][12][2], bezout.matrix[1][13][2]);
  bezout.matrix[2][12][3] =
      _mm256_add_pd(bezout.matrix[2][12][3], bezout.matrix[1][13][3]);
  bezout.matrix[2][12][4] =
      _mm256_add_pd(bezout.matrix[2][12][4], bezout.matrix[1][13][4]);
  bezout.matrix[2][12][5] =
      _mm256_add_pd(bezout.matrix[2][12][5], bezout.matrix[1][13][5]);
  bezout.matrix[2][12][6] =
      _mm256_add_pd(bezout.matrix[2][12][6], bezout.matrix[1][13][6]);
  bezout.matrix[2][12][7] =
      _mm256_add_pd(bezout.matrix[2][12][7], bezout.matrix[1][13][7]);
  bezout.matrix[2][12][8] =
      _mm256_add_pd(bezout.matrix[2][12][8], bezout.matrix[1][13][8]);
  bezout.matrix[2][12][9] =
      _mm256_add_pd(bezout.matrix[2][12][9], bezout.matrix[1][13][9]);
  bezout.matrix[2][12][10] =
      _mm256_add_pd(bezout.matrix[2][12][10], bezout.matrix[1][13][10]);
  bezout.matrix[2][12][11] =
      _mm256_add_pd(bezout.matrix[2][12][11], bezout.matrix[1][13][11]);
  bezout.matrix[2][12][12] =
      _mm256_add_pd(bezout.matrix[2][12][12], bezout.matrix[1][13][12]);
  bezout.matrix[2][12][13] =
      _mm256_add_pd(bezout.matrix[2][12][13], bezout.matrix[1][13][13]);
  bezout.matrix[2][12][14] =
      _mm256_add_pd(bezout.matrix[2][12][14], bezout.matrix[1][13][14]);
  bezout.matrix[2][12][15] =
      _mm256_add_pd(bezout.matrix[2][12][15], bezout.matrix[1][13][15]);
  bezout.matrix[2][13][0] =
      _mm256_add_pd(bezout.matrix[2][13][0], bezout.matrix[1][14][0]);
  bezout.matrix[2][13][1] =
      _mm256_add_pd(bezout.matrix[2][13][1], bezout.matrix[1][14][1]);
  bezout.matrix[2][13][2] =
      _mm256_add_pd(bezout.matrix[2][13][2], bezout.matrix[1][14][2]);
  bezout.matrix[2][13][3] =
      _mm256_add_pd(bezout.matrix[2][13][3], bezout.matrix[1][14][3]);
  bezout.matrix[2][13][4] =
      _mm256_add_pd(bezout.matrix[2][13][4], bezout.matrix[1][14][4]);
  bezout.matrix[2][13][5] =
      _mm256_add_pd(bezout.matrix[2][13][5], bezout.matrix[1][14][5]);
  bezout.matrix[2][13][6] =
      _mm256_add_pd(bezout.matrix[2][13][6], bezout.matrix[1][14][6]);
  bezout.matrix[2][13][7] =
      _mm256_add_pd(bezout.matrix[2][13][7], bezout.matrix[1][14][7]);
  bezout.matrix[2][13][8] =
      _mm256_add_pd(bezout.matrix[2][13][8], bezout.matrix[1][14][8]);
  bezout.matrix[2][13][9] =
      _mm256_add_pd(bezout.matrix[2][13][9], bezout.matrix[1][14][9]);
  bezout.matrix[2][13][10] =
      _mm256_add_pd(bezout.matrix[2][13][10], bezout.matrix[1][14][10]);
  bezout.matrix[2][13][11] =
      _mm256_add_pd(bezout.matrix[2][13][11], bezout.matrix[1][14][11]);
  bezout.matrix[2][13][12] =
      _mm256_add_pd(bezout.matrix[2][13][12], bezout.matrix[1][14][12]);
  bezout.matrix[2][13][13] =
      _mm256_add_pd(bezout.matrix[2][13][13], bezout.matrix[1][14][13]);
  bezout.matrix[2][13][14] =
      _mm256_add_pd(bezout.matrix[2][13][14], bezout.matrix[1][14][14]);
  bezout.matrix[2][13][15] =
      _mm256_add_pd(bezout.matrix[2][13][15], bezout.matrix[1][14][15]);
  bezout.matrix[3][3][0] =
      _mm256_add_pd(bezout.matrix[3][3][0], bezout.matrix[2][4][0]);
  bezout.matrix[3][3][1] =
      _mm256_add_pd(bezout.matrix[3][3][1], bezout.matrix[2][4][1]);
  bezout.matrix[3][3][2] =
      _mm256_add_pd(bezout.matrix[3][3][2], bezout.matrix[2][4][2]);
  bezout.matrix[3][3][3] =
      _mm256_add_pd(bezout.matrix[3][3][3], bezout.matrix[2][4][3]);
  bezout.matrix[3][3][4] =
      _mm256_add_pd(bezout.matrix[3][3][4], bezout.matrix[2][4][4]);
  bezout.matrix[3][3][5] =
      _mm256_add_pd(bezout.matrix[3][3][5], bezout.matrix[2][4][5]);
  bezout.matrix[3][3][6] =
      _mm256_add_pd(bezout.matrix[3][3][6], bezout.matrix[2][4][6]);
  bezout.matrix[3][3][7] =
      _mm256_add_pd(bezout.matrix[3][3][7], bezout.matrix[2][4][7]);
  bezout.matrix[3][3][8] =
      _mm256_add_pd(bezout.matrix[3][3][8], bezout.matrix[2][4][8]);
  bezout.matrix[3][3][9] =
      _mm256_add_pd(bezout.matrix[3][3][9], bezout.matrix[2][4][9]);
  bezout.matrix[3][3][10] =
      _mm256_add_pd(bezout.matrix[3][3][10], bezout.matrix[2][4][10]);
  bezout.matrix[3][3][11] =
      _mm256_add_pd(bezout.matrix[3][3][11], bezout.matrix[2][4][11]);
  bezout.matrix[3][3][12] =
      _mm256_add_pd(bezout.matrix[3][3][12], bezout.matrix[2][4][12]);
  bezout.matrix[3][3][13] =
      _mm256_add_pd(bezout.matrix[3][3][13], bezout.matrix[2][4][13]);
  bezout.matrix[3][3][14] =
      _mm256_add_pd(bezout.matrix[3][3][14], bezout.matrix[2][4][14]);
  bezout.matrix[3][3][15] =
      _mm256_add_pd(bezout.matrix[3][3][15], bezout.matrix[2][4][15]);
  bezout.matrix[3][4][0] =
      _mm256_add_pd(bezout.matrix[3][4][0], bezout.matrix[2][5][0]);
  bezout.matrix[3][4][1] =
      _mm256_add_pd(bezout.matrix[3][4][1], bezout.matrix[2][5][1]);
  bezout.matrix[3][4][2] =
      _mm256_add_pd(bezout.matrix[3][4][2], bezout.matrix[2][5][2]);
  bezout.matrix[3][4][3] =
      _mm256_add_pd(bezout.matrix[3][4][3], bezout.matrix[2][5][3]);
  bezout.matrix[3][4][4] =
      _mm256_add_pd(bezout.matrix[3][4][4], bezout.matrix[2][5][4]);
  bezout.matrix[3][4][5] =
      _mm256_add_pd(bezout.matrix[3][4][5], bezout.matrix[2][5][5]);
  bezout.matrix[3][4][6] =
      _mm256_add_pd(bezout.matrix[3][4][6], bezout.matrix[2][5][6]);
  bezout.matrix[3][4][7] =
      _mm256_add_pd(bezout.matrix[3][4][7], bezout.matrix[2][5][7]);
  bezout.matrix[3][4][8] =
      _mm256_add_pd(bezout.matrix[3][4][8], bezout.matrix[2][5][8]);
  bezout.matrix[3][4][9] =
      _mm256_add_pd(bezout.matrix[3][4][9], bezout.matrix[2][5][9]);
  bezout.matrix[3][4][10] =
      _mm256_add_pd(bezout.matrix[3][4][10], bezout.matrix[2][5][10]);
  bezout.matrix[3][4][11] =
      _mm256_add_pd(bezout.matrix[3][4][11], bezout.matrix[2][5][11]);
  bezout.matrix[3][4][12] =
      _mm256_add_pd(bezout.matrix[3][4][12], bezout.matrix[2][5][12]);
  bezout.matrix[3][4][13] =
      _mm256_add_pd(bezout.matrix[3][4][13], bezout.matrix[2][5][13]);
  bezout.matrix[3][4][14] =
      _mm256_add_pd(bezout.matrix[3][4][14], bezout.matrix[2][5][14]);
  bezout.matrix[3][4][15] =
      _mm256_add_pd(bezout.matrix[3][4][15], bezout.matrix[2][5][15]);
  bezout.matrix[3][5][0] =
      _mm256_add_pd(bezout.matrix[3][5][0], bezout.matrix[2][6][0]);
  bezout.matrix[3][5][1] =
      _mm256_add_pd(bezout.matrix[3][5][1], bezout.matrix[2][6][1]);
  bezout.matrix[3][5][2] =
      _mm256_add_pd(bezout.matrix[3][5][2], bezout.matrix[2][6][2]);
  bezout.matrix[3][5][3] =
      _mm256_add_pd(bezout.matrix[3][5][3], bezout.matrix[2][6][3]);
  bezout.matrix[3][5][4] =
      _mm256_add_pd(bezout.matrix[3][5][4], bezout.matrix[2][6][4]);
  bezout.matrix[3][5][5] =
      _mm256_add_pd(bezout.matrix[3][5][5], bezout.matrix[2][6][5]);
  bezout.matrix[3][5][6] =
      _mm256_add_pd(bezout.matrix[3][5][6], bezout.matrix[2][6][6]);
  bezout.matrix[3][5][7] =
      _mm256_add_pd(bezout.matrix[3][5][7], bezout.matrix[2][6][7]);
  bezout.matrix[3][5][8] =
      _mm256_add_pd(bezout.matrix[3][5][8], bezout.matrix[2][6][8]);
  bezout.matrix[3][5][9] =
      _mm256_add_pd(bezout.matrix[3][5][9], bezout.matrix[2][6][9]);
  bezout.matrix[3][5][10] =
      _mm256_add_pd(bezout.matrix[3][5][10], bezout.matrix[2][6][10]);
  bezout.matrix[3][5][11] =
      _mm256_add_pd(bezout.matrix[3][5][11], bezout.matrix[2][6][11]);
  bezout.matrix[3][5][12] =
      _mm256_add_pd(bezout.matrix[3][5][12], bezout.matrix[2][6][12]);
  bezout.matrix[3][5][13] =
      _mm256_add_pd(bezout.matrix[3][5][13], bezout.matrix[2][6][13]);
  bezout.matrix[3][5][14] =
      _mm256_add_pd(bezout.matrix[3][5][14], bezout.matrix[2][6][14]);
  bezout.matrix[3][5][15] =
      _mm256_add_pd(bezout.matrix[3][5][15], bezout.matrix[2][6][15]);
  bezout.matrix[3][6][0] =
      _mm256_add_pd(bezout.matrix[3][6][0], bezout.matrix[2][7][0]);
  bezout.matrix[3][6][1] =
      _mm256_add_pd(bezout.matrix[3][6][1], bezout.matrix[2][7][1]);
  bezout.matrix[3][6][2] =
      _mm256_add_pd(bezout.matrix[3][6][2], bezout.matrix[2][7][2]);
  bezout.matrix[3][6][3] =
      _mm256_add_pd(bezout.matrix[3][6][3], bezout.matrix[2][7][3]);
  bezout.matrix[3][6][4] =
      _mm256_add_pd(bezout.matrix[3][6][4], bezout.matrix[2][7][4]);
  bezout.matrix[3][6][5] =
      _mm256_add_pd(bezout.matrix[3][6][5], bezout.matrix[2][7][5]);
  bezout.matrix[3][6][6] =
      _mm256_add_pd(bezout.matrix[3][6][6], bezout.matrix[2][7][6]);
  bezout.matrix[3][6][7] =
      _mm256_add_pd(bezout.matrix[3][6][7], bezout.matrix[2][7][7]);
  bezout.matrix[3][6][8] =
      _mm256_add_pd(bezout.matrix[3][6][8], bezout.matrix[2][7][8]);
  bezout.matrix[3][6][9] =
      _mm256_add_pd(bezout.matrix[3][6][9], bezout.matrix[2][7][9]);
  bezout.matrix[3][6][10] =
      _mm256_add_pd(bezout.matrix[3][6][10], bezout.matrix[2][7][10]);
  bezout.matrix[3][6][11] =
      _mm256_add_pd(bezout.matrix[3][6][11], bezout.matrix[2][7][11]);
  bezout.matrix[3][6][12] =
      _mm256_add_pd(bezout.matrix[3][6][12], bezout.matrix[2][7][12]);
  bezout.matrix[3][6][13] =
      _mm256_add_pd(bezout.matrix[3][6][13], bezout.matrix[2][7][13]);
  bezout.matrix[3][6][14] =
      _mm256_add_pd(bezout.matrix[3][6][14], bezout.matrix[2][7][14]);
  bezout.matrix[3][6][15] =
      _mm256_add_pd(bezout.matrix[3][6][15], bezout.matrix[2][7][15]);
  bezout.matrix[3][7][0] =
      _mm256_add_pd(bezout.matrix[3][7][0], bezout.matrix[2][8][0]);
  bezout.matrix[3][7][1] =
      _mm256_add_pd(bezout.matrix[3][7][1], bezout.matrix[2][8][1]);
  bezout.matrix[3][7][2] =
      _mm256_add_pd(bezout.matrix[3][7][2], bezout.matrix[2][8][2]);
  bezout.matrix[3][7][3] =
      _mm256_add_pd(bezout.matrix[3][7][3], bezout.matrix[2][8][3]);
  bezout.matrix[3][7][4] =
      _mm256_add_pd(bezout.matrix[3][7][4], bezout.matrix[2][8][4]);
  bezout.matrix[3][7][5] =
      _mm256_add_pd(bezout.matrix[3][7][5], bezout.matrix[2][8][5]);
  bezout.matrix[3][7][6] =
      _mm256_add_pd(bezout.matrix[3][7][6], bezout.matrix[2][8][6]);
  bezout.matrix[3][7][7] =
      _mm256_add_pd(bezout.matrix[3][7][7], bezout.matrix[2][8][7]);
  bezout.matrix[3][7][8] =
      _mm256_add_pd(bezout.matrix[3][7][8], bezout.matrix[2][8][8]);
  bezout.matrix[3][7][9] =
      _mm256_add_pd(bezout.matrix[3][7][9], bezout.matrix[2][8][9]);
  bezout.matrix[3][7][10] =
      _mm256_add_pd(bezout.matrix[3][7][10], bezout.matrix[2][8][10]);
  bezout.matrix[3][7][11] =
      _mm256_add_pd(bezout.matrix[3][7][11], bezout.matrix[2][8][11]);
  bezout.matrix[3][7][12] =
      _mm256_add_pd(bezout.matrix[3][7][12], bezout.matrix[2][8][12]);
  bezout.matrix[3][7][13] =
      _mm256_add_pd(bezout.matrix[3][7][13], bezout.matrix[2][8][13]);
  bezout.matrix[3][7][14] =
      _mm256_add_pd(bezout.matrix[3][7][14], bezout.matrix[2][8][14]);
  bezout.matrix[3][7][15] =
      _mm256_add_pd(bezout.matrix[3][7][15], bezout.matrix[2][8][15]);
  bezout.matrix[3][8][0] =
      _mm256_add_pd(bezout.matrix[3][8][0], bezout.matrix[2][9][0]);
  bezout.matrix[3][8][1] =
      _mm256_add_pd(bezout.matrix[3][8][1], bezout.matrix[2][9][1]);
  bezout.matrix[3][8][2] =
      _mm256_add_pd(bezout.matrix[3][8][2], bezout.matrix[2][9][2]);
  bezout.matrix[3][8][3] =
      _mm256_add_pd(bezout.matrix[3][8][3], bezout.matrix[2][9][3]);
  bezout.matrix[3][8][4] =
      _mm256_add_pd(bezout.matrix[3][8][4], bezout.matrix[2][9][4]);
  bezout.matrix[3][8][5] =
      _mm256_add_pd(bezout.matrix[3][8][5], bezout.matrix[2][9][5]);
  bezout.matrix[3][8][6] =
      _mm256_add_pd(bezout.matrix[3][8][6], bezout.matrix[2][9][6]);
  bezout.matrix[3][8][7] =
      _mm256_add_pd(bezout.matrix[3][8][7], bezout.matrix[2][9][7]);
  bezout.matrix[3][8][8] =
      _mm256_add_pd(bezout.matrix[3][8][8], bezout.matrix[2][9][8]);
  bezout.matrix[3][8][9] =
      _mm256_add_pd(bezout.matrix[3][8][9], bezout.matrix[2][9][9]);
  bezout.matrix[3][8][10] =
      _mm256_add_pd(bezout.matrix[3][8][10], bezout.matrix[2][9][10]);
  bezout.matrix[3][8][11] =
      _mm256_add_pd(bezout.matrix[3][8][11], bezout.matrix[2][9][11]);
  bezout.matrix[3][8][12] =
      _mm256_add_pd(bezout.matrix[3][8][12], bezout.matrix[2][9][12]);
  bezout.matrix[3][8][13] =
      _mm256_add_pd(bezout.matrix[3][8][13], bezout.matrix[2][9][13]);
  bezout.matrix[3][8][14] =
      _mm256_add_pd(bezout.matrix[3][8][14], bezout.matrix[2][9][14]);
  bezout.matrix[3][8][15] =
      _mm256_add_pd(bezout.matrix[3][8][15], bezout.matrix[2][9][15]);
  bezout.matrix[3][9][0] =
      _mm256_add_pd(bezout.matrix[3][9][0], bezout.matrix[2][10][0]);
  bezout.matrix[3][9][1] =
      _mm256_add_pd(bezout.matrix[3][9][1], bezout.matrix[2][10][1]);
  bezout.matrix[3][9][2] =
      _mm256_add_pd(bezout.matrix[3][9][2], bezout.matrix[2][10][2]);
  bezout.matrix[3][9][3] =
      _mm256_add_pd(bezout.matrix[3][9][3], bezout.matrix[2][10][3]);
  bezout.matrix[3][9][4] =
      _mm256_add_pd(bezout.matrix[3][9][4], bezout.matrix[2][10][4]);
  bezout.matrix[3][9][5] =
      _mm256_add_pd(bezout.matrix[3][9][5], bezout.matrix[2][10][5]);
  bezout.matrix[3][9][6] =
      _mm256_add_pd(bezout.matrix[3][9][6], bezout.matrix[2][10][6]);
  bezout.matrix[3][9][7] =
      _mm256_add_pd(bezout.matrix[3][9][7], bezout.matrix[2][10][7]);
  bezout.matrix[3][9][8] =
      _mm256_add_pd(bezout.matrix[3][9][8], bezout.matrix[2][10][8]);
  bezout.matrix[3][9][9] =
      _mm256_add_pd(bezout.matrix[3][9][9], bezout.matrix[2][10][9]);
  bezout.matrix[3][9][10] =
      _mm256_add_pd(bezout.matrix[3][9][10], bezout.matrix[2][10][10]);
  bezout.matrix[3][9][11] =
      _mm256_add_pd(bezout.matrix[3][9][11], bezout.matrix[2][10][11]);
  bezout.matrix[3][9][12] =
      _mm256_add_pd(bezout.matrix[3][9][12], bezout.matrix[2][10][12]);
  bezout.matrix[3][9][13] =
      _mm256_add_pd(bezout.matrix[3][9][13], bezout.matrix[2][10][13]);
  bezout.matrix[3][9][14] =
      _mm256_add_pd(bezout.matrix[3][9][14], bezout.matrix[2][10][14]);
  bezout.matrix[3][9][15] =
      _mm256_add_pd(bezout.matrix[3][9][15], bezout.matrix[2][10][15]);
  bezout.matrix[3][10][0] =
      _mm256_add_pd(bezout.matrix[3][10][0], bezout.matrix[2][11][0]);
  bezout.matrix[3][10][1] =
      _mm256_add_pd(bezout.matrix[3][10][1], bezout.matrix[2][11][1]);
  bezout.matrix[3][10][2] =
      _mm256_add_pd(bezout.matrix[3][10][2], bezout.matrix[2][11][2]);
  bezout.matrix[3][10][3] =
      _mm256_add_pd(bezout.matrix[3][10][3], bezout.matrix[2][11][3]);
  bezout.matrix[3][10][4] =
      _mm256_add_pd(bezout.matrix[3][10][4], bezout.matrix[2][11][4]);
  bezout.matrix[3][10][5] =
      _mm256_add_pd(bezout.matrix[3][10][5], bezout.matrix[2][11][5]);
  bezout.matrix[3][10][6] =
      _mm256_add_pd(bezout.matrix[3][10][6], bezout.matrix[2][11][6]);
  bezout.matrix[3][10][7] =
      _mm256_add_pd(bezout.matrix[3][10][7], bezout.matrix[2][11][7]);
  bezout.matrix[3][10][8] =
      _mm256_add_pd(bezout.matrix[3][10][8], bezout.matrix[2][11][8]);
  bezout.matrix[3][10][9] =
      _mm256_add_pd(bezout.matrix[3][10][9], bezout.matrix[2][11][9]);
  bezout.matrix[3][10][10] =
      _mm256_add_pd(bezout.matrix[3][10][10], bezout.matrix[2][11][10]);
  bezout.matrix[3][10][11] =
      _mm256_add_pd(bezout.matrix[3][10][11], bezout.matrix[2][11][11]);
  bezout.matrix[3][10][12] =
      _mm256_add_pd(bezout.matrix[3][10][12], bezout.matrix[2][11][12]);
  bezout.matrix[3][10][13] =
      _mm256_add_pd(bezout.matrix[3][10][13], bezout.matrix[2][11][13]);
  bezout.matrix[3][10][14] =
      _mm256_add_pd(bezout.matrix[3][10][14], bezout.matrix[2][11][14]);
  bezout.matrix[3][10][15] =
      _mm256_add_pd(bezout.matrix[3][10][15], bezout.matrix[2][11][15]);
  bezout.matrix[3][11][0] =
      _mm256_add_pd(bezout.matrix[3][11][0], bezout.matrix[2][12][0]);
  bezout.matrix[3][11][1] =
      _mm256_add_pd(bezout.matrix[3][11][1], bezout.matrix[2][12][1]);
  bezout.matrix[3][11][2] =
      _mm256_add_pd(bezout.matrix[3][11][2], bezout.matrix[2][12][2]);
  bezout.matrix[3][11][3] =
      _mm256_add_pd(bezout.matrix[3][11][3], bezout.matrix[2][12][3]);
  bezout.matrix[3][11][4] =
      _mm256_add_pd(bezout.matrix[3][11][4], bezout.matrix[2][12][4]);
  bezout.matrix[3][11][5] =
      _mm256_add_pd(bezout.matrix[3][11][5], bezout.matrix[2][12][5]);
  bezout.matrix[3][11][6] =
      _mm256_add_pd(bezout.matrix[3][11][6], bezout.matrix[2][12][6]);
  bezout.matrix[3][11][7] =
      _mm256_add_pd(bezout.matrix[3][11][7], bezout.matrix[2][12][7]);
  bezout.matrix[3][11][8] =
      _mm256_add_pd(bezout.matrix[3][11][8], bezout.matrix[2][12][8]);
  bezout.matrix[3][11][9] =
      _mm256_add_pd(bezout.matrix[3][11][9], bezout.matrix[2][12][9]);
  bezout.matrix[3][11][10] =
      _mm256_add_pd(bezout.matrix[3][11][10], bezout.matrix[2][12][10]);
  bezout.matrix[3][11][11] =
      _mm256_add_pd(bezout.matrix[3][11][11], bezout.matrix[2][12][11]);
  bezout.matrix[3][11][12] =
      _mm256_add_pd(bezout.matrix[3][11][12], bezout.matrix[2][12][12]);
  bezout.matrix[3][11][13] =
      _mm256_add_pd(bezout.matrix[3][11][13], bezout.matrix[2][12][13]);
  bezout.matrix[3][11][14] =
      _mm256_add_pd(bezout.matrix[3][11][14], bezout.matrix[2][12][14]);
  bezout.matrix[3][11][15] =
      _mm256_add_pd(bezout.matrix[3][11][15], bezout.matrix[2][12][15]);
  bezout.matrix[3][12][0] =
      _mm256_add_pd(bezout.matrix[3][12][0], bezout.matrix[2][13][0]);
  bezout.matrix[3][12][1] =
      _mm256_add_pd(bezout.matrix[3][12][1], bezout.matrix[2][13][1]);
  bezout.matrix[3][12][2] =
      _mm256_add_pd(bezout.matrix[3][12][2], bezout.matrix[2][13][2]);
  bezout.matrix[3][12][3] =
      _mm256_add_pd(bezout.matrix[3][12][3], bezout.matrix[2][13][3]);
  bezout.matrix[3][12][4] =
      _mm256_add_pd(bezout.matrix[3][12][4], bezout.matrix[2][13][4]);
  bezout.matrix[3][12][5] =
      _mm256_add_pd(bezout.matrix[3][12][5], bezout.matrix[2][13][5]);
  bezout.matrix[3][12][6] =
      _mm256_add_pd(bezout.matrix[3][12][6], bezout.matrix[2][13][6]);
  bezout.matrix[3][12][7] =
      _mm256_add_pd(bezout.matrix[3][12][7], bezout.matrix[2][13][7]);
  bezout.matrix[3][12][8] =
      _mm256_add_pd(bezout.matrix[3][12][8], bezout.matrix[2][13][8]);
  bezout.matrix[3][12][9] =
      _mm256_add_pd(bezout.matrix[3][12][9], bezout.matrix[2][13][9]);
  bezout.matrix[3][12][10] =
      _mm256_add_pd(bezout.matrix[3][12][10], bezout.matrix[2][13][10]);
  bezout.matrix[3][12][11] =
      _mm256_add_pd(bezout.matrix[3][12][11], bezout.matrix[2][13][11]);
  bezout.matrix[3][12][12] =
      _mm256_add_pd(bezout.matrix[3][12][12], bezout.matrix[2][13][12]);
  bezout.matrix[3][12][13] =
      _mm256_add_pd(bezout.matrix[3][12][13], bezout.matrix[2][13][13]);
  bezout.matrix[3][12][14] =
      _mm256_add_pd(bezout.matrix[3][12][14], bezout.matrix[2][13][14]);
  bezout.matrix[3][12][15] =
      _mm256_add_pd(bezout.matrix[3][12][15], bezout.matrix[2][13][15]);
  bezout.matrix[3][13][0] =
      _mm256_add_pd(bezout.matrix[3][13][0], bezout.matrix[2][14][0]);
  bezout.matrix[3][13][1] =
      _mm256_add_pd(bezout.matrix[3][13][1], bezout.matrix[2][14][1]);
  bezout.matrix[3][13][2] =
      _mm256_add_pd(bezout.matrix[3][13][2], bezout.matrix[2][14][2]);
  bezout.matrix[3][13][3] =
      _mm256_add_pd(bezout.matrix[3][13][3], bezout.matrix[2][14][3]);
  bezout.matrix[3][13][4] =
      _mm256_add_pd(bezout.matrix[3][13][4], bezout.matrix[2][14][4]);
  bezout.matrix[3][13][5] =
      _mm256_add_pd(bezout.matrix[3][13][5], bezout.matrix[2][14][5]);
  bezout.matrix[3][13][6] =
      _mm256_add_pd(bezout.matrix[3][13][6], bezout.matrix[2][14][6]);
  bezout.matrix[3][13][7] =
      _mm256_add_pd(bezout.matrix[3][13][7], bezout.matrix[2][14][7]);
  bezout.matrix[3][13][8] =
      _mm256_add_pd(bezout.matrix[3][13][8], bezout.matrix[2][14][8]);
  bezout.matrix[3][13][9] =
      _mm256_add_pd(bezout.matrix[3][13][9], bezout.matrix[2][14][9]);
  bezout.matrix[3][13][10] =
      _mm256_add_pd(bezout.matrix[3][13][10], bezout.matrix[2][14][10]);
  bezout.matrix[3][13][11] =
      _mm256_add_pd(bezout.matrix[3][13][11], bezout.matrix[2][14][11]);
  bezout.matrix[3][13][12] =
      _mm256_add_pd(bezout.matrix[3][13][12], bezout.matrix[2][14][12]);
  bezout.matrix[3][13][13] =
      _mm256_add_pd(bezout.matrix[3][13][13], bezout.matrix[2][14][13]);
  bezout.matrix[3][13][14] =
      _mm256_add_pd(bezout.matrix[3][13][14], bezout.matrix[2][14][14]);
  bezout.matrix[3][13][15] =
      _mm256_add_pd(bezout.matrix[3][13][15], bezout.matrix[2][14][15]);
  bezout.matrix[4][4][0] =
      _mm256_add_pd(bezout.matrix[4][4][0], bezout.matrix[3][5][0]);
  bezout.matrix[4][4][1] =
      _mm256_add_pd(bezout.matrix[4][4][1], bezout.matrix[3][5][1]);
  bezout.matrix[4][4][2] =
      _mm256_add_pd(bezout.matrix[4][4][2], bezout.matrix[3][5][2]);
  bezout.matrix[4][4][3] =
      _mm256_add_pd(bezout.matrix[4][4][3], bezout.matrix[3][5][3]);
  bezout.matrix[4][4][4] =
      _mm256_add_pd(bezout.matrix[4][4][4], bezout.matrix[3][5][4]);
  bezout.matrix[4][4][5] =
      _mm256_add_pd(bezout.matrix[4][4][5], bezout.matrix[3][5][5]);
  bezout.matrix[4][4][6] =
      _mm256_add_pd(bezout.matrix[4][4][6], bezout.matrix[3][5][6]);
  bezout.matrix[4][4][7] =
      _mm256_add_pd(bezout.matrix[4][4][7], bezout.matrix[3][5][7]);
  bezout.matrix[4][4][8] =
      _mm256_add_pd(bezout.matrix[4][4][8], bezout.matrix[3][5][8]);
  bezout.matrix[4][4][9] =
      _mm256_add_pd(bezout.matrix[4][4][9], bezout.matrix[3][5][9]);
  bezout.matrix[4][4][10] =
      _mm256_add_pd(bezout.matrix[4][4][10], bezout.matrix[3][5][10]);
  bezout.matrix[4][4][11] =
      _mm256_add_pd(bezout.matrix[4][4][11], bezout.matrix[3][5][11]);
  bezout.matrix[4][4][12] =
      _mm256_add_pd(bezout.matrix[4][4][12], bezout.matrix[3][5][12]);
  bezout.matrix[4][4][13] =
      _mm256_add_pd(bezout.matrix[4][4][13], bezout.matrix[3][5][13]);
  bezout.matrix[4][4][14] =
      _mm256_add_pd(bezout.matrix[4][4][14], bezout.matrix[3][5][14]);
  bezout.matrix[4][4][15] =
      _mm256_add_pd(bezout.matrix[4][4][15], bezout.matrix[3][5][15]);
  bezout.matrix[4][5][0] =
      _mm256_add_pd(bezout.matrix[4][5][0], bezout.matrix[3][6][0]);
  bezout.matrix[4][5][1] =
      _mm256_add_pd(bezout.matrix[4][5][1], bezout.matrix[3][6][1]);
  bezout.matrix[4][5][2] =
      _mm256_add_pd(bezout.matrix[4][5][2], bezout.matrix[3][6][2]);
  bezout.matrix[4][5][3] =
      _mm256_add_pd(bezout.matrix[4][5][3], bezout.matrix[3][6][3]);
  bezout.matrix[4][5][4] =
      _mm256_add_pd(bezout.matrix[4][5][4], bezout.matrix[3][6][4]);
  bezout.matrix[4][5][5] =
      _mm256_add_pd(bezout.matrix[4][5][5], bezout.matrix[3][6][5]);
  bezout.matrix[4][5][6] =
      _mm256_add_pd(bezout.matrix[4][5][6], bezout.matrix[3][6][6]);
  bezout.matrix[4][5][7] =
      _mm256_add_pd(bezout.matrix[4][5][7], bezout.matrix[3][6][7]);
  bezout.matrix[4][5][8] =
      _mm256_add_pd(bezout.matrix[4][5][8], bezout.matrix[3][6][8]);
  bezout.matrix[4][5][9] =
      _mm256_add_pd(bezout.matrix[4][5][9], bezout.matrix[3][6][9]);
  bezout.matrix[4][5][10] =
      _mm256_add_pd(bezout.matrix[4][5][10], bezout.matrix[3][6][10]);
  bezout.matrix[4][5][11] =
      _mm256_add_pd(bezout.matrix[4][5][11], bezout.matrix[3][6][11]);
  bezout.matrix[4][5][12] =
      _mm256_add_pd(bezout.matrix[4][5][12], bezout.matrix[3][6][12]);
  bezout.matrix[4][5][13] =
      _mm256_add_pd(bezout.matrix[4][5][13], bezout.matrix[3][6][13]);
  bezout.matrix[4][5][14] =
      _mm256_add_pd(bezout.matrix[4][5][14], bezout.matrix[3][6][14]);
  bezout.matrix[4][5][15] =
      _mm256_add_pd(bezout.matrix[4][5][15], bezout.matrix[3][6][15]);
  bezout.matrix[4][6][0] =
      _mm256_add_pd(bezout.matrix[4][6][0], bezout.matrix[3][7][0]);
  bezout.matrix[4][6][1] =
      _mm256_add_pd(bezout.matrix[4][6][1], bezout.matrix[3][7][1]);
  bezout.matrix[4][6][2] =
      _mm256_add_pd(bezout.matrix[4][6][2], bezout.matrix[3][7][2]);
  bezout.matrix[4][6][3] =
      _mm256_add_pd(bezout.matrix[4][6][3], bezout.matrix[3][7][3]);
  bezout.matrix[4][6][4] =
      _mm256_add_pd(bezout.matrix[4][6][4], bezout.matrix[3][7][4]);
  bezout.matrix[4][6][5] =
      _mm256_add_pd(bezout.matrix[4][6][5], bezout.matrix[3][7][5]);
  bezout.matrix[4][6][6] =
      _mm256_add_pd(bezout.matrix[4][6][6], bezout.matrix[3][7][6]);
  bezout.matrix[4][6][7] =
      _mm256_add_pd(bezout.matrix[4][6][7], bezout.matrix[3][7][7]);
  bezout.matrix[4][6][8] =
      _mm256_add_pd(bezout.matrix[4][6][8], bezout.matrix[3][7][8]);
  bezout.matrix[4][6][9] =
      _mm256_add_pd(bezout.matrix[4][6][9], bezout.matrix[3][7][9]);
  bezout.matrix[4][6][10] =
      _mm256_add_pd(bezout.matrix[4][6][10], bezout.matrix[3][7][10]);
  bezout.matrix[4][6][11] =
      _mm256_add_pd(bezout.matrix[4][6][11], bezout.matrix[3][7][11]);
  bezout.matrix[4][6][12] =
      _mm256_add_pd(bezout.matrix[4][6][12], bezout.matrix[3][7][12]);
  bezout.matrix[4][6][13] =
      _mm256_add_pd(bezout.matrix[4][6][13], bezout.matrix[3][7][13]);
  bezout.matrix[4][6][14] =
      _mm256_add_pd(bezout.matrix[4][6][14], bezout.matrix[3][7][14]);
  bezout.matrix[4][6][15] =
      _mm256_add_pd(bezout.matrix[4][6][15], bezout.matrix[3][7][15]);
  bezout.matrix[4][7][0] =
      _mm256_add_pd(bezout.matrix[4][7][0], bezout.matrix[3][8][0]);
  bezout.matrix[4][7][1] =
      _mm256_add_pd(bezout.matrix[4][7][1], bezout.matrix[3][8][1]);
  bezout.matrix[4][7][2] =
      _mm256_add_pd(bezout.matrix[4][7][2], bezout.matrix[3][8][2]);
  bezout.matrix[4][7][3] =
      _mm256_add_pd(bezout.matrix[4][7][3], bezout.matrix[3][8][3]);
  bezout.matrix[4][7][4] =
      _mm256_add_pd(bezout.matrix[4][7][4], bezout.matrix[3][8][4]);
  bezout.matrix[4][7][5] =
      _mm256_add_pd(bezout.matrix[4][7][5], bezout.matrix[3][8][5]);
  bezout.matrix[4][7][6] =
      _mm256_add_pd(bezout.matrix[4][7][6], bezout.matrix[3][8][6]);
  bezout.matrix[4][7][7] =
      _mm256_add_pd(bezout.matrix[4][7][7], bezout.matrix[3][8][7]);
  bezout.matrix[4][7][8] =
      _mm256_add_pd(bezout.matrix[4][7][8], bezout.matrix[3][8][8]);
  bezout.matrix[4][7][9] =
      _mm256_add_pd(bezout.matrix[4][7][9], bezout.matrix[3][8][9]);
  bezout.matrix[4][7][10] =
      _mm256_add_pd(bezout.matrix[4][7][10], bezout.matrix[3][8][10]);
  bezout.matrix[4][7][11] =
      _mm256_add_pd(bezout.matrix[4][7][11], bezout.matrix[3][8][11]);
  bezout.matrix[4][7][12] =
      _mm256_add_pd(bezout.matrix[4][7][12], bezout.matrix[3][8][12]);
  bezout.matrix[4][7][13] =
      _mm256_add_pd(bezout.matrix[4][7][13], bezout.matrix[3][8][13]);
  bezout.matrix[4][7][14] =
      _mm256_add_pd(bezout.matrix[4][7][14], bezout.matrix[3][8][14]);
  bezout.matrix[4][7][15] =
      _mm256_add_pd(bezout.matrix[4][7][15], bezout.matrix[3][8][15]);
  bezout.matrix[4][8][0] =
      _mm256_add_pd(bezout.matrix[4][8][0], bezout.matrix[3][9][0]);
  bezout.matrix[4][8][1] =
      _mm256_add_pd(bezout.matrix[4][8][1], bezout.matrix[3][9][1]);
  bezout.matrix[4][8][2] =
      _mm256_add_pd(bezout.matrix[4][8][2], bezout.matrix[3][9][2]);
  bezout.matrix[4][8][3] =
      _mm256_add_pd(bezout.matrix[4][8][3], bezout.matrix[3][9][3]);
  bezout.matrix[4][8][4] =
      _mm256_add_pd(bezout.matrix[4][8][4], bezout.matrix[3][9][4]);
  bezout.matrix[4][8][5] =
      _mm256_add_pd(bezout.matrix[4][8][5], bezout.matrix[3][9][5]);
  bezout.matrix[4][8][6] =
      _mm256_add_pd(bezout.matrix[4][8][6], bezout.matrix[3][9][6]);
  bezout.matrix[4][8][7] =
      _mm256_add_pd(bezout.matrix[4][8][7], bezout.matrix[3][9][7]);
  bezout.matrix[4][8][8] =
      _mm256_add_pd(bezout.matrix[4][8][8], bezout.matrix[3][9][8]);
  bezout.matrix[4][8][9] =
      _mm256_add_pd(bezout.matrix[4][8][9], bezout.matrix[3][9][9]);
  bezout.matrix[4][8][10] =
      _mm256_add_pd(bezout.matrix[4][8][10], bezout.matrix[3][9][10]);
  bezout.matrix[4][8][11] =
      _mm256_add_pd(bezout.matrix[4][8][11], bezout.matrix[3][9][11]);
  bezout.matrix[4][8][12] =
      _mm256_add_pd(bezout.matrix[4][8][12], bezout.matrix[3][9][12]);
  bezout.matrix[4][8][13] =
      _mm256_add_pd(bezout.matrix[4][8][13], bezout.matrix[3][9][13]);
  bezout.matrix[4][8][14] =
      _mm256_add_pd(bezout.matrix[4][8][14], bezout.matrix[3][9][14]);
  bezout.matrix[4][8][15] =
      _mm256_add_pd(bezout.matrix[4][8][15], bezout.matrix[3][9][15]);
  bezout.matrix[4][9][0] =
      _mm256_add_pd(bezout.matrix[4][9][0], bezout.matrix[3][10][0]);
  bezout.matrix[4][9][1] =
      _mm256_add_pd(bezout.matrix[4][9][1], bezout.matrix[3][10][1]);
  bezout.matrix[4][9][2] =
      _mm256_add_pd(bezout.matrix[4][9][2], bezout.matrix[3][10][2]);
  bezout.matrix[4][9][3] =
      _mm256_add_pd(bezout.matrix[4][9][3], bezout.matrix[3][10][3]);
  bezout.matrix[4][9][4] =
      _mm256_add_pd(bezout.matrix[4][9][4], bezout.matrix[3][10][4]);
  bezout.matrix[4][9][5] =
      _mm256_add_pd(bezout.matrix[4][9][5], bezout.matrix[3][10][5]);
  bezout.matrix[4][9][6] =
      _mm256_add_pd(bezout.matrix[4][9][6], bezout.matrix[3][10][6]);
  bezout.matrix[4][9][7] =
      _mm256_add_pd(bezout.matrix[4][9][7], bezout.matrix[3][10][7]);
  bezout.matrix[4][9][8] =
      _mm256_add_pd(bezout.matrix[4][9][8], bezout.matrix[3][10][8]);
  bezout.matrix[4][9][9] =
      _mm256_add_pd(bezout.matrix[4][9][9], bezout.matrix[3][10][9]);
  bezout.matrix[4][9][10] =
      _mm256_add_pd(bezout.matrix[4][9][10], bezout.matrix[3][10][10]);
  bezout.matrix[4][9][11] =
      _mm256_add_pd(bezout.matrix[4][9][11], bezout.matrix[3][10][11]);
  bezout.matrix[4][9][12] =
      _mm256_add_pd(bezout.matrix[4][9][12], bezout.matrix[3][10][12]);
  bezout.matrix[4][9][13] =
      _mm256_add_pd(bezout.matrix[4][9][13], bezout.matrix[3][10][13]);
  bezout.matrix[4][9][14] =
      _mm256_add_pd(bezout.matrix[4][9][14], bezout.matrix[3][10][14]);
  bezout.matrix[4][9][15] =
      _mm256_add_pd(bezout.matrix[4][9][15], bezout.matrix[3][10][15]);
  bezout.matrix[4][10][0] =
      _mm256_add_pd(bezout.matrix[4][10][0], bezout.matrix[3][11][0]);
  bezout.matrix[4][10][1] =
      _mm256_add_pd(bezout.matrix[4][10][1], bezout.matrix[3][11][1]);
  bezout.matrix[4][10][2] =
      _mm256_add_pd(bezout.matrix[4][10][2], bezout.matrix[3][11][2]);
  bezout.matrix[4][10][3] =
      _mm256_add_pd(bezout.matrix[4][10][3], bezout.matrix[3][11][3]);
  bezout.matrix[4][10][4] =
      _mm256_add_pd(bezout.matrix[4][10][4], bezout.matrix[3][11][4]);
  bezout.matrix[4][10][5] =
      _mm256_add_pd(bezout.matrix[4][10][5], bezout.matrix[3][11][5]);
  bezout.matrix[4][10][6] =
      _mm256_add_pd(bezout.matrix[4][10][6], bezout.matrix[3][11][6]);
  bezout.matrix[4][10][7] =
      _mm256_add_pd(bezout.matrix[4][10][7], bezout.matrix[3][11][7]);
  bezout.matrix[4][10][8] =
      _mm256_add_pd(bezout.matrix[4][10][8], bezout.matrix[3][11][8]);
  bezout.matrix[4][10][9] =
      _mm256_add_pd(bezout.matrix[4][10][9], bezout.matrix[3][11][9]);
  bezout.matrix[4][10][10] =
      _mm256_add_pd(bezout.matrix[4][10][10], bezout.matrix[3][11][10]);
  bezout.matrix[4][10][11] =
      _mm256_add_pd(bezout.matrix[4][10][11], bezout.matrix[3][11][11]);
  bezout.matrix[4][10][12] =
      _mm256_add_pd(bezout.matrix[4][10][12], bezout.matrix[3][11][12]);
  bezout.matrix[4][10][13] =
      _mm256_add_pd(bezout.matrix[4][10][13], bezout.matrix[3][11][13]);
  bezout.matrix[4][10][14] =
      _mm256_add_pd(bezout.matrix[4][10][14], bezout.matrix[3][11][14]);
  bezout.matrix[4][10][15] =
      _mm256_add_pd(bezout.matrix[4][10][15], bezout.matrix[3][11][15]);
  bezout.matrix[4][11][0] =
      _mm256_add_pd(bezout.matrix[4][11][0], bezout.matrix[3][12][0]);
  bezout.matrix[4][11][1] =
      _mm256_add_pd(bezout.matrix[4][11][1], bezout.matrix[3][12][1]);
  bezout.matrix[4][11][2] =
      _mm256_add_pd(bezout.matrix[4][11][2], bezout.matrix[3][12][2]);
  bezout.matrix[4][11][3] =
      _mm256_add_pd(bezout.matrix[4][11][3], bezout.matrix[3][12][3]);
  bezout.matrix[4][11][4] =
      _mm256_add_pd(bezout.matrix[4][11][4], bezout.matrix[3][12][4]);
  bezout.matrix[4][11][5] =
      _mm256_add_pd(bezout.matrix[4][11][5], bezout.matrix[3][12][5]);
  bezout.matrix[4][11][6] =
      _mm256_add_pd(bezout.matrix[4][11][6], bezout.matrix[3][12][6]);
  bezout.matrix[4][11][7] =
      _mm256_add_pd(bezout.matrix[4][11][7], bezout.matrix[3][12][7]);
  bezout.matrix[4][11][8] =
      _mm256_add_pd(bezout.matrix[4][11][8], bezout.matrix[3][12][8]);
  bezout.matrix[4][11][9] =
      _mm256_add_pd(bezout.matrix[4][11][9], bezout.matrix[3][12][9]);
  bezout.matrix[4][11][10] =
      _mm256_add_pd(bezout.matrix[4][11][10], bezout.matrix[3][12][10]);
  bezout.matrix[4][11][11] =
      _mm256_add_pd(bezout.matrix[4][11][11], bezout.matrix[3][12][11]);
  bezout.matrix[4][11][12] =
      _mm256_add_pd(bezout.matrix[4][11][12], bezout.matrix[3][12][12]);
  bezout.matrix[4][11][13] =
      _mm256_add_pd(bezout.matrix[4][11][13], bezout.matrix[3][12][13]);
  bezout.matrix[4][11][14] =
      _mm256_add_pd(bezout.matrix[4][11][14], bezout.matrix[3][12][14]);
  bezout.matrix[4][11][15] =
      _mm256_add_pd(bezout.matrix[4][11][15], bezout.matrix[3][12][15]);
  bezout.matrix[4][12][0] =
      _mm256_add_pd(bezout.matrix[4][12][0], bezout.matrix[3][13][0]);
  bezout.matrix[4][12][1] =
      _mm256_add_pd(bezout.matrix[4][12][1], bezout.matrix[3][13][1]);
  bezout.matrix[4][12][2] =
      _mm256_add_pd(bezout.matrix[4][12][2], bezout.matrix[3][13][2]);
  bezout.matrix[4][12][3] =
      _mm256_add_pd(bezout.matrix[4][12][3], bezout.matrix[3][13][3]);
  bezout.matrix[4][12][4] =
      _mm256_add_pd(bezout.matrix[4][12][4], bezout.matrix[3][13][4]);
  bezout.matrix[4][12][5] =
      _mm256_add_pd(bezout.matrix[4][12][5], bezout.matrix[3][13][5]);
  bezout.matrix[4][12][6] =
      _mm256_add_pd(bezout.matrix[4][12][6], bezout.matrix[3][13][6]);
  bezout.matrix[4][12][7] =
      _mm256_add_pd(bezout.matrix[4][12][7], bezout.matrix[3][13][7]);
  bezout.matrix[4][12][8] =
      _mm256_add_pd(bezout.matrix[4][12][8], bezout.matrix[3][13][8]);
  bezout.matrix[4][12][9] =
      _mm256_add_pd(bezout.matrix[4][12][9], bezout.matrix[3][13][9]);
  bezout.matrix[4][12][10] =
      _mm256_add_pd(bezout.matrix[4][12][10], bezout.matrix[3][13][10]);
  bezout.matrix[4][12][11] =
      _mm256_add_pd(bezout.matrix[4][12][11], bezout.matrix[3][13][11]);
  bezout.matrix[4][12][12] =
      _mm256_add_pd(bezout.matrix[4][12][12], bezout.matrix[3][13][12]);
  bezout.matrix[4][12][13] =
      _mm256_add_pd(bezout.matrix[4][12][13], bezout.matrix[3][13][13]);
  bezout.matrix[4][12][14] =
      _mm256_add_pd(bezout.matrix[4][12][14], bezout.matrix[3][13][14]);
  bezout.matrix[4][12][15] =
      _mm256_add_pd(bezout.matrix[4][12][15], bezout.matrix[3][13][15]);
  bezout.matrix[4][13][0] =
      _mm256_add_pd(bezout.matrix[4][13][0], bezout.matrix[3][14][0]);
  bezout.matrix[4][13][1] =
      _mm256_add_pd(bezout.matrix[4][13][1], bezout.matrix[3][14][1]);
  bezout.matrix[4][13][2] =
      _mm256_add_pd(bezout.matrix[4][13][2], bezout.matrix[3][14][2]);
  bezout.matrix[4][13][3] =
      _mm256_add_pd(bezout.matrix[4][13][3], bezout.matrix[3][14][3]);
  bezout.matrix[4][13][4] =
      _mm256_add_pd(bezout.matrix[4][13][4], bezout.matrix[3][14][4]);
  bezout.matrix[4][13][5] =
      _mm256_add_pd(bezout.matrix[4][13][5], bezout.matrix[3][14][5]);
  bezout.matrix[4][13][6] =
      _mm256_add_pd(bezout.matrix[4][13][6], bezout.matrix[3][14][6]);
  bezout.matrix[4][13][7] =
      _mm256_add_pd(bezout.matrix[4][13][7], bezout.matrix[3][14][7]);
  bezout.matrix[4][13][8] =
      _mm256_add_pd(bezout.matrix[4][13][8], bezout.matrix[3][14][8]);
  bezout.matrix[4][13][9] =
      _mm256_add_pd(bezout.matrix[4][13][9], bezout.matrix[3][14][9]);
  bezout.matrix[4][13][10] =
      _mm256_add_pd(bezout.matrix[4][13][10], bezout.matrix[3][14][10]);
  bezout.matrix[4][13][11] =
      _mm256_add_pd(bezout.matrix[4][13][11], bezout.matrix[3][14][11]);
  bezout.matrix[4][13][12] =
      _mm256_add_pd(bezout.matrix[4][13][12], bezout.matrix[3][14][12]);
  bezout.matrix[4][13][13] =
      _mm256_add_pd(bezout.matrix[4][13][13], bezout.matrix[3][14][13]);
  bezout.matrix[4][13][14] =
      _mm256_add_pd(bezout.matrix[4][13][14], bezout.matrix[3][14][14]);
  bezout.matrix[4][13][15] =
      _mm256_add_pd(bezout.matrix[4][13][15], bezout.matrix[3][14][15]);
  bezout.matrix[5][5][0] =
      _mm256_add_pd(bezout.matrix[5][5][0], bezout.matrix[4][6][0]);
  bezout.matrix[5][5][1] =
      _mm256_add_pd(bezout.matrix[5][5][1], bezout.matrix[4][6][1]);
  bezout.matrix[5][5][2] =
      _mm256_add_pd(bezout.matrix[5][5][2], bezout.matrix[4][6][2]);
  bezout.matrix[5][5][3] =
      _mm256_add_pd(bezout.matrix[5][5][3], bezout.matrix[4][6][3]);
  bezout.matrix[5][5][4] =
      _mm256_add_pd(bezout.matrix[5][5][4], bezout.matrix[4][6][4]);
  bezout.matrix[5][5][5] =
      _mm256_add_pd(bezout.matrix[5][5][5], bezout.matrix[4][6][5]);
  bezout.matrix[5][5][6] =
      _mm256_add_pd(bezout.matrix[5][5][6], bezout.matrix[4][6][6]);
  bezout.matrix[5][5][7] =
      _mm256_add_pd(bezout.matrix[5][5][7], bezout.matrix[4][6][7]);
  bezout.matrix[5][5][8] =
      _mm256_add_pd(bezout.matrix[5][5][8], bezout.matrix[4][6][8]);
  bezout.matrix[5][5][9] =
      _mm256_add_pd(bezout.matrix[5][5][9], bezout.matrix[4][6][9]);
  bezout.matrix[5][5][10] =
      _mm256_add_pd(bezout.matrix[5][5][10], bezout.matrix[4][6][10]);
  bezout.matrix[5][5][11] =
      _mm256_add_pd(bezout.matrix[5][5][11], bezout.matrix[4][6][11]);
  bezout.matrix[5][5][12] =
      _mm256_add_pd(bezout.matrix[5][5][12], bezout.matrix[4][6][12]);
  bezout.matrix[5][5][13] =
      _mm256_add_pd(bezout.matrix[5][5][13], bezout.matrix[4][6][13]);
  bezout.matrix[5][5][14] =
      _mm256_add_pd(bezout.matrix[5][5][14], bezout.matrix[4][6][14]);
  bezout.matrix[5][5][15] =
      _mm256_add_pd(bezout.matrix[5][5][15], bezout.matrix[4][6][15]);
  bezout.matrix[5][6][0] =
      _mm256_add_pd(bezout.matrix[5][6][0], bezout.matrix[4][7][0]);
  bezout.matrix[5][6][1] =
      _mm256_add_pd(bezout.matrix[5][6][1], bezout.matrix[4][7][1]);
  bezout.matrix[5][6][2] =
      _mm256_add_pd(bezout.matrix[5][6][2], bezout.matrix[4][7][2]);
  bezout.matrix[5][6][3] =
      _mm256_add_pd(bezout.matrix[5][6][3], bezout.matrix[4][7][3]);
  bezout.matrix[5][6][4] =
      _mm256_add_pd(bezout.matrix[5][6][4], bezout.matrix[4][7][4]);
  bezout.matrix[5][6][5] =
      _mm256_add_pd(bezout.matrix[5][6][5], bezout.matrix[4][7][5]);
  bezout.matrix[5][6][6] =
      _mm256_add_pd(bezout.matrix[5][6][6], bezout.matrix[4][7][6]);
  bezout.matrix[5][6][7] =
      _mm256_add_pd(bezout.matrix[5][6][7], bezout.matrix[4][7][7]);
  bezout.matrix[5][6][8] =
      _mm256_add_pd(bezout.matrix[5][6][8], bezout.matrix[4][7][8]);
  bezout.matrix[5][6][9] =
      _mm256_add_pd(bezout.matrix[5][6][9], bezout.matrix[4][7][9]);
  bezout.matrix[5][6][10] =
      _mm256_add_pd(bezout.matrix[5][6][10], bezout.matrix[4][7][10]);
  bezout.matrix[5][6][11] =
      _mm256_add_pd(bezout.matrix[5][6][11], bezout.matrix[4][7][11]);
  bezout.matrix[5][6][12] =
      _mm256_add_pd(bezout.matrix[5][6][12], bezout.matrix[4][7][12]);
  bezout.matrix[5][6][13] =
      _mm256_add_pd(bezout.matrix[5][6][13], bezout.matrix[4][7][13]);
  bezout.matrix[5][6][14] =
      _mm256_add_pd(bezout.matrix[5][6][14], bezout.matrix[4][7][14]);
  bezout.matrix[5][6][15] =
      _mm256_add_pd(bezout.matrix[5][6][15], bezout.matrix[4][7][15]);
  bezout.matrix[5][7][0] =
      _mm256_add_pd(bezout.matrix[5][7][0], bezout.matrix[4][8][0]);
  bezout.matrix[5][7][1] =
      _mm256_add_pd(bezout.matrix[5][7][1], bezout.matrix[4][8][1]);
  bezout.matrix[5][7][2] =
      _mm256_add_pd(bezout.matrix[5][7][2], bezout.matrix[4][8][2]);
  bezout.matrix[5][7][3] =
      _mm256_add_pd(bezout.matrix[5][7][3], bezout.matrix[4][8][3]);
  bezout.matrix[5][7][4] =
      _mm256_add_pd(bezout.matrix[5][7][4], bezout.matrix[4][8][4]);
  bezout.matrix[5][7][5] =
      _mm256_add_pd(bezout.matrix[5][7][5], bezout.matrix[4][8][5]);
  bezout.matrix[5][7][6] =
      _mm256_add_pd(bezout.matrix[5][7][6], bezout.matrix[4][8][6]);
  bezout.matrix[5][7][7] =
      _mm256_add_pd(bezout.matrix[5][7][7], bezout.matrix[4][8][7]);
  bezout.matrix[5][7][8] =
      _mm256_add_pd(bezout.matrix[5][7][8], bezout.matrix[4][8][8]);
  bezout.matrix[5][7][9] =
      _mm256_add_pd(bezout.matrix[5][7][9], bezout.matrix[4][8][9]);
  bezout.matrix[5][7][10] =
      _mm256_add_pd(bezout.matrix[5][7][10], bezout.matrix[4][8][10]);
  bezout.matrix[5][7][11] =
      _mm256_add_pd(bezout.matrix[5][7][11], bezout.matrix[4][8][11]);
  bezout.matrix[5][7][12] =
      _mm256_add_pd(bezout.matrix[5][7][12], bezout.matrix[4][8][12]);
  bezout.matrix[5][7][13] =
      _mm256_add_pd(bezout.matrix[5][7][13], bezout.matrix[4][8][13]);
  bezout.matrix[5][7][14] =
      _mm256_add_pd(bezout.matrix[5][7][14], bezout.matrix[4][8][14]);
  bezout.matrix[5][7][15] =
      _mm256_add_pd(bezout.matrix[5][7][15], bezout.matrix[4][8][15]);
  bezout.matrix[5][8][0] =
      _mm256_add_pd(bezout.matrix[5][8][0], bezout.matrix[4][9][0]);
  bezout.matrix[5][8][1] =
      _mm256_add_pd(bezout.matrix[5][8][1], bezout.matrix[4][9][1]);
  bezout.matrix[5][8][2] =
      _mm256_add_pd(bezout.matrix[5][8][2], bezout.matrix[4][9][2]);
  bezout.matrix[5][8][3] =
      _mm256_add_pd(bezout.matrix[5][8][3], bezout.matrix[4][9][3]);
  bezout.matrix[5][8][4] =
      _mm256_add_pd(bezout.matrix[5][8][4], bezout.matrix[4][9][4]);
  bezout.matrix[5][8][5] =
      _mm256_add_pd(bezout.matrix[5][8][5], bezout.matrix[4][9][5]);
  bezout.matrix[5][8][6] =
      _mm256_add_pd(bezout.matrix[5][8][6], bezout.matrix[4][9][6]);
  bezout.matrix[5][8][7] =
      _mm256_add_pd(bezout.matrix[5][8][7], bezout.matrix[4][9][7]);
  bezout.matrix[5][8][8] =
      _mm256_add_pd(bezout.matrix[5][8][8], bezout.matrix[4][9][8]);
  bezout.matrix[5][8][9] =
      _mm256_add_pd(bezout.matrix[5][8][9], bezout.matrix[4][9][9]);
  bezout.matrix[5][8][10] =
      _mm256_add_pd(bezout.matrix[5][8][10], bezout.matrix[4][9][10]);
  bezout.matrix[5][8][11] =
      _mm256_add_pd(bezout.matrix[5][8][11], bezout.matrix[4][9][11]);
  bezout.matrix[5][8][12] =
      _mm256_add_pd(bezout.matrix[5][8][12], bezout.matrix[4][9][12]);
  bezout.matrix[5][8][13] =
      _mm256_add_pd(bezout.matrix[5][8][13], bezout.matrix[4][9][13]);
  bezout.matrix[5][8][14] =
      _mm256_add_pd(bezout.matrix[5][8][14], bezout.matrix[4][9][14]);
  bezout.matrix[5][8][15] =
      _mm256_add_pd(bezout.matrix[5][8][15], bezout.matrix[4][9][15]);
  bezout.matrix[5][9][0] =
      _mm256_add_pd(bezout.matrix[5][9][0], bezout.matrix[4][10][0]);
  bezout.matrix[5][9][1] =
      _mm256_add_pd(bezout.matrix[5][9][1], bezout.matrix[4][10][1]);
  bezout.matrix[5][9][2] =
      _mm256_add_pd(bezout.matrix[5][9][2], bezout.matrix[4][10][2]);
  bezout.matrix[5][9][3] =
      _mm256_add_pd(bezout.matrix[5][9][3], bezout.matrix[4][10][3]);
  bezout.matrix[5][9][4] =
      _mm256_add_pd(bezout.matrix[5][9][4], bezout.matrix[4][10][4]);
  bezout.matrix[5][9][5] =
      _mm256_add_pd(bezout.matrix[5][9][5], bezout.matrix[4][10][5]);
  bezout.matrix[5][9][6] =
      _mm256_add_pd(bezout.matrix[5][9][6], bezout.matrix[4][10][6]);
  bezout.matrix[5][9][7] =
      _mm256_add_pd(bezout.matrix[5][9][7], bezout.matrix[4][10][7]);
  bezout.matrix[5][9][8] =
      _mm256_add_pd(bezout.matrix[5][9][8], bezout.matrix[4][10][8]);
  bezout.matrix[5][9][9] =
      _mm256_add_pd(bezout.matrix[5][9][9], bezout.matrix[4][10][9]);
  bezout.matrix[5][9][10] =
      _mm256_add_pd(bezout.matrix[5][9][10], bezout.matrix[4][10][10]);
  bezout.matrix[5][9][11] =
      _mm256_add_pd(bezout.matrix[5][9][11], bezout.matrix[4][10][11]);
  bezout.matrix[5][9][12] =
      _mm256_add_pd(bezout.matrix[5][9][12], bezout.matrix[4][10][12]);
  bezout.matrix[5][9][13] =
      _mm256_add_pd(bezout.matrix[5][9][13], bezout.matrix[4][10][13]);
  bezout.matrix[5][9][14] =
      _mm256_add_pd(bezout.matrix[5][9][14], bezout.matrix[4][10][14]);
  bezout.matrix[5][9][15] =
      _mm256_add_pd(bezout.matrix[5][9][15], bezout.matrix[4][10][15]);
  bezout.matrix[5][10][0] =
      _mm256_add_pd(bezout.matrix[5][10][0], bezout.matrix[4][11][0]);
  bezout.matrix[5][10][1] =
      _mm256_add_pd(bezout.matrix[5][10][1], bezout.matrix[4][11][1]);
  bezout.matrix[5][10][2] =
      _mm256_add_pd(bezout.matrix[5][10][2], bezout.matrix[4][11][2]);
  bezout.matrix[5][10][3] =
      _mm256_add_pd(bezout.matrix[5][10][3], bezout.matrix[4][11][3]);
  bezout.matrix[5][10][4] =
      _mm256_add_pd(bezout.matrix[5][10][4], bezout.matrix[4][11][4]);
  bezout.matrix[5][10][5] =
      _mm256_add_pd(bezout.matrix[5][10][5], bezout.matrix[4][11][5]);
  bezout.matrix[5][10][6] =
      _mm256_add_pd(bezout.matrix[5][10][6], bezout.matrix[4][11][6]);
  bezout.matrix[5][10][7] =
      _mm256_add_pd(bezout.matrix[5][10][7], bezout.matrix[4][11][7]);
  bezout.matrix[5][10][8] =
      _mm256_add_pd(bezout.matrix[5][10][8], bezout.matrix[4][11][8]);
  bezout.matrix[5][10][9] =
      _mm256_add_pd(bezout.matrix[5][10][9], bezout.matrix[4][11][9]);
  bezout.matrix[5][10][10] =
      _mm256_add_pd(bezout.matrix[5][10][10], bezout.matrix[4][11][10]);
  bezout.matrix[5][10][11] =
      _mm256_add_pd(bezout.matrix[5][10][11], bezout.matrix[4][11][11]);
  bezout.matrix[5][10][12] =
      _mm256_add_pd(bezout.matrix[5][10][12], bezout.matrix[4][11][12]);
  bezout.matrix[5][10][13] =
      _mm256_add_pd(bezout.matrix[5][10][13], bezout.matrix[4][11][13]);
  bezout.matrix[5][10][14] =
      _mm256_add_pd(bezout.matrix[5][10][14], bezout.matrix[4][11][14]);
  bezout.matrix[5][10][15] =
      _mm256_add_pd(bezout.matrix[5][10][15], bezout.matrix[4][11][15]);
  bezout.matrix[5][11][0] =
      _mm256_add_pd(bezout.matrix[5][11][0], bezout.matrix[4][12][0]);
  bezout.matrix[5][11][1] =
      _mm256_add_pd(bezout.matrix[5][11][1], bezout.matrix[4][12][1]);
  bezout.matrix[5][11][2] =
      _mm256_add_pd(bezout.matrix[5][11][2], bezout.matrix[4][12][2]);
  bezout.matrix[5][11][3] =
      _mm256_add_pd(bezout.matrix[5][11][3], bezout.matrix[4][12][3]);
  bezout.matrix[5][11][4] =
      _mm256_add_pd(bezout.matrix[5][11][4], bezout.matrix[4][12][4]);
  bezout.matrix[5][11][5] =
      _mm256_add_pd(bezout.matrix[5][11][5], bezout.matrix[4][12][5]);
  bezout.matrix[5][11][6] =
      _mm256_add_pd(bezout.matrix[5][11][6], bezout.matrix[4][12][6]);
  bezout.matrix[5][11][7] =
      _mm256_add_pd(bezout.matrix[5][11][7], bezout.matrix[4][12][7]);
  bezout.matrix[5][11][8] =
      _mm256_add_pd(bezout.matrix[5][11][8], bezout.matrix[4][12][8]);
  bezout.matrix[5][11][9] =
      _mm256_add_pd(bezout.matrix[5][11][9], bezout.matrix[4][12][9]);
  bezout.matrix[5][11][10] =
      _mm256_add_pd(bezout.matrix[5][11][10], bezout.matrix[4][12][10]);
  bezout.matrix[5][11][11] =
      _mm256_add_pd(bezout.matrix[5][11][11], bezout.matrix[4][12][11]);
  bezout.matrix[5][11][12] =
      _mm256_add_pd(bezout.matrix[5][11][12], bezout.matrix[4][12][12]);
  bezout.matrix[5][11][13] =
      _mm256_add_pd(bezout.matrix[5][11][13], bezout.matrix[4][12][13]);
  bezout.matrix[5][11][14] =
      _mm256_add_pd(bezout.matrix[5][11][14], bezout.matrix[4][12][14]);
  bezout.matrix[5][11][15] =
      _mm256_add_pd(bezout.matrix[5][11][15], bezout.matrix[4][12][15]);
  bezout.matrix[5][12][0] =
      _mm256_add_pd(bezout.matrix[5][12][0], bezout.matrix[4][13][0]);
  bezout.matrix[5][12][1] =
      _mm256_add_pd(bezout.matrix[5][12][1], bezout.matrix[4][13][1]);
  bezout.matrix[5][12][2] =
      _mm256_add_pd(bezout.matrix[5][12][2], bezout.matrix[4][13][2]);
  bezout.matrix[5][12][3] =
      _mm256_add_pd(bezout.matrix[5][12][3], bezout.matrix[4][13][3]);
  bezout.matrix[5][12][4] =
      _mm256_add_pd(bezout.matrix[5][12][4], bezout.matrix[4][13][4]);
  bezout.matrix[5][12][5] =
      _mm256_add_pd(bezout.matrix[5][12][5], bezout.matrix[4][13][5]);
  bezout.matrix[5][12][6] =
      _mm256_add_pd(bezout.matrix[5][12][6], bezout.matrix[4][13][6]);
  bezout.matrix[5][12][7] =
      _mm256_add_pd(bezout.matrix[5][12][7], bezout.matrix[4][13][7]);
  bezout.matrix[5][12][8] =
      _mm256_add_pd(bezout.matrix[5][12][8], bezout.matrix[4][13][8]);
  bezout.matrix[5][12][9] =
      _mm256_add_pd(bezout.matrix[5][12][9], bezout.matrix[4][13][9]);
  bezout.matrix[5][12][10] =
      _mm256_add_pd(bezout.matrix[5][12][10], bezout.matrix[4][13][10]);
  bezout.matrix[5][12][11] =
      _mm256_add_pd(bezout.matrix[5][12][11], bezout.matrix[4][13][11]);
  bezout.matrix[5][12][12] =
      _mm256_add_pd(bezout.matrix[5][12][12], bezout.matrix[4][13][12]);
  bezout.matrix[5][12][13] =
      _mm256_add_pd(bezout.matrix[5][12][13], bezout.matrix[4][13][13]);
  bezout.matrix[5][12][14] =
      _mm256_add_pd(bezout.matrix[5][12][14], bezout.matrix[4][13][14]);
  bezout.matrix[5][12][15] =
      _mm256_add_pd(bezout.matrix[5][12][15], bezout.matrix[4][13][15]);
  bezout.matrix[5][13][0] =
      _mm256_add_pd(bezout.matrix[5][13][0], bezout.matrix[4][14][0]);
  bezout.matrix[5][13][1] =
      _mm256_add_pd(bezout.matrix[5][13][1], bezout.matrix[4][14][1]);
  bezout.matrix[5][13][2] =
      _mm256_add_pd(bezout.matrix[5][13][2], bezout.matrix[4][14][2]);
  bezout.matrix[5][13][3] =
      _mm256_add_pd(bezout.matrix[5][13][3], bezout.matrix[4][14][3]);
  bezout.matrix[5][13][4] =
      _mm256_add_pd(bezout.matrix[5][13][4], bezout.matrix[4][14][4]);
  bezout.matrix[5][13][5] =
      _mm256_add_pd(bezout.matrix[5][13][5], bezout.matrix[4][14][5]);
  bezout.matrix[5][13][6] =
      _mm256_add_pd(bezout.matrix[5][13][6], bezout.matrix[4][14][6]);
  bezout.matrix[5][13][7] =
      _mm256_add_pd(bezout.matrix[5][13][7], bezout.matrix[4][14][7]);
  bezout.matrix[5][13][8] =
      _mm256_add_pd(bezout.matrix[5][13][8], bezout.matrix[4][14][8]);
  bezout.matrix[5][13][9] =
      _mm256_add_pd(bezout.matrix[5][13][9], bezout.matrix[4][14][9]);
  bezout.matrix[5][13][10] =
      _mm256_add_pd(bezout.matrix[5][13][10], bezout.matrix[4][14][10]);
  bezout.matrix[5][13][11] =
      _mm256_add_pd(bezout.matrix[5][13][11], bezout.matrix[4][14][11]);
  bezout.matrix[5][13][12] =
      _mm256_add_pd(bezout.matrix[5][13][12], bezout.matrix[4][14][12]);
  bezout.matrix[5][13][13] =
      _mm256_add_pd(bezout.matrix[5][13][13], bezout.matrix[4][14][13]);
  bezout.matrix[5][13][14] =
      _mm256_add_pd(bezout.matrix[5][13][14], bezout.matrix[4][14][14]);
  bezout.matrix[5][13][15] =
      _mm256_add_pd(bezout.matrix[5][13][15], bezout.matrix[4][14][15]);
  bezout.matrix[6][6][0] =
      _mm256_add_pd(bezout.matrix[6][6][0], bezout.matrix[5][7][0]);
  bezout.matrix[6][6][1] =
      _mm256_add_pd(bezout.matrix[6][6][1], bezout.matrix[5][7][1]);
  bezout.matrix[6][6][2] =
      _mm256_add_pd(bezout.matrix[6][6][2], bezout.matrix[5][7][2]);
  bezout.matrix[6][6][3] =
      _mm256_add_pd(bezout.matrix[6][6][3], bezout.matrix[5][7][3]);
  bezout.matrix[6][6][4] =
      _mm256_add_pd(bezout.matrix[6][6][4], bezout.matrix[5][7][4]);
  bezout.matrix[6][6][5] =
      _mm256_add_pd(bezout.matrix[6][6][5], bezout.matrix[5][7][5]);
  bezout.matrix[6][6][6] =
      _mm256_add_pd(bezout.matrix[6][6][6], bezout.matrix[5][7][6]);
  bezout.matrix[6][6][7] =
      _mm256_add_pd(bezout.matrix[6][6][7], bezout.matrix[5][7][7]);
  bezout.matrix[6][6][8] =
      _mm256_add_pd(bezout.matrix[6][6][8], bezout.matrix[5][7][8]);
  bezout.matrix[6][6][9] =
      _mm256_add_pd(bezout.matrix[6][6][9], bezout.matrix[5][7][9]);
  bezout.matrix[6][6][10] =
      _mm256_add_pd(bezout.matrix[6][6][10], bezout.matrix[5][7][10]);
  bezout.matrix[6][6][11] =
      _mm256_add_pd(bezout.matrix[6][6][11], bezout.matrix[5][7][11]);
  bezout.matrix[6][6][12] =
      _mm256_add_pd(bezout.matrix[6][6][12], bezout.matrix[5][7][12]);
  bezout.matrix[6][6][13] =
      _mm256_add_pd(bezout.matrix[6][6][13], bezout.matrix[5][7][13]);
  bezout.matrix[6][6][14] =
      _mm256_add_pd(bezout.matrix[6][6][14], bezout.matrix[5][7][14]);
  bezout.matrix[6][6][15] =
      _mm256_add_pd(bezout.matrix[6][6][15], bezout.matrix[5][7][15]);
  bezout.matrix[6][7][0] =
      _mm256_add_pd(bezout.matrix[6][7][0], bezout.matrix[5][8][0]);
  bezout.matrix[6][7][1] =
      _mm256_add_pd(bezout.matrix[6][7][1], bezout.matrix[5][8][1]);
  bezout.matrix[6][7][2] =
      _mm256_add_pd(bezout.matrix[6][7][2], bezout.matrix[5][8][2]);
  bezout.matrix[6][7][3] =
      _mm256_add_pd(bezout.matrix[6][7][3], bezout.matrix[5][8][3]);
  bezout.matrix[6][7][4] =
      _mm256_add_pd(bezout.matrix[6][7][4], bezout.matrix[5][8][4]);
  bezout.matrix[6][7][5] =
      _mm256_add_pd(bezout.matrix[6][7][5], bezout.matrix[5][8][5]);
  bezout.matrix[6][7][6] =
      _mm256_add_pd(bezout.matrix[6][7][6], bezout.matrix[5][8][6]);
  bezout.matrix[6][7][7] =
      _mm256_add_pd(bezout.matrix[6][7][7], bezout.matrix[5][8][7]);
  bezout.matrix[6][7][8] =
      _mm256_add_pd(bezout.matrix[6][7][8], bezout.matrix[5][8][8]);
  bezout.matrix[6][7][9] =
      _mm256_add_pd(bezout.matrix[6][7][9], bezout.matrix[5][8][9]);
  bezout.matrix[6][7][10] =
      _mm256_add_pd(bezout.matrix[6][7][10], bezout.matrix[5][8][10]);
  bezout.matrix[6][7][11] =
      _mm256_add_pd(bezout.matrix[6][7][11], bezout.matrix[5][8][11]);
  bezout.matrix[6][7][12] =
      _mm256_add_pd(bezout.matrix[6][7][12], bezout.matrix[5][8][12]);
  bezout.matrix[6][7][13] =
      _mm256_add_pd(bezout.matrix[6][7][13], bezout.matrix[5][8][13]);
  bezout.matrix[6][7][14] =
      _mm256_add_pd(bezout.matrix[6][7][14], bezout.matrix[5][8][14]);
  bezout.matrix[6][7][15] =
      _mm256_add_pd(bezout.matrix[6][7][15], bezout.matrix[5][8][15]);
  bezout.matrix[6][8][0] =
      _mm256_add_pd(bezout.matrix[6][8][0], bezout.matrix[5][9][0]);
  bezout.matrix[6][8][1] =
      _mm256_add_pd(bezout.matrix[6][8][1], bezout.matrix[5][9][1]);
  bezout.matrix[6][8][2] =
      _mm256_add_pd(bezout.matrix[6][8][2], bezout.matrix[5][9][2]);
  bezout.matrix[6][8][3] =
      _mm256_add_pd(bezout.matrix[6][8][3], bezout.matrix[5][9][3]);
  bezout.matrix[6][8][4] =
      _mm256_add_pd(bezout.matrix[6][8][4], bezout.matrix[5][9][4]);
  bezout.matrix[6][8][5] =
      _mm256_add_pd(bezout.matrix[6][8][5], bezout.matrix[5][9][5]);
  bezout.matrix[6][8][6] =
      _mm256_add_pd(bezout.matrix[6][8][6], bezout.matrix[5][9][6]);
  bezout.matrix[6][8][7] =
      _mm256_add_pd(bezout.matrix[6][8][7], bezout.matrix[5][9][7]);
  bezout.matrix[6][8][8] =
      _mm256_add_pd(bezout.matrix[6][8][8], bezout.matrix[5][9][8]);
  bezout.matrix[6][8][9] =
      _mm256_add_pd(bezout.matrix[6][8][9], bezout.matrix[5][9][9]);
  bezout.matrix[6][8][10] =
      _mm256_add_pd(bezout.matrix[6][8][10], bezout.matrix[5][9][10]);
  bezout.matrix[6][8][11] =
      _mm256_add_pd(bezout.matrix[6][8][11], bezout.matrix[5][9][11]);
  bezout.matrix[6][8][12] =
      _mm256_add_pd(bezout.matrix[6][8][12], bezout.matrix[5][9][12]);
  bezout.matrix[6][8][13] =
      _mm256_add_pd(bezout.matrix[6][8][13], bezout.matrix[5][9][13]);
  bezout.matrix[6][8][14] =
      _mm256_add_pd(bezout.matrix[6][8][14], bezout.matrix[5][9][14]);
  bezout.matrix[6][8][15] =
      _mm256_add_pd(bezout.matrix[6][8][15], bezout.matrix[5][9][15]);
  bezout.matrix[6][9][0] =
      _mm256_add_pd(bezout.matrix[6][9][0], bezout.matrix[5][10][0]);
  bezout.matrix[6][9][1] =
      _mm256_add_pd(bezout.matrix[6][9][1], bezout.matrix[5][10][1]);
  bezout.matrix[6][9][2] =
      _mm256_add_pd(bezout.matrix[6][9][2], bezout.matrix[5][10][2]);
  bezout.matrix[6][9][3] =
      _mm256_add_pd(bezout.matrix[6][9][3], bezout.matrix[5][10][3]);
  bezout.matrix[6][9][4] =
      _mm256_add_pd(bezout.matrix[6][9][4], bezout.matrix[5][10][4]);
  bezout.matrix[6][9][5] =
      _mm256_add_pd(bezout.matrix[6][9][5], bezout.matrix[5][10][5]);
  bezout.matrix[6][9][6] =
      _mm256_add_pd(bezout.matrix[6][9][6], bezout.matrix[5][10][6]);
  bezout.matrix[6][9][7] =
      _mm256_add_pd(bezout.matrix[6][9][7], bezout.matrix[5][10][7]);
  bezout.matrix[6][9][8] =
      _mm256_add_pd(bezout.matrix[6][9][8], bezout.matrix[5][10][8]);
  bezout.matrix[6][9][9] =
      _mm256_add_pd(bezout.matrix[6][9][9], bezout.matrix[5][10][9]);
  bezout.matrix[6][9][10] =
      _mm256_add_pd(bezout.matrix[6][9][10], bezout.matrix[5][10][10]);
  bezout.matrix[6][9][11] =
      _mm256_add_pd(bezout.matrix[6][9][11], bezout.matrix[5][10][11]);
  bezout.matrix[6][9][12] =
      _mm256_add_pd(bezout.matrix[6][9][12], bezout.matrix[5][10][12]);
  bezout.matrix[6][9][13] =
      _mm256_add_pd(bezout.matrix[6][9][13], bezout.matrix[5][10][13]);
  bezout.matrix[6][9][14] =
      _mm256_add_pd(bezout.matrix[6][9][14], bezout.matrix[5][10][14]);
  bezout.matrix[6][9][15] =
      _mm256_add_pd(bezout.matrix[6][9][15], bezout.matrix[5][10][15]);
  bezout.matrix[6][10][0] =
      _mm256_add_pd(bezout.matrix[6][10][0], bezout.matrix[5][11][0]);
  bezout.matrix[6][10][1] =
      _mm256_add_pd(bezout.matrix[6][10][1], bezout.matrix[5][11][1]);
  bezout.matrix[6][10][2] =
      _mm256_add_pd(bezout.matrix[6][10][2], bezout.matrix[5][11][2]);
  bezout.matrix[6][10][3] =
      _mm256_add_pd(bezout.matrix[6][10][3], bezout.matrix[5][11][3]);
  bezout.matrix[6][10][4] =
      _mm256_add_pd(bezout.matrix[6][10][4], bezout.matrix[5][11][4]);
  bezout.matrix[6][10][5] =
      _mm256_add_pd(bezout.matrix[6][10][5], bezout.matrix[5][11][5]);
  bezout.matrix[6][10][6] =
      _mm256_add_pd(bezout.matrix[6][10][6], bezout.matrix[5][11][6]);
  bezout.matrix[6][10][7] =
      _mm256_add_pd(bezout.matrix[6][10][7], bezout.matrix[5][11][7]);
  bezout.matrix[6][10][8] =
      _mm256_add_pd(bezout.matrix[6][10][8], bezout.matrix[5][11][8]);
  bezout.matrix[6][10][9] =
      _mm256_add_pd(bezout.matrix[6][10][9], bezout.matrix[5][11][9]);
  bezout.matrix[6][10][10] =
      _mm256_add_pd(bezout.matrix[6][10][10], bezout.matrix[5][11][10]);
  bezout.matrix[6][10][11] =
      _mm256_add_pd(bezout.matrix[6][10][11], bezout.matrix[5][11][11]);
  bezout.matrix[6][10][12] =
      _mm256_add_pd(bezout.matrix[6][10][12], bezout.matrix[5][11][12]);
  bezout.matrix[6][10][13] =
      _mm256_add_pd(bezout.matrix[6][10][13], bezout.matrix[5][11][13]);
  bezout.matrix[6][10][14] =
      _mm256_add_pd(bezout.matrix[6][10][14], bezout.matrix[5][11][14]);
  bezout.matrix[6][10][15] =
      _mm256_add_pd(bezout.matrix[6][10][15], bezout.matrix[5][11][15]);
  bezout.matrix[6][11][0] =
      _mm256_add_pd(bezout.matrix[6][11][0], bezout.matrix[5][12][0]);
  bezout.matrix[6][11][1] =
      _mm256_add_pd(bezout.matrix[6][11][1], bezout.matrix[5][12][1]);
  bezout.matrix[6][11][2] =
      _mm256_add_pd(bezout.matrix[6][11][2], bezout.matrix[5][12][2]);
  bezout.matrix[6][11][3] =
      _mm256_add_pd(bezout.matrix[6][11][3], bezout.matrix[5][12][3]);
  bezout.matrix[6][11][4] =
      _mm256_add_pd(bezout.matrix[6][11][4], bezout.matrix[5][12][4]);
  bezout.matrix[6][11][5] =
      _mm256_add_pd(bezout.matrix[6][11][5], bezout.matrix[5][12][5]);
  bezout.matrix[6][11][6] =
      _mm256_add_pd(bezout.matrix[6][11][6], bezout.matrix[5][12][6]);
  bezout.matrix[6][11][7] =
      _mm256_add_pd(bezout.matrix[6][11][7], bezout.matrix[5][12][7]);
  bezout.matrix[6][11][8] =
      _mm256_add_pd(bezout.matrix[6][11][8], bezout.matrix[5][12][8]);
  bezout.matrix[6][11][9] =
      _mm256_add_pd(bezout.matrix[6][11][9], bezout.matrix[5][12][9]);
  bezout.matrix[6][11][10] =
      _mm256_add_pd(bezout.matrix[6][11][10], bezout.matrix[5][12][10]);
  bezout.matrix[6][11][11] =
      _mm256_add_pd(bezout.matrix[6][11][11], bezout.matrix[5][12][11]);
  bezout.matrix[6][11][12] =
      _mm256_add_pd(bezout.matrix[6][11][12], bezout.matrix[5][12][12]);
  bezout.matrix[6][11][13] =
      _mm256_add_pd(bezout.matrix[6][11][13], bezout.matrix[5][12][13]);
  bezout.matrix[6][11][14] =
      _mm256_add_pd(bezout.matrix[6][11][14], bezout.matrix[5][12][14]);
  bezout.matrix[6][11][15] =
      _mm256_add_pd(bezout.matrix[6][11][15], bezout.matrix[5][12][15]);
  bezout.matrix[6][12][0] =
      _mm256_add_pd(bezout.matrix[6][12][0], bezout.matrix[5][13][0]);
  bezout.matrix[6][12][1] =
      _mm256_add_pd(bezout.matrix[6][12][1], bezout.matrix[5][13][1]);
  bezout.matrix[6][12][2] =
      _mm256_add_pd(bezout.matrix[6][12][2], bezout.matrix[5][13][2]);
  bezout.matrix[6][12][3] =
      _mm256_add_pd(bezout.matrix[6][12][3], bezout.matrix[5][13][3]);
  bezout.matrix[6][12][4] =
      _mm256_add_pd(bezout.matrix[6][12][4], bezout.matrix[5][13][4]);
  bezout.matrix[6][12][5] =
      _mm256_add_pd(bezout.matrix[6][12][5], bezout.matrix[5][13][5]);
  bezout.matrix[6][12][6] =
      _mm256_add_pd(bezout.matrix[6][12][6], bezout.matrix[5][13][6]);
  bezout.matrix[6][12][7] =
      _mm256_add_pd(bezout.matrix[6][12][7], bezout.matrix[5][13][7]);
  bezout.matrix[6][12][8] =
      _mm256_add_pd(bezout.matrix[6][12][8], bezout.matrix[5][13][8]);
  bezout.matrix[6][12][9] =
      _mm256_add_pd(bezout.matrix[6][12][9], bezout.matrix[5][13][9]);
  bezout.matrix[6][12][10] =
      _mm256_add_pd(bezout.matrix[6][12][10], bezout.matrix[5][13][10]);
  bezout.matrix[6][12][11] =
      _mm256_add_pd(bezout.matrix[6][12][11], bezout.matrix[5][13][11]);
  bezout.matrix[6][12][12] =
      _mm256_add_pd(bezout.matrix[6][12][12], bezout.matrix[5][13][12]);
  bezout.matrix[6][12][13] =
      _mm256_add_pd(bezout.matrix[6][12][13], bezout.matrix[5][13][13]);
  bezout.matrix[6][12][14] =
      _mm256_add_pd(bezout.matrix[6][12][14], bezout.matrix[5][13][14]);
  bezout.matrix[6][12][15] =
      _mm256_add_pd(bezout.matrix[6][12][15], bezout.matrix[5][13][15]);
  bezout.matrix[6][13][0] =
      _mm256_add_pd(bezout.matrix[6][13][0], bezout.matrix[5][14][0]);
  bezout.matrix[6][13][1] =
      _mm256_add_pd(bezout.matrix[6][13][1], bezout.matrix[5][14][1]);
  bezout.matrix[6][13][2] =
      _mm256_add_pd(bezout.matrix[6][13][2], bezout.matrix[5][14][2]);
  bezout.matrix[6][13][3] =
      _mm256_add_pd(bezout.matrix[6][13][3], bezout.matrix[5][14][3]);
  bezout.matrix[6][13][4] =
      _mm256_add_pd(bezout.matrix[6][13][4], bezout.matrix[5][14][4]);
  bezout.matrix[6][13][5] =
      _mm256_add_pd(bezout.matrix[6][13][5], bezout.matrix[5][14][5]);
  bezout.matrix[6][13][6] =
      _mm256_add_pd(bezout.matrix[6][13][6], bezout.matrix[5][14][6]);
  bezout.matrix[6][13][7] =
      _mm256_add_pd(bezout.matrix[6][13][7], bezout.matrix[5][14][7]);
  bezout.matrix[6][13][8] =
      _mm256_add_pd(bezout.matrix[6][13][8], bezout.matrix[5][14][8]);
  bezout.matrix[6][13][9] =
      _mm256_add_pd(bezout.matrix[6][13][9], bezout.matrix[5][14][9]);
  bezout.matrix[6][13][10] =
      _mm256_add_pd(bezout.matrix[6][13][10], bezout.matrix[5][14][10]);
  bezout.matrix[6][13][11] =
      _mm256_add_pd(bezout.matrix[6][13][11], bezout.matrix[5][14][11]);
  bezout.matrix[6][13][12] =
      _mm256_add_pd(bezout.matrix[6][13][12], bezout.matrix[5][14][12]);
  bezout.matrix[6][13][13] =
      _mm256_add_pd(bezout.matrix[6][13][13], bezout.matrix[5][14][13]);
  bezout.matrix[6][13][14] =
      _mm256_add_pd(bezout.matrix[6][13][14], bezout.matrix[5][14][14]);
  bezout.matrix[6][13][15] =
      _mm256_add_pd(bezout.matrix[6][13][15], bezout.matrix[5][14][15]);
  bezout.matrix[7][7][0] =
      _mm256_add_pd(bezout.matrix[7][7][0], bezout.matrix[6][8][0]);
  bezout.matrix[7][7][1] =
      _mm256_add_pd(bezout.matrix[7][7][1], bezout.matrix[6][8][1]);
  bezout.matrix[7][7][2] =
      _mm256_add_pd(bezout.matrix[7][7][2], bezout.matrix[6][8][2]);
  bezout.matrix[7][7][3] =
      _mm256_add_pd(bezout.matrix[7][7][3], bezout.matrix[6][8][3]);
  bezout.matrix[7][7][4] =
      _mm256_add_pd(bezout.matrix[7][7][4], bezout.matrix[6][8][4]);
  bezout.matrix[7][7][5] =
      _mm256_add_pd(bezout.matrix[7][7][5], bezout.matrix[6][8][5]);
  bezout.matrix[7][7][6] =
      _mm256_add_pd(bezout.matrix[7][7][6], bezout.matrix[6][8][6]);
  bezout.matrix[7][7][7] =
      _mm256_add_pd(bezout.matrix[7][7][7], bezout.matrix[6][8][7]);
  bezout.matrix[7][7][8] =
      _mm256_add_pd(bezout.matrix[7][7][8], bezout.matrix[6][8][8]);
  bezout.matrix[7][7][9] =
      _mm256_add_pd(bezout.matrix[7][7][9], bezout.matrix[6][8][9]);
  bezout.matrix[7][7][10] =
      _mm256_add_pd(bezout.matrix[7][7][10], bezout.matrix[6][8][10]);
  bezout.matrix[7][7][11] =
      _mm256_add_pd(bezout.matrix[7][7][11], bezout.matrix[6][8][11]);
  bezout.matrix[7][7][12] =
      _mm256_add_pd(bezout.matrix[7][7][12], bezout.matrix[6][8][12]);
  bezout.matrix[7][7][13] =
      _mm256_add_pd(bezout.matrix[7][7][13], bezout.matrix[6][8][13]);
  bezout.matrix[7][7][14] =
      _mm256_add_pd(bezout.matrix[7][7][14], bezout.matrix[6][8][14]);
  bezout.matrix[7][7][15] =
      _mm256_add_pd(bezout.matrix[7][7][15], bezout.matrix[6][8][15]);
  bezout.matrix[7][8][0] =
      _mm256_add_pd(bezout.matrix[7][8][0], bezout.matrix[6][9][0]);
  bezout.matrix[7][8][1] =
      _mm256_add_pd(bezout.matrix[7][8][1], bezout.matrix[6][9][1]);
  bezout.matrix[7][8][2] =
      _mm256_add_pd(bezout.matrix[7][8][2], bezout.matrix[6][9][2]);
  bezout.matrix[7][8][3] =
      _mm256_add_pd(bezout.matrix[7][8][3], bezout.matrix[6][9][3]);
  bezout.matrix[7][8][4] =
      _mm256_add_pd(bezout.matrix[7][8][4], bezout.matrix[6][9][4]);
  bezout.matrix[7][8][5] =
      _mm256_add_pd(bezout.matrix[7][8][5], bezout.matrix[6][9][5]);
  bezout.matrix[7][8][6] =
      _mm256_add_pd(bezout.matrix[7][8][6], bezout.matrix[6][9][6]);
  bezout.matrix[7][8][7] =
      _mm256_add_pd(bezout.matrix[7][8][7], bezout.matrix[6][9][7]);
  bezout.matrix[7][8][8] =
      _mm256_add_pd(bezout.matrix[7][8][8], bezout.matrix[6][9][8]);
  bezout.matrix[7][8][9] =
      _mm256_add_pd(bezout.matrix[7][8][9], bezout.matrix[6][9][9]);
  bezout.matrix[7][8][10] =
      _mm256_add_pd(bezout.matrix[7][8][10], bezout.matrix[6][9][10]);
  bezout.matrix[7][8][11] =
      _mm256_add_pd(bezout.matrix[7][8][11], bezout.matrix[6][9][11]);
  bezout.matrix[7][8][12] =
      _mm256_add_pd(bezout.matrix[7][8][12], bezout.matrix[6][9][12]);
  bezout.matrix[7][8][13] =
      _mm256_add_pd(bezout.matrix[7][8][13], bezout.matrix[6][9][13]);
  bezout.matrix[7][8][14] =
      _mm256_add_pd(bezout.matrix[7][8][14], bezout.matrix[6][9][14]);
  bezout.matrix[7][8][15] =
      _mm256_add_pd(bezout.matrix[7][8][15], bezout.matrix[6][9][15]);
  bezout.matrix[7][9][0] =
      _mm256_add_pd(bezout.matrix[7][9][0], bezout.matrix[6][10][0]);
  bezout.matrix[7][9][1] =
      _mm256_add_pd(bezout.matrix[7][9][1], bezout.matrix[6][10][1]);
  bezout.matrix[7][9][2] =
      _mm256_add_pd(bezout.matrix[7][9][2], bezout.matrix[6][10][2]);
  bezout.matrix[7][9][3] =
      _mm256_add_pd(bezout.matrix[7][9][3], bezout.matrix[6][10][3]);
  bezout.matrix[7][9][4] =
      _mm256_add_pd(bezout.matrix[7][9][4], bezout.matrix[6][10][4]);
  bezout.matrix[7][9][5] =
      _mm256_add_pd(bezout.matrix[7][9][5], bezout.matrix[6][10][5]);
  bezout.matrix[7][9][6] =
      _mm256_add_pd(bezout.matrix[7][9][6], bezout.matrix[6][10][6]);
  bezout.matrix[7][9][7] =
      _mm256_add_pd(bezout.matrix[7][9][7], bezout.matrix[6][10][7]);
  bezout.matrix[7][9][8] =
      _mm256_add_pd(bezout.matrix[7][9][8], bezout.matrix[6][10][8]);
  bezout.matrix[7][9][9] =
      _mm256_add_pd(bezout.matrix[7][9][9], bezout.matrix[6][10][9]);
  bezout.matrix[7][9][10] =
      _mm256_add_pd(bezout.matrix[7][9][10], bezout.matrix[6][10][10]);
  bezout.matrix[7][9][11] =
      _mm256_add_pd(bezout.matrix[7][9][11], bezout.matrix[6][10][11]);
  bezout.matrix[7][9][12] =
      _mm256_add_pd(bezout.matrix[7][9][12], bezout.matrix[6][10][12]);
  bezout.matrix[7][9][13] =
      _mm256_add_pd(bezout.matrix[7][9][13], bezout.matrix[6][10][13]);
  bezout.matrix[7][9][14] =
      _mm256_add_pd(bezout.matrix[7][9][14], bezout.matrix[6][10][14]);
  bezout.matrix[7][9][15] =
      _mm256_add_pd(bezout.matrix[7][9][15], bezout.matrix[6][10][15]);
  bezout.matrix[7][10][0] =
      _mm256_add_pd(bezout.matrix[7][10][0], bezout.matrix[6][11][0]);
  bezout.matrix[7][10][1] =
      _mm256_add_pd(bezout.matrix[7][10][1], bezout.matrix[6][11][1]);
  bezout.matrix[7][10][2] =
      _mm256_add_pd(bezout.matrix[7][10][2], bezout.matrix[6][11][2]);
  bezout.matrix[7][10][3] =
      _mm256_add_pd(bezout.matrix[7][10][3], bezout.matrix[6][11][3]);
  bezout.matrix[7][10][4] =
      _mm256_add_pd(bezout.matrix[7][10][4], bezout.matrix[6][11][4]);
  bezout.matrix[7][10][5] =
      _mm256_add_pd(bezout.matrix[7][10][5], bezout.matrix[6][11][5]);
  bezout.matrix[7][10][6] =
      _mm256_add_pd(bezout.matrix[7][10][6], bezout.matrix[6][11][6]);
  bezout.matrix[7][10][7] =
      _mm256_add_pd(bezout.matrix[7][10][7], bezout.matrix[6][11][7]);
  bezout.matrix[7][10][8] =
      _mm256_add_pd(bezout.matrix[7][10][8], bezout.matrix[6][11][8]);
  bezout.matrix[7][10][9] =
      _mm256_add_pd(bezout.matrix[7][10][9], bezout.matrix[6][11][9]);
  bezout.matrix[7][10][10] =
      _mm256_add_pd(bezout.matrix[7][10][10], bezout.matrix[6][11][10]);
  bezout.matrix[7][10][11] =
      _mm256_add_pd(bezout.matrix[7][10][11], bezout.matrix[6][11][11]);
  bezout.matrix[7][10][12] =
      _mm256_add_pd(bezout.matrix[7][10][12], bezout.matrix[6][11][12]);
  bezout.matrix[7][10][13] =
      _mm256_add_pd(bezout.matrix[7][10][13], bezout.matrix[6][11][13]);
  bezout.matrix[7][10][14] =
      _mm256_add_pd(bezout.matrix[7][10][14], bezout.matrix[6][11][14]);
  bezout.matrix[7][10][15] =
      _mm256_add_pd(bezout.matrix[7][10][15], bezout.matrix[6][11][15]);
  bezout.matrix[7][11][0] =
      _mm256_add_pd(bezout.matrix[7][11][0], bezout.matrix[6][12][0]);
  bezout.matrix[7][11][1] =
      _mm256_add_pd(bezout.matrix[7][11][1], bezout.matrix[6][12][1]);
  bezout.matrix[7][11][2] =
      _mm256_add_pd(bezout.matrix[7][11][2], bezout.matrix[6][12][2]);
  bezout.matrix[7][11][3] =
      _mm256_add_pd(bezout.matrix[7][11][3], bezout.matrix[6][12][3]);
  bezout.matrix[7][11][4] =
      _mm256_add_pd(bezout.matrix[7][11][4], bezout.matrix[6][12][4]);
  bezout.matrix[7][11][5] =
      _mm256_add_pd(bezout.matrix[7][11][5], bezout.matrix[6][12][5]);
  bezout.matrix[7][11][6] =
      _mm256_add_pd(bezout.matrix[7][11][6], bezout.matrix[6][12][6]);
  bezout.matrix[7][11][7] =
      _mm256_add_pd(bezout.matrix[7][11][7], bezout.matrix[6][12][7]);
  bezout.matrix[7][11][8] =
      _mm256_add_pd(bezout.matrix[7][11][8], bezout.matrix[6][12][8]);
  bezout.matrix[7][11][9] =
      _mm256_add_pd(bezout.matrix[7][11][9], bezout.matrix[6][12][9]);
  bezout.matrix[7][11][10] =
      _mm256_add_pd(bezout.matrix[7][11][10], bezout.matrix[6][12][10]);
  bezout.matrix[7][11][11] =
      _mm256_add_pd(bezout.matrix[7][11][11], bezout.matrix[6][12][11]);
  bezout.matrix[7][11][12] =
      _mm256_add_pd(bezout.matrix[7][11][12], bezout.matrix[6][12][12]);
  bezout.matrix[7][11][13] =
      _mm256_add_pd(bezout.matrix[7][11][13], bezout.matrix[6][12][13]);
  bezout.matrix[7][11][14] =
      _mm256_add_pd(bezout.matrix[7][11][14], bezout.matrix[6][12][14]);
  bezout.matrix[7][11][15] =
      _mm256_add_pd(bezout.matrix[7][11][15], bezout.matrix[6][12][15]);
  bezout.matrix[7][12][0] =
      _mm256_add_pd(bezout.matrix[7][12][0], bezout.matrix[6][13][0]);
  bezout.matrix[7][12][1] =
      _mm256_add_pd(bezout.matrix[7][12][1], bezout.matrix[6][13][1]);
  bezout.matrix[7][12][2] =
      _mm256_add_pd(bezout.matrix[7][12][2], bezout.matrix[6][13][2]);
  bezout.matrix[7][12][3] =
      _mm256_add_pd(bezout.matrix[7][12][3], bezout.matrix[6][13][3]);
  bezout.matrix[7][12][4] =
      _mm256_add_pd(bezout.matrix[7][12][4], bezout.matrix[6][13][4]);
  bezout.matrix[7][12][5] =
      _mm256_add_pd(bezout.matrix[7][12][5], bezout.matrix[6][13][5]);
  bezout.matrix[7][12][6] =
      _mm256_add_pd(bezout.matrix[7][12][6], bezout.matrix[6][13][6]);
  bezout.matrix[7][12][7] =
      _mm256_add_pd(bezout.matrix[7][12][7], bezout.matrix[6][13][7]);
  bezout.matrix[7][12][8] =
      _mm256_add_pd(bezout.matrix[7][12][8], bezout.matrix[6][13][8]);
  bezout.matrix[7][12][9] =
      _mm256_add_pd(bezout.matrix[7][12][9], bezout.matrix[6][13][9]);
  bezout.matrix[7][12][10] =
      _mm256_add_pd(bezout.matrix[7][12][10], bezout.matrix[6][13][10]);
  bezout.matrix[7][12][11] =
      _mm256_add_pd(bezout.matrix[7][12][11], bezout.matrix[6][13][11]);
  bezout.matrix[7][12][12] =
      _mm256_add_pd(bezout.matrix[7][12][12], bezout.matrix[6][13][12]);
  bezout.matrix[7][12][13] =
      _mm256_add_pd(bezout.matrix[7][12][13], bezout.matrix[6][13][13]);
  bezout.matrix[7][12][14] =
      _mm256_add_pd(bezout.matrix[7][12][14], bezout.matrix[6][13][14]);
  bezout.matrix[7][12][15] =
      _mm256_add_pd(bezout.matrix[7][12][15], bezout.matrix[6][13][15]);
  bezout.matrix[7][13][0] =
      _mm256_add_pd(bezout.matrix[7][13][0], bezout.matrix[6][14][0]);
  bezout.matrix[7][13][1] =
      _mm256_add_pd(bezout.matrix[7][13][1], bezout.matrix[6][14][1]);
  bezout.matrix[7][13][2] =
      _mm256_add_pd(bezout.matrix[7][13][2], bezout.matrix[6][14][2]);
  bezout.matrix[7][13][3] =
      _mm256_add_pd(bezout.matrix[7][13][3], bezout.matrix[6][14][3]);
  bezout.matrix[7][13][4] =
      _mm256_add_pd(bezout.matrix[7][13][4], bezout.matrix[6][14][4]);
  bezout.matrix[7][13][5] =
      _mm256_add_pd(bezout.matrix[7][13][5], bezout.matrix[6][14][5]);
  bezout.matrix[7][13][6] =
      _mm256_add_pd(bezout.matrix[7][13][6], bezout.matrix[6][14][6]);
  bezout.matrix[7][13][7] =
      _mm256_add_pd(bezout.matrix[7][13][7], bezout.matrix[6][14][7]);
  bezout.matrix[7][13][8] =
      _mm256_add_pd(bezout.matrix[7][13][8], bezout.matrix[6][14][8]);
  bezout.matrix[7][13][9] =
      _mm256_add_pd(bezout.matrix[7][13][9], bezout.matrix[6][14][9]);
  bezout.matrix[7][13][10] =
      _mm256_add_pd(bezout.matrix[7][13][10], bezout.matrix[6][14][10]);
  bezout.matrix[7][13][11] =
      _mm256_add_pd(bezout.matrix[7][13][11], bezout.matrix[6][14][11]);
  bezout.matrix[7][13][12] =
      _mm256_add_pd(bezout.matrix[7][13][12], bezout.matrix[6][14][12]);
  bezout.matrix[7][13][13] =
      _mm256_add_pd(bezout.matrix[7][13][13], bezout.matrix[6][14][13]);
  bezout.matrix[7][13][14] =
      _mm256_add_pd(bezout.matrix[7][13][14], bezout.matrix[6][14][14]);
  bezout.matrix[7][13][15] =
      _mm256_add_pd(bezout.matrix[7][13][15], bezout.matrix[6][14][15]);
  bezout.matrix[8][8][0] =
      _mm256_add_pd(bezout.matrix[8][8][0], bezout.matrix[7][9][0]);
  bezout.matrix[8][8][1] =
      _mm256_add_pd(bezout.matrix[8][8][1], bezout.matrix[7][9][1]);
  bezout.matrix[8][8][2] =
      _mm256_add_pd(bezout.matrix[8][8][2], bezout.matrix[7][9][2]);
  bezout.matrix[8][8][3] =
      _mm256_add_pd(bezout.matrix[8][8][3], bezout.matrix[7][9][3]);
  bezout.matrix[8][8][4] =
      _mm256_add_pd(bezout.matrix[8][8][4], bezout.matrix[7][9][4]);
  bezout.matrix[8][8][5] =
      _mm256_add_pd(bezout.matrix[8][8][5], bezout.matrix[7][9][5]);
  bezout.matrix[8][8][6] =
      _mm256_add_pd(bezout.matrix[8][8][6], bezout.matrix[7][9][6]);
  bezout.matrix[8][8][7] =
      _mm256_add_pd(bezout.matrix[8][8][7], bezout.matrix[7][9][7]);
  bezout.matrix[8][8][8] =
      _mm256_add_pd(bezout.matrix[8][8][8], bezout.matrix[7][9][8]);
  bezout.matrix[8][8][9] =
      _mm256_add_pd(bezout.matrix[8][8][9], bezout.matrix[7][9][9]);
  bezout.matrix[8][8][10] =
      _mm256_add_pd(bezout.matrix[8][8][10], bezout.matrix[7][9][10]);
  bezout.matrix[8][8][11] =
      _mm256_add_pd(bezout.matrix[8][8][11], bezout.matrix[7][9][11]);
  bezout.matrix[8][8][12] =
      _mm256_add_pd(bezout.matrix[8][8][12], bezout.matrix[7][9][12]);
  bezout.matrix[8][8][13] =
      _mm256_add_pd(bezout.matrix[8][8][13], bezout.matrix[7][9][13]);
  bezout.matrix[8][8][14] =
      _mm256_add_pd(bezout.matrix[8][8][14], bezout.matrix[7][9][14]);
  bezout.matrix[8][8][15] =
      _mm256_add_pd(bezout.matrix[8][8][15], bezout.matrix[7][9][15]);
  bezout.matrix[8][9][0] =
      _mm256_add_pd(bezout.matrix[8][9][0], bezout.matrix[7][10][0]);
  bezout.matrix[8][9][1] =
      _mm256_add_pd(bezout.matrix[8][9][1], bezout.matrix[7][10][1]);
  bezout.matrix[8][9][2] =
      _mm256_add_pd(bezout.matrix[8][9][2], bezout.matrix[7][10][2]);
  bezout.matrix[8][9][3] =
      _mm256_add_pd(bezout.matrix[8][9][3], bezout.matrix[7][10][3]);
  bezout.matrix[8][9][4] =
      _mm256_add_pd(bezout.matrix[8][9][4], bezout.matrix[7][10][4]);
  bezout.matrix[8][9][5] =
      _mm256_add_pd(bezout.matrix[8][9][5], bezout.matrix[7][10][5]);
  bezout.matrix[8][9][6] =
      _mm256_add_pd(bezout.matrix[8][9][6], bezout.matrix[7][10][6]);
  bezout.matrix[8][9][7] =
      _mm256_add_pd(bezout.matrix[8][9][7], bezout.matrix[7][10][7]);
  bezout.matrix[8][9][8] =
      _mm256_add_pd(bezout.matrix[8][9][8], bezout.matrix[7][10][8]);
  bezout.matrix[8][9][9] =
      _mm256_add_pd(bezout.matrix[8][9][9], bezout.matrix[7][10][9]);
  bezout.matrix[8][9][10] =
      _mm256_add_pd(bezout.matrix[8][9][10], bezout.matrix[7][10][10]);
  bezout.matrix[8][9][11] =
      _mm256_add_pd(bezout.matrix[8][9][11], bezout.matrix[7][10][11]);
  bezout.matrix[8][9][12] =
      _mm256_add_pd(bezout.matrix[8][9][12], bezout.matrix[7][10][12]);
  bezout.matrix[8][9][13] =
      _mm256_add_pd(bezout.matrix[8][9][13], bezout.matrix[7][10][13]);
  bezout.matrix[8][9][14] =
      _mm256_add_pd(bezout.matrix[8][9][14], bezout.matrix[7][10][14]);
  bezout.matrix[8][9][15] =
      _mm256_add_pd(bezout.matrix[8][9][15], bezout.matrix[7][10][15]);
  bezout.matrix[8][10][0] =
      _mm256_add_pd(bezout.matrix[8][10][0], bezout.matrix[7][11][0]);
  bezout.matrix[8][10][1] =
      _mm256_add_pd(bezout.matrix[8][10][1], bezout.matrix[7][11][1]);
  bezout.matrix[8][10][2] =
      _mm256_add_pd(bezout.matrix[8][10][2], bezout.matrix[7][11][2]);
  bezout.matrix[8][10][3] =
      _mm256_add_pd(bezout.matrix[8][10][3], bezout.matrix[7][11][3]);
  bezout.matrix[8][10][4] =
      _mm256_add_pd(bezout.matrix[8][10][4], bezout.matrix[7][11][4]);
  bezout.matrix[8][10][5] =
      _mm256_add_pd(bezout.matrix[8][10][5], bezout.matrix[7][11][5]);
  bezout.matrix[8][10][6] =
      _mm256_add_pd(bezout.matrix[8][10][6], bezout.matrix[7][11][6]);
  bezout.matrix[8][10][7] =
      _mm256_add_pd(bezout.matrix[8][10][7], bezout.matrix[7][11][7]);
  bezout.matrix[8][10][8] =
      _mm256_add_pd(bezout.matrix[8][10][8], bezout.matrix[7][11][8]);
  bezout.matrix[8][10][9] =
      _mm256_add_pd(bezout.matrix[8][10][9], bezout.matrix[7][11][9]);
  bezout.matrix[8][10][10] =
      _mm256_add_pd(bezout.matrix[8][10][10], bezout.matrix[7][11][10]);
  bezout.matrix[8][10][11] =
      _mm256_add_pd(bezout.matrix[8][10][11], bezout.matrix[7][11][11]);
  bezout.matrix[8][10][12] =
      _mm256_add_pd(bezout.matrix[8][10][12], bezout.matrix[7][11][12]);
  bezout.matrix[8][10][13] =
      _mm256_add_pd(bezout.matrix[8][10][13], bezout.matrix[7][11][13]);
  bezout.matrix[8][10][14] =
      _mm256_add_pd(bezout.matrix[8][10][14], bezout.matrix[7][11][14]);
  bezout.matrix[8][10][15] =
      _mm256_add_pd(bezout.matrix[8][10][15], bezout.matrix[7][11][15]);
  bezout.matrix[8][11][0] =
      _mm256_add_pd(bezout.matrix[8][11][0], bezout.matrix[7][12][0]);
  bezout.matrix[8][11][1] =
      _mm256_add_pd(bezout.matrix[8][11][1], bezout.matrix[7][12][1]);
  bezout.matrix[8][11][2] =
      _mm256_add_pd(bezout.matrix[8][11][2], bezout.matrix[7][12][2]);
  bezout.matrix[8][11][3] =
      _mm256_add_pd(bezout.matrix[8][11][3], bezout.matrix[7][12][3]);
  bezout.matrix[8][11][4] =
      _mm256_add_pd(bezout.matrix[8][11][4], bezout.matrix[7][12][4]);
  bezout.matrix[8][11][5] =
      _mm256_add_pd(bezout.matrix[8][11][5], bezout.matrix[7][12][5]);
  bezout.matrix[8][11][6] =
      _mm256_add_pd(bezout.matrix[8][11][6], bezout.matrix[7][12][6]);
  bezout.matrix[8][11][7] =
      _mm256_add_pd(bezout.matrix[8][11][7], bezout.matrix[7][12][7]);
  bezout.matrix[8][11][8] =
      _mm256_add_pd(bezout.matrix[8][11][8], bezout.matrix[7][12][8]);
  bezout.matrix[8][11][9] =
      _mm256_add_pd(bezout.matrix[8][11][9], bezout.matrix[7][12][9]);
  bezout.matrix[8][11][10] =
      _mm256_add_pd(bezout.matrix[8][11][10], bezout.matrix[7][12][10]);
  bezout.matrix[8][11][11] =
      _mm256_add_pd(bezout.matrix[8][11][11], bezout.matrix[7][12][11]);
  bezout.matrix[8][11][12] =
      _mm256_add_pd(bezout.matrix[8][11][12], bezout.matrix[7][12][12]);
  bezout.matrix[8][11][13] =
      _mm256_add_pd(bezout.matrix[8][11][13], bezout.matrix[7][12][13]);
  bezout.matrix[8][11][14] =
      _mm256_add_pd(bezout.matrix[8][11][14], bezout.matrix[7][12][14]);
  bezout.matrix[8][11][15] =
      _mm256_add_pd(bezout.matrix[8][11][15], bezout.matrix[7][12][15]);
  bezout.matrix[8][12][0] =
      _mm256_add_pd(bezout.matrix[8][12][0], bezout.matrix[7][13][0]);
  bezout.matrix[8][12][1] =
      _mm256_add_pd(bezout.matrix[8][12][1], bezout.matrix[7][13][1]);
  bezout.matrix[8][12][2] =
      _mm256_add_pd(bezout.matrix[8][12][2], bezout.matrix[7][13][2]);
  bezout.matrix[8][12][3] =
      _mm256_add_pd(bezout.matrix[8][12][3], bezout.matrix[7][13][3]);
  bezout.matrix[8][12][4] =
      _mm256_add_pd(bezout.matrix[8][12][4], bezout.matrix[7][13][4]);
  bezout.matrix[8][12][5] =
      _mm256_add_pd(bezout.matrix[8][12][5], bezout.matrix[7][13][5]);
  bezout.matrix[8][12][6] =
      _mm256_add_pd(bezout.matrix[8][12][6], bezout.matrix[7][13][6]);
  bezout.matrix[8][12][7] =
      _mm256_add_pd(bezout.matrix[8][12][7], bezout.matrix[7][13][7]);
  bezout.matrix[8][12][8] =
      _mm256_add_pd(bezout.matrix[8][12][8], bezout.matrix[7][13][8]);
  bezout.matrix[8][12][9] =
      _mm256_add_pd(bezout.matrix[8][12][9], bezout.matrix[7][13][9]);
  bezout.matrix[8][12][10] =
      _mm256_add_pd(bezout.matrix[8][12][10], bezout.matrix[7][13][10]);
  bezout.matrix[8][12][11] =
      _mm256_add_pd(bezout.matrix[8][12][11], bezout.matrix[7][13][11]);
  bezout.matrix[8][12][12] =
      _mm256_add_pd(bezout.matrix[8][12][12], bezout.matrix[7][13][12]);
  bezout.matrix[8][12][13] =
      _mm256_add_pd(bezout.matrix[8][12][13], bezout.matrix[7][13][13]);
  bezout.matrix[8][12][14] =
      _mm256_add_pd(bezout.matrix[8][12][14], bezout.matrix[7][13][14]);
  bezout.matrix[8][12][15] =
      _mm256_add_pd(bezout.matrix[8][12][15], bezout.matrix[7][13][15]);
  bezout.matrix[8][13][0] =
      _mm256_add_pd(bezout.matrix[8][13][0], bezout.matrix[7][14][0]);
  bezout.matrix[8][13][1] =
      _mm256_add_pd(bezout.matrix[8][13][1], bezout.matrix[7][14][1]);
  bezout.matrix[8][13][2] =
      _mm256_add_pd(bezout.matrix[8][13][2], bezout.matrix[7][14][2]);
  bezout.matrix[8][13][3] =
      _mm256_add_pd(bezout.matrix[8][13][3], bezout.matrix[7][14][3]);
  bezout.matrix[8][13][4] =
      _mm256_add_pd(bezout.matrix[8][13][4], bezout.matrix[7][14][4]);
  bezout.matrix[8][13][5] =
      _mm256_add_pd(bezout.matrix[8][13][5], bezout.matrix[7][14][5]);
  bezout.matrix[8][13][6] =
      _mm256_add_pd(bezout.matrix[8][13][6], bezout.matrix[7][14][6]);
  bezout.matrix[8][13][7] =
      _mm256_add_pd(bezout.matrix[8][13][7], bezout.matrix[7][14][7]);
  bezout.matrix[8][13][8] =
      _mm256_add_pd(bezout.matrix[8][13][8], bezout.matrix[7][14][8]);
  bezout.matrix[8][13][9] =
      _mm256_add_pd(bezout.matrix[8][13][9], bezout.matrix[7][14][9]);
  bezout.matrix[8][13][10] =
      _mm256_add_pd(bezout.matrix[8][13][10], bezout.matrix[7][14][10]);
  bezout.matrix[8][13][11] =
      _mm256_add_pd(bezout.matrix[8][13][11], bezout.matrix[7][14][11]);
  bezout.matrix[8][13][12] =
      _mm256_add_pd(bezout.matrix[8][13][12], bezout.matrix[7][14][12]);
  bezout.matrix[8][13][13] =
      _mm256_add_pd(bezout.matrix[8][13][13], bezout.matrix[7][14][13]);
  bezout.matrix[8][13][14] =
      _mm256_add_pd(bezout.matrix[8][13][14], bezout.matrix[7][14][14]);
  bezout.matrix[8][13][15] =
      _mm256_add_pd(bezout.matrix[8][13][15], bezout.matrix[7][14][15]);
  bezout.matrix[9][9][0] =
      _mm256_add_pd(bezout.matrix[9][9][0], bezout.matrix[8][10][0]);
  bezout.matrix[9][9][1] =
      _mm256_add_pd(bezout.matrix[9][9][1], bezout.matrix[8][10][1]);
  bezout.matrix[9][9][2] =
      _mm256_add_pd(bezout.matrix[9][9][2], bezout.matrix[8][10][2]);
  bezout.matrix[9][9][3] =
      _mm256_add_pd(bezout.matrix[9][9][3], bezout.matrix[8][10][3]);
  bezout.matrix[9][9][4] =
      _mm256_add_pd(bezout.matrix[9][9][4], bezout.matrix[8][10][4]);
  bezout.matrix[9][9][5] =
      _mm256_add_pd(bezout.matrix[9][9][5], bezout.matrix[8][10][5]);
  bezout.matrix[9][9][6] =
      _mm256_add_pd(bezout.matrix[9][9][6], bezout.matrix[8][10][6]);
  bezout.matrix[9][9][7] =
      _mm256_add_pd(bezout.matrix[9][9][7], bezout.matrix[8][10][7]);
  bezout.matrix[9][9][8] =
      _mm256_add_pd(bezout.matrix[9][9][8], bezout.matrix[8][10][8]);
  bezout.matrix[9][9][9] =
      _mm256_add_pd(bezout.matrix[9][9][9], bezout.matrix[8][10][9]);
  bezout.matrix[9][9][10] =
      _mm256_add_pd(bezout.matrix[9][9][10], bezout.matrix[8][10][10]);
  bezout.matrix[9][9][11] =
      _mm256_add_pd(bezout.matrix[9][9][11], bezout.matrix[8][10][11]);
  bezout.matrix[9][9][12] =
      _mm256_add_pd(bezout.matrix[9][9][12], bezout.matrix[8][10][12]);
  bezout.matrix[9][9][13] =
      _mm256_add_pd(bezout.matrix[9][9][13], bezout.matrix[8][10][13]);
  bezout.matrix[9][9][14] =
      _mm256_add_pd(bezout.matrix[9][9][14], bezout.matrix[8][10][14]);
  bezout.matrix[9][9][15] =
      _mm256_add_pd(bezout.matrix[9][9][15], bezout.matrix[8][10][15]);
  bezout.matrix[9][10][0] =
      _mm256_add_pd(bezout.matrix[9][10][0], bezout.matrix[8][11][0]);
  bezout.matrix[9][10][1] =
      _mm256_add_pd(bezout.matrix[9][10][1], bezout.matrix[8][11][1]);
  bezout.matrix[9][10][2] =
      _mm256_add_pd(bezout.matrix[9][10][2], bezout.matrix[8][11][2]);
  bezout.matrix[9][10][3] =
      _mm256_add_pd(bezout.matrix[9][10][3], bezout.matrix[8][11][3]);
  bezout.matrix[9][10][4] =
      _mm256_add_pd(bezout.matrix[9][10][4], bezout.matrix[8][11][4]);
  bezout.matrix[9][10][5] =
      _mm256_add_pd(bezout.matrix[9][10][5], bezout.matrix[8][11][5]);
  bezout.matrix[9][10][6] =
      _mm256_add_pd(bezout.matrix[9][10][6], bezout.matrix[8][11][6]);
  bezout.matrix[9][10][7] =
      _mm256_add_pd(bezout.matrix[9][10][7], bezout.matrix[8][11][7]);
  bezout.matrix[9][10][8] =
      _mm256_add_pd(bezout.matrix[9][10][8], bezout.matrix[8][11][8]);
  bezout.matrix[9][10][9] =
      _mm256_add_pd(bezout.matrix[9][10][9], bezout.matrix[8][11][9]);
  bezout.matrix[9][10][10] =
      _mm256_add_pd(bezout.matrix[9][10][10], bezout.matrix[8][11][10]);
  bezout.matrix[9][10][11] =
      _mm256_add_pd(bezout.matrix[9][10][11], bezout.matrix[8][11][11]);
  bezout.matrix[9][10][12] =
      _mm256_add_pd(bezout.matrix[9][10][12], bezout.matrix[8][11][12]);
  bezout.matrix[9][10][13] =
      _mm256_add_pd(bezout.matrix[9][10][13], bezout.matrix[8][11][13]);
  bezout.matrix[9][10][14] =
      _mm256_add_pd(bezout.matrix[9][10][14], bezout.matrix[8][11][14]);
  bezout.matrix[9][10][15] =
      _mm256_add_pd(bezout.matrix[9][10][15], bezout.matrix[8][11][15]);
  bezout.matrix[9][11][0] =
      _mm256_add_pd(bezout.matrix[9][11][0], bezout.matrix[8][12][0]);
  bezout.matrix[9][11][1] =
      _mm256_add_pd(bezout.matrix[9][11][1], bezout.matrix[8][12][1]);
  bezout.matrix[9][11][2] =
      _mm256_add_pd(bezout.matrix[9][11][2], bezout.matrix[8][12][2]);
  bezout.matrix[9][11][3] =
      _mm256_add_pd(bezout.matrix[9][11][3], bezout.matrix[8][12][3]);
  bezout.matrix[9][11][4] =
      _mm256_add_pd(bezout.matrix[9][11][4], bezout.matrix[8][12][4]);
  bezout.matrix[9][11][5] =
      _mm256_add_pd(bezout.matrix[9][11][5], bezout.matrix[8][12][5]);
  bezout.matrix[9][11][6] =
      _mm256_add_pd(bezout.matrix[9][11][6], bezout.matrix[8][12][6]);
  bezout.matrix[9][11][7] =
      _mm256_add_pd(bezout.matrix[9][11][7], bezout.matrix[8][12][7]);
  bezout.matrix[9][11][8] =
      _mm256_add_pd(bezout.matrix[9][11][8], bezout.matrix[8][12][8]);
  bezout.matrix[9][11][9] =
      _mm256_add_pd(bezout.matrix[9][11][9], bezout.matrix[8][12][9]);
  bezout.matrix[9][11][10] =
      _mm256_add_pd(bezout.matrix[9][11][10], bezout.matrix[8][12][10]);
  bezout.matrix[9][11][11] =
      _mm256_add_pd(bezout.matrix[9][11][11], bezout.matrix[8][12][11]);
  bezout.matrix[9][11][12] =
      _mm256_add_pd(bezout.matrix[9][11][12], bezout.matrix[8][12][12]);
  bezout.matrix[9][11][13] =
      _mm256_add_pd(bezout.matrix[9][11][13], bezout.matrix[8][12][13]);
  bezout.matrix[9][11][14] =
      _mm256_add_pd(bezout.matrix[9][11][14], bezout.matrix[8][12][14]);
  bezout.matrix[9][11][15] =
      _mm256_add_pd(bezout.matrix[9][11][15], bezout.matrix[8][12][15]);
  bezout.matrix[9][12][0] =
      _mm256_add_pd(bezout.matrix[9][12][0], bezout.matrix[8][13][0]);
  bezout.matrix[9][12][1] =
      _mm256_add_pd(bezout.matrix[9][12][1], bezout.matrix[8][13][1]);
  bezout.matrix[9][12][2] =
      _mm256_add_pd(bezout.matrix[9][12][2], bezout.matrix[8][13][2]);
  bezout.matrix[9][12][3] =
      _mm256_add_pd(bezout.matrix[9][12][3], bezout.matrix[8][13][3]);
  bezout.matrix[9][12][4] =
      _mm256_add_pd(bezout.matrix[9][12][4], bezout.matrix[8][13][4]);
  bezout.matrix[9][12][5] =
      _mm256_add_pd(bezout.matrix[9][12][5], bezout.matrix[8][13][5]);
  bezout.matrix[9][12][6] =
      _mm256_add_pd(bezout.matrix[9][12][6], bezout.matrix[8][13][6]);
  bezout.matrix[9][12][7] =
      _mm256_add_pd(bezout.matrix[9][12][7], bezout.matrix[8][13][7]);
  bezout.matrix[9][12][8] =
      _mm256_add_pd(bezout.matrix[9][12][8], bezout.matrix[8][13][8]);
  bezout.matrix[9][12][9] =
      _mm256_add_pd(bezout.matrix[9][12][9], bezout.matrix[8][13][9]);
  bezout.matrix[9][12][10] =
      _mm256_add_pd(bezout.matrix[9][12][10], bezout.matrix[8][13][10]);
  bezout.matrix[9][12][11] =
      _mm256_add_pd(bezout.matrix[9][12][11], bezout.matrix[8][13][11]);
  bezout.matrix[9][12][12] =
      _mm256_add_pd(bezout.matrix[9][12][12], bezout.matrix[8][13][12]);
  bezout.matrix[9][12][13] =
      _mm256_add_pd(bezout.matrix[9][12][13], bezout.matrix[8][13][13]);
  bezout.matrix[9][12][14] =
      _mm256_add_pd(bezout.matrix[9][12][14], bezout.matrix[8][13][14]);
  bezout.matrix[9][12][15] =
      _mm256_add_pd(bezout.matrix[9][12][15], bezout.matrix[8][13][15]);
  bezout.matrix[9][13][0] =
      _mm256_add_pd(bezout.matrix[9][13][0], bezout.matrix[8][14][0]);
  bezout.matrix[9][13][1] =
      _mm256_add_pd(bezout.matrix[9][13][1], bezout.matrix[8][14][1]);
  bezout.matrix[9][13][2] =
      _mm256_add_pd(bezout.matrix[9][13][2], bezout.matrix[8][14][2]);
  bezout.matrix[9][13][3] =
      _mm256_add_pd(bezout.matrix[9][13][3], bezout.matrix[8][14][3]);
  bezout.matrix[9][13][4] =
      _mm256_add_pd(bezout.matrix[9][13][4], bezout.matrix[8][14][4]);
  bezout.matrix[9][13][5] =
      _mm256_add_pd(bezout.matrix[9][13][5], bezout.matrix[8][14][5]);
  bezout.matrix[9][13][6] =
      _mm256_add_pd(bezout.matrix[9][13][6], bezout.matrix[8][14][6]);
  bezout.matrix[9][13][7] =
      _mm256_add_pd(bezout.matrix[9][13][7], bezout.matrix[8][14][7]);
  bezout.matrix[9][13][8] =
      _mm256_add_pd(bezout.matrix[9][13][8], bezout.matrix[8][14][8]);
  bezout.matrix[9][13][9] =
      _mm256_add_pd(bezout.matrix[9][13][9], bezout.matrix[8][14][9]);
  bezout.matrix[9][13][10] =
      _mm256_add_pd(bezout.matrix[9][13][10], bezout.matrix[8][14][10]);
  bezout.matrix[9][13][11] =
      _mm256_add_pd(bezout.matrix[9][13][11], bezout.matrix[8][14][11]);
  bezout.matrix[9][13][12] =
      _mm256_add_pd(bezout.matrix[9][13][12], bezout.matrix[8][14][12]);
  bezout.matrix[9][13][13] =
      _mm256_add_pd(bezout.matrix[9][13][13], bezout.matrix[8][14][13]);
  bezout.matrix[9][13][14] =
      _mm256_add_pd(bezout.matrix[9][13][14], bezout.matrix[8][14][14]);
  bezout.matrix[9][13][15] =
      _mm256_add_pd(bezout.matrix[9][13][15], bezout.matrix[8][14][15]);
  bezout.matrix[10][10][0] =
      _mm256_add_pd(bezout.matrix[10][10][0], bezout.matrix[9][11][0]);
  bezout.matrix[10][10][1] =
      _mm256_add_pd(bezout.matrix[10][10][1], bezout.matrix[9][11][1]);
  bezout.matrix[10][10][2] =
      _mm256_add_pd(bezout.matrix[10][10][2], bezout.matrix[9][11][2]);
  bezout.matrix[10][10][3] =
      _mm256_add_pd(bezout.matrix[10][10][3], bezout.matrix[9][11][3]);
  bezout.matrix[10][10][4] =
      _mm256_add_pd(bezout.matrix[10][10][4], bezout.matrix[9][11][4]);
  bezout.matrix[10][10][5] =
      _mm256_add_pd(bezout.matrix[10][10][5], bezout.matrix[9][11][5]);
  bezout.matrix[10][10][6] =
      _mm256_add_pd(bezout.matrix[10][10][6], bezout.matrix[9][11][6]);
  bezout.matrix[10][10][7] =
      _mm256_add_pd(bezout.matrix[10][10][7], bezout.matrix[9][11][7]);
  bezout.matrix[10][10][8] =
      _mm256_add_pd(bezout.matrix[10][10][8], bezout.matrix[9][11][8]);
  bezout.matrix[10][10][9] =
      _mm256_add_pd(bezout.matrix[10][10][9], bezout.matrix[9][11][9]);
  bezout.matrix[10][10][10] =
      _mm256_add_pd(bezout.matrix[10][10][10], bezout.matrix[9][11][10]);
  bezout.matrix[10][10][11] =
      _mm256_add_pd(bezout.matrix[10][10][11], bezout.matrix[9][11][11]);
  bezout.matrix[10][10][12] =
      _mm256_add_pd(bezout.matrix[10][10][12], bezout.matrix[9][11][12]);
  bezout.matrix[10][10][13] =
      _mm256_add_pd(bezout.matrix[10][10][13], bezout.matrix[9][11][13]);
  bezout.matrix[10][10][14] =
      _mm256_add_pd(bezout.matrix[10][10][14], bezout.matrix[9][11][14]);
  bezout.matrix[10][10][15] =
      _mm256_add_pd(bezout.matrix[10][10][15], bezout.matrix[9][11][15]);
  bezout.matrix[10][11][0] =
      _mm256_add_pd(bezout.matrix[10][11][0], bezout.matrix[9][12][0]);
  bezout.matrix[10][11][1] =
      _mm256_add_pd(bezout.matrix[10][11][1], bezout.matrix[9][12][1]);
  bezout.matrix[10][11][2] =
      _mm256_add_pd(bezout.matrix[10][11][2], bezout.matrix[9][12][2]);
  bezout.matrix[10][11][3] =
      _mm256_add_pd(bezout.matrix[10][11][3], bezout.matrix[9][12][3]);
  bezout.matrix[10][11][4] =
      _mm256_add_pd(bezout.matrix[10][11][4], bezout.matrix[9][12][4]);
  bezout.matrix[10][11][5] =
      _mm256_add_pd(bezout.matrix[10][11][5], bezout.matrix[9][12][5]);
  bezout.matrix[10][11][6] =
      _mm256_add_pd(bezout.matrix[10][11][6], bezout.matrix[9][12][6]);
  bezout.matrix[10][11][7] =
      _mm256_add_pd(bezout.matrix[10][11][7], bezout.matrix[9][12][7]);
  bezout.matrix[10][11][8] =
      _mm256_add_pd(bezout.matrix[10][11][8], bezout.matrix[9][12][8]);
  bezout.matrix[10][11][9] =
      _mm256_add_pd(bezout.matrix[10][11][9], bezout.matrix[9][12][9]);
  bezout.matrix[10][11][10] =
      _mm256_add_pd(bezout.matrix[10][11][10], bezout.matrix[9][12][10]);
  bezout.matrix[10][11][11] =
      _mm256_add_pd(bezout.matrix[10][11][11], bezout.matrix[9][12][11]);
  bezout.matrix[10][11][12] =
      _mm256_add_pd(bezout.matrix[10][11][12], bezout.matrix[9][12][12]);
  bezout.matrix[10][11][13] =
      _mm256_add_pd(bezout.matrix[10][11][13], bezout.matrix[9][12][13]);
  bezout.matrix[10][11][14] =
      _mm256_add_pd(bezout.matrix[10][11][14], bezout.matrix[9][12][14]);
  bezout.matrix[10][11][15] =
      _mm256_add_pd(bezout.matrix[10][11][15], bezout.matrix[9][12][15]);
  bezout.matrix[10][12][0] =
      _mm256_add_pd(bezout.matrix[10][12][0], bezout.matrix[9][13][0]);
  bezout.matrix[10][12][1] =
      _mm256_add_pd(bezout.matrix[10][12][1], bezout.matrix[9][13][1]);
  bezout.matrix[10][12][2] =
      _mm256_add_pd(bezout.matrix[10][12][2], bezout.matrix[9][13][2]);
  bezout.matrix[10][12][3] =
      _mm256_add_pd(bezout.matrix[10][12][3], bezout.matrix[9][13][3]);
  bezout.matrix[10][12][4] =
      _mm256_add_pd(bezout.matrix[10][12][4], bezout.matrix[9][13][4]);
  bezout.matrix[10][12][5] =
      _mm256_add_pd(bezout.matrix[10][12][5], bezout.matrix[9][13][5]);
  bezout.matrix[10][12][6] =
      _mm256_add_pd(bezout.matrix[10][12][6], bezout.matrix[9][13][6]);
  bezout.matrix[10][12][7] =
      _mm256_add_pd(bezout.matrix[10][12][7], bezout.matrix[9][13][7]);
  bezout.matrix[10][12][8] =
      _mm256_add_pd(bezout.matrix[10][12][8], bezout.matrix[9][13][8]);
  bezout.matrix[10][12][9] =
      _mm256_add_pd(bezout.matrix[10][12][9], bezout.matrix[9][13][9]);
  bezout.matrix[10][12][10] =
      _mm256_add_pd(bezout.matrix[10][12][10], bezout.matrix[9][13][10]);
  bezout.matrix[10][12][11] =
      _mm256_add_pd(bezout.matrix[10][12][11], bezout.matrix[9][13][11]);
  bezout.matrix[10][12][12] =
      _mm256_add_pd(bezout.matrix[10][12][12], bezout.matrix[9][13][12]);
  bezout.matrix[10][12][13] =
      _mm256_add_pd(bezout.matrix[10][12][13], bezout.matrix[9][13][13]);
  bezout.matrix[10][12][14] =
      _mm256_add_pd(bezout.matrix[10][12][14], bezout.matrix[9][13][14]);
  bezout.matrix[10][12][15] =
      _mm256_add_pd(bezout.matrix[10][12][15], bezout.matrix[9][13][15]);
  bezout.matrix[10][13][0] =
      _mm256_add_pd(bezout.matrix[10][13][0], bezout.matrix[9][14][0]);
  bezout.matrix[10][13][1] =
      _mm256_add_pd(bezout.matrix[10][13][1], bezout.matrix[9][14][1]);
  bezout.matrix[10][13][2] =
      _mm256_add_pd(bezout.matrix[10][13][2], bezout.matrix[9][14][2]);
  bezout.matrix[10][13][3] =
      _mm256_add_pd(bezout.matrix[10][13][3], bezout.matrix[9][14][3]);
  bezout.matrix[10][13][4] =
      _mm256_add_pd(bezout.matrix[10][13][4], bezout.matrix[9][14][4]);
  bezout.matrix[10][13][5] =
      _mm256_add_pd(bezout.matrix[10][13][5], bezout.matrix[9][14][5]);
  bezout.matrix[10][13][6] =
      _mm256_add_pd(bezout.matrix[10][13][6], bezout.matrix[9][14][6]);
  bezout.matrix[10][13][7] =
      _mm256_add_pd(bezout.matrix[10][13][7], bezout.matrix[9][14][7]);
  bezout.matrix[10][13][8] =
      _mm256_add_pd(bezout.matrix[10][13][8], bezout.matrix[9][14][8]);
  bezout.matrix[10][13][9] =
      _mm256_add_pd(bezout.matrix[10][13][9], bezout.matrix[9][14][9]);
  bezout.matrix[10][13][10] =
      _mm256_add_pd(bezout.matrix[10][13][10], bezout.matrix[9][14][10]);
  bezout.matrix[10][13][11] =
      _mm256_add_pd(bezout.matrix[10][13][11], bezout.matrix[9][14][11]);
  bezout.matrix[10][13][12] =
      _mm256_add_pd(bezout.matrix[10][13][12], bezout.matrix[9][14][12]);
  bezout.matrix[10][13][13] =
      _mm256_add_pd(bezout.matrix[10][13][13], bezout.matrix[9][14][13]);
  bezout.matrix[10][13][14] =
      _mm256_add_pd(bezout.matrix[10][13][14], bezout.matrix[9][14][14]);
  bezout.matrix[10][13][15] =
      _mm256_add_pd(bezout.matrix[10][13][15], bezout.matrix[9][14][15]);
  bezout.matrix[11][11][0] =
      _mm256_add_pd(bezout.matrix[11][11][0], bezout.matrix[10][12][0]);
  bezout.matrix[11][11][1] =
      _mm256_add_pd(bezout.matrix[11][11][1], bezout.matrix[10][12][1]);
  bezout.matrix[11][11][2] =
      _mm256_add_pd(bezout.matrix[11][11][2], bezout.matrix[10][12][2]);
  bezout.matrix[11][11][3] =
      _mm256_add_pd(bezout.matrix[11][11][3], bezout.matrix[10][12][3]);
  bezout.matrix[11][11][4] =
      _mm256_add_pd(bezout.matrix[11][11][4], bezout.matrix[10][12][4]);
  bezout.matrix[11][11][5] =
      _mm256_add_pd(bezout.matrix[11][11][5], bezout.matrix[10][12][5]);
  bezout.matrix[11][11][6] =
      _mm256_add_pd(bezout.matrix[11][11][6], bezout.matrix[10][12][6]);
  bezout.matrix[11][11][7] =
      _mm256_add_pd(bezout.matrix[11][11][7], bezout.matrix[10][12][7]);
  bezout.matrix[11][11][8] =
      _mm256_add_pd(bezout.matrix[11][11][8], bezout.matrix[10][12][8]);
  bezout.matrix[11][11][9] =
      _mm256_add_pd(bezout.matrix[11][11][9], bezout.matrix[10][12][9]);
  bezout.matrix[11][11][10] =
      _mm256_add_pd(bezout.matrix[11][11][10], bezout.matrix[10][12][10]);
  bezout.matrix[11][11][11] =
      _mm256_add_pd(bezout.matrix[11][11][11], bezout.matrix[10][12][11]);
  bezout.matrix[11][11][12] =
      _mm256_add_pd(bezout.matrix[11][11][12], bezout.matrix[10][12][12]);
  bezout.matrix[11][11][13] =
      _mm256_add_pd(bezout.matrix[11][11][13], bezout.matrix[10][12][13]);
  bezout.matrix[11][11][14] =
      _mm256_add_pd(bezout.matrix[11][11][14], bezout.matrix[10][12][14]);
  bezout.matrix[11][11][15] =
      _mm256_add_pd(bezout.matrix[11][11][15], bezout.matrix[10][12][15]);
  bezout.matrix[11][12][0] =
      _mm256_add_pd(bezout.matrix[11][12][0], bezout.matrix[10][13][0]);
  bezout.matrix[11][12][1] =
      _mm256_add_pd(bezout.matrix[11][12][1], bezout.matrix[10][13][1]);
  bezout.matrix[11][12][2] =
      _mm256_add_pd(bezout.matrix[11][12][2], bezout.matrix[10][13][2]);
  bezout.matrix[11][12][3] =
      _mm256_add_pd(bezout.matrix[11][12][3], bezout.matrix[10][13][3]);
  bezout.matrix[11][12][4] =
      _mm256_add_pd(bezout.matrix[11][12][4], bezout.matrix[10][13][4]);
  bezout.matrix[11][12][5] =
      _mm256_add_pd(bezout.matrix[11][12][5], bezout.matrix[10][13][5]);
  bezout.matrix[11][12][6] =
      _mm256_add_pd(bezout.matrix[11][12][6], bezout.matrix[10][13][6]);
  bezout.matrix[11][12][7] =
      _mm256_add_pd(bezout.matrix[11][12][7], bezout.matrix[10][13][7]);
  bezout.matrix[11][12][8] =
      _mm256_add_pd(bezout.matrix[11][12][8], bezout.matrix[10][13][8]);
  bezout.matrix[11][12][9] =
      _mm256_add_pd(bezout.matrix[11][12][9], bezout.matrix[10][13][9]);
  bezout.matrix[11][12][10] =
      _mm256_add_pd(bezout.matrix[11][12][10], bezout.matrix[10][13][10]);
  bezout.matrix[11][12][11] =
      _mm256_add_pd(bezout.matrix[11][12][11], bezout.matrix[10][13][11]);
  bezout.matrix[11][12][12] =
      _mm256_add_pd(bezout.matrix[11][12][12], bezout.matrix[10][13][12]);
  bezout.matrix[11][12][13] =
      _mm256_add_pd(bezout.matrix[11][12][13], bezout.matrix[10][13][13]);
  bezout.matrix[11][12][14] =
      _mm256_add_pd(bezout.matrix[11][12][14], bezout.matrix[10][13][14]);
  bezout.matrix[11][12][15] =
      _mm256_add_pd(bezout.matrix[11][12][15], bezout.matrix[10][13][15]);
  bezout.matrix[11][13][0] =
      _mm256_add_pd(bezout.matrix[11][13][0], bezout.matrix[10][14][0]);
  bezout.matrix[11][13][1] =
      _mm256_add_pd(bezout.matrix[11][13][1], bezout.matrix[10][14][1]);
  bezout.matrix[11][13][2] =
      _mm256_add_pd(bezout.matrix[11][13][2], bezout.matrix[10][14][2]);
  bezout.matrix[11][13][3] =
      _mm256_add_pd(bezout.matrix[11][13][3], bezout.matrix[10][14][3]);
  bezout.matrix[11][13][4] =
      _mm256_add_pd(bezout.matrix[11][13][4], bezout.matrix[10][14][4]);
  bezout.matrix[11][13][5] =
      _mm256_add_pd(bezout.matrix[11][13][5], bezout.matrix[10][14][5]);
  bezout.matrix[11][13][6] =
      _mm256_add_pd(bezout.matrix[11][13][6], bezout.matrix[10][14][6]);
  bezout.matrix[11][13][7] =
      _mm256_add_pd(bezout.matrix[11][13][7], bezout.matrix[10][14][7]);
  bezout.matrix[11][13][8] =
      _mm256_add_pd(bezout.matrix[11][13][8], bezout.matrix[10][14][8]);
  bezout.matrix[11][13][9] =
      _mm256_add_pd(bezout.matrix[11][13][9], bezout.matrix[10][14][9]);
  bezout.matrix[11][13][10] =
      _mm256_add_pd(bezout.matrix[11][13][10], bezout.matrix[10][14][10]);
  bezout.matrix[11][13][11] =
      _mm256_add_pd(bezout.matrix[11][13][11], bezout.matrix[10][14][11]);
  bezout.matrix[11][13][12] =
      _mm256_add_pd(bezout.matrix[11][13][12], bezout.matrix[10][14][12]);
  bezout.matrix[11][13][13] =
      _mm256_add_pd(bezout.matrix[11][13][13], bezout.matrix[10][14][13]);
  bezout.matrix[11][13][14] =
      _mm256_add_pd(bezout.matrix[11][13][14], bezout.matrix[10][14][14]);
  bezout.matrix[11][13][15] =
      _mm256_add_pd(bezout.matrix[11][13][15], bezout.matrix[10][14][15]);
  bezout.matrix[12][12][0] =
      _mm256_add_pd(bezout.matrix[12][12][0], bezout.matrix[11][13][0]);
  bezout.matrix[12][12][1] =
      _mm256_add_pd(bezout.matrix[12][12][1], bezout.matrix[11][13][1]);
  bezout.matrix[12][12][2] =
      _mm256_add_pd(bezout.matrix[12][12][2], bezout.matrix[11][13][2]);
  bezout.matrix[12][12][3] =
      _mm256_add_pd(bezout.matrix[12][12][3], bezout.matrix[11][13][3]);
  bezout.matrix[12][12][4] =
      _mm256_add_pd(bezout.matrix[12][12][4], bezout.matrix[11][13][4]);
  bezout.matrix[12][12][5] =
      _mm256_add_pd(bezout.matrix[12][12][5], bezout.matrix[11][13][5]);
  bezout.matrix[12][12][6] =
      _mm256_add_pd(bezout.matrix[12][12][6], bezout.matrix[11][13][6]);
  bezout.matrix[12][12][7] =
      _mm256_add_pd(bezout.matrix[12][12][7], bezout.matrix[11][13][7]);
  bezout.matrix[12][12][8] =
      _mm256_add_pd(bezout.matrix[12][12][8], bezout.matrix[11][13][8]);
  bezout.matrix[12][12][9] =
      _mm256_add_pd(bezout.matrix[12][12][9], bezout.matrix[11][13][9]);
  bezout.matrix[12][12][10] =
      _mm256_add_pd(bezout.matrix[12][12][10], bezout.matrix[11][13][10]);
  bezout.matrix[12][12][11] =
      _mm256_add_pd(bezout.matrix[12][12][11], bezout.matrix[11][13][11]);
  bezout.matrix[12][12][12] =
      _mm256_add_pd(bezout.matrix[12][12][12], bezout.matrix[11][13][12]);
  bezout.matrix[12][12][13] =
      _mm256_add_pd(bezout.matrix[12][12][13], bezout.matrix[11][13][13]);
  bezout.matrix[12][12][14] =
      _mm256_add_pd(bezout.matrix[12][12][14], bezout.matrix[11][13][14]);
  bezout.matrix[12][12][15] =
      _mm256_add_pd(bezout.matrix[12][12][15], bezout.matrix[11][13][15]);
  bezout.matrix[12][13][0] =
      _mm256_add_pd(bezout.matrix[12][13][0], bezout.matrix[11][14][0]);
  bezout.matrix[12][13][1] =
      _mm256_add_pd(bezout.matrix[12][13][1], bezout.matrix[11][14][1]);
  bezout.matrix[12][13][2] =
      _mm256_add_pd(bezout.matrix[12][13][2], bezout.matrix[11][14][2]);
  bezout.matrix[12][13][3] =
      _mm256_add_pd(bezout.matrix[12][13][3], bezout.matrix[11][14][3]);
  bezout.matrix[12][13][4] =
      _mm256_add_pd(bezout.matrix[12][13][4], bezout.matrix[11][14][4]);
  bezout.matrix[12][13][5] =
      _mm256_add_pd(bezout.matrix[12][13][5], bezout.matrix[11][14][5]);
  bezout.matrix[12][13][6] =
      _mm256_add_pd(bezout.matrix[12][13][6], bezout.matrix[11][14][6]);
  bezout.matrix[12][13][7] =
      _mm256_add_pd(bezout.matrix[12][13][7], bezout.matrix[11][14][7]);
  bezout.matrix[12][13][8] =
      _mm256_add_pd(bezout.matrix[12][13][8], bezout.matrix[11][14][8]);
  bezout.matrix[12][13][9] =
      _mm256_add_pd(bezout.matrix[12][13][9], bezout.matrix[11][14][9]);
  bezout.matrix[12][13][10] =
      _mm256_add_pd(bezout.matrix[12][13][10], bezout.matrix[11][14][10]);
  bezout.matrix[12][13][11] =
      _mm256_add_pd(bezout.matrix[12][13][11], bezout.matrix[11][14][11]);
  bezout.matrix[12][13][12] =
      _mm256_add_pd(bezout.matrix[12][13][12], bezout.matrix[11][14][12]);
  bezout.matrix[12][13][13] =
      _mm256_add_pd(bezout.matrix[12][13][13], bezout.matrix[11][14][13]);
  bezout.matrix[12][13][14] =
      _mm256_add_pd(bezout.matrix[12][13][14], bezout.matrix[11][14][14]);
  bezout.matrix[12][13][15] =
      _mm256_add_pd(bezout.matrix[12][13][15], bezout.matrix[11][14][15]);
  bezout.matrix[13][13][0] =
      _mm256_add_pd(bezout.matrix[13][13][0], bezout.matrix[12][14][0]);
  bezout.matrix[13][13][1] =
      _mm256_add_pd(bezout.matrix[13][13][1], bezout.matrix[12][14][1]);
  bezout.matrix[13][13][2] =
      _mm256_add_pd(bezout.matrix[13][13][2], bezout.matrix[12][14][2]);
  bezout.matrix[13][13][3] =
      _mm256_add_pd(bezout.matrix[13][13][3], bezout.matrix[12][14][3]);
  bezout.matrix[13][13][4] =
      _mm256_add_pd(bezout.matrix[13][13][4], bezout.matrix[12][14][4]);
  bezout.matrix[13][13][5] =
      _mm256_add_pd(bezout.matrix[13][13][5], bezout.matrix[12][14][5]);
  bezout.matrix[13][13][6] =
      _mm256_add_pd(bezout.matrix[13][13][6], bezout.matrix[12][14][6]);
  bezout.matrix[13][13][7] =
      _mm256_add_pd(bezout.matrix[13][13][7], bezout.matrix[12][14][7]);
  bezout.matrix[13][13][8] =
      _mm256_add_pd(bezout.matrix[13][13][8], bezout.matrix[12][14][8]);
  bezout.matrix[13][13][9] =
      _mm256_add_pd(bezout.matrix[13][13][9], bezout.matrix[12][14][9]);
  bezout.matrix[13][13][10] =
      _mm256_add_pd(bezout.matrix[13][13][10], bezout.matrix[12][14][10]);
  bezout.matrix[13][13][11] =
      _mm256_add_pd(bezout.matrix[13][13][11], bezout.matrix[12][14][11]);
  bezout.matrix[13][13][12] =
      _mm256_add_pd(bezout.matrix[13][13][12], bezout.matrix[12][14][12]);
  bezout.matrix[13][13][13] =
      _mm256_add_pd(bezout.matrix[13][13][13], bezout.matrix[12][14][13]);
  bezout.matrix[13][13][14] =
      _mm256_add_pd(bezout.matrix[13][13][14], bezout.matrix[12][14][14]);
  bezout.matrix[13][13][15] =
      _mm256_add_pd(bezout.matrix[13][13][15], bezout.matrix[12][14][15]);
  bezout.matrix[1][0][0] = bezout.matrix[0][1][0];
  bezout.matrix[1][0][1] = bezout.matrix[0][1][1];
  bezout.matrix[1][0][2] = bezout.matrix[0][1][2];
  bezout.matrix[1][0][3] = bezout.matrix[0][1][3];
  bezout.matrix[1][0][4] = bezout.matrix[0][1][4];
  bezout.matrix[1][0][5] = bezout.matrix[0][1][5];
  bezout.matrix[1][0][6] = bezout.matrix[0][1][6];
  bezout.matrix[1][0][7] = bezout.matrix[0][1][7];
  bezout.matrix[1][0][8] = bezout.matrix[0][1][8];
  bezout.matrix[1][0][9] = bezout.matrix[0][1][9];
  bezout.matrix[1][0][10] = bezout.matrix[0][1][10];
  bezout.matrix[1][0][11] = bezout.matrix[0][1][11];
  bezout.matrix[1][0][12] = bezout.matrix[0][1][12];
  bezout.matrix[1][0][13] = bezout.matrix[0][1][13];
  bezout.matrix[1][0][14] = bezout.matrix[0][1][14];
  bezout.matrix[1][0][15] = bezout.matrix[0][1][15];
  bezout.matrix[2][0][0] = bezout.matrix[0][2][0];
  bezout.matrix[2][0][1] = bezout.matrix[0][2][1];
  bezout.matrix[2][0][2] = bezout.matrix[0][2][2];
  bezout.matrix[2][0][3] = bezout.matrix[0][2][3];
  bezout.matrix[2][0][4] = bezout.matrix[0][2][4];
  bezout.matrix[2][0][5] = bezout.matrix[0][2][5];
  bezout.matrix[2][0][6] = bezout.matrix[0][2][6];
  bezout.matrix[2][0][7] = bezout.matrix[0][2][7];
  bezout.matrix[2][0][8] = bezout.matrix[0][2][8];
  bezout.matrix[2][0][9] = bezout.matrix[0][2][9];
  bezout.matrix[2][0][10] = bezout.matrix[0][2][10];
  bezout.matrix[2][0][11] = bezout.matrix[0][2][11];
  bezout.matrix[2][0][12] = bezout.matrix[0][2][12];
  bezout.matrix[2][0][13] = bezout.matrix[0][2][13];
  bezout.matrix[2][0][14] = bezout.matrix[0][2][14];
  bezout.matrix[2][0][15] = bezout.matrix[0][2][15];
  bezout.matrix[2][1][0] = bezout.matrix[1][2][0];
  bezout.matrix[2][1][1] = bezout.matrix[1][2][1];
  bezout.matrix[2][1][2] = bezout.matrix[1][2][2];
  bezout.matrix[2][1][3] = bezout.matrix[1][2][3];
  bezout.matrix[2][1][4] = bezout.matrix[1][2][4];
  bezout.matrix[2][1][5] = bezout.matrix[1][2][5];
  bezout.matrix[2][1][6] = bezout.matrix[1][2][6];
  bezout.matrix[2][1][7] = bezout.matrix[1][2][7];
  bezout.matrix[2][1][8] = bezout.matrix[1][2][8];
  bezout.matrix[2][1][9] = bezout.matrix[1][2][9];
  bezout.matrix[2][1][10] = bezout.matrix[1][2][10];
  bezout.matrix[2][1][11] = bezout.matrix[1][2][11];
  bezout.matrix[2][1][12] = bezout.matrix[1][2][12];
  bezout.matrix[2][1][13] = bezout.matrix[1][2][13];
  bezout.matrix[2][1][14] = bezout.matrix[1][2][14];
  bezout.matrix[2][1][15] = bezout.matrix[1][2][15];
  bezout.matrix[3][0][0] = bezout.matrix[0][3][0];
  bezout.matrix[3][0][1] = bezout.matrix[0][3][1];
  bezout.matrix[3][0][2] = bezout.matrix[0][3][2];
  bezout.matrix[3][0][3] = bezout.matrix[0][3][3];
  bezout.matrix[3][0][4] = bezout.matrix[0][3][4];
  bezout.matrix[3][0][5] = bezout.matrix[0][3][5];
  bezout.matrix[3][0][6] = bezout.matrix[0][3][6];
  bezout.matrix[3][0][7] = bezout.matrix[0][3][7];
  bezout.matrix[3][0][8] = bezout.matrix[0][3][8];
  bezout.matrix[3][0][9] = bezout.matrix[0][3][9];
  bezout.matrix[3][0][10] = bezout.matrix[0][3][10];
  bezout.matrix[3][0][11] = bezout.matrix[0][3][11];
  bezout.matrix[3][0][12] = bezout.matrix[0][3][12];
  bezout.matrix[3][0][13] = bezout.matrix[0][3][13];
  bezout.matrix[3][0][14] = bezout.matrix[0][3][14];
  bezout.matrix[3][0][15] = bezout.matrix[0][3][15];
  bezout.matrix[3][1][0] = bezout.matrix[1][3][0];
  bezout.matrix[3][1][1] = bezout.matrix[1][3][1];
  bezout.matrix[3][1][2] = bezout.matrix[1][3][2];
  bezout.matrix[3][1][3] = bezout.matrix[1][3][3];
  bezout.matrix[3][1][4] = bezout.matrix[1][3][4];
  bezout.matrix[3][1][5] = bezout.matrix[1][3][5];
  bezout.matrix[3][1][6] = bezout.matrix[1][3][6];
  bezout.matrix[3][1][7] = bezout.matrix[1][3][7];
  bezout.matrix[3][1][8] = bezout.matrix[1][3][8];
  bezout.matrix[3][1][9] = bezout.matrix[1][3][9];
  bezout.matrix[3][1][10] = bezout.matrix[1][3][10];
  bezout.matrix[3][1][11] = bezout.matrix[1][3][11];
  bezout.matrix[3][1][12] = bezout.matrix[1][3][12];
  bezout.matrix[3][1][13] = bezout.matrix[1][3][13];
  bezout.matrix[3][1][14] = bezout.matrix[1][3][14];
  bezout.matrix[3][1][15] = bezout.matrix[1][3][15];
  bezout.matrix[3][2][0] = bezout.matrix[2][3][0];
  bezout.matrix[3][2][1] = bezout.matrix[2][3][1];
  bezout.matrix[3][2][2] = bezout.matrix[2][3][2];
  bezout.matrix[3][2][3] = bezout.matrix[2][3][3];
  bezout.matrix[3][2][4] = bezout.matrix[2][3][4];
  bezout.matrix[3][2][5] = bezout.matrix[2][3][5];
  bezout.matrix[3][2][6] = bezout.matrix[2][3][6];
  bezout.matrix[3][2][7] = bezout.matrix[2][3][7];
  bezout.matrix[3][2][8] = bezout.matrix[2][3][8];
  bezout.matrix[3][2][9] = bezout.matrix[2][3][9];
  bezout.matrix[3][2][10] = bezout.matrix[2][3][10];
  bezout.matrix[3][2][11] = bezout.matrix[2][3][11];
  bezout.matrix[3][2][12] = bezout.matrix[2][3][12];
  bezout.matrix[3][2][13] = bezout.matrix[2][3][13];
  bezout.matrix[3][2][14] = bezout.matrix[2][3][14];
  bezout.matrix[3][2][15] = bezout.matrix[2][3][15];
  bezout.matrix[4][0][0] = bezout.matrix[0][4][0];
  bezout.matrix[4][0][1] = bezout.matrix[0][4][1];
  bezout.matrix[4][0][2] = bezout.matrix[0][4][2];
  bezout.matrix[4][0][3] = bezout.matrix[0][4][3];
  bezout.matrix[4][0][4] = bezout.matrix[0][4][4];
  bezout.matrix[4][0][5] = bezout.matrix[0][4][5];
  bezout.matrix[4][0][6] = bezout.matrix[0][4][6];
  bezout.matrix[4][0][7] = bezout.matrix[0][4][7];
  bezout.matrix[4][0][8] = bezout.matrix[0][4][8];
  bezout.matrix[4][0][9] = bezout.matrix[0][4][9];
  bezout.matrix[4][0][10] = bezout.matrix[0][4][10];
  bezout.matrix[4][0][11] = bezout.matrix[0][4][11];
  bezout.matrix[4][0][12] = bezout.matrix[0][4][12];
  bezout.matrix[4][0][13] = bezout.matrix[0][4][13];
  bezout.matrix[4][0][14] = bezout.matrix[0][4][14];
  bezout.matrix[4][0][15] = bezout.matrix[0][4][15];
  bezout.matrix[4][1][0] = bezout.matrix[1][4][0];
  bezout.matrix[4][1][1] = bezout.matrix[1][4][1];
  bezout.matrix[4][1][2] = bezout.matrix[1][4][2];
  bezout.matrix[4][1][3] = bezout.matrix[1][4][3];
  bezout.matrix[4][1][4] = bezout.matrix[1][4][4];
  bezout.matrix[4][1][5] = bezout.matrix[1][4][5];
  bezout.matrix[4][1][6] = bezout.matrix[1][4][6];
  bezout.matrix[4][1][7] = bezout.matrix[1][4][7];
  bezout.matrix[4][1][8] = bezout.matrix[1][4][8];
  bezout.matrix[4][1][9] = bezout.matrix[1][4][9];
  bezout.matrix[4][1][10] = bezout.matrix[1][4][10];
  bezout.matrix[4][1][11] = bezout.matrix[1][4][11];
  bezout.matrix[4][1][12] = bezout.matrix[1][4][12];
  bezout.matrix[4][1][13] = bezout.matrix[1][4][13];
  bezout.matrix[4][1][14] = bezout.matrix[1][4][14];
  bezout.matrix[4][1][15] = bezout.matrix[1][4][15];
  bezout.matrix[4][2][0] = bezout.matrix[2][4][0];
  bezout.matrix[4][2][1] = bezout.matrix[2][4][1];
  bezout.matrix[4][2][2] = bezout.matrix[2][4][2];
  bezout.matrix[4][2][3] = bezout.matrix[2][4][3];
  bezout.matrix[4][2][4] = bezout.matrix[2][4][4];
  bezout.matrix[4][2][5] = bezout.matrix[2][4][5];
  bezout.matrix[4][2][6] = bezout.matrix[2][4][6];
  bezout.matrix[4][2][7] = bezout.matrix[2][4][7];
  bezout.matrix[4][2][8] = bezout.matrix[2][4][8];
  bezout.matrix[4][2][9] = bezout.matrix[2][4][9];
  bezout.matrix[4][2][10] = bezout.matrix[2][4][10];
  bezout.matrix[4][2][11] = bezout.matrix[2][4][11];
  bezout.matrix[4][2][12] = bezout.matrix[2][4][12];
  bezout.matrix[4][2][13] = bezout.matrix[2][4][13];
  bezout.matrix[4][2][14] = bezout.matrix[2][4][14];
  bezout.matrix[4][2][15] = bezout.matrix[2][4][15];
  bezout.matrix[4][3][0] = bezout.matrix[3][4][0];
  bezout.matrix[4][3][1] = bezout.matrix[3][4][1];
  bezout.matrix[4][3][2] = bezout.matrix[3][4][2];
  bezout.matrix[4][3][3] = bezout.matrix[3][4][3];
  bezout.matrix[4][3][4] = bezout.matrix[3][4][4];
  bezout.matrix[4][3][5] = bezout.matrix[3][4][5];
  bezout.matrix[4][3][6] = bezout.matrix[3][4][6];
  bezout.matrix[4][3][7] = bezout.matrix[3][4][7];
  bezout.matrix[4][3][8] = bezout.matrix[3][4][8];
  bezout.matrix[4][3][9] = bezout.matrix[3][4][9];
  bezout.matrix[4][3][10] = bezout.matrix[3][4][10];
  bezout.matrix[4][3][11] = bezout.matrix[3][4][11];
  bezout.matrix[4][3][12] = bezout.matrix[3][4][12];
  bezout.matrix[4][3][13] = bezout.matrix[3][4][13];
  bezout.matrix[4][3][14] = bezout.matrix[3][4][14];
  bezout.matrix[4][3][15] = bezout.matrix[3][4][15];
  bezout.matrix[5][0][0] = bezout.matrix[0][5][0];
  bezout.matrix[5][0][1] = bezout.matrix[0][5][1];
  bezout.matrix[5][0][2] = bezout.matrix[0][5][2];
  bezout.matrix[5][0][3] = bezout.matrix[0][5][3];
  bezout.matrix[5][0][4] = bezout.matrix[0][5][4];
  bezout.matrix[5][0][5] = bezout.matrix[0][5][5];
  bezout.matrix[5][0][6] = bezout.matrix[0][5][6];
  bezout.matrix[5][0][7] = bezout.matrix[0][5][7];
  bezout.matrix[5][0][8] = bezout.matrix[0][5][8];
  bezout.matrix[5][0][9] = bezout.matrix[0][5][9];
  bezout.matrix[5][0][10] = bezout.matrix[0][5][10];
  bezout.matrix[5][0][11] = bezout.matrix[0][5][11];
  bezout.matrix[5][0][12] = bezout.matrix[0][5][12];
  bezout.matrix[5][0][13] = bezout.matrix[0][5][13];
  bezout.matrix[5][0][14] = bezout.matrix[0][5][14];
  bezout.matrix[5][0][15] = bezout.matrix[0][5][15];
  bezout.matrix[5][1][0] = bezout.matrix[1][5][0];
  bezout.matrix[5][1][1] = bezout.matrix[1][5][1];
  bezout.matrix[5][1][2] = bezout.matrix[1][5][2];
  bezout.matrix[5][1][3] = bezout.matrix[1][5][3];
  bezout.matrix[5][1][4] = bezout.matrix[1][5][4];
  bezout.matrix[5][1][5] = bezout.matrix[1][5][5];
  bezout.matrix[5][1][6] = bezout.matrix[1][5][6];
  bezout.matrix[5][1][7] = bezout.matrix[1][5][7];
  bezout.matrix[5][1][8] = bezout.matrix[1][5][8];
  bezout.matrix[5][1][9] = bezout.matrix[1][5][9];
  bezout.matrix[5][1][10] = bezout.matrix[1][5][10];
  bezout.matrix[5][1][11] = bezout.matrix[1][5][11];
  bezout.matrix[5][1][12] = bezout.matrix[1][5][12];
  bezout.matrix[5][1][13] = bezout.matrix[1][5][13];
  bezout.matrix[5][1][14] = bezout.matrix[1][5][14];
  bezout.matrix[5][1][15] = bezout.matrix[1][5][15];
  bezout.matrix[5][2][0] = bezout.matrix[2][5][0];
  bezout.matrix[5][2][1] = bezout.matrix[2][5][1];
  bezout.matrix[5][2][2] = bezout.matrix[2][5][2];
  bezout.matrix[5][2][3] = bezout.matrix[2][5][3];
  bezout.matrix[5][2][4] = bezout.matrix[2][5][4];
  bezout.matrix[5][2][5] = bezout.matrix[2][5][5];
  bezout.matrix[5][2][6] = bezout.matrix[2][5][6];
  bezout.matrix[5][2][7] = bezout.matrix[2][5][7];
  bezout.matrix[5][2][8] = bezout.matrix[2][5][8];
  bezout.matrix[5][2][9] = bezout.matrix[2][5][9];
  bezout.matrix[5][2][10] = bezout.matrix[2][5][10];
  bezout.matrix[5][2][11] = bezout.matrix[2][5][11];
  bezout.matrix[5][2][12] = bezout.matrix[2][5][12];
  bezout.matrix[5][2][13] = bezout.matrix[2][5][13];
  bezout.matrix[5][2][14] = bezout.matrix[2][5][14];
  bezout.matrix[5][2][15] = bezout.matrix[2][5][15];
  bezout.matrix[5][3][0] = bezout.matrix[3][5][0];
  bezout.matrix[5][3][1] = bezout.matrix[3][5][1];
  bezout.matrix[5][3][2] = bezout.matrix[3][5][2];
  bezout.matrix[5][3][3] = bezout.matrix[3][5][3];
  bezout.matrix[5][3][4] = bezout.matrix[3][5][4];
  bezout.matrix[5][3][5] = bezout.matrix[3][5][5];
  bezout.matrix[5][3][6] = bezout.matrix[3][5][6];
  bezout.matrix[5][3][7] = bezout.matrix[3][5][7];
  bezout.matrix[5][3][8] = bezout.matrix[3][5][8];
  bezout.matrix[5][3][9] = bezout.matrix[3][5][9];
  bezout.matrix[5][3][10] = bezout.matrix[3][5][10];
  bezout.matrix[5][3][11] = bezout.matrix[3][5][11];
  bezout.matrix[5][3][12] = bezout.matrix[3][5][12];
  bezout.matrix[5][3][13] = bezout.matrix[3][5][13];
  bezout.matrix[5][3][14] = bezout.matrix[3][5][14];
  bezout.matrix[5][3][15] = bezout.matrix[3][5][15];
  bezout.matrix[5][4][0] = bezout.matrix[4][5][0];
  bezout.matrix[5][4][1] = bezout.matrix[4][5][1];
  bezout.matrix[5][4][2] = bezout.matrix[4][5][2];
  bezout.matrix[5][4][3] = bezout.matrix[4][5][3];
  bezout.matrix[5][4][4] = bezout.matrix[4][5][4];
  bezout.matrix[5][4][5] = bezout.matrix[4][5][5];
  bezout.matrix[5][4][6] = bezout.matrix[4][5][6];
  bezout.matrix[5][4][7] = bezout.matrix[4][5][7];
  bezout.matrix[5][4][8] = bezout.matrix[4][5][8];
  bezout.matrix[5][4][9] = bezout.matrix[4][5][9];
  bezout.matrix[5][4][10] = bezout.matrix[4][5][10];
  bezout.matrix[5][4][11] = bezout.matrix[4][5][11];
  bezout.matrix[5][4][12] = bezout.matrix[4][5][12];
  bezout.matrix[5][4][13] = bezout.matrix[4][5][13];
  bezout.matrix[5][4][14] = bezout.matrix[4][5][14];
  bezout.matrix[5][4][15] = bezout.matrix[4][5][15];
  bezout.matrix[6][0][0] = bezout.matrix[0][6][0];
  bezout.matrix[6][0][1] = bezout.matrix[0][6][1];
  bezout.matrix[6][0][2] = bezout.matrix[0][6][2];
  bezout.matrix[6][0][3] = bezout.matrix[0][6][3];
  bezout.matrix[6][0][4] = bezout.matrix[0][6][4];
  bezout.matrix[6][0][5] = bezout.matrix[0][6][5];
  bezout.matrix[6][0][6] = bezout.matrix[0][6][6];
  bezout.matrix[6][0][7] = bezout.matrix[0][6][7];
  bezout.matrix[6][0][8] = bezout.matrix[0][6][8];
  bezout.matrix[6][0][9] = bezout.matrix[0][6][9];
  bezout.matrix[6][0][10] = bezout.matrix[0][6][10];
  bezout.matrix[6][0][11] = bezout.matrix[0][6][11];
  bezout.matrix[6][0][12] = bezout.matrix[0][6][12];
  bezout.matrix[6][0][13] = bezout.matrix[0][6][13];
  bezout.matrix[6][0][14] = bezout.matrix[0][6][14];
  bezout.matrix[6][0][15] = bezout.matrix[0][6][15];
  bezout.matrix[6][1][0] = bezout.matrix[1][6][0];
  bezout.matrix[6][1][1] = bezout.matrix[1][6][1];
  bezout.matrix[6][1][2] = bezout.matrix[1][6][2];
  bezout.matrix[6][1][3] = bezout.matrix[1][6][3];
  bezout.matrix[6][1][4] = bezout.matrix[1][6][4];
  bezout.matrix[6][1][5] = bezout.matrix[1][6][5];
  bezout.matrix[6][1][6] = bezout.matrix[1][6][6];
  bezout.matrix[6][1][7] = bezout.matrix[1][6][7];
  bezout.matrix[6][1][8] = bezout.matrix[1][6][8];
  bezout.matrix[6][1][9] = bezout.matrix[1][6][9];
  bezout.matrix[6][1][10] = bezout.matrix[1][6][10];
  bezout.matrix[6][1][11] = bezout.matrix[1][6][11];
  bezout.matrix[6][1][12] = bezout.matrix[1][6][12];
  bezout.matrix[6][1][13] = bezout.matrix[1][6][13];
  bezout.matrix[6][1][14] = bezout.matrix[1][6][14];
  bezout.matrix[6][1][15] = bezout.matrix[1][6][15];
  bezout.matrix[6][2][0] = bezout.matrix[2][6][0];
  bezout.matrix[6][2][1] = bezout.matrix[2][6][1];
  bezout.matrix[6][2][2] = bezout.matrix[2][6][2];
  bezout.matrix[6][2][3] = bezout.matrix[2][6][3];
  bezout.matrix[6][2][4] = bezout.matrix[2][6][4];
  bezout.matrix[6][2][5] = bezout.matrix[2][6][5];
  bezout.matrix[6][2][6] = bezout.matrix[2][6][6];
  bezout.matrix[6][2][7] = bezout.matrix[2][6][7];
  bezout.matrix[6][2][8] = bezout.matrix[2][6][8];
  bezout.matrix[6][2][9] = bezout.matrix[2][6][9];
  bezout.matrix[6][2][10] = bezout.matrix[2][6][10];
  bezout.matrix[6][2][11] = bezout.matrix[2][6][11];
  bezout.matrix[6][2][12] = bezout.matrix[2][6][12];
  bezout.matrix[6][2][13] = bezout.matrix[2][6][13];
  bezout.matrix[6][2][14] = bezout.matrix[2][6][14];
  bezout.matrix[6][2][15] = bezout.matrix[2][6][15];
  bezout.matrix[6][3][0] = bezout.matrix[3][6][0];
  bezout.matrix[6][3][1] = bezout.matrix[3][6][1];
  bezout.matrix[6][3][2] = bezout.matrix[3][6][2];
  bezout.matrix[6][3][3] = bezout.matrix[3][6][3];
  bezout.matrix[6][3][4] = bezout.matrix[3][6][4];
  bezout.matrix[6][3][5] = bezout.matrix[3][6][5];
  bezout.matrix[6][3][6] = bezout.matrix[3][6][6];
  bezout.matrix[6][3][7] = bezout.matrix[3][6][7];
  bezout.matrix[6][3][8] = bezout.matrix[3][6][8];
  bezout.matrix[6][3][9] = bezout.matrix[3][6][9];
  bezout.matrix[6][3][10] = bezout.matrix[3][6][10];
  bezout.matrix[6][3][11] = bezout.matrix[3][6][11];
  bezout.matrix[6][3][12] = bezout.matrix[3][6][12];
  bezout.matrix[6][3][13] = bezout.matrix[3][6][13];
  bezout.matrix[6][3][14] = bezout.matrix[3][6][14];
  bezout.matrix[6][3][15] = bezout.matrix[3][6][15];
  bezout.matrix[6][4][0] = bezout.matrix[4][6][0];
  bezout.matrix[6][4][1] = bezout.matrix[4][6][1];
  bezout.matrix[6][4][2] = bezout.matrix[4][6][2];
  bezout.matrix[6][4][3] = bezout.matrix[4][6][3];
  bezout.matrix[6][4][4] = bezout.matrix[4][6][4];
  bezout.matrix[6][4][5] = bezout.matrix[4][6][5];
  bezout.matrix[6][4][6] = bezout.matrix[4][6][6];
  bezout.matrix[6][4][7] = bezout.matrix[4][6][7];
  bezout.matrix[6][4][8] = bezout.matrix[4][6][8];
  bezout.matrix[6][4][9] = bezout.matrix[4][6][9];
  bezout.matrix[6][4][10] = bezout.matrix[4][6][10];
  bezout.matrix[6][4][11] = bezout.matrix[4][6][11];
  bezout.matrix[6][4][12] = bezout.matrix[4][6][12];
  bezout.matrix[6][4][13] = bezout.matrix[4][6][13];
  bezout.matrix[6][4][14] = bezout.matrix[4][6][14];
  bezout.matrix[6][4][15] = bezout.matrix[4][6][15];
  bezout.matrix[6][5][0] = bezout.matrix[5][6][0];
  bezout.matrix[6][5][1] = bezout.matrix[5][6][1];
  bezout.matrix[6][5][2] = bezout.matrix[5][6][2];
  bezout.matrix[6][5][3] = bezout.matrix[5][6][3];
  bezout.matrix[6][5][4] = bezout.matrix[5][6][4];
  bezout.matrix[6][5][5] = bezout.matrix[5][6][5];
  bezout.matrix[6][5][6] = bezout.matrix[5][6][6];
  bezout.matrix[6][5][7] = bezout.matrix[5][6][7];
  bezout.matrix[6][5][8] = bezout.matrix[5][6][8];
  bezout.matrix[6][5][9] = bezout.matrix[5][6][9];
  bezout.matrix[6][5][10] = bezout.matrix[5][6][10];
  bezout.matrix[6][5][11] = bezout.matrix[5][6][11];
  bezout.matrix[6][5][12] = bezout.matrix[5][6][12];
  bezout.matrix[6][5][13] = bezout.matrix[5][6][13];
  bezout.matrix[6][5][14] = bezout.matrix[5][6][14];
  bezout.matrix[6][5][15] = bezout.matrix[5][6][15];
  bezout.matrix[7][0][0] = bezout.matrix[0][7][0];
  bezout.matrix[7][0][1] = bezout.matrix[0][7][1];
  bezout.matrix[7][0][2] = bezout.matrix[0][7][2];
  bezout.matrix[7][0][3] = bezout.matrix[0][7][3];
  bezout.matrix[7][0][4] = bezout.matrix[0][7][4];
  bezout.matrix[7][0][5] = bezout.matrix[0][7][5];
  bezout.matrix[7][0][6] = bezout.matrix[0][7][6];
  bezout.matrix[7][0][7] = bezout.matrix[0][7][7];
  bezout.matrix[7][0][8] = bezout.matrix[0][7][8];
  bezout.matrix[7][0][9] = bezout.matrix[0][7][9];
  bezout.matrix[7][0][10] = bezout.matrix[0][7][10];
  bezout.matrix[7][0][11] = bezout.matrix[0][7][11];
  bezout.matrix[7][0][12] = bezout.matrix[0][7][12];
  bezout.matrix[7][0][13] = bezout.matrix[0][7][13];
  bezout.matrix[7][0][14] = bezout.matrix[0][7][14];
  bezout.matrix[7][0][15] = bezout.matrix[0][7][15];
  bezout.matrix[7][1][0] = bezout.matrix[1][7][0];
  bezout.matrix[7][1][1] = bezout.matrix[1][7][1];
  bezout.matrix[7][1][2] = bezout.matrix[1][7][2];
  bezout.matrix[7][1][3] = bezout.matrix[1][7][3];
  bezout.matrix[7][1][4] = bezout.matrix[1][7][4];
  bezout.matrix[7][1][5] = bezout.matrix[1][7][5];
  bezout.matrix[7][1][6] = bezout.matrix[1][7][6];
  bezout.matrix[7][1][7] = bezout.matrix[1][7][7];
  bezout.matrix[7][1][8] = bezout.matrix[1][7][8];
  bezout.matrix[7][1][9] = bezout.matrix[1][7][9];
  bezout.matrix[7][1][10] = bezout.matrix[1][7][10];
  bezout.matrix[7][1][11] = bezout.matrix[1][7][11];
  bezout.matrix[7][1][12] = bezout.matrix[1][7][12];
  bezout.matrix[7][1][13] = bezout.matrix[1][7][13];
  bezout.matrix[7][1][14] = bezout.matrix[1][7][14];
  bezout.matrix[7][1][15] = bezout.matrix[1][7][15];
  bezout.matrix[7][2][0] = bezout.matrix[2][7][0];
  bezout.matrix[7][2][1] = bezout.matrix[2][7][1];
  bezout.matrix[7][2][2] = bezout.matrix[2][7][2];
  bezout.matrix[7][2][3] = bezout.matrix[2][7][3];
  bezout.matrix[7][2][4] = bezout.matrix[2][7][4];
  bezout.matrix[7][2][5] = bezout.matrix[2][7][5];
  bezout.matrix[7][2][6] = bezout.matrix[2][7][6];
  bezout.matrix[7][2][7] = bezout.matrix[2][7][7];
  bezout.matrix[7][2][8] = bezout.matrix[2][7][8];
  bezout.matrix[7][2][9] = bezout.matrix[2][7][9];
  bezout.matrix[7][2][10] = bezout.matrix[2][7][10];
  bezout.matrix[7][2][11] = bezout.matrix[2][7][11];
  bezout.matrix[7][2][12] = bezout.matrix[2][7][12];
  bezout.matrix[7][2][13] = bezout.matrix[2][7][13];
  bezout.matrix[7][2][14] = bezout.matrix[2][7][14];
  bezout.matrix[7][2][15] = bezout.matrix[2][7][15];
  bezout.matrix[7][3][0] = bezout.matrix[3][7][0];
  bezout.matrix[7][3][1] = bezout.matrix[3][7][1];
  bezout.matrix[7][3][2] = bezout.matrix[3][7][2];
  bezout.matrix[7][3][3] = bezout.matrix[3][7][3];
  bezout.matrix[7][3][4] = bezout.matrix[3][7][4];
  bezout.matrix[7][3][5] = bezout.matrix[3][7][5];
  bezout.matrix[7][3][6] = bezout.matrix[3][7][6];
  bezout.matrix[7][3][7] = bezout.matrix[3][7][7];
  bezout.matrix[7][3][8] = bezout.matrix[3][7][8];
  bezout.matrix[7][3][9] = bezout.matrix[3][7][9];
  bezout.matrix[7][3][10] = bezout.matrix[3][7][10];
  bezout.matrix[7][3][11] = bezout.matrix[3][7][11];
  bezout.matrix[7][3][12] = bezout.matrix[3][7][12];
  bezout.matrix[7][3][13] = bezout.matrix[3][7][13];
  bezout.matrix[7][3][14] = bezout.matrix[3][7][14];
  bezout.matrix[7][3][15] = bezout.matrix[3][7][15];
  bezout.matrix[7][4][0] = bezout.matrix[4][7][0];
  bezout.matrix[7][4][1] = bezout.matrix[4][7][1];
  bezout.matrix[7][4][2] = bezout.matrix[4][7][2];
  bezout.matrix[7][4][3] = bezout.matrix[4][7][3];
  bezout.matrix[7][4][4] = bezout.matrix[4][7][4];
  bezout.matrix[7][4][5] = bezout.matrix[4][7][5];
  bezout.matrix[7][4][6] = bezout.matrix[4][7][6];
  bezout.matrix[7][4][7] = bezout.matrix[4][7][7];
  bezout.matrix[7][4][8] = bezout.matrix[4][7][8];
  bezout.matrix[7][4][9] = bezout.matrix[4][7][9];
  bezout.matrix[7][4][10] = bezout.matrix[4][7][10];
  bezout.matrix[7][4][11] = bezout.matrix[4][7][11];
  bezout.matrix[7][4][12] = bezout.matrix[4][7][12];
  bezout.matrix[7][4][13] = bezout.matrix[4][7][13];
  bezout.matrix[7][4][14] = bezout.matrix[4][7][14];
  bezout.matrix[7][4][15] = bezout.matrix[4][7][15];
  bezout.matrix[7][5][0] = bezout.matrix[5][7][0];
  bezout.matrix[7][5][1] = bezout.matrix[5][7][1];
  bezout.matrix[7][5][2] = bezout.matrix[5][7][2];
  bezout.matrix[7][5][3] = bezout.matrix[5][7][3];
  bezout.matrix[7][5][4] = bezout.matrix[5][7][4];
  bezout.matrix[7][5][5] = bezout.matrix[5][7][5];
  bezout.matrix[7][5][6] = bezout.matrix[5][7][6];
  bezout.matrix[7][5][7] = bezout.matrix[5][7][7];
  bezout.matrix[7][5][8] = bezout.matrix[5][7][8];
  bezout.matrix[7][5][9] = bezout.matrix[5][7][9];
  bezout.matrix[7][5][10] = bezout.matrix[5][7][10];
  bezout.matrix[7][5][11] = bezout.matrix[5][7][11];
  bezout.matrix[7][5][12] = bezout.matrix[5][7][12];
  bezout.matrix[7][5][13] = bezout.matrix[5][7][13];
  bezout.matrix[7][5][14] = bezout.matrix[5][7][14];
  bezout.matrix[7][5][15] = bezout.matrix[5][7][15];
  bezout.matrix[7][6][0] = bezout.matrix[6][7][0];
  bezout.matrix[7][6][1] = bezout.matrix[6][7][1];
  bezout.matrix[7][6][2] = bezout.matrix[6][7][2];
  bezout.matrix[7][6][3] = bezout.matrix[6][7][3];
  bezout.matrix[7][6][4] = bezout.matrix[6][7][4];
  bezout.matrix[7][6][5] = bezout.matrix[6][7][5];
  bezout.matrix[7][6][6] = bezout.matrix[6][7][6];
  bezout.matrix[7][6][7] = bezout.matrix[6][7][7];
  bezout.matrix[7][6][8] = bezout.matrix[6][7][8];
  bezout.matrix[7][6][9] = bezout.matrix[6][7][9];
  bezout.matrix[7][6][10] = bezout.matrix[6][7][10];
  bezout.matrix[7][6][11] = bezout.matrix[6][7][11];
  bezout.matrix[7][6][12] = bezout.matrix[6][7][12];
  bezout.matrix[7][6][13] = bezout.matrix[6][7][13];
  bezout.matrix[7][6][14] = bezout.matrix[6][7][14];
  bezout.matrix[7][6][15] = bezout.matrix[6][7][15];
  bezout.matrix[8][0][0] = bezout.matrix[0][8][0];
  bezout.matrix[8][0][1] = bezout.matrix[0][8][1];
  bezout.matrix[8][0][2] = bezout.matrix[0][8][2];
  bezout.matrix[8][0][3] = bezout.matrix[0][8][3];
  bezout.matrix[8][0][4] = bezout.matrix[0][8][4];
  bezout.matrix[8][0][5] = bezout.matrix[0][8][5];
  bezout.matrix[8][0][6] = bezout.matrix[0][8][6];
  bezout.matrix[8][0][7] = bezout.matrix[0][8][7];
  bezout.matrix[8][0][8] = bezout.matrix[0][8][8];
  bezout.matrix[8][0][9] = bezout.matrix[0][8][9];
  bezout.matrix[8][0][10] = bezout.matrix[0][8][10];
  bezout.matrix[8][0][11] = bezout.matrix[0][8][11];
  bezout.matrix[8][0][12] = bezout.matrix[0][8][12];
  bezout.matrix[8][0][13] = bezout.matrix[0][8][13];
  bezout.matrix[8][0][14] = bezout.matrix[0][8][14];
  bezout.matrix[8][0][15] = bezout.matrix[0][8][15];
  bezout.matrix[8][1][0] = bezout.matrix[1][8][0];
  bezout.matrix[8][1][1] = bezout.matrix[1][8][1];
  bezout.matrix[8][1][2] = bezout.matrix[1][8][2];
  bezout.matrix[8][1][3] = bezout.matrix[1][8][3];
  bezout.matrix[8][1][4] = bezout.matrix[1][8][4];
  bezout.matrix[8][1][5] = bezout.matrix[1][8][5];
  bezout.matrix[8][1][6] = bezout.matrix[1][8][6];
  bezout.matrix[8][1][7] = bezout.matrix[1][8][7];
  bezout.matrix[8][1][8] = bezout.matrix[1][8][8];
  bezout.matrix[8][1][9] = bezout.matrix[1][8][9];
  bezout.matrix[8][1][10] = bezout.matrix[1][8][10];
  bezout.matrix[8][1][11] = bezout.matrix[1][8][11];
  bezout.matrix[8][1][12] = bezout.matrix[1][8][12];
  bezout.matrix[8][1][13] = bezout.matrix[1][8][13];
  bezout.matrix[8][1][14] = bezout.matrix[1][8][14];
  bezout.matrix[8][1][15] = bezout.matrix[1][8][15];
  bezout.matrix[8][2][0] = bezout.matrix[2][8][0];
  bezout.matrix[8][2][1] = bezout.matrix[2][8][1];
  bezout.matrix[8][2][2] = bezout.matrix[2][8][2];
  bezout.matrix[8][2][3] = bezout.matrix[2][8][3];
  bezout.matrix[8][2][4] = bezout.matrix[2][8][4];
  bezout.matrix[8][2][5] = bezout.matrix[2][8][5];
  bezout.matrix[8][2][6] = bezout.matrix[2][8][6];
  bezout.matrix[8][2][7] = bezout.matrix[2][8][7];
  bezout.matrix[8][2][8] = bezout.matrix[2][8][8];
  bezout.matrix[8][2][9] = bezout.matrix[2][8][9];
  bezout.matrix[8][2][10] = bezout.matrix[2][8][10];
  bezout.matrix[8][2][11] = bezout.matrix[2][8][11];
  bezout.matrix[8][2][12] = bezout.matrix[2][8][12];
  bezout.matrix[8][2][13] = bezout.matrix[2][8][13];
  bezout.matrix[8][2][14] = bezout.matrix[2][8][14];
  bezout.matrix[8][2][15] = bezout.matrix[2][8][15];
  bezout.matrix[8][3][0] = bezout.matrix[3][8][0];
  bezout.matrix[8][3][1] = bezout.matrix[3][8][1];
  bezout.matrix[8][3][2] = bezout.matrix[3][8][2];
  bezout.matrix[8][3][3] = bezout.matrix[3][8][3];
  bezout.matrix[8][3][4] = bezout.matrix[3][8][4];
  bezout.matrix[8][3][5] = bezout.matrix[3][8][5];
  bezout.matrix[8][3][6] = bezout.matrix[3][8][6];
  bezout.matrix[8][3][7] = bezout.matrix[3][8][7];
  bezout.matrix[8][3][8] = bezout.matrix[3][8][8];
  bezout.matrix[8][3][9] = bezout.matrix[3][8][9];
  bezout.matrix[8][3][10] = bezout.matrix[3][8][10];
  bezout.matrix[8][3][11] = bezout.matrix[3][8][11];
  bezout.matrix[8][3][12] = bezout.matrix[3][8][12];
  bezout.matrix[8][3][13] = bezout.matrix[3][8][13];
  bezout.matrix[8][3][14] = bezout.matrix[3][8][14];
  bezout.matrix[8][3][15] = bezout.matrix[3][8][15];
  bezout.matrix[8][4][0] = bezout.matrix[4][8][0];
  bezout.matrix[8][4][1] = bezout.matrix[4][8][1];
  bezout.matrix[8][4][2] = bezout.matrix[4][8][2];
  bezout.matrix[8][4][3] = bezout.matrix[4][8][3];
  bezout.matrix[8][4][4] = bezout.matrix[4][8][4];
  bezout.matrix[8][4][5] = bezout.matrix[4][8][5];
  bezout.matrix[8][4][6] = bezout.matrix[4][8][6];
  bezout.matrix[8][4][7] = bezout.matrix[4][8][7];
  bezout.matrix[8][4][8] = bezout.matrix[4][8][8];
  bezout.matrix[8][4][9] = bezout.matrix[4][8][9];
  bezout.matrix[8][4][10] = bezout.matrix[4][8][10];
  bezout.matrix[8][4][11] = bezout.matrix[4][8][11];
  bezout.matrix[8][4][12] = bezout.matrix[4][8][12];
  bezout.matrix[8][4][13] = bezout.matrix[4][8][13];
  bezout.matrix[8][4][14] = bezout.matrix[4][8][14];
  bezout.matrix[8][4][15] = bezout.matrix[4][8][15];
  bezout.matrix[8][5][0] = bezout.matrix[5][8][0];
  bezout.matrix[8][5][1] = bezout.matrix[5][8][1];
  bezout.matrix[8][5][2] = bezout.matrix[5][8][2];
  bezout.matrix[8][5][3] = bezout.matrix[5][8][3];
  bezout.matrix[8][5][4] = bezout.matrix[5][8][4];
  bezout.matrix[8][5][5] = bezout.matrix[5][8][5];
  bezout.matrix[8][5][6] = bezout.matrix[5][8][6];
  bezout.matrix[8][5][7] = bezout.matrix[5][8][7];
  bezout.matrix[8][5][8] = bezout.matrix[5][8][8];
  bezout.matrix[8][5][9] = bezout.matrix[5][8][9];
  bezout.matrix[8][5][10] = bezout.matrix[5][8][10];
  bezout.matrix[8][5][11] = bezout.matrix[5][8][11];
  bezout.matrix[8][5][12] = bezout.matrix[5][8][12];
  bezout.matrix[8][5][13] = bezout.matrix[5][8][13];
  bezout.matrix[8][5][14] = bezout.matrix[5][8][14];
  bezout.matrix[8][5][15] = bezout.matrix[5][8][15];
  bezout.matrix[8][6][0] = bezout.matrix[6][8][0];
  bezout.matrix[8][6][1] = bezout.matrix[6][8][1];
  bezout.matrix[8][6][2] = bezout.matrix[6][8][2];
  bezout.matrix[8][6][3] = bezout.matrix[6][8][3];
  bezout.matrix[8][6][4] = bezout.matrix[6][8][4];
  bezout.matrix[8][6][5] = bezout.matrix[6][8][5];
  bezout.matrix[8][6][6] = bezout.matrix[6][8][6];
  bezout.matrix[8][6][7] = bezout.matrix[6][8][7];
  bezout.matrix[8][6][8] = bezout.matrix[6][8][8];
  bezout.matrix[8][6][9] = bezout.matrix[6][8][9];
  bezout.matrix[8][6][10] = bezout.matrix[6][8][10];
  bezout.matrix[8][6][11] = bezout.matrix[6][8][11];
  bezout.matrix[8][6][12] = bezout.matrix[6][8][12];
  bezout.matrix[8][6][13] = bezout.matrix[6][8][13];
  bezout.matrix[8][6][14] = bezout.matrix[6][8][14];
  bezout.matrix[8][6][15] = bezout.matrix[6][8][15];
  bezout.matrix[8][7][0] = bezout.matrix[7][8][0];
  bezout.matrix[8][7][1] = bezout.matrix[7][8][1];
  bezout.matrix[8][7][2] = bezout.matrix[7][8][2];
  bezout.matrix[8][7][3] = bezout.matrix[7][8][3];
  bezout.matrix[8][7][4] = bezout.matrix[7][8][4];
  bezout.matrix[8][7][5] = bezout.matrix[7][8][5];
  bezout.matrix[8][7][6] = bezout.matrix[7][8][6];
  bezout.matrix[8][7][7] = bezout.matrix[7][8][7];
  bezout.matrix[8][7][8] = bezout.matrix[7][8][8];
  bezout.matrix[8][7][9] = bezout.matrix[7][8][9];
  bezout.matrix[8][7][10] = bezout.matrix[7][8][10];
  bezout.matrix[8][7][11] = bezout.matrix[7][8][11];
  bezout.matrix[8][7][12] = bezout.matrix[7][8][12];
  bezout.matrix[8][7][13] = bezout.matrix[7][8][13];
  bezout.matrix[8][7][14] = bezout.matrix[7][8][14];
  bezout.matrix[8][7][15] = bezout.matrix[7][8][15];
  bezout.matrix[9][0][0] = bezout.matrix[0][9][0];
  bezout.matrix[9][0][1] = bezout.matrix[0][9][1];
  bezout.matrix[9][0][2] = bezout.matrix[0][9][2];
  bezout.matrix[9][0][3] = bezout.matrix[0][9][3];
  bezout.matrix[9][0][4] = bezout.matrix[0][9][4];
  bezout.matrix[9][0][5] = bezout.matrix[0][9][5];
  bezout.matrix[9][0][6] = bezout.matrix[0][9][6];
  bezout.matrix[9][0][7] = bezout.matrix[0][9][7];
  bezout.matrix[9][0][8] = bezout.matrix[0][9][8];
  bezout.matrix[9][0][9] = bezout.matrix[0][9][9];
  bezout.matrix[9][0][10] = bezout.matrix[0][9][10];
  bezout.matrix[9][0][11] = bezout.matrix[0][9][11];
  bezout.matrix[9][0][12] = bezout.matrix[0][9][12];
  bezout.matrix[9][0][13] = bezout.matrix[0][9][13];
  bezout.matrix[9][0][14] = bezout.matrix[0][9][14];
  bezout.matrix[9][0][15] = bezout.matrix[0][9][15];
  bezout.matrix[9][1][0] = bezout.matrix[1][9][0];
  bezout.matrix[9][1][1] = bezout.matrix[1][9][1];
  bezout.matrix[9][1][2] = bezout.matrix[1][9][2];
  bezout.matrix[9][1][3] = bezout.matrix[1][9][3];
  bezout.matrix[9][1][4] = bezout.matrix[1][9][4];
  bezout.matrix[9][1][5] = bezout.matrix[1][9][5];
  bezout.matrix[9][1][6] = bezout.matrix[1][9][6];
  bezout.matrix[9][1][7] = bezout.matrix[1][9][7];
  bezout.matrix[9][1][8] = bezout.matrix[1][9][8];
  bezout.matrix[9][1][9] = bezout.matrix[1][9][9];
  bezout.matrix[9][1][10] = bezout.matrix[1][9][10];
  bezout.matrix[9][1][11] = bezout.matrix[1][9][11];
  bezout.matrix[9][1][12] = bezout.matrix[1][9][12];
  bezout.matrix[9][1][13] = bezout.matrix[1][9][13];
  bezout.matrix[9][1][14] = bezout.matrix[1][9][14];
  bezout.matrix[9][1][15] = bezout.matrix[1][9][15];
  bezout.matrix[9][2][0] = bezout.matrix[2][9][0];
  bezout.matrix[9][2][1] = bezout.matrix[2][9][1];
  bezout.matrix[9][2][2] = bezout.matrix[2][9][2];
  bezout.matrix[9][2][3] = bezout.matrix[2][9][3];
  bezout.matrix[9][2][4] = bezout.matrix[2][9][4];
  bezout.matrix[9][2][5] = bezout.matrix[2][9][5];
  bezout.matrix[9][2][6] = bezout.matrix[2][9][6];
  bezout.matrix[9][2][7] = bezout.matrix[2][9][7];
  bezout.matrix[9][2][8] = bezout.matrix[2][9][8];
  bezout.matrix[9][2][9] = bezout.matrix[2][9][9];
  bezout.matrix[9][2][10] = bezout.matrix[2][9][10];
  bezout.matrix[9][2][11] = bezout.matrix[2][9][11];
  bezout.matrix[9][2][12] = bezout.matrix[2][9][12];
  bezout.matrix[9][2][13] = bezout.matrix[2][9][13];
  bezout.matrix[9][2][14] = bezout.matrix[2][9][14];
  bezout.matrix[9][2][15] = bezout.matrix[2][9][15];
  bezout.matrix[9][3][0] = bezout.matrix[3][9][0];
  bezout.matrix[9][3][1] = bezout.matrix[3][9][1];
  bezout.matrix[9][3][2] = bezout.matrix[3][9][2];
  bezout.matrix[9][3][3] = bezout.matrix[3][9][3];
  bezout.matrix[9][3][4] = bezout.matrix[3][9][4];
  bezout.matrix[9][3][5] = bezout.matrix[3][9][5];
  bezout.matrix[9][3][6] = bezout.matrix[3][9][6];
  bezout.matrix[9][3][7] = bezout.matrix[3][9][7];
  bezout.matrix[9][3][8] = bezout.matrix[3][9][8];
  bezout.matrix[9][3][9] = bezout.matrix[3][9][9];
  bezout.matrix[9][3][10] = bezout.matrix[3][9][10];
  bezout.matrix[9][3][11] = bezout.matrix[3][9][11];
  bezout.matrix[9][3][12] = bezout.matrix[3][9][12];
  bezout.matrix[9][3][13] = bezout.matrix[3][9][13];
  bezout.matrix[9][3][14] = bezout.matrix[3][9][14];
  bezout.matrix[9][3][15] = bezout.matrix[3][9][15];
  bezout.matrix[9][4][0] = bezout.matrix[4][9][0];
  bezout.matrix[9][4][1] = bezout.matrix[4][9][1];
  bezout.matrix[9][4][2] = bezout.matrix[4][9][2];
  bezout.matrix[9][4][3] = bezout.matrix[4][9][3];
  bezout.matrix[9][4][4] = bezout.matrix[4][9][4];
  bezout.matrix[9][4][5] = bezout.matrix[4][9][5];
  bezout.matrix[9][4][6] = bezout.matrix[4][9][6];
  bezout.matrix[9][4][7] = bezout.matrix[4][9][7];
  bezout.matrix[9][4][8] = bezout.matrix[4][9][8];
  bezout.matrix[9][4][9] = bezout.matrix[4][9][9];
  bezout.matrix[9][4][10] = bezout.matrix[4][9][10];
  bezout.matrix[9][4][11] = bezout.matrix[4][9][11];
  bezout.matrix[9][4][12] = bezout.matrix[4][9][12];
  bezout.matrix[9][4][13] = bezout.matrix[4][9][13];
  bezout.matrix[9][4][14] = bezout.matrix[4][9][14];
  bezout.matrix[9][4][15] = bezout.matrix[4][9][15];
  bezout.matrix[9][5][0] = bezout.matrix[5][9][0];
  bezout.matrix[9][5][1] = bezout.matrix[5][9][1];
  bezout.matrix[9][5][2] = bezout.matrix[5][9][2];
  bezout.matrix[9][5][3] = bezout.matrix[5][9][3];
  bezout.matrix[9][5][4] = bezout.matrix[5][9][4];
  bezout.matrix[9][5][5] = bezout.matrix[5][9][5];
  bezout.matrix[9][5][6] = bezout.matrix[5][9][6];
  bezout.matrix[9][5][7] = bezout.matrix[5][9][7];
  bezout.matrix[9][5][8] = bezout.matrix[5][9][8];
  bezout.matrix[9][5][9] = bezout.matrix[5][9][9];
  bezout.matrix[9][5][10] = bezout.matrix[5][9][10];
  bezout.matrix[9][5][11] = bezout.matrix[5][9][11];
  bezout.matrix[9][5][12] = bezout.matrix[5][9][12];
  bezout.matrix[9][5][13] = bezout.matrix[5][9][13];
  bezout.matrix[9][5][14] = bezout.matrix[5][9][14];
  bezout.matrix[9][5][15] = bezout.matrix[5][9][15];
  bezout.matrix[9][6][0] = bezout.matrix[6][9][0];
  bezout.matrix[9][6][1] = bezout.matrix[6][9][1];
  bezout.matrix[9][6][2] = bezout.matrix[6][9][2];
  bezout.matrix[9][6][3] = bezout.matrix[6][9][3];
  bezout.matrix[9][6][4] = bezout.matrix[6][9][4];
  bezout.matrix[9][6][5] = bezout.matrix[6][9][5];
  bezout.matrix[9][6][6] = bezout.matrix[6][9][6];
  bezout.matrix[9][6][7] = bezout.matrix[6][9][7];
  bezout.matrix[9][6][8] = bezout.matrix[6][9][8];
  bezout.matrix[9][6][9] = bezout.matrix[6][9][9];
  bezout.matrix[9][6][10] = bezout.matrix[6][9][10];
  bezout.matrix[9][6][11] = bezout.matrix[6][9][11];
  bezout.matrix[9][6][12] = bezout.matrix[6][9][12];
  bezout.matrix[9][6][13] = bezout.matrix[6][9][13];
  bezout.matrix[9][6][14] = bezout.matrix[6][9][14];
  bezout.matrix[9][6][15] = bezout.matrix[6][9][15];
  bezout.matrix[9][7][0] = bezout.matrix[7][9][0];
  bezout.matrix[9][7][1] = bezout.matrix[7][9][1];
  bezout.matrix[9][7][2] = bezout.matrix[7][9][2];
  bezout.matrix[9][7][3] = bezout.matrix[7][9][3];
  bezout.matrix[9][7][4] = bezout.matrix[7][9][4];
  bezout.matrix[9][7][5] = bezout.matrix[7][9][5];
  bezout.matrix[9][7][6] = bezout.matrix[7][9][6];
  bezout.matrix[9][7][7] = bezout.matrix[7][9][7];
  bezout.matrix[9][7][8] = bezout.matrix[7][9][8];
  bezout.matrix[9][7][9] = bezout.matrix[7][9][9];
  bezout.matrix[9][7][10] = bezout.matrix[7][9][10];
  bezout.matrix[9][7][11] = bezout.matrix[7][9][11];
  bezout.matrix[9][7][12] = bezout.matrix[7][9][12];
  bezout.matrix[9][7][13] = bezout.matrix[7][9][13];
  bezout.matrix[9][7][14] = bezout.matrix[7][9][14];
  bezout.matrix[9][7][15] = bezout.matrix[7][9][15];
  bezout.matrix[9][8][0] = bezout.matrix[8][9][0];
  bezout.matrix[9][8][1] = bezout.matrix[8][9][1];
  bezout.matrix[9][8][2] = bezout.matrix[8][9][2];
  bezout.matrix[9][8][3] = bezout.matrix[8][9][3];
  bezout.matrix[9][8][4] = bezout.matrix[8][9][4];
  bezout.matrix[9][8][5] = bezout.matrix[8][9][5];
  bezout.matrix[9][8][6] = bezout.matrix[8][9][6];
  bezout.matrix[9][8][7] = bezout.matrix[8][9][7];
  bezout.matrix[9][8][8] = bezout.matrix[8][9][8];
  bezout.matrix[9][8][9] = bezout.matrix[8][9][9];
  bezout.matrix[9][8][10] = bezout.matrix[8][9][10];
  bezout.matrix[9][8][11] = bezout.matrix[8][9][11];
  bezout.matrix[9][8][12] = bezout.matrix[8][9][12];
  bezout.matrix[9][8][13] = bezout.matrix[8][9][13];
  bezout.matrix[9][8][14] = bezout.matrix[8][9][14];
  bezout.matrix[9][8][15] = bezout.matrix[8][9][15];
  bezout.matrix[10][0][0] = bezout.matrix[0][10][0];
  bezout.matrix[10][0][1] = bezout.matrix[0][10][1];
  bezout.matrix[10][0][2] = bezout.matrix[0][10][2];
  bezout.matrix[10][0][3] = bezout.matrix[0][10][3];
  bezout.matrix[10][0][4] = bezout.matrix[0][10][4];
  bezout.matrix[10][0][5] = bezout.matrix[0][10][5];
  bezout.matrix[10][0][6] = bezout.matrix[0][10][6];
  bezout.matrix[10][0][7] = bezout.matrix[0][10][7];
  bezout.matrix[10][0][8] = bezout.matrix[0][10][8];
  bezout.matrix[10][0][9] = bezout.matrix[0][10][9];
  bezout.matrix[10][0][10] = bezout.matrix[0][10][10];
  bezout.matrix[10][0][11] = bezout.matrix[0][10][11];
  bezout.matrix[10][0][12] = bezout.matrix[0][10][12];
  bezout.matrix[10][0][13] = bezout.matrix[0][10][13];
  bezout.matrix[10][0][14] = bezout.matrix[0][10][14];
  bezout.matrix[10][0][15] = bezout.matrix[0][10][15];
  bezout.matrix[10][1][0] = bezout.matrix[1][10][0];
  bezout.matrix[10][1][1] = bezout.matrix[1][10][1];
  bezout.matrix[10][1][2] = bezout.matrix[1][10][2];
  bezout.matrix[10][1][3] = bezout.matrix[1][10][3];
  bezout.matrix[10][1][4] = bezout.matrix[1][10][4];
  bezout.matrix[10][1][5] = bezout.matrix[1][10][5];
  bezout.matrix[10][1][6] = bezout.matrix[1][10][6];
  bezout.matrix[10][1][7] = bezout.matrix[1][10][7];
  bezout.matrix[10][1][8] = bezout.matrix[1][10][8];
  bezout.matrix[10][1][9] = bezout.matrix[1][10][9];
  bezout.matrix[10][1][10] = bezout.matrix[1][10][10];
  bezout.matrix[10][1][11] = bezout.matrix[1][10][11];
  bezout.matrix[10][1][12] = bezout.matrix[1][10][12];
  bezout.matrix[10][1][13] = bezout.matrix[1][10][13];
  bezout.matrix[10][1][14] = bezout.matrix[1][10][14];
  bezout.matrix[10][1][15] = bezout.matrix[1][10][15];
  bezout.matrix[10][2][0] = bezout.matrix[2][10][0];
  bezout.matrix[10][2][1] = bezout.matrix[2][10][1];
  bezout.matrix[10][2][2] = bezout.matrix[2][10][2];
  bezout.matrix[10][2][3] = bezout.matrix[2][10][3];
  bezout.matrix[10][2][4] = bezout.matrix[2][10][4];
  bezout.matrix[10][2][5] = bezout.matrix[2][10][5];
  bezout.matrix[10][2][6] = bezout.matrix[2][10][6];
  bezout.matrix[10][2][7] = bezout.matrix[2][10][7];
  bezout.matrix[10][2][8] = bezout.matrix[2][10][8];
  bezout.matrix[10][2][9] = bezout.matrix[2][10][9];
  bezout.matrix[10][2][10] = bezout.matrix[2][10][10];
  bezout.matrix[10][2][11] = bezout.matrix[2][10][11];
  bezout.matrix[10][2][12] = bezout.matrix[2][10][12];
  bezout.matrix[10][2][13] = bezout.matrix[2][10][13];
  bezout.matrix[10][2][14] = bezout.matrix[2][10][14];
  bezout.matrix[10][2][15] = bezout.matrix[2][10][15];
  bezout.matrix[10][3][0] = bezout.matrix[3][10][0];
  bezout.matrix[10][3][1] = bezout.matrix[3][10][1];
  bezout.matrix[10][3][2] = bezout.matrix[3][10][2];
  bezout.matrix[10][3][3] = bezout.matrix[3][10][3];
  bezout.matrix[10][3][4] = bezout.matrix[3][10][4];
  bezout.matrix[10][3][5] = bezout.matrix[3][10][5];
  bezout.matrix[10][3][6] = bezout.matrix[3][10][6];
  bezout.matrix[10][3][7] = bezout.matrix[3][10][7];
  bezout.matrix[10][3][8] = bezout.matrix[3][10][8];
  bezout.matrix[10][3][9] = bezout.matrix[3][10][9];
  bezout.matrix[10][3][10] = bezout.matrix[3][10][10];
  bezout.matrix[10][3][11] = bezout.matrix[3][10][11];
  bezout.matrix[10][3][12] = bezout.matrix[3][10][12];
  bezout.matrix[10][3][13] = bezout.matrix[3][10][13];
  bezout.matrix[10][3][14] = bezout.matrix[3][10][14];
  bezout.matrix[10][3][15] = bezout.matrix[3][10][15];
  bezout.matrix[10][4][0] = bezout.matrix[4][10][0];
  bezout.matrix[10][4][1] = bezout.matrix[4][10][1];
  bezout.matrix[10][4][2] = bezout.matrix[4][10][2];
  bezout.matrix[10][4][3] = bezout.matrix[4][10][3];
  bezout.matrix[10][4][4] = bezout.matrix[4][10][4];
  bezout.matrix[10][4][5] = bezout.matrix[4][10][5];
  bezout.matrix[10][4][6] = bezout.matrix[4][10][6];
  bezout.matrix[10][4][7] = bezout.matrix[4][10][7];
  bezout.matrix[10][4][8] = bezout.matrix[4][10][8];
  bezout.matrix[10][4][9] = bezout.matrix[4][10][9];
  bezout.matrix[10][4][10] = bezout.matrix[4][10][10];
  bezout.matrix[10][4][11] = bezout.matrix[4][10][11];
  bezout.matrix[10][4][12] = bezout.matrix[4][10][12];
  bezout.matrix[10][4][13] = bezout.matrix[4][10][13];
  bezout.matrix[10][4][14] = bezout.matrix[4][10][14];
  bezout.matrix[10][4][15] = bezout.matrix[4][10][15];
  bezout.matrix[10][5][0] = bezout.matrix[5][10][0];
  bezout.matrix[10][5][1] = bezout.matrix[5][10][1];
  bezout.matrix[10][5][2] = bezout.matrix[5][10][2];
  bezout.matrix[10][5][3] = bezout.matrix[5][10][3];
  bezout.matrix[10][5][4] = bezout.matrix[5][10][4];
  bezout.matrix[10][5][5] = bezout.matrix[5][10][5];
  bezout.matrix[10][5][6] = bezout.matrix[5][10][6];
  bezout.matrix[10][5][7] = bezout.matrix[5][10][7];
  bezout.matrix[10][5][8] = bezout.matrix[5][10][8];
  bezout.matrix[10][5][9] = bezout.matrix[5][10][9];
  bezout.matrix[10][5][10] = bezout.matrix[5][10][10];
  bezout.matrix[10][5][11] = bezout.matrix[5][10][11];
  bezout.matrix[10][5][12] = bezout.matrix[5][10][12];
  bezout.matrix[10][5][13] = bezout.matrix[5][10][13];
  bezout.matrix[10][5][14] = bezout.matrix[5][10][14];
  bezout.matrix[10][5][15] = bezout.matrix[5][10][15];
  bezout.matrix[10][6][0] = bezout.matrix[6][10][0];
  bezout.matrix[10][6][1] = bezout.matrix[6][10][1];
  bezout.matrix[10][6][2] = bezout.matrix[6][10][2];
  bezout.matrix[10][6][3] = bezout.matrix[6][10][3];
  bezout.matrix[10][6][4] = bezout.matrix[6][10][4];
  bezout.matrix[10][6][5] = bezout.matrix[6][10][5];
  bezout.matrix[10][6][6] = bezout.matrix[6][10][6];
  bezout.matrix[10][6][7] = bezout.matrix[6][10][7];
  bezout.matrix[10][6][8] = bezout.matrix[6][10][8];
  bezout.matrix[10][6][9] = bezout.matrix[6][10][9];
  bezout.matrix[10][6][10] = bezout.matrix[6][10][10];
  bezout.matrix[10][6][11] = bezout.matrix[6][10][11];
  bezout.matrix[10][6][12] = bezout.matrix[6][10][12];
  bezout.matrix[10][6][13] = bezout.matrix[6][10][13];
  bezout.matrix[10][6][14] = bezout.matrix[6][10][14];
  bezout.matrix[10][6][15] = bezout.matrix[6][10][15];
  bezout.matrix[10][7][0] = bezout.matrix[7][10][0];
  bezout.matrix[10][7][1] = bezout.matrix[7][10][1];
  bezout.matrix[10][7][2] = bezout.matrix[7][10][2];
  bezout.matrix[10][7][3] = bezout.matrix[7][10][3];
  bezout.matrix[10][7][4] = bezout.matrix[7][10][4];
  bezout.matrix[10][7][5] = bezout.matrix[7][10][5];
  bezout.matrix[10][7][6] = bezout.matrix[7][10][6];
  bezout.matrix[10][7][7] = bezout.matrix[7][10][7];
  bezout.matrix[10][7][8] = bezout.matrix[7][10][8];
  bezout.matrix[10][7][9] = bezout.matrix[7][10][9];
  bezout.matrix[10][7][10] = bezout.matrix[7][10][10];
  bezout.matrix[10][7][11] = bezout.matrix[7][10][11];
  bezout.matrix[10][7][12] = bezout.matrix[7][10][12];
  bezout.matrix[10][7][13] = bezout.matrix[7][10][13];
  bezout.matrix[10][7][14] = bezout.matrix[7][10][14];
  bezout.matrix[10][7][15] = bezout.matrix[7][10][15];
  bezout.matrix[10][8][0] = bezout.matrix[8][10][0];
  bezout.matrix[10][8][1] = bezout.matrix[8][10][1];
  bezout.matrix[10][8][2] = bezout.matrix[8][10][2];
  bezout.matrix[10][8][3] = bezout.matrix[8][10][3];
  bezout.matrix[10][8][4] = bezout.matrix[8][10][4];
  bezout.matrix[10][8][5] = bezout.matrix[8][10][5];
  bezout.matrix[10][8][6] = bezout.matrix[8][10][6];
  bezout.matrix[10][8][7] = bezout.matrix[8][10][7];
  bezout.matrix[10][8][8] = bezout.matrix[8][10][8];
  bezout.matrix[10][8][9] = bezout.matrix[8][10][9];
  bezout.matrix[10][8][10] = bezout.matrix[8][10][10];
  bezout.matrix[10][8][11] = bezout.matrix[8][10][11];
  bezout.matrix[10][8][12] = bezout.matrix[8][10][12];
  bezout.matrix[10][8][13] = bezout.matrix[8][10][13];
  bezout.matrix[10][8][14] = bezout.matrix[8][10][14];
  bezout.matrix[10][8][15] = bezout.matrix[8][10][15];
  bezout.matrix[10][9][0] = bezout.matrix[9][10][0];
  bezout.matrix[10][9][1] = bezout.matrix[9][10][1];
  bezout.matrix[10][9][2] = bezout.matrix[9][10][2];
  bezout.matrix[10][9][3] = bezout.matrix[9][10][3];
  bezout.matrix[10][9][4] = bezout.matrix[9][10][4];
  bezout.matrix[10][9][5] = bezout.matrix[9][10][5];
  bezout.matrix[10][9][6] = bezout.matrix[9][10][6];
  bezout.matrix[10][9][7] = bezout.matrix[9][10][7];
  bezout.matrix[10][9][8] = bezout.matrix[9][10][8];
  bezout.matrix[10][9][9] = bezout.matrix[9][10][9];
  bezout.matrix[10][9][10] = bezout.matrix[9][10][10];
  bezout.matrix[10][9][11] = bezout.matrix[9][10][11];
  bezout.matrix[10][9][12] = bezout.matrix[9][10][12];
  bezout.matrix[10][9][13] = bezout.matrix[9][10][13];
  bezout.matrix[10][9][14] = bezout.matrix[9][10][14];
  bezout.matrix[10][9][15] = bezout.matrix[9][10][15];
  bezout.matrix[11][0][0] = bezout.matrix[0][11][0];
  bezout.matrix[11][0][1] = bezout.matrix[0][11][1];
  bezout.matrix[11][0][2] = bezout.matrix[0][11][2];
  bezout.matrix[11][0][3] = bezout.matrix[0][11][3];
  bezout.matrix[11][0][4] = bezout.matrix[0][11][4];
  bezout.matrix[11][0][5] = bezout.matrix[0][11][5];
  bezout.matrix[11][0][6] = bezout.matrix[0][11][6];
  bezout.matrix[11][0][7] = bezout.matrix[0][11][7];
  bezout.matrix[11][0][8] = bezout.matrix[0][11][8];
  bezout.matrix[11][0][9] = bezout.matrix[0][11][9];
  bezout.matrix[11][0][10] = bezout.matrix[0][11][10];
  bezout.matrix[11][0][11] = bezout.matrix[0][11][11];
  bezout.matrix[11][0][12] = bezout.matrix[0][11][12];
  bezout.matrix[11][0][13] = bezout.matrix[0][11][13];
  bezout.matrix[11][0][14] = bezout.matrix[0][11][14];
  bezout.matrix[11][0][15] = bezout.matrix[0][11][15];
  bezout.matrix[11][1][0] = bezout.matrix[1][11][0];
  bezout.matrix[11][1][1] = bezout.matrix[1][11][1];
  bezout.matrix[11][1][2] = bezout.matrix[1][11][2];
  bezout.matrix[11][1][3] = bezout.matrix[1][11][3];
  bezout.matrix[11][1][4] = bezout.matrix[1][11][4];
  bezout.matrix[11][1][5] = bezout.matrix[1][11][5];
  bezout.matrix[11][1][6] = bezout.matrix[1][11][6];
  bezout.matrix[11][1][7] = bezout.matrix[1][11][7];
  bezout.matrix[11][1][8] = bezout.matrix[1][11][8];
  bezout.matrix[11][1][9] = bezout.matrix[1][11][9];
  bezout.matrix[11][1][10] = bezout.matrix[1][11][10];
  bezout.matrix[11][1][11] = bezout.matrix[1][11][11];
  bezout.matrix[11][1][12] = bezout.matrix[1][11][12];
  bezout.matrix[11][1][13] = bezout.matrix[1][11][13];
  bezout.matrix[11][1][14] = bezout.matrix[1][11][14];
  bezout.matrix[11][1][15] = bezout.matrix[1][11][15];
  bezout.matrix[11][2][0] = bezout.matrix[2][11][0];
  bezout.matrix[11][2][1] = bezout.matrix[2][11][1];
  bezout.matrix[11][2][2] = bezout.matrix[2][11][2];
  bezout.matrix[11][2][3] = bezout.matrix[2][11][3];
  bezout.matrix[11][2][4] = bezout.matrix[2][11][4];
  bezout.matrix[11][2][5] = bezout.matrix[2][11][5];
  bezout.matrix[11][2][6] = bezout.matrix[2][11][6];
  bezout.matrix[11][2][7] = bezout.matrix[2][11][7];
  bezout.matrix[11][2][8] = bezout.matrix[2][11][8];
  bezout.matrix[11][2][9] = bezout.matrix[2][11][9];
  bezout.matrix[11][2][10] = bezout.matrix[2][11][10];
  bezout.matrix[11][2][11] = bezout.matrix[2][11][11];
  bezout.matrix[11][2][12] = bezout.matrix[2][11][12];
  bezout.matrix[11][2][13] = bezout.matrix[2][11][13];
  bezout.matrix[11][2][14] = bezout.matrix[2][11][14];
  bezout.matrix[11][2][15] = bezout.matrix[2][11][15];
  bezout.matrix[11][3][0] = bezout.matrix[3][11][0];
  bezout.matrix[11][3][1] = bezout.matrix[3][11][1];
  bezout.matrix[11][3][2] = bezout.matrix[3][11][2];
  bezout.matrix[11][3][3] = bezout.matrix[3][11][3];
  bezout.matrix[11][3][4] = bezout.matrix[3][11][4];
  bezout.matrix[11][3][5] = bezout.matrix[3][11][5];
  bezout.matrix[11][3][6] = bezout.matrix[3][11][6];
  bezout.matrix[11][3][7] = bezout.matrix[3][11][7];
  bezout.matrix[11][3][8] = bezout.matrix[3][11][8];
  bezout.matrix[11][3][9] = bezout.matrix[3][11][9];
  bezout.matrix[11][3][10] = bezout.matrix[3][11][10];
  bezout.matrix[11][3][11] = bezout.matrix[3][11][11];
  bezout.matrix[11][3][12] = bezout.matrix[3][11][12];
  bezout.matrix[11][3][13] = bezout.matrix[3][11][13];
  bezout.matrix[11][3][14] = bezout.matrix[3][11][14];
  bezout.matrix[11][3][15] = bezout.matrix[3][11][15];
  bezout.matrix[11][4][0] = bezout.matrix[4][11][0];
  bezout.matrix[11][4][1] = bezout.matrix[4][11][1];
  bezout.matrix[11][4][2] = bezout.matrix[4][11][2];
  bezout.matrix[11][4][3] = bezout.matrix[4][11][3];
  bezout.matrix[11][4][4] = bezout.matrix[4][11][4];
  bezout.matrix[11][4][5] = bezout.matrix[4][11][5];
  bezout.matrix[11][4][6] = bezout.matrix[4][11][6];
  bezout.matrix[11][4][7] = bezout.matrix[4][11][7];
  bezout.matrix[11][4][8] = bezout.matrix[4][11][8];
  bezout.matrix[11][4][9] = bezout.matrix[4][11][9];
  bezout.matrix[11][4][10] = bezout.matrix[4][11][10];
  bezout.matrix[11][4][11] = bezout.matrix[4][11][11];
  bezout.matrix[11][4][12] = bezout.matrix[4][11][12];
  bezout.matrix[11][4][13] = bezout.matrix[4][11][13];
  bezout.matrix[11][4][14] = bezout.matrix[4][11][14];
  bezout.matrix[11][4][15] = bezout.matrix[4][11][15];
  bezout.matrix[11][5][0] = bezout.matrix[5][11][0];
  bezout.matrix[11][5][1] = bezout.matrix[5][11][1];
  bezout.matrix[11][5][2] = bezout.matrix[5][11][2];
  bezout.matrix[11][5][3] = bezout.matrix[5][11][3];
  bezout.matrix[11][5][4] = bezout.matrix[5][11][4];
  bezout.matrix[11][5][5] = bezout.matrix[5][11][5];
  bezout.matrix[11][5][6] = bezout.matrix[5][11][6];
  bezout.matrix[11][5][7] = bezout.matrix[5][11][7];
  bezout.matrix[11][5][8] = bezout.matrix[5][11][8];
  bezout.matrix[11][5][9] = bezout.matrix[5][11][9];
  bezout.matrix[11][5][10] = bezout.matrix[5][11][10];
  bezout.matrix[11][5][11] = bezout.matrix[5][11][11];
  bezout.matrix[11][5][12] = bezout.matrix[5][11][12];
  bezout.matrix[11][5][13] = bezout.matrix[5][11][13];
  bezout.matrix[11][5][14] = bezout.matrix[5][11][14];
  bezout.matrix[11][5][15] = bezout.matrix[5][11][15];
  bezout.matrix[11][6][0] = bezout.matrix[6][11][0];
  bezout.matrix[11][6][1] = bezout.matrix[6][11][1];
  bezout.matrix[11][6][2] = bezout.matrix[6][11][2];
  bezout.matrix[11][6][3] = bezout.matrix[6][11][3];
  bezout.matrix[11][6][4] = bezout.matrix[6][11][4];
  bezout.matrix[11][6][5] = bezout.matrix[6][11][5];
  bezout.matrix[11][6][6] = bezout.matrix[6][11][6];
  bezout.matrix[11][6][7] = bezout.matrix[6][11][7];
  bezout.matrix[11][6][8] = bezout.matrix[6][11][8];
  bezout.matrix[11][6][9] = bezout.matrix[6][11][9];
  bezout.matrix[11][6][10] = bezout.matrix[6][11][10];
  bezout.matrix[11][6][11] = bezout.matrix[6][11][11];
  bezout.matrix[11][6][12] = bezout.matrix[6][11][12];
  bezout.matrix[11][6][13] = bezout.matrix[6][11][13];
  bezout.matrix[11][6][14] = bezout.matrix[6][11][14];
  bezout.matrix[11][6][15] = bezout.matrix[6][11][15];
  bezout.matrix[11][7][0] = bezout.matrix[7][11][0];
  bezout.matrix[11][7][1] = bezout.matrix[7][11][1];
  bezout.matrix[11][7][2] = bezout.matrix[7][11][2];
  bezout.matrix[11][7][3] = bezout.matrix[7][11][3];
  bezout.matrix[11][7][4] = bezout.matrix[7][11][4];
  bezout.matrix[11][7][5] = bezout.matrix[7][11][5];
  bezout.matrix[11][7][6] = bezout.matrix[7][11][6];
  bezout.matrix[11][7][7] = bezout.matrix[7][11][7];
  bezout.matrix[11][7][8] = bezout.matrix[7][11][8];
  bezout.matrix[11][7][9] = bezout.matrix[7][11][9];
  bezout.matrix[11][7][10] = bezout.matrix[7][11][10];
  bezout.matrix[11][7][11] = bezout.matrix[7][11][11];
  bezout.matrix[11][7][12] = bezout.matrix[7][11][12];
  bezout.matrix[11][7][13] = bezout.matrix[7][11][13];
  bezout.matrix[11][7][14] = bezout.matrix[7][11][14];
  bezout.matrix[11][7][15] = bezout.matrix[7][11][15];
  bezout.matrix[11][8][0] = bezout.matrix[8][11][0];
  bezout.matrix[11][8][1] = bezout.matrix[8][11][1];
  bezout.matrix[11][8][2] = bezout.matrix[8][11][2];
  bezout.matrix[11][8][3] = bezout.matrix[8][11][3];
  bezout.matrix[11][8][4] = bezout.matrix[8][11][4];
  bezout.matrix[11][8][5] = bezout.matrix[8][11][5];
  bezout.matrix[11][8][6] = bezout.matrix[8][11][6];
  bezout.matrix[11][8][7] = bezout.matrix[8][11][7];
  bezout.matrix[11][8][8] = bezout.matrix[8][11][8];
  bezout.matrix[11][8][9] = bezout.matrix[8][11][9];
  bezout.matrix[11][8][10] = bezout.matrix[8][11][10];
  bezout.matrix[11][8][11] = bezout.matrix[8][11][11];
  bezout.matrix[11][8][12] = bezout.matrix[8][11][12];
  bezout.matrix[11][8][13] = bezout.matrix[8][11][13];
  bezout.matrix[11][8][14] = bezout.matrix[8][11][14];
  bezout.matrix[11][8][15] = bezout.matrix[8][11][15];
  bezout.matrix[11][9][0] = bezout.matrix[9][11][0];
  bezout.matrix[11][9][1] = bezout.matrix[9][11][1];
  bezout.matrix[11][9][2] = bezout.matrix[9][11][2];
  bezout.matrix[11][9][3] = bezout.matrix[9][11][3];
  bezout.matrix[11][9][4] = bezout.matrix[9][11][4];
  bezout.matrix[11][9][5] = bezout.matrix[9][11][5];
  bezout.matrix[11][9][6] = bezout.matrix[9][11][6];
  bezout.matrix[11][9][7] = bezout.matrix[9][11][7];
  bezout.matrix[11][9][8] = bezout.matrix[9][11][8];
  bezout.matrix[11][9][9] = bezout.matrix[9][11][9];
  bezout.matrix[11][9][10] = bezout.matrix[9][11][10];
  bezout.matrix[11][9][11] = bezout.matrix[9][11][11];
  bezout.matrix[11][9][12] = bezout.matrix[9][11][12];
  bezout.matrix[11][9][13] = bezout.matrix[9][11][13];
  bezout.matrix[11][9][14] = bezout.matrix[9][11][14];
  bezout.matrix[11][9][15] = bezout.matrix[9][11][15];
  bezout.matrix[11][10][0] = bezout.matrix[10][11][0];
  bezout.matrix[11][10][1] = bezout.matrix[10][11][1];
  bezout.matrix[11][10][2] = bezout.matrix[10][11][2];
  bezout.matrix[11][10][3] = bezout.matrix[10][11][3];
  bezout.matrix[11][10][4] = bezout.matrix[10][11][4];
  bezout.matrix[11][10][5] = bezout.matrix[10][11][5];
  bezout.matrix[11][10][6] = bezout.matrix[10][11][6];
  bezout.matrix[11][10][7] = bezout.matrix[10][11][7];
  bezout.matrix[11][10][8] = bezout.matrix[10][11][8];
  bezout.matrix[11][10][9] = bezout.matrix[10][11][9];
  bezout.matrix[11][10][10] = bezout.matrix[10][11][10];
  bezout.matrix[11][10][11] = bezout.matrix[10][11][11];
  bezout.matrix[11][10][12] = bezout.matrix[10][11][12];
  bezout.matrix[11][10][13] = bezout.matrix[10][11][13];
  bezout.matrix[11][10][14] = bezout.matrix[10][11][14];
  bezout.matrix[11][10][15] = bezout.matrix[10][11][15];
  bezout.matrix[12][0][0] = bezout.matrix[0][12][0];
  bezout.matrix[12][0][1] = bezout.matrix[0][12][1];
  bezout.matrix[12][0][2] = bezout.matrix[0][12][2];
  bezout.matrix[12][0][3] = bezout.matrix[0][12][3];
  bezout.matrix[12][0][4] = bezout.matrix[0][12][4];
  bezout.matrix[12][0][5] = bezout.matrix[0][12][5];
  bezout.matrix[12][0][6] = bezout.matrix[0][12][6];
  bezout.matrix[12][0][7] = bezout.matrix[0][12][7];
  bezout.matrix[12][0][8] = bezout.matrix[0][12][8];
  bezout.matrix[12][0][9] = bezout.matrix[0][12][9];
  bezout.matrix[12][0][10] = bezout.matrix[0][12][10];
  bezout.matrix[12][0][11] = bezout.matrix[0][12][11];
  bezout.matrix[12][0][12] = bezout.matrix[0][12][12];
  bezout.matrix[12][0][13] = bezout.matrix[0][12][13];
  bezout.matrix[12][0][14] = bezout.matrix[0][12][14];
  bezout.matrix[12][0][15] = bezout.matrix[0][12][15];
  bezout.matrix[12][1][0] = bezout.matrix[1][12][0];
  bezout.matrix[12][1][1] = bezout.matrix[1][12][1];
  bezout.matrix[12][1][2] = bezout.matrix[1][12][2];
  bezout.matrix[12][1][3] = bezout.matrix[1][12][3];
  bezout.matrix[12][1][4] = bezout.matrix[1][12][4];
  bezout.matrix[12][1][5] = bezout.matrix[1][12][5];
  bezout.matrix[12][1][6] = bezout.matrix[1][12][6];
  bezout.matrix[12][1][7] = bezout.matrix[1][12][7];
  bezout.matrix[12][1][8] = bezout.matrix[1][12][8];
  bezout.matrix[12][1][9] = bezout.matrix[1][12][9];
  bezout.matrix[12][1][10] = bezout.matrix[1][12][10];
  bezout.matrix[12][1][11] = bezout.matrix[1][12][11];
  bezout.matrix[12][1][12] = bezout.matrix[1][12][12];
  bezout.matrix[12][1][13] = bezout.matrix[1][12][13];
  bezout.matrix[12][1][14] = bezout.matrix[1][12][14];
  bezout.matrix[12][1][15] = bezout.matrix[1][12][15];
  bezout.matrix[12][2][0] = bezout.matrix[2][12][0];
  bezout.matrix[12][2][1] = bezout.matrix[2][12][1];
  bezout.matrix[12][2][2] = bezout.matrix[2][12][2];
  bezout.matrix[12][2][3] = bezout.matrix[2][12][3];
  bezout.matrix[12][2][4] = bezout.matrix[2][12][4];
  bezout.matrix[12][2][5] = bezout.matrix[2][12][5];
  bezout.matrix[12][2][6] = bezout.matrix[2][12][6];
  bezout.matrix[12][2][7] = bezout.matrix[2][12][7];
  bezout.matrix[12][2][8] = bezout.matrix[2][12][8];
  bezout.matrix[12][2][9] = bezout.matrix[2][12][9];
  bezout.matrix[12][2][10] = bezout.matrix[2][12][10];
  bezout.matrix[12][2][11] = bezout.matrix[2][12][11];
  bezout.matrix[12][2][12] = bezout.matrix[2][12][12];
  bezout.matrix[12][2][13] = bezout.matrix[2][12][13];
  bezout.matrix[12][2][14] = bezout.matrix[2][12][14];
  bezout.matrix[12][2][15] = bezout.matrix[2][12][15];
  bezout.matrix[12][3][0] = bezout.matrix[3][12][0];
  bezout.matrix[12][3][1] = bezout.matrix[3][12][1];
  bezout.matrix[12][3][2] = bezout.matrix[3][12][2];
  bezout.matrix[12][3][3] = bezout.matrix[3][12][3];
  bezout.matrix[12][3][4] = bezout.matrix[3][12][4];
  bezout.matrix[12][3][5] = bezout.matrix[3][12][5];
  bezout.matrix[12][3][6] = bezout.matrix[3][12][6];
  bezout.matrix[12][3][7] = bezout.matrix[3][12][7];
  bezout.matrix[12][3][8] = bezout.matrix[3][12][8];
  bezout.matrix[12][3][9] = bezout.matrix[3][12][9];
  bezout.matrix[12][3][10] = bezout.matrix[3][12][10];
  bezout.matrix[12][3][11] = bezout.matrix[3][12][11];
  bezout.matrix[12][3][12] = bezout.matrix[3][12][12];
  bezout.matrix[12][3][13] = bezout.matrix[3][12][13];
  bezout.matrix[12][3][14] = bezout.matrix[3][12][14];
  bezout.matrix[12][3][15] = bezout.matrix[3][12][15];
  bezout.matrix[12][4][0] = bezout.matrix[4][12][0];
  bezout.matrix[12][4][1] = bezout.matrix[4][12][1];
  bezout.matrix[12][4][2] = bezout.matrix[4][12][2];
  bezout.matrix[12][4][3] = bezout.matrix[4][12][3];
  bezout.matrix[12][4][4] = bezout.matrix[4][12][4];
  bezout.matrix[12][4][5] = bezout.matrix[4][12][5];
  bezout.matrix[12][4][6] = bezout.matrix[4][12][6];
  bezout.matrix[12][4][7] = bezout.matrix[4][12][7];
  bezout.matrix[12][4][8] = bezout.matrix[4][12][8];
  bezout.matrix[12][4][9] = bezout.matrix[4][12][9];
  bezout.matrix[12][4][10] = bezout.matrix[4][12][10];
  bezout.matrix[12][4][11] = bezout.matrix[4][12][11];
  bezout.matrix[12][4][12] = bezout.matrix[4][12][12];
  bezout.matrix[12][4][13] = bezout.matrix[4][12][13];
  bezout.matrix[12][4][14] = bezout.matrix[4][12][14];
  bezout.matrix[12][4][15] = bezout.matrix[4][12][15];
  bezout.matrix[12][5][0] = bezout.matrix[5][12][0];
  bezout.matrix[12][5][1] = bezout.matrix[5][12][1];
  bezout.matrix[12][5][2] = bezout.matrix[5][12][2];
  bezout.matrix[12][5][3] = bezout.matrix[5][12][3];
  bezout.matrix[12][5][4] = bezout.matrix[5][12][4];
  bezout.matrix[12][5][5] = bezout.matrix[5][12][5];
  bezout.matrix[12][5][6] = bezout.matrix[5][12][6];
  bezout.matrix[12][5][7] = bezout.matrix[5][12][7];
  bezout.matrix[12][5][8] = bezout.matrix[5][12][8];
  bezout.matrix[12][5][9] = bezout.matrix[5][12][9];
  bezout.matrix[12][5][10] = bezout.matrix[5][12][10];
  bezout.matrix[12][5][11] = bezout.matrix[5][12][11];
  bezout.matrix[12][5][12] = bezout.matrix[5][12][12];
  bezout.matrix[12][5][13] = bezout.matrix[5][12][13];
  bezout.matrix[12][5][14] = bezout.matrix[5][12][14];
  bezout.matrix[12][5][15] = bezout.matrix[5][12][15];
  bezout.matrix[12][6][0] = bezout.matrix[6][12][0];
  bezout.matrix[12][6][1] = bezout.matrix[6][12][1];
  bezout.matrix[12][6][2] = bezout.matrix[6][12][2];
  bezout.matrix[12][6][3] = bezout.matrix[6][12][3];
  bezout.matrix[12][6][4] = bezout.matrix[6][12][4];
  bezout.matrix[12][6][5] = bezout.matrix[6][12][5];
  bezout.matrix[12][6][6] = bezout.matrix[6][12][6];
  bezout.matrix[12][6][7] = bezout.matrix[6][12][7];
  bezout.matrix[12][6][8] = bezout.matrix[6][12][8];
  bezout.matrix[12][6][9] = bezout.matrix[6][12][9];
  bezout.matrix[12][6][10] = bezout.matrix[6][12][10];
  bezout.matrix[12][6][11] = bezout.matrix[6][12][11];
  bezout.matrix[12][6][12] = bezout.matrix[6][12][12];
  bezout.matrix[12][6][13] = bezout.matrix[6][12][13];
  bezout.matrix[12][6][14] = bezout.matrix[6][12][14];
  bezout.matrix[12][6][15] = bezout.matrix[6][12][15];
  bezout.matrix[12][7][0] = bezout.matrix[7][12][0];
  bezout.matrix[12][7][1] = bezout.matrix[7][12][1];
  bezout.matrix[12][7][2] = bezout.matrix[7][12][2];
  bezout.matrix[12][7][3] = bezout.matrix[7][12][3];
  bezout.matrix[12][7][4] = bezout.matrix[7][12][4];
  bezout.matrix[12][7][5] = bezout.matrix[7][12][5];
  bezout.matrix[12][7][6] = bezout.matrix[7][12][6];
  bezout.matrix[12][7][7] = bezout.matrix[7][12][7];
  bezout.matrix[12][7][8] = bezout.matrix[7][12][8];
  bezout.matrix[12][7][9] = bezout.matrix[7][12][9];
  bezout.matrix[12][7][10] = bezout.matrix[7][12][10];
  bezout.matrix[12][7][11] = bezout.matrix[7][12][11];
  bezout.matrix[12][7][12] = bezout.matrix[7][12][12];
  bezout.matrix[12][7][13] = bezout.matrix[7][12][13];
  bezout.matrix[12][7][14] = bezout.matrix[7][12][14];
  bezout.matrix[12][7][15] = bezout.matrix[7][12][15];
  bezout.matrix[12][8][0] = bezout.matrix[8][12][0];
  bezout.matrix[12][8][1] = bezout.matrix[8][12][1];
  bezout.matrix[12][8][2] = bezout.matrix[8][12][2];
  bezout.matrix[12][8][3] = bezout.matrix[8][12][3];
  bezout.matrix[12][8][4] = bezout.matrix[8][12][4];
  bezout.matrix[12][8][5] = bezout.matrix[8][12][5];
  bezout.matrix[12][8][6] = bezout.matrix[8][12][6];
  bezout.matrix[12][8][7] = bezout.matrix[8][12][7];
  bezout.matrix[12][8][8] = bezout.matrix[8][12][8];
  bezout.matrix[12][8][9] = bezout.matrix[8][12][9];
  bezout.matrix[12][8][10] = bezout.matrix[8][12][10];
  bezout.matrix[12][8][11] = bezout.matrix[8][12][11];
  bezout.matrix[12][8][12] = bezout.matrix[8][12][12];
  bezout.matrix[12][8][13] = bezout.matrix[8][12][13];
  bezout.matrix[12][8][14] = bezout.matrix[8][12][14];
  bezout.matrix[12][8][15] = bezout.matrix[8][12][15];
  bezout.matrix[12][9][0] = bezout.matrix[9][12][0];
  bezout.matrix[12][9][1] = bezout.matrix[9][12][1];
  bezout.matrix[12][9][2] = bezout.matrix[9][12][2];
  bezout.matrix[12][9][3] = bezout.matrix[9][12][3];
  bezout.matrix[12][9][4] = bezout.matrix[9][12][4];
  bezout.matrix[12][9][5] = bezout.matrix[9][12][5];
  bezout.matrix[12][9][6] = bezout.matrix[9][12][6];
  bezout.matrix[12][9][7] = bezout.matrix[9][12][7];
  bezout.matrix[12][9][8] = bezout.matrix[9][12][8];
  bezout.matrix[12][9][9] = bezout.matrix[9][12][9];
  bezout.matrix[12][9][10] = bezout.matrix[9][12][10];
  bezout.matrix[12][9][11] = bezout.matrix[9][12][11];
  bezout.matrix[12][9][12] = bezout.matrix[9][12][12];
  bezout.matrix[12][9][13] = bezout.matrix[9][12][13];
  bezout.matrix[12][9][14] = bezout.matrix[9][12][14];
  bezout.matrix[12][9][15] = bezout.matrix[9][12][15];
  bezout.matrix[12][10][0] = bezout.matrix[10][12][0];
  bezout.matrix[12][10][1] = bezout.matrix[10][12][1];
  bezout.matrix[12][10][2] = bezout.matrix[10][12][2];
  bezout.matrix[12][10][3] = bezout.matrix[10][12][3];
  bezout.matrix[12][10][4] = bezout.matrix[10][12][4];
  bezout.matrix[12][10][5] = bezout.matrix[10][12][5];
  bezout.matrix[12][10][6] = bezout.matrix[10][12][6];
  bezout.matrix[12][10][7] = bezout.matrix[10][12][7];
  bezout.matrix[12][10][8] = bezout.matrix[10][12][8];
  bezout.matrix[12][10][9] = bezout.matrix[10][12][9];
  bezout.matrix[12][10][10] = bezout.matrix[10][12][10];
  bezout.matrix[12][10][11] = bezout.matrix[10][12][11];
  bezout.matrix[12][10][12] = bezout.matrix[10][12][12];
  bezout.matrix[12][10][13] = bezout.matrix[10][12][13];
  bezout.matrix[12][10][14] = bezout.matrix[10][12][14];
  bezout.matrix[12][10][15] = bezout.matrix[10][12][15];
  bezout.matrix[12][11][0] = bezout.matrix[11][12][0];
  bezout.matrix[12][11][1] = bezout.matrix[11][12][1];
  bezout.matrix[12][11][2] = bezout.matrix[11][12][2];
  bezout.matrix[12][11][3] = bezout.matrix[11][12][3];
  bezout.matrix[12][11][4] = bezout.matrix[11][12][4];
  bezout.matrix[12][11][5] = bezout.matrix[11][12][5];
  bezout.matrix[12][11][6] = bezout.matrix[11][12][6];
  bezout.matrix[12][11][7] = bezout.matrix[11][12][7];
  bezout.matrix[12][11][8] = bezout.matrix[11][12][8];
  bezout.matrix[12][11][9] = bezout.matrix[11][12][9];
  bezout.matrix[12][11][10] = bezout.matrix[11][12][10];
  bezout.matrix[12][11][11] = bezout.matrix[11][12][11];
  bezout.matrix[12][11][12] = bezout.matrix[11][12][12];
  bezout.matrix[12][11][13] = bezout.matrix[11][12][13];
  bezout.matrix[12][11][14] = bezout.matrix[11][12][14];
  bezout.matrix[12][11][15] = bezout.matrix[11][12][15];
  bezout.matrix[13][0][0] = bezout.matrix[0][13][0];
  bezout.matrix[13][0][1] = bezout.matrix[0][13][1];
  bezout.matrix[13][0][2] = bezout.matrix[0][13][2];
  bezout.matrix[13][0][3] = bezout.matrix[0][13][3];
  bezout.matrix[13][0][4] = bezout.matrix[0][13][4];
  bezout.matrix[13][0][5] = bezout.matrix[0][13][5];
  bezout.matrix[13][0][6] = bezout.matrix[0][13][6];
  bezout.matrix[13][0][7] = bezout.matrix[0][13][7];
  bezout.matrix[13][0][8] = bezout.matrix[0][13][8];
  bezout.matrix[13][0][9] = bezout.matrix[0][13][9];
  bezout.matrix[13][0][10] = bezout.matrix[0][13][10];
  bezout.matrix[13][0][11] = bezout.matrix[0][13][11];
  bezout.matrix[13][0][12] = bezout.matrix[0][13][12];
  bezout.matrix[13][0][13] = bezout.matrix[0][13][13];
  bezout.matrix[13][0][14] = bezout.matrix[0][13][14];
  bezout.matrix[13][0][15] = bezout.matrix[0][13][15];
  bezout.matrix[13][1][0] = bezout.matrix[1][13][0];
  bezout.matrix[13][1][1] = bezout.matrix[1][13][1];
  bezout.matrix[13][1][2] = bezout.matrix[1][13][2];
  bezout.matrix[13][1][3] = bezout.matrix[1][13][3];
  bezout.matrix[13][1][4] = bezout.matrix[1][13][4];
  bezout.matrix[13][1][5] = bezout.matrix[1][13][5];
  bezout.matrix[13][1][6] = bezout.matrix[1][13][6];
  bezout.matrix[13][1][7] = bezout.matrix[1][13][7];
  bezout.matrix[13][1][8] = bezout.matrix[1][13][8];
  bezout.matrix[13][1][9] = bezout.matrix[1][13][9];
  bezout.matrix[13][1][10] = bezout.matrix[1][13][10];
  bezout.matrix[13][1][11] = bezout.matrix[1][13][11];
  bezout.matrix[13][1][12] = bezout.matrix[1][13][12];
  bezout.matrix[13][1][13] = bezout.matrix[1][13][13];
  bezout.matrix[13][1][14] = bezout.matrix[1][13][14];
  bezout.matrix[13][1][15] = bezout.matrix[1][13][15];
  bezout.matrix[13][2][0] = bezout.matrix[2][13][0];
  bezout.matrix[13][2][1] = bezout.matrix[2][13][1];
  bezout.matrix[13][2][2] = bezout.matrix[2][13][2];
  bezout.matrix[13][2][3] = bezout.matrix[2][13][3];
  bezout.matrix[13][2][4] = bezout.matrix[2][13][4];
  bezout.matrix[13][2][5] = bezout.matrix[2][13][5];
  bezout.matrix[13][2][6] = bezout.matrix[2][13][6];
  bezout.matrix[13][2][7] = bezout.matrix[2][13][7];
  bezout.matrix[13][2][8] = bezout.matrix[2][13][8];
  bezout.matrix[13][2][9] = bezout.matrix[2][13][9];
  bezout.matrix[13][2][10] = bezout.matrix[2][13][10];
  bezout.matrix[13][2][11] = bezout.matrix[2][13][11];
  bezout.matrix[13][2][12] = bezout.matrix[2][13][12];
  bezout.matrix[13][2][13] = bezout.matrix[2][13][13];
  bezout.matrix[13][2][14] = bezout.matrix[2][13][14];
  bezout.matrix[13][2][15] = bezout.matrix[2][13][15];
  bezout.matrix[13][3][0] = bezout.matrix[3][13][0];
  bezout.matrix[13][3][1] = bezout.matrix[3][13][1];
  bezout.matrix[13][3][2] = bezout.matrix[3][13][2];
  bezout.matrix[13][3][3] = bezout.matrix[3][13][3];
  bezout.matrix[13][3][4] = bezout.matrix[3][13][4];
  bezout.matrix[13][3][5] = bezout.matrix[3][13][5];
  bezout.matrix[13][3][6] = bezout.matrix[3][13][6];
  bezout.matrix[13][3][7] = bezout.matrix[3][13][7];
  bezout.matrix[13][3][8] = bezout.matrix[3][13][8];
  bezout.matrix[13][3][9] = bezout.matrix[3][13][9];
  bezout.matrix[13][3][10] = bezout.matrix[3][13][10];
  bezout.matrix[13][3][11] = bezout.matrix[3][13][11];
  bezout.matrix[13][3][12] = bezout.matrix[3][13][12];
  bezout.matrix[13][3][13] = bezout.matrix[3][13][13];
  bezout.matrix[13][3][14] = bezout.matrix[3][13][14];
  bezout.matrix[13][3][15] = bezout.matrix[3][13][15];
  bezout.matrix[13][4][0] = bezout.matrix[4][13][0];
  bezout.matrix[13][4][1] = bezout.matrix[4][13][1];
  bezout.matrix[13][4][2] = bezout.matrix[4][13][2];
  bezout.matrix[13][4][3] = bezout.matrix[4][13][3];
  bezout.matrix[13][4][4] = bezout.matrix[4][13][4];
  bezout.matrix[13][4][5] = bezout.matrix[4][13][5];
  bezout.matrix[13][4][6] = bezout.matrix[4][13][6];
  bezout.matrix[13][4][7] = bezout.matrix[4][13][7];
  bezout.matrix[13][4][8] = bezout.matrix[4][13][8];
  bezout.matrix[13][4][9] = bezout.matrix[4][13][9];
  bezout.matrix[13][4][10] = bezout.matrix[4][13][10];
  bezout.matrix[13][4][11] = bezout.matrix[4][13][11];
  bezout.matrix[13][4][12] = bezout.matrix[4][13][12];
  bezout.matrix[13][4][13] = bezout.matrix[4][13][13];
  bezout.matrix[13][4][14] = bezout.matrix[4][13][14];
  bezout.matrix[13][4][15] = bezout.matrix[4][13][15];
  bezout.matrix[13][5][0] = bezout.matrix[5][13][0];
  bezout.matrix[13][5][1] = bezout.matrix[5][13][1];
  bezout.matrix[13][5][2] = bezout.matrix[5][13][2];
  bezout.matrix[13][5][3] = bezout.matrix[5][13][3];
  bezout.matrix[13][5][4] = bezout.matrix[5][13][4];
  bezout.matrix[13][5][5] = bezout.matrix[5][13][5];
  bezout.matrix[13][5][6] = bezout.matrix[5][13][6];
  bezout.matrix[13][5][7] = bezout.matrix[5][13][7];
  bezout.matrix[13][5][8] = bezout.matrix[5][13][8];
  bezout.matrix[13][5][9] = bezout.matrix[5][13][9];
  bezout.matrix[13][5][10] = bezout.matrix[5][13][10];
  bezout.matrix[13][5][11] = bezout.matrix[5][13][11];
  bezout.matrix[13][5][12] = bezout.matrix[5][13][12];
  bezout.matrix[13][5][13] = bezout.matrix[5][13][13];
  bezout.matrix[13][5][14] = bezout.matrix[5][13][14];
  bezout.matrix[13][5][15] = bezout.matrix[5][13][15];
  bezout.matrix[13][6][0] = bezout.matrix[6][13][0];
  bezout.matrix[13][6][1] = bezout.matrix[6][13][1];
  bezout.matrix[13][6][2] = bezout.matrix[6][13][2];
  bezout.matrix[13][6][3] = bezout.matrix[6][13][3];
  bezout.matrix[13][6][4] = bezout.matrix[6][13][4];
  bezout.matrix[13][6][5] = bezout.matrix[6][13][5];
  bezout.matrix[13][6][6] = bezout.matrix[6][13][6];
  bezout.matrix[13][6][7] = bezout.matrix[6][13][7];
  bezout.matrix[13][6][8] = bezout.matrix[6][13][8];
  bezout.matrix[13][6][9] = bezout.matrix[6][13][9];
  bezout.matrix[13][6][10] = bezout.matrix[6][13][10];
  bezout.matrix[13][6][11] = bezout.matrix[6][13][11];
  bezout.matrix[13][6][12] = bezout.matrix[6][13][12];
  bezout.matrix[13][6][13] = bezout.matrix[6][13][13];
  bezout.matrix[13][6][14] = bezout.matrix[6][13][14];
  bezout.matrix[13][6][15] = bezout.matrix[6][13][15];
  bezout.matrix[13][7][0] = bezout.matrix[7][13][0];
  bezout.matrix[13][7][1] = bezout.matrix[7][13][1];
  bezout.matrix[13][7][2] = bezout.matrix[7][13][2];
  bezout.matrix[13][7][3] = bezout.matrix[7][13][3];
  bezout.matrix[13][7][4] = bezout.matrix[7][13][4];
  bezout.matrix[13][7][5] = bezout.matrix[7][13][5];
  bezout.matrix[13][7][6] = bezout.matrix[7][13][6];
  bezout.matrix[13][7][7] = bezout.matrix[7][13][7];
  bezout.matrix[13][7][8] = bezout.matrix[7][13][8];
  bezout.matrix[13][7][9] = bezout.matrix[7][13][9];
  bezout.matrix[13][7][10] = bezout.matrix[7][13][10];
  bezout.matrix[13][7][11] = bezout.matrix[7][13][11];
  bezout.matrix[13][7][12] = bezout.matrix[7][13][12];
  bezout.matrix[13][7][13] = bezout.matrix[7][13][13];
  bezout.matrix[13][7][14] = bezout.matrix[7][13][14];
  bezout.matrix[13][7][15] = bezout.matrix[7][13][15];
  bezout.matrix[13][8][0] = bezout.matrix[8][13][0];
  bezout.matrix[13][8][1] = bezout.matrix[8][13][1];
  bezout.matrix[13][8][2] = bezout.matrix[8][13][2];
  bezout.matrix[13][8][3] = bezout.matrix[8][13][3];
  bezout.matrix[13][8][4] = bezout.matrix[8][13][4];
  bezout.matrix[13][8][5] = bezout.matrix[8][13][5];
  bezout.matrix[13][8][6] = bezout.matrix[8][13][6];
  bezout.matrix[13][8][7] = bezout.matrix[8][13][7];
  bezout.matrix[13][8][8] = bezout.matrix[8][13][8];
  bezout.matrix[13][8][9] = bezout.matrix[8][13][9];
  bezout.matrix[13][8][10] = bezout.matrix[8][13][10];
  bezout.matrix[13][8][11] = bezout.matrix[8][13][11];
  bezout.matrix[13][8][12] = bezout.matrix[8][13][12];
  bezout.matrix[13][8][13] = bezout.matrix[8][13][13];
  bezout.matrix[13][8][14] = bezout.matrix[8][13][14];
  bezout.matrix[13][8][15] = bezout.matrix[8][13][15];
  bezout.matrix[13][9][0] = bezout.matrix[9][13][0];
  bezout.matrix[13][9][1] = bezout.matrix[9][13][1];
  bezout.matrix[13][9][2] = bezout.matrix[9][13][2];
  bezout.matrix[13][9][3] = bezout.matrix[9][13][3];
  bezout.matrix[13][9][4] = bezout.matrix[9][13][4];
  bezout.matrix[13][9][5] = bezout.matrix[9][13][5];
  bezout.matrix[13][9][6] = bezout.matrix[9][13][6];
  bezout.matrix[13][9][7] = bezout.matrix[9][13][7];
  bezout.matrix[13][9][8] = bezout.matrix[9][13][8];
  bezout.matrix[13][9][9] = bezout.matrix[9][13][9];
  bezout.matrix[13][9][10] = bezout.matrix[9][13][10];
  bezout.matrix[13][9][11] = bezout.matrix[9][13][11];
  bezout.matrix[13][9][12] = bezout.matrix[9][13][12];
  bezout.matrix[13][9][13] = bezout.matrix[9][13][13];
  bezout.matrix[13][9][14] = bezout.matrix[9][13][14];
  bezout.matrix[13][9][15] = bezout.matrix[9][13][15];
  bezout.matrix[13][10][0] = bezout.matrix[10][13][0];
  bezout.matrix[13][10][1] = bezout.matrix[10][13][1];
  bezout.matrix[13][10][2] = bezout.matrix[10][13][2];
  bezout.matrix[13][10][3] = bezout.matrix[10][13][3];
  bezout.matrix[13][10][4] = bezout.matrix[10][13][4];
  bezout.matrix[13][10][5] = bezout.matrix[10][13][5];
  bezout.matrix[13][10][6] = bezout.matrix[10][13][6];
  bezout.matrix[13][10][7] = bezout.matrix[10][13][7];
  bezout.matrix[13][10][8] = bezout.matrix[10][13][8];
  bezout.matrix[13][10][9] = bezout.matrix[10][13][9];
  bezout.matrix[13][10][10] = bezout.matrix[10][13][10];
  bezout.matrix[13][10][11] = bezout.matrix[10][13][11];
  bezout.matrix[13][10][12] = bezout.matrix[10][13][12];
  bezout.matrix[13][10][13] = bezout.matrix[10][13][13];
  bezout.matrix[13][10][14] = bezout.matrix[10][13][14];
  bezout.matrix[13][10][15] = bezout.matrix[10][13][15];
  bezout.matrix[13][11][0] = bezout.matrix[11][13][0];
  bezout.matrix[13][11][1] = bezout.matrix[11][13][1];
  bezout.matrix[13][11][2] = bezout.matrix[11][13][2];
  bezout.matrix[13][11][3] = bezout.matrix[11][13][3];
  bezout.matrix[13][11][4] = bezout.matrix[11][13][4];
  bezout.matrix[13][11][5] = bezout.matrix[11][13][5];
  bezout.matrix[13][11][6] = bezout.matrix[11][13][6];
  bezout.matrix[13][11][7] = bezout.matrix[11][13][7];
  bezout.matrix[13][11][8] = bezout.matrix[11][13][8];
  bezout.matrix[13][11][9] = bezout.matrix[11][13][9];
  bezout.matrix[13][11][10] = bezout.matrix[11][13][10];
  bezout.matrix[13][11][11] = bezout.matrix[11][13][11];
  bezout.matrix[13][11][12] = bezout.matrix[11][13][12];
  bezout.matrix[13][11][13] = bezout.matrix[11][13][13];
  bezout.matrix[13][11][14] = bezout.matrix[11][13][14];
  bezout.matrix[13][11][15] = bezout.matrix[11][13][15];
  bezout.matrix[13][12][0] = bezout.matrix[12][13][0];
  bezout.matrix[13][12][1] = bezout.matrix[12][13][1];
  bezout.matrix[13][12][2] = bezout.matrix[12][13][2];
  bezout.matrix[13][12][3] = bezout.matrix[12][13][3];
  bezout.matrix[13][12][4] = bezout.matrix[12][13][4];
  bezout.matrix[13][12][5] = bezout.matrix[12][13][5];
  bezout.matrix[13][12][6] = bezout.matrix[12][13][6];
  bezout.matrix[13][12][7] = bezout.matrix[12][13][7];
  bezout.matrix[13][12][8] = bezout.matrix[12][13][8];
  bezout.matrix[13][12][9] = bezout.matrix[12][13][9];
  bezout.matrix[13][12][10] = bezout.matrix[12][13][10];
  bezout.matrix[13][12][11] = bezout.matrix[12][13][11];
  bezout.matrix[13][12][12] = bezout.matrix[12][13][12];
  bezout.matrix[13][12][13] = bezout.matrix[12][13][13];
  bezout.matrix[13][12][14] = bezout.matrix[12][13][14];
  bezout.matrix[13][12][15] = bezout.matrix[12][13][15];
  bezout.matrix[14][0][0] = bezout.matrix[0][14][0];
  bezout.matrix[14][0][1] = bezout.matrix[0][14][1];
  bezout.matrix[14][0][2] = bezout.matrix[0][14][2];
  bezout.matrix[14][0][3] = bezout.matrix[0][14][3];
  bezout.matrix[14][0][4] = bezout.matrix[0][14][4];
  bezout.matrix[14][0][5] = bezout.matrix[0][14][5];
  bezout.matrix[14][0][6] = bezout.matrix[0][14][6];
  bezout.matrix[14][0][7] = bezout.matrix[0][14][7];
  bezout.matrix[14][0][8] = bezout.matrix[0][14][8];
  bezout.matrix[14][0][9] = bezout.matrix[0][14][9];
  bezout.matrix[14][0][10] = bezout.matrix[0][14][10];
  bezout.matrix[14][0][11] = bezout.matrix[0][14][11];
  bezout.matrix[14][0][12] = bezout.matrix[0][14][12];
  bezout.matrix[14][0][13] = bezout.matrix[0][14][13];
  bezout.matrix[14][0][14] = bezout.matrix[0][14][14];
  bezout.matrix[14][0][15] = bezout.matrix[0][14][15];
  bezout.matrix[14][1][0] = bezout.matrix[1][14][0];
  bezout.matrix[14][1][1] = bezout.matrix[1][14][1];
  bezout.matrix[14][1][2] = bezout.matrix[1][14][2];
  bezout.matrix[14][1][3] = bezout.matrix[1][14][3];
  bezout.matrix[14][1][4] = bezout.matrix[1][14][4];
  bezout.matrix[14][1][5] = bezout.matrix[1][14][5];
  bezout.matrix[14][1][6] = bezout.matrix[1][14][6];
  bezout.matrix[14][1][7] = bezout.matrix[1][14][7];
  bezout.matrix[14][1][8] = bezout.matrix[1][14][8];
  bezout.matrix[14][1][9] = bezout.matrix[1][14][9];
  bezout.matrix[14][1][10] = bezout.matrix[1][14][10];
  bezout.matrix[14][1][11] = bezout.matrix[1][14][11];
  bezout.matrix[14][1][12] = bezout.matrix[1][14][12];
  bezout.matrix[14][1][13] = bezout.matrix[1][14][13];
  bezout.matrix[14][1][14] = bezout.matrix[1][14][14];
  bezout.matrix[14][1][15] = bezout.matrix[1][14][15];
  bezout.matrix[14][2][0] = bezout.matrix[2][14][0];
  bezout.matrix[14][2][1] = bezout.matrix[2][14][1];
  bezout.matrix[14][2][2] = bezout.matrix[2][14][2];
  bezout.matrix[14][2][3] = bezout.matrix[2][14][3];
  bezout.matrix[14][2][4] = bezout.matrix[2][14][4];
  bezout.matrix[14][2][5] = bezout.matrix[2][14][5];
  bezout.matrix[14][2][6] = bezout.matrix[2][14][6];
  bezout.matrix[14][2][7] = bezout.matrix[2][14][7];
  bezout.matrix[14][2][8] = bezout.matrix[2][14][8];
  bezout.matrix[14][2][9] = bezout.matrix[2][14][9];
  bezout.matrix[14][2][10] = bezout.matrix[2][14][10];
  bezout.matrix[14][2][11] = bezout.matrix[2][14][11];
  bezout.matrix[14][2][12] = bezout.matrix[2][14][12];
  bezout.matrix[14][2][13] = bezout.matrix[2][14][13];
  bezout.matrix[14][2][14] = bezout.matrix[2][14][14];
  bezout.matrix[14][2][15] = bezout.matrix[2][14][15];
  bezout.matrix[14][3][0] = bezout.matrix[3][14][0];
  bezout.matrix[14][3][1] = bezout.matrix[3][14][1];
  bezout.matrix[14][3][2] = bezout.matrix[3][14][2];
  bezout.matrix[14][3][3] = bezout.matrix[3][14][3];
  bezout.matrix[14][3][4] = bezout.matrix[3][14][4];
  bezout.matrix[14][3][5] = bezout.matrix[3][14][5];
  bezout.matrix[14][3][6] = bezout.matrix[3][14][6];
  bezout.matrix[14][3][7] = bezout.matrix[3][14][7];
  bezout.matrix[14][3][8] = bezout.matrix[3][14][8];
  bezout.matrix[14][3][9] = bezout.matrix[3][14][9];
  bezout.matrix[14][3][10] = bezout.matrix[3][14][10];
  bezout.matrix[14][3][11] = bezout.matrix[3][14][11];
  bezout.matrix[14][3][12] = bezout.matrix[3][14][12];
  bezout.matrix[14][3][13] = bezout.matrix[3][14][13];
  bezout.matrix[14][3][14] = bezout.matrix[3][14][14];
  bezout.matrix[14][3][15] = bezout.matrix[3][14][15];
  bezout.matrix[14][4][0] = bezout.matrix[4][14][0];
  bezout.matrix[14][4][1] = bezout.matrix[4][14][1];
  bezout.matrix[14][4][2] = bezout.matrix[4][14][2];
  bezout.matrix[14][4][3] = bezout.matrix[4][14][3];
  bezout.matrix[14][4][4] = bezout.matrix[4][14][4];
  bezout.matrix[14][4][5] = bezout.matrix[4][14][5];
  bezout.matrix[14][4][6] = bezout.matrix[4][14][6];
  bezout.matrix[14][4][7] = bezout.matrix[4][14][7];
  bezout.matrix[14][4][8] = bezout.matrix[4][14][8];
  bezout.matrix[14][4][9] = bezout.matrix[4][14][9];
  bezout.matrix[14][4][10] = bezout.matrix[4][14][10];
  bezout.matrix[14][4][11] = bezout.matrix[4][14][11];
  bezout.matrix[14][4][12] = bezout.matrix[4][14][12];
  bezout.matrix[14][4][13] = bezout.matrix[4][14][13];
  bezout.matrix[14][4][14] = bezout.matrix[4][14][14];
  bezout.matrix[14][4][15] = bezout.matrix[4][14][15];
  bezout.matrix[14][5][0] = bezout.matrix[5][14][0];
  bezout.matrix[14][5][1] = bezout.matrix[5][14][1];
  bezout.matrix[14][5][2] = bezout.matrix[5][14][2];
  bezout.matrix[14][5][3] = bezout.matrix[5][14][3];
  bezout.matrix[14][5][4] = bezout.matrix[5][14][4];
  bezout.matrix[14][5][5] = bezout.matrix[5][14][5];
  bezout.matrix[14][5][6] = bezout.matrix[5][14][6];
  bezout.matrix[14][5][7] = bezout.matrix[5][14][7];
  bezout.matrix[14][5][8] = bezout.matrix[5][14][8];
  bezout.matrix[14][5][9] = bezout.matrix[5][14][9];
  bezout.matrix[14][5][10] = bezout.matrix[5][14][10];
  bezout.matrix[14][5][11] = bezout.matrix[5][14][11];
  bezout.matrix[14][5][12] = bezout.matrix[5][14][12];
  bezout.matrix[14][5][13] = bezout.matrix[5][14][13];
  bezout.matrix[14][5][14] = bezout.matrix[5][14][14];
  bezout.matrix[14][5][15] = bezout.matrix[5][14][15];
  bezout.matrix[14][6][0] = bezout.matrix[6][14][0];
  bezout.matrix[14][6][1] = bezout.matrix[6][14][1];
  bezout.matrix[14][6][2] = bezout.matrix[6][14][2];
  bezout.matrix[14][6][3] = bezout.matrix[6][14][3];
  bezout.matrix[14][6][4] = bezout.matrix[6][14][4];
  bezout.matrix[14][6][5] = bezout.matrix[6][14][5];
  bezout.matrix[14][6][6] = bezout.matrix[6][14][6];
  bezout.matrix[14][6][7] = bezout.matrix[6][14][7];
  bezout.matrix[14][6][8] = bezout.matrix[6][14][8];
  bezout.matrix[14][6][9] = bezout.matrix[6][14][9];
  bezout.matrix[14][6][10] = bezout.matrix[6][14][10];
  bezout.matrix[14][6][11] = bezout.matrix[6][14][11];
  bezout.matrix[14][6][12] = bezout.matrix[6][14][12];
  bezout.matrix[14][6][13] = bezout.matrix[6][14][13];
  bezout.matrix[14][6][14] = bezout.matrix[6][14][14];
  bezout.matrix[14][6][15] = bezout.matrix[6][14][15];
  bezout.matrix[14][7][0] = bezout.matrix[7][14][0];
  bezout.matrix[14][7][1] = bezout.matrix[7][14][1];
  bezout.matrix[14][7][2] = bezout.matrix[7][14][2];
  bezout.matrix[14][7][3] = bezout.matrix[7][14][3];
  bezout.matrix[14][7][4] = bezout.matrix[7][14][4];
  bezout.matrix[14][7][5] = bezout.matrix[7][14][5];
  bezout.matrix[14][7][6] = bezout.matrix[7][14][6];
  bezout.matrix[14][7][7] = bezout.matrix[7][14][7];
  bezout.matrix[14][7][8] = bezout.matrix[7][14][8];
  bezout.matrix[14][7][9] = bezout.matrix[7][14][9];
  bezout.matrix[14][7][10] = bezout.matrix[7][14][10];
  bezout.matrix[14][7][11] = bezout.matrix[7][14][11];
  bezout.matrix[14][7][12] = bezout.matrix[7][14][12];
  bezout.matrix[14][7][13] = bezout.matrix[7][14][13];
  bezout.matrix[14][7][14] = bezout.matrix[7][14][14];
  bezout.matrix[14][7][15] = bezout.matrix[7][14][15];
  bezout.matrix[14][8][0] = bezout.matrix[8][14][0];
  bezout.matrix[14][8][1] = bezout.matrix[8][14][1];
  bezout.matrix[14][8][2] = bezout.matrix[8][14][2];
  bezout.matrix[14][8][3] = bezout.matrix[8][14][3];
  bezout.matrix[14][8][4] = bezout.matrix[8][14][4];
  bezout.matrix[14][8][5] = bezout.matrix[8][14][5];
  bezout.matrix[14][8][6] = bezout.matrix[8][14][6];
  bezout.matrix[14][8][7] = bezout.matrix[8][14][7];
  bezout.matrix[14][8][8] = bezout.matrix[8][14][8];
  bezout.matrix[14][8][9] = bezout.matrix[8][14][9];
  bezout.matrix[14][8][10] = bezout.matrix[8][14][10];
  bezout.matrix[14][8][11] = bezout.matrix[8][14][11];
  bezout.matrix[14][8][12] = bezout.matrix[8][14][12];
  bezout.matrix[14][8][13] = bezout.matrix[8][14][13];
  bezout.matrix[14][8][14] = bezout.matrix[8][14][14];
  bezout.matrix[14][8][15] = bezout.matrix[8][14][15];
  bezout.matrix[14][9][0] = bezout.matrix[9][14][0];
  bezout.matrix[14][9][1] = bezout.matrix[9][14][1];
  bezout.matrix[14][9][2] = bezout.matrix[9][14][2];
  bezout.matrix[14][9][3] = bezout.matrix[9][14][3];
  bezout.matrix[14][9][4] = bezout.matrix[9][14][4];
  bezout.matrix[14][9][5] = bezout.matrix[9][14][5];
  bezout.matrix[14][9][6] = bezout.matrix[9][14][6];
  bezout.matrix[14][9][7] = bezout.matrix[9][14][7];
  bezout.matrix[14][9][8] = bezout.matrix[9][14][8];
  bezout.matrix[14][9][9] = bezout.matrix[9][14][9];
  bezout.matrix[14][9][10] = bezout.matrix[9][14][10];
  bezout.matrix[14][9][11] = bezout.matrix[9][14][11];
  bezout.matrix[14][9][12] = bezout.matrix[9][14][12];
  bezout.matrix[14][9][13] = bezout.matrix[9][14][13];
  bezout.matrix[14][9][14] = bezout.matrix[9][14][14];
  bezout.matrix[14][9][15] = bezout.matrix[9][14][15];
  bezout.matrix[14][10][0] = bezout.matrix[10][14][0];
  bezout.matrix[14][10][1] = bezout.matrix[10][14][1];
  bezout.matrix[14][10][2] = bezout.matrix[10][14][2];
  bezout.matrix[14][10][3] = bezout.matrix[10][14][3];
  bezout.matrix[14][10][4] = bezout.matrix[10][14][4];
  bezout.matrix[14][10][5] = bezout.matrix[10][14][5];
  bezout.matrix[14][10][6] = bezout.matrix[10][14][6];
  bezout.matrix[14][10][7] = bezout.matrix[10][14][7];
  bezout.matrix[14][10][8] = bezout.matrix[10][14][8];
  bezout.matrix[14][10][9] = bezout.matrix[10][14][9];
  bezout.matrix[14][10][10] = bezout.matrix[10][14][10];
  bezout.matrix[14][10][11] = bezout.matrix[10][14][11];
  bezout.matrix[14][10][12] = bezout.matrix[10][14][12];
  bezout.matrix[14][10][13] = bezout.matrix[10][14][13];
  bezout.matrix[14][10][14] = bezout.matrix[10][14][14];
  bezout.matrix[14][10][15] = bezout.matrix[10][14][15];
  bezout.matrix[14][11][0] = bezout.matrix[11][14][0];
  bezout.matrix[14][11][1] = bezout.matrix[11][14][1];
  bezout.matrix[14][11][2] = bezout.matrix[11][14][2];
  bezout.matrix[14][11][3] = bezout.matrix[11][14][3];
  bezout.matrix[14][11][4] = bezout.matrix[11][14][4];
  bezout.matrix[14][11][5] = bezout.matrix[11][14][5];
  bezout.matrix[14][11][6] = bezout.matrix[11][14][6];
  bezout.matrix[14][11][7] = bezout.matrix[11][14][7];
  bezout.matrix[14][11][8] = bezout.matrix[11][14][8];
  bezout.matrix[14][11][9] = bezout.matrix[11][14][9];
  bezout.matrix[14][11][10] = bezout.matrix[11][14][10];
  bezout.matrix[14][11][11] = bezout.matrix[11][14][11];
  bezout.matrix[14][11][12] = bezout.matrix[11][14][12];
  bezout.matrix[14][11][13] = bezout.matrix[11][14][13];
  bezout.matrix[14][11][14] = bezout.matrix[11][14][14];
  bezout.matrix[14][11][15] = bezout.matrix[11][14][15];
  bezout.matrix[14][12][0] = bezout.matrix[12][14][0];
  bezout.matrix[14][12][1] = bezout.matrix[12][14][1];
  bezout.matrix[14][12][2] = bezout.matrix[12][14][2];
  bezout.matrix[14][12][3] = bezout.matrix[12][14][3];
  bezout.matrix[14][12][4] = bezout.matrix[12][14][4];
  bezout.matrix[14][12][5] = bezout.matrix[12][14][5];
  bezout.matrix[14][12][6] = bezout.matrix[12][14][6];
  bezout.matrix[14][12][7] = bezout.matrix[12][14][7];
  bezout.matrix[14][12][8] = bezout.matrix[12][14][8];
  bezout.matrix[14][12][9] = bezout.matrix[12][14][9];
  bezout.matrix[14][12][10] = bezout.matrix[12][14][10];
  bezout.matrix[14][12][11] = bezout.matrix[12][14][11];
  bezout.matrix[14][12][12] = bezout.matrix[12][14][12];
  bezout.matrix[14][12][13] = bezout.matrix[12][14][13];
  bezout.matrix[14][12][14] = bezout.matrix[12][14][14];
  bezout.matrix[14][12][15] = bezout.matrix[12][14][15];
  bezout.matrix[14][13][0] = bezout.matrix[13][14][0];
  bezout.matrix[14][13][1] = bezout.matrix[13][14][1];
  bezout.matrix[14][13][2] = bezout.matrix[13][14][2];
  bezout.matrix[14][13][3] = bezout.matrix[13][14][3];
  bezout.matrix[14][13][4] = bezout.matrix[13][14][4];
  bezout.matrix[14][13][5] = bezout.matrix[13][14][5];
  bezout.matrix[14][13][6] = bezout.matrix[13][14][6];
  bezout.matrix[14][13][7] = bezout.matrix[13][14][7];
  bezout.matrix[14][13][8] = bezout.matrix[13][14][8];
  bezout.matrix[14][13][9] = bezout.matrix[13][14][9];
  bezout.matrix[14][13][10] = bezout.matrix[13][14][10];
  bezout.matrix[14][13][11] = bezout.matrix[13][14][11];
  bezout.matrix[14][13][12] = bezout.matrix[13][14][12];
  bezout.matrix[14][13][13] = bezout.matrix[13][14][13];
  bezout.matrix[14][13][14] = bezout.matrix[13][14][14];
  bezout.matrix[14][13][15] = bezout.matrix[13][14][15];

  return bezout;
}


template <>
std::vector<Resultant::UnivariatePolynomial>
UnivariatePolyMatrix<4ul>::determinant() const {

  // 
  // (A[0][0] * A[1][1] - A[0][1] * A[1][0]) * (A[2][2] * A[3][3] - A[2][3] * A[3][2]) - //
  // (A[0][0] * A[1][2] - A[0][2] * A[1][0]) * (A[2][1] * A[3][3] - A[2][3] * A[3][1]) + //
  // (A[0][0] * A[1][3] - A[0][3] * A[1][0]) * (A[2][1] * A[3][2] - A[2][2] * A[3][1]) + //
  // (A[0][1] * A[1][2] - A[0][2] * A[1][1]) * (A[2][0] * A[3][3] - A[2][3] * A[3][0]) - //
  // (A[0][1] * A[1][3] - A[0][3] * A[1][1]) * (A[2][0] * A[3][2] - A[2][2] * A[3][0]) + //
  // (A[0][2] * A[1][3] - A[0][3] * A[1][2]) * (A[2][0] * A[3][1] - A[2][1] * A[3][0]);  //
  // clang-format on

  //! Notice, A[3][3] is zero

  __m256d res_poly[9]; // max degree is 8

  res_poly[0] = _mm256_setzero_pd();
  res_poly[1] = _mm256_setzero_pd();
  res_poly[2] = _mm256_setzero_pd();
  res_poly[3] = _mm256_setzero_pd();
  res_poly[4] = _mm256_setzero_pd();
  res_poly[5] = _mm256_setzero_pd();
  res_poly[6] = _mm256_setzero_pd();
  res_poly[7] = _mm256_setzero_pd();
  res_poly[8] = _mm256_setzero_pd();
  // (A[0][0] * A[1][1] - A[0][1] * A[1][0]) * (A[2][2] * A[3][3] - A[2][3] *
  // A[3][2])

  {
    __m256d temp_1[9];
    temp_1[0] = _mm256_setzero_pd();
    temp_1[1] = _mm256_setzero_pd();
    temp_1[2] = _mm256_setzero_pd();
    temp_1[3] = _mm256_setzero_pd();
    temp_1[4] = _mm256_setzero_pd();
    temp_1[5] = _mm256_setzero_pd();
    temp_1[6] = _mm256_setzero_pd();
    temp_1[7] = _mm256_setzero_pd();
    temp_1[8] = _mm256_setzero_pd();

    // A[0][0] * A[1][1]
    temp_1[0] = _mm256_add_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][1][0]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][1][1]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][1][2]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][1][3]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][1][0]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][1][1]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][1][2]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][1][3]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][1][0]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][1][1]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][1][2]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][1][3]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][1][0]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][1][1]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][1][2]));
    temp_1[6] = _mm256_add_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][1][3]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][1][0]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][1][1]));
    temp_1[6] = _mm256_add_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][1][2]));
    temp_1[7] = _mm256_add_pd(temp_1[7],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][1][3]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][1][0]));
    temp_1[6] = _mm256_add_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][1][1]));
    temp_1[7] = _mm256_add_pd(temp_1[7],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][1][2]));
    temp_1[8] = _mm256_add_pd(temp_1[8],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][1][3]));

    // A[0][1] * A[1][0]

    temp_1[0] = _mm256_sub_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][0][0]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][0][1]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][0][2]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][0][3]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][0][4]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][0][0]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][0][1]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][0][2]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][0][3]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][0][4]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][0][0]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][0][1]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][0][2]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][0][3]));
    temp_1[6] = _mm256_sub_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][0][4]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][0][0]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][0][1]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][0][2]));
    temp_1[6] = _mm256_sub_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][0][3]));
    temp_1[7] = _mm256_sub_pd(temp_1[7],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][0][4]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][0][0]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][0][1]));
    temp_1[6] = _mm256_sub_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][0][2]));
    temp_1[7] = _mm256_sub_pd(temp_1[7],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][0][3]));
    temp_1[8] = _mm256_sub_pd(temp_1[8],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][0][4]));

    //(A[2][2] * A[3][3] - A[2][3] *A[3][2]) = - A[2][3] *A[3][2]
    // 0 degree
    __m256d scalr = _mm256_mul_pd(matrix[2][3][0], matrix[3][2][0]);
    //    set_1_pd ??

    // add to final result
    res_poly[0] = _mm256_sub_pd(res_poly[0], _mm256_mul_pd(temp_1[0], scalr));
    res_poly[1] = _mm256_sub_pd(res_poly[1], _mm256_mul_pd(temp_1[1], scalr));
    res_poly[2] = _mm256_sub_pd(res_poly[2], _mm256_mul_pd(temp_1[2], scalr));
    res_poly[3] = _mm256_sub_pd(res_poly[3], _mm256_mul_pd(temp_1[3], scalr));
    res_poly[4] = _mm256_sub_pd(res_poly[4], _mm256_mul_pd(temp_1[4], scalr));
    res_poly[5] = _mm256_sub_pd(res_poly[5], _mm256_mul_pd(temp_1[5], scalr));
    res_poly[6] = _mm256_sub_pd(res_poly[6], _mm256_mul_pd(temp_1[6], scalr));
    res_poly[7] = _mm256_sub_pd(res_poly[7], _mm256_mul_pd(temp_1[7], scalr));
    res_poly[8] = _mm256_sub_pd(res_poly[8], _mm256_mul_pd(temp_1[8], scalr));
  }

  // (A[0][0] * A[1][2] - A[0][2] * A[1][0]) * (A[2][1] * A[3][3] - A[2][3] *
  // A[3][1])

  {
    // (A[0][0] * A[1][2]
    __m256d temp_1[8];

    temp_1[0] = _mm256_setzero_pd();
    temp_1[1] = _mm256_setzero_pd();
    temp_1[2] = _mm256_setzero_pd();
    temp_1[3] = _mm256_setzero_pd();
    temp_1[4] = _mm256_setzero_pd();
    temp_1[5] = _mm256_setzero_pd();
    temp_1[6] = _mm256_setzero_pd();
    temp_1[7] = _mm256_setzero_pd();

    temp_1[0] = _mm256_add_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][2][0]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][2][1]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][2][2]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][2][0]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][2][1]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][2][2]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][2][0]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][2][1]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][2][2]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][2][0]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][2][1]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][2][2]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][2][0]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][2][1]));
    temp_1[6] = _mm256_add_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][2][2]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][2][0]));
    temp_1[6] = _mm256_add_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][2][1]));
    temp_1[7] = _mm256_add_pd(temp_1[7],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][2][2]));

    // A[0][2] * A[1][0]
    temp_1[0] = _mm256_sub_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][0][0]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][0][1]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][0][2]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][0][3]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][0][4]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][0][0]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][0][1]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][0][2]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][0][3]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][0][4]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][0][0]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][0][1]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][0][2]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][0][3]));
    temp_1[6] = _mm256_sub_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][0][4]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][0][0]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][0][1]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][0][2]));
    temp_1[6] = _mm256_sub_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][0][3]));
    temp_1[7] = _mm256_sub_pd(temp_1[7],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][0][4]));

    // (A[2][1] * A[3][3] - A[2][3] * A[3][1]) = -A[2][3] * A[3][1]
    // 1 degree
    __m256d temp_2[2];
    temp_2[0] = _mm256_mul_pd(matrix[2][3][0], matrix[3][1][0]);
    temp_2[1] = _mm256_mul_pd(matrix[2][3][0], matrix[3][1][1]);

    __m256d temp[9];

    temp[0] = _mm256_mul_pd(temp_1[0], temp_2[0]);
    temp[1] = _mm256_mul_pd(temp_1[1], temp_2[0]);
    temp[2] = _mm256_mul_pd(temp_1[2], temp_2[0]);
    temp[3] = _mm256_mul_pd(temp_1[3], temp_2[0]);
    temp[4] = _mm256_mul_pd(temp_1[4], temp_2[0]);
    temp[5] = _mm256_mul_pd(temp_1[5], temp_2[0]);
    temp[6] = _mm256_mul_pd(temp_1[6], temp_2[0]);
    temp[7] = _mm256_mul_pd(temp_1[7], temp_2[0]);
    temp[8] = _mm256_setzero_pd();

    temp[1] = _mm256_add_pd(temp[1], _mm256_mul_pd(temp_1[0], temp_2[1]));
    temp[2] = _mm256_add_pd(temp[2], _mm256_mul_pd(temp_1[1], temp_2[1]));
    temp[3] = _mm256_add_pd(temp[3], _mm256_mul_pd(temp_1[2], temp_2[1]));
    temp[4] = _mm256_add_pd(temp[4], _mm256_mul_pd(temp_1[3], temp_2[1]));
    temp[5] = _mm256_add_pd(temp[5], _mm256_mul_pd(temp_1[4], temp_2[1]));
    temp[6] = _mm256_add_pd(temp[6], _mm256_mul_pd(temp_1[5], temp_2[1]));
    temp[7] = _mm256_add_pd(temp[7], _mm256_mul_pd(temp_1[6], temp_2[1]));
    temp[8] = _mm256_add_pd(temp[8], _mm256_mul_pd(temp_1[7], temp_2[1]));

    // add to final result
    res_poly[0] = _mm256_add_pd(res_poly[0], temp[0]);
    res_poly[1] = _mm256_add_pd(res_poly[1], temp[1]);
    res_poly[2] = _mm256_add_pd(res_poly[2], temp[2]);
    res_poly[3] = _mm256_add_pd(res_poly[3], temp[3]);
    res_poly[4] = _mm256_add_pd(res_poly[4], temp[4]);
    res_poly[5] = _mm256_add_pd(res_poly[5], temp[5]);
    res_poly[6] = _mm256_add_pd(res_poly[6], temp[6]);
    res_poly[7] = _mm256_add_pd(res_poly[7], temp[7]);
    res_poly[8] = _mm256_add_pd(res_poly[8], temp[8]);
  }

  //(A[0][0] * A[1][3] - A[0][3] * A[1][0]) * (A[2][1] * A[3][2] - A[2][2] *
  // A[3][1])

  {
    // A[0][0] * A[1][3]
    __m256d temp_1[7];

    temp_1[0] = _mm256_setzero_pd();
    temp_1[1] = _mm256_setzero_pd();
    temp_1[2] = _mm256_setzero_pd();
    temp_1[3] = _mm256_setzero_pd();
    temp_1[4] = _mm256_setzero_pd();
    temp_1[5] = _mm256_setzero_pd();
    temp_1[6] = _mm256_setzero_pd();

    temp_1[0] = _mm256_add_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][3][0]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][0][0], matrix[1][3][1]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][3][0]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][0][1], matrix[1][3][1]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][3][0]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][2], matrix[1][3][1]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][3][0]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][3], matrix[1][3][1]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][3][0]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][4], matrix[1][3][1]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][3][0]));
    temp_1[6] = _mm256_add_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][0][5], matrix[1][3][1]));

    // A[0][3] * A[1][0]

    temp_1[0] = _mm256_sub_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][0][0]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][0][1]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][0][2]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][0][3]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][0][4]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][0][0]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][0][1]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][0][2]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][0][3]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][0][4]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][0][0]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][0][1]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][0][2]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][0][3]));
    temp_1[6] = _mm256_sub_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][0][4]));

    // A[2][1] * A[3][2]

    __m256d temp_2[3];

    temp_2[0] = _mm256_mul_pd(matrix[2][1][0], matrix[3][2][0]);
    temp_2[1] = _mm256_mul_pd(matrix[2][1][1], matrix[3][2][0]);
    temp_2[2] = _mm256_mul_pd(matrix[2][1][2], matrix[3][2][0]);

    // A[2][2] * A[3][1])

    temp_2[0] = _mm256_sub_pd(temp_2[0],
                              _mm256_mul_pd(matrix[2][2][0], matrix[3][1][0]));
    temp_2[1] = _mm256_sub_pd(temp_2[1],
                              _mm256_mul_pd(matrix[2][2][0], matrix[3][1][1]));
    temp_2[1] = _mm256_sub_pd(temp_2[1],
                              _mm256_mul_pd(matrix[2][2][1], matrix[3][1][0]));
    temp_2[2] = _mm256_sub_pd(temp_2[2],
                              _mm256_mul_pd(matrix[2][2][1], matrix[3][1][1]));

    // temp_1 * temp_2 and add to final result

    res_poly[0] =
        _mm256_add_pd(res_poly[0], _mm256_mul_pd(temp_1[0], temp_2[0]));
    res_poly[1] =
        _mm256_add_pd(res_poly[1], _mm256_mul_pd(temp_1[0], temp_2[1]));
    res_poly[2] =
        _mm256_add_pd(res_poly[2], _mm256_mul_pd(temp_1[0], temp_2[2]));
    res_poly[1] =
        _mm256_add_pd(res_poly[1], _mm256_mul_pd(temp_1[1], temp_2[0]));
    res_poly[2] =
        _mm256_add_pd(res_poly[2], _mm256_mul_pd(temp_1[1], temp_2[1]));
    res_poly[3] =
        _mm256_add_pd(res_poly[3], _mm256_mul_pd(temp_1[1], temp_2[2]));
    res_poly[2] =
        _mm256_add_pd(res_poly[2], _mm256_mul_pd(temp_1[2], temp_2[0]));
    res_poly[3] =
        _mm256_add_pd(res_poly[3], _mm256_mul_pd(temp_1[2], temp_2[1]));
    res_poly[4] =
        _mm256_add_pd(res_poly[4], _mm256_mul_pd(temp_1[2], temp_2[2]));
    res_poly[3] =
        _mm256_add_pd(res_poly[3], _mm256_mul_pd(temp_1[3], temp_2[0]));
    res_poly[4] =
        _mm256_add_pd(res_poly[4], _mm256_mul_pd(temp_1[3], temp_2[1]));
    res_poly[5] =
        _mm256_add_pd(res_poly[5], _mm256_mul_pd(temp_1[3], temp_2[2]));
    res_poly[4] =
        _mm256_add_pd(res_poly[4], _mm256_mul_pd(temp_1[4], temp_2[0]));
    res_poly[5] =
        _mm256_add_pd(res_poly[5], _mm256_mul_pd(temp_1[4], temp_2[1]));
    res_poly[6] =
        _mm256_add_pd(res_poly[6], _mm256_mul_pd(temp_1[4], temp_2[2]));
    res_poly[5] =
        _mm256_add_pd(res_poly[5], _mm256_mul_pd(temp_1[5], temp_2[0]));
    res_poly[6] =
        _mm256_add_pd(res_poly[6], _mm256_mul_pd(temp_1[5], temp_2[1]));
    res_poly[7] =
        _mm256_add_pd(res_poly[7], _mm256_mul_pd(temp_1[5], temp_2[2]));
    res_poly[6] =
        _mm256_add_pd(res_poly[6], _mm256_mul_pd(temp_1[6], temp_2[0]));
    res_poly[7] =
        _mm256_add_pd(res_poly[7], _mm256_mul_pd(temp_1[6], temp_2[1]));
    res_poly[8] =
        _mm256_add_pd(res_poly[8], _mm256_mul_pd(temp_1[6], temp_2[2]));
  }

  // (A[0][1] * A[1][2] - A[0][2] * A[1][1]) * (A[2][0] * A[3][3] - A[2][3] *
  // A[3][0])
  {
    // A[0][1] * A[1][2]
    __m256d temp_1[7];
    temp_1[0] = _mm256_setzero_pd();
    temp_1[1] = _mm256_setzero_pd();
    temp_1[2] = _mm256_setzero_pd();
    temp_1[3] = _mm256_setzero_pd();
    temp_1[4] = _mm256_setzero_pd();
    temp_1[5] = _mm256_setzero_pd();
    temp_1[6] = _mm256_setzero_pd();

    temp_1[0] = _mm256_add_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][2][0]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][2][1]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][2][2]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][2][0]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][2][1]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][2][2]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][2][0]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][2][1]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][2][2]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][2][0]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][2][1]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][2][2]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][2][0]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][2][1]));
    temp_1[6] = _mm256_add_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][2][2]));

    // A[0][2] * A[1][1]
    temp_1[0] = _mm256_sub_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][1][0]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][1][1]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][1][2]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][1][3]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][1][0]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][1][1]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][1][2]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][1][3]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][1][0]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][1][1]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][1][2]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][1][3]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][1][0]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][1][1]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][1][2]));
    temp_1[6] = _mm256_sub_pd(temp_1[6],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][1][3]));

    // A[2][0] * A[3][3] - A[2][3] *A[3][0] = -A[2][3] *A[3][0]
    // 2 degree
    __m256d temp_2[3];
    temp_2[0] = _mm256_mul_pd(matrix[2][3][0], matrix[3][0][0]);
    temp_2[1] = _mm256_mul_pd(matrix[2][3][0], matrix[3][0][1]);
    temp_2[2] = _mm256_mul_pd(matrix[2][3][0], matrix[3][0][2]);

    // temp_1 multiply temp_2 and add to final result
    res_poly[0] =
        _mm256_sub_pd(res_poly[0], _mm256_mul_pd(temp_1[0], temp_2[0]));
    res_poly[1] =
        _mm256_sub_pd(res_poly[1], _mm256_mul_pd(temp_1[0], temp_2[1]));
    res_poly[2] =
        _mm256_sub_pd(res_poly[2], _mm256_mul_pd(temp_1[0], temp_2[2]));
    res_poly[1] =
        _mm256_sub_pd(res_poly[1], _mm256_mul_pd(temp_1[1], temp_2[0]));
    res_poly[2] =
        _mm256_sub_pd(res_poly[2], _mm256_mul_pd(temp_1[1], temp_2[1]));
    res_poly[3] =
        _mm256_sub_pd(res_poly[3], _mm256_mul_pd(temp_1[1], temp_2[2]));
    res_poly[2] =
        _mm256_sub_pd(res_poly[2], _mm256_mul_pd(temp_1[2], temp_2[0]));
    res_poly[3] =
        _mm256_sub_pd(res_poly[3], _mm256_mul_pd(temp_1[2], temp_2[1]));
    res_poly[4] =
        _mm256_sub_pd(res_poly[4], _mm256_mul_pd(temp_1[2], temp_2[2]));
    res_poly[3] =
        _mm256_sub_pd(res_poly[3], _mm256_mul_pd(temp_1[3], temp_2[0]));
    res_poly[4] =
        _mm256_sub_pd(res_poly[4], _mm256_mul_pd(temp_1[3], temp_2[1]));
    res_poly[5] =
        _mm256_sub_pd(res_poly[5], _mm256_mul_pd(temp_1[3], temp_2[2]));
    res_poly[4] =
        _mm256_sub_pd(res_poly[4], _mm256_mul_pd(temp_1[4], temp_2[0]));
    res_poly[5] =
        _mm256_sub_pd(res_poly[5], _mm256_mul_pd(temp_1[4], temp_2[1]));
    res_poly[6] =
        _mm256_sub_pd(res_poly[6], _mm256_mul_pd(temp_1[4], temp_2[2]));
    res_poly[5] =
        _mm256_sub_pd(res_poly[5], _mm256_mul_pd(temp_1[5], temp_2[0]));
    res_poly[6] =
        _mm256_sub_pd(res_poly[6], _mm256_mul_pd(temp_1[5], temp_2[1]));
    res_poly[7] =
        _mm256_sub_pd(res_poly[7], _mm256_mul_pd(temp_1[5], temp_2[2]));
    res_poly[6] =
        _mm256_sub_pd(res_poly[6], _mm256_mul_pd(temp_1[6], temp_2[0]));
    res_poly[7] =
        _mm256_sub_pd(res_poly[7], _mm256_mul_pd(temp_1[6], temp_2[1]));
    res_poly[8] =
        _mm256_sub_pd(res_poly[8], _mm256_mul_pd(temp_1[6], temp_2[2]));
  }

  //(A[0][1] * A[1][3] - A[0][3] * A[1][1]) * (A[2][0] * A[3][2] - A[2][2] *
  // A[3][0])

  {
    // A[0][1] * A[1][3]
    __m256d temp_1[6];
    temp_1[0] = _mm256_setzero_pd();
    temp_1[1] = _mm256_setzero_pd();
    temp_1[2] = _mm256_setzero_pd();
    temp_1[3] = _mm256_setzero_pd();
    temp_1[4] = _mm256_setzero_pd();
    temp_1[5] = _mm256_setzero_pd();

    temp_1[0] = _mm256_add_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][3][0]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][1][0], matrix[1][3][1]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][3][0]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][1][1], matrix[1][3][1]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][3][0]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][2], matrix[1][3][1]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][3][0]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][3], matrix[1][3][1]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][3][0]));
    temp_1[5] = _mm256_add_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][1][4], matrix[1][3][1]));

    // A[0][3] * A[1][1]
    temp_1[0] = _mm256_sub_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][1][0]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][1][1]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][1][2]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][1][3]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][1][0]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][1][1]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][1][2]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][1][3]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][1][0]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][1][1]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][1][2]));
    temp_1[5] = _mm256_sub_pd(temp_1[5],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][1][3]));

    // A[2][0] * A[3][2]

    __m256d temp_2[4];
    temp_2[0] = _mm256_mul_pd(matrix[2][0][0], matrix[3][2][0]);
    temp_2[1] = _mm256_mul_pd(matrix[2][0][1], matrix[3][2][0]);
    temp_2[2] = _mm256_mul_pd(matrix[2][0][2], matrix[3][2][0]);
    temp_2[3] = _mm256_mul_pd(matrix[2][0][3], matrix[3][2][0]);

    // A[2][2] * A[3][0])

    temp_2[0] = _mm256_sub_pd(temp_2[0],
                              _mm256_mul_pd(matrix[2][2][0], matrix[3][0][0]));
    temp_2[1] = _mm256_sub_pd(temp_2[1],
                              _mm256_mul_pd(matrix[2][2][0], matrix[3][0][1]));
    temp_2[2] = _mm256_sub_pd(temp_2[2],
                              _mm256_mul_pd(matrix[2][2][0], matrix[3][0][2]));
    temp_2[1] = _mm256_sub_pd(temp_2[1],
                              _mm256_mul_pd(matrix[2][2][1], matrix[3][0][0]));
    temp_2[2] = _mm256_sub_pd(temp_2[2],
                              _mm256_mul_pd(matrix[2][2][1], matrix[3][0][1]));
    temp_2[3] = _mm256_sub_pd(temp_2[3],
                              _mm256_mul_pd(matrix[2][2][1], matrix[3][0][2]));

    // temp_1 multiply temp_2

    res_poly[0] =
        _mm256_sub_pd(res_poly[0], _mm256_mul_pd(temp_1[0], temp_2[0]));
    res_poly[1] =
        _mm256_sub_pd(res_poly[1], _mm256_mul_pd(temp_1[0], temp_2[1]));
    res_poly[2] =
        _mm256_sub_pd(res_poly[2], _mm256_mul_pd(temp_1[0], temp_2[2]));
    res_poly[3] =
        _mm256_sub_pd(res_poly[3], _mm256_mul_pd(temp_1[0], temp_2[3]));
    res_poly[1] =
        _mm256_sub_pd(res_poly[1], _mm256_mul_pd(temp_1[1], temp_2[0]));
    res_poly[2] =
        _mm256_sub_pd(res_poly[2], _mm256_mul_pd(temp_1[1], temp_2[1]));
    res_poly[3] =
        _mm256_sub_pd(res_poly[3], _mm256_mul_pd(temp_1[1], temp_2[2]));
    res_poly[4] =
        _mm256_sub_pd(res_poly[4], _mm256_mul_pd(temp_1[1], temp_2[3]));
    res_poly[2] =
        _mm256_sub_pd(res_poly[2], _mm256_mul_pd(temp_1[2], temp_2[0]));
    res_poly[3] =
        _mm256_sub_pd(res_poly[3], _mm256_mul_pd(temp_1[2], temp_2[1]));
    res_poly[4] =
        _mm256_sub_pd(res_poly[4], _mm256_mul_pd(temp_1[2], temp_2[2]));
    res_poly[5] =
        _mm256_sub_pd(res_poly[5], _mm256_mul_pd(temp_1[2], temp_2[3]));
    res_poly[3] =
        _mm256_sub_pd(res_poly[3], _mm256_mul_pd(temp_1[3], temp_2[0]));
    res_poly[4] =
        _mm256_sub_pd(res_poly[4], _mm256_mul_pd(temp_1[3], temp_2[1]));
    res_poly[5] =
        _mm256_sub_pd(res_poly[5], _mm256_mul_pd(temp_1[3], temp_2[2]));
    res_poly[6] =
        _mm256_sub_pd(res_poly[6], _mm256_mul_pd(temp_1[3], temp_2[3]));
    res_poly[4] =
        _mm256_sub_pd(res_poly[4], _mm256_mul_pd(temp_1[4], temp_2[0]));
    res_poly[5] =
        _mm256_sub_pd(res_poly[5], _mm256_mul_pd(temp_1[4], temp_2[1]));
    res_poly[6] =
        _mm256_sub_pd(res_poly[6], _mm256_mul_pd(temp_1[4], temp_2[2]));
    res_poly[7] =
        _mm256_sub_pd(res_poly[7], _mm256_mul_pd(temp_1[4], temp_2[3]));
    res_poly[5] =
        _mm256_sub_pd(res_poly[5], _mm256_mul_pd(temp_1[5], temp_2[0]));
    res_poly[6] =
        _mm256_sub_pd(res_poly[6], _mm256_mul_pd(temp_1[5], temp_2[1]));
    res_poly[7] =
        _mm256_sub_pd(res_poly[7], _mm256_mul_pd(temp_1[5], temp_2[2]));
    res_poly[8] =
        _mm256_sub_pd(res_poly[8], _mm256_mul_pd(temp_1[5], temp_2[3]));
  }

  // (A[0][2] * A[1][3] - A[0][3] * A[1][2]) * (A[2][0] * A[3][1] - A[2][1] *
  // A[3][0]);
  {
    // A[0][2] * A[1][3]
    __m256d temp_1[5];
    temp_1[0] = _mm256_setzero_pd();
    temp_1[1] = _mm256_setzero_pd();
    temp_1[2] = _mm256_setzero_pd();
    temp_1[3] = _mm256_setzero_pd();
    temp_1[4] = _mm256_setzero_pd();

    temp_1[0] = _mm256_add_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][3][0]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][2][0], matrix[1][3][1]));
    temp_1[1] = _mm256_add_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][3][0]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][2][1], matrix[1][3][1]));
    temp_1[2] = _mm256_add_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][3][0]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][2], matrix[1][3][1]));
    temp_1[3] = _mm256_add_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][3][0]));
    temp_1[4] = _mm256_add_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][2][3], matrix[1][3][1]));
    // A[0][3] * A[1][2]
    temp_1[0] = _mm256_sub_pd(temp_1[0],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][2][0]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][2][1]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][0], matrix[1][2][2]));
    temp_1[1] = _mm256_sub_pd(temp_1[1],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][2][0]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][2][1]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][3][1], matrix[1][2][2]));
    temp_1[2] = _mm256_sub_pd(temp_1[2],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][2][0]));
    temp_1[3] = _mm256_sub_pd(temp_1[3],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][2][1]));
    temp_1[4] = _mm256_sub_pd(temp_1[4],
                              _mm256_mul_pd(matrix[0][3][2], matrix[1][2][2]));

    // A[2][0] * A[3][1]
    __m256d temp_2[5];
    temp_2[0] = _mm256_setzero_pd();
    temp_2[1] = _mm256_setzero_pd();
    temp_2[2] = _mm256_setzero_pd();
    temp_2[3] = _mm256_setzero_pd();
    temp_2[4] = _mm256_setzero_pd();

    temp_2[0] = _mm256_add_pd(temp_2[0],
                              _mm256_mul_pd(matrix[2][0][0], matrix[3][1][0]));
    temp_2[1] = _mm256_add_pd(temp_2[1],
                              _mm256_mul_pd(matrix[2][0][0], matrix[3][1][1]));
    temp_2[1] = _mm256_add_pd(temp_2[1],
                              _mm256_mul_pd(matrix[2][0][1], matrix[3][1][0]));
    temp_2[2] = _mm256_add_pd(temp_2[2],
                              _mm256_mul_pd(matrix[2][0][1], matrix[3][1][1]));
    temp_2[2] = _mm256_add_pd(temp_2[2],
                              _mm256_mul_pd(matrix[2][0][2], matrix[3][1][0]));
    temp_2[3] = _mm256_add_pd(temp_2[3],
                              _mm256_mul_pd(matrix[2][0][2], matrix[3][1][1]));
    temp_2[3] = _mm256_add_pd(temp_2[3],
                              _mm256_mul_pd(matrix[2][0][3], matrix[3][1][0]));
    temp_2[4] = _mm256_add_pd(temp_2[4],
                              _mm256_mul_pd(matrix[2][0][3], matrix[3][1][1]));

    // A[2][1] *A[3][0];
    temp_2[0] = _mm256_sub_pd(temp_2[0],
                              _mm256_mul_pd(matrix[2][1][0], matrix[3][0][0]));
    temp_2[1] = _mm256_sub_pd(temp_2[1],
                              _mm256_mul_pd(matrix[2][1][0], matrix[3][0][1]));
    temp_2[2] = _mm256_sub_pd(temp_2[2],
                              _mm256_mul_pd(matrix[2][1][0], matrix[3][0][2]));
    temp_2[1] = _mm256_sub_pd(temp_2[1],
                              _mm256_mul_pd(matrix[2][1][1], matrix[3][0][0]));
    temp_2[2] = _mm256_sub_pd(temp_2[2],
                              _mm256_mul_pd(matrix[2][1][1], matrix[3][0][1]));
    temp_2[3] = _mm256_sub_pd(temp_2[3],
                              _mm256_mul_pd(matrix[2][1][1], matrix[3][0][2]));
    temp_2[2] = _mm256_sub_pd(temp_2[2],
                              _mm256_mul_pd(matrix[2][1][2], matrix[3][0][0]));
    temp_2[3] = _mm256_sub_pd(temp_2[3],
                              _mm256_mul_pd(matrix[2][1][2], matrix[3][0][1]));
    temp_2[4] = _mm256_sub_pd(temp_2[4],
                              _mm256_mul_pd(matrix[2][1][2], matrix[3][0][2]));

    // multiple temp_1 and temp_2 add to result
    res_poly[0] =
        _mm256_add_pd(res_poly[0], _mm256_mul_pd(temp_1[0], temp_2[0]));
    res_poly[1] =
        _mm256_add_pd(res_poly[1], _mm256_mul_pd(temp_1[0], temp_2[1]));
    res_poly[2] =
        _mm256_add_pd(res_poly[2], _mm256_mul_pd(temp_1[0], temp_2[2]));
    res_poly[3] =
        _mm256_add_pd(res_poly[3], _mm256_mul_pd(temp_1[0], temp_2[3]));
    res_poly[4] =
        _mm256_add_pd(res_poly[4], _mm256_mul_pd(temp_1[0], temp_2[4]));
    res_poly[1] =
        _mm256_add_pd(res_poly[1], _mm256_mul_pd(temp_1[1], temp_2[0]));
    res_poly[2] =
        _mm256_add_pd(res_poly[2], _mm256_mul_pd(temp_1[1], temp_2[1]));
    res_poly[3] =
        _mm256_add_pd(res_poly[3], _mm256_mul_pd(temp_1[1], temp_2[2]));
    res_poly[4] =
        _mm256_add_pd(res_poly[4], _mm256_mul_pd(temp_1[1], temp_2[3]));
    res_poly[5] =
        _mm256_add_pd(res_poly[5], _mm256_mul_pd(temp_1[1], temp_2[4]));
    res_poly[2] =
        _mm256_add_pd(res_poly[2], _mm256_mul_pd(temp_1[2], temp_2[0]));
    res_poly[3] =
        _mm256_add_pd(res_poly[3], _mm256_mul_pd(temp_1[2], temp_2[1]));
    res_poly[4] =
        _mm256_add_pd(res_poly[4], _mm256_mul_pd(temp_1[2], temp_2[2]));
    res_poly[5] =
        _mm256_add_pd(res_poly[5], _mm256_mul_pd(temp_1[2], temp_2[3]));
    res_poly[6] =
        _mm256_add_pd(res_poly[6], _mm256_mul_pd(temp_1[2], temp_2[4]));
    res_poly[3] =
        _mm256_add_pd(res_poly[3], _mm256_mul_pd(temp_1[3], temp_2[0]));
    res_poly[4] =
        _mm256_add_pd(res_poly[4], _mm256_mul_pd(temp_1[3], temp_2[1]));
    res_poly[5] =
        _mm256_add_pd(res_poly[5], _mm256_mul_pd(temp_1[3], temp_2[2]));
    res_poly[6] =
        _mm256_add_pd(res_poly[6], _mm256_mul_pd(temp_1[3], temp_2[3]));
    res_poly[7] =
        _mm256_add_pd(res_poly[7], _mm256_mul_pd(temp_1[3], temp_2[4]));
    res_poly[4] =
        _mm256_add_pd(res_poly[4], _mm256_mul_pd(temp_1[4], temp_2[0]));
    res_poly[5] =
        _mm256_add_pd(res_poly[5], _mm256_mul_pd(temp_1[4], temp_2[1]));
    res_poly[6] =
        _mm256_add_pd(res_poly[6], _mm256_mul_pd(temp_1[4], temp_2[2]));
    res_poly[7] =
        _mm256_add_pd(res_poly[7], _mm256_mul_pd(temp_1[4], temp_2[3]));
    res_poly[8] =
        _mm256_add_pd(res_poly[8], _mm256_mul_pd(temp_1[4], temp_2[4]));
  }

  // packed res_poly to Resultant::UnivariatePolynomial
std::vector<
      Resultant::UnivariatePolynomial>
      result;


  double unpacked_poly[9][4];
  _mm256_store_pd(&unpacked_poly[0][0], res_poly[0]);
  _mm256_store_pd(&unpacked_poly[1][0], res_poly[1]);
  _mm256_store_pd(&unpacked_poly[2][0], res_poly[2]);
  _mm256_store_pd(&unpacked_poly[3][0], res_poly[3]);
  _mm256_store_pd(&unpacked_poly[4][0], res_poly[4]);
  _mm256_store_pd(&unpacked_poly[5][0], res_poly[5]);
  _mm256_store_pd(&unpacked_poly[6][0], res_poly[6]);
  _mm256_store_pd(&unpacked_poly[7][0], res_poly[7]);
  _mm256_store_pd(&unpacked_poly[8][0], res_poly[8]);

  double poly_0[9] = {
      unpacked_poly[0][0], unpacked_poly[1][0], unpacked_poly[2][0],
      unpacked_poly[3][0], unpacked_poly[4][0], unpacked_poly[5][0],
      unpacked_poly[6][0], unpacked_poly[7][0], unpacked_poly[8][0]};
  double poly_1[9] = {
      unpacked_poly[0][1], unpacked_poly[1][1], unpacked_poly[2][1],
      unpacked_poly[3][1], unpacked_poly[4][1], unpacked_poly[5][1],
      unpacked_poly[6][1], unpacked_poly[7][1], unpacked_poly[8][1]};
  double poly_2[9] = {
      unpacked_poly[0][2], unpacked_poly[1][2], unpacked_poly[2][2],
      unpacked_poly[3][2], unpacked_poly[4][2], unpacked_poly[5][2],
      unpacked_poly[6][2], unpacked_poly[7][2], unpacked_poly[8][2]};
  double poly_3[9] = {
      unpacked_poly[0][3], unpacked_poly[1][3], unpacked_poly[2][3],
      unpacked_poly[3][3], unpacked_poly[4][3], unpacked_poly[5][3],
      unpacked_poly[6][3], unpacked_poly[7][3], unpacked_poly[8][3]};

  result.emplace_back(Resultant::UnivariatePolynomial(9, poly_0));
  result.emplace_back(Resultant::UnivariatePolynomial(9, poly_1));
  result.emplace_back(Resultant::UnivariatePolynomial(9, poly_2));
  result.emplace_back(Resultant::UnivariatePolynomial(9, poly_3));
  return result;
}

// clang-format on

#define OPTIMIZED_ONEBOUNCE_DET

#ifndef OPTIMIZED_ONEBOUNCE_DET

template <>
std::vector<
    Resultant::UnivariatePolynomial>
UnivariatePolyMatrix<6ul>::determinant() const {
  __m256d n_6_temp[17];
  n_6_temp[0] = _mm256_setzero_pd();
  n_6_temp[1] = _mm256_setzero_pd();
  n_6_temp[2] = _mm256_setzero_pd();
  n_6_temp[3] = _mm256_setzero_pd();
  n_6_temp[4] = _mm256_setzero_pd();
  n_6_temp[5] = _mm256_setzero_pd();
  n_6_temp[6] = _mm256_setzero_pd();
  n_6_temp[7] = _mm256_setzero_pd();
  n_6_temp[8] = _mm256_setzero_pd();
  n_6_temp[9] = _mm256_setzero_pd();
  n_6_temp[10] = _mm256_setzero_pd();
  n_6_temp[11] = _mm256_setzero_pd();
  n_6_temp[12] = _mm256_setzero_pd();
  n_6_temp[13] = _mm256_setzero_pd();
  n_6_temp[14] = _mm256_setzero_pd();
  n_6_temp[15] = _mm256_setzero_pd();
  n_6_temp[16] = _mm256_setzero_pd();
  {
    __m256d n_5_temp[17];
    n_5_temp[0] = _mm256_setzero_pd();
    n_5_temp[1] = _mm256_setzero_pd();
    n_5_temp[2] = _mm256_setzero_pd();
    n_5_temp[3] = _mm256_setzero_pd();
    n_5_temp[4] = _mm256_setzero_pd();
    n_5_temp[5] = _mm256_setzero_pd();
    n_5_temp[6] = _mm256_setzero_pd();
    n_5_temp[7] = _mm256_setzero_pd();
    n_5_temp[8] = _mm256_setzero_pd();
    n_5_temp[9] = _mm256_setzero_pd();
    n_5_temp[10] = _mm256_setzero_pd();
    n_5_temp[11] = _mm256_setzero_pd();
    n_5_temp[12] = _mm256_setzero_pd();
    n_5_temp[13] = _mm256_setzero_pd();
    n_5_temp[14] = _mm256_setzero_pd();
    n_5_temp[15] = _mm256_setzero_pd();
    n_5_temp[16] = _mm256_setzero_pd();
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
        }
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][2]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][3]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][3]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][2][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][2][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][0], n_3_temp[6]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][2][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][1], n_3_temp[6]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][2][2], n_3_temp[6]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][2][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][3], temp_3[4]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][1]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][4]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][2]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][4]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][4]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][3][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][0], n_3_temp[7]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][1], n_3_temp[7]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][2][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][0], temp_3[5]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][1], temp_3[5]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][2], temp_3[5]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][3], temp_3[5]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][1]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][4]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][0], temp_3[6]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][1], temp_3[6]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][2], temp_3[6]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][3][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][3][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][0], matrix[1][3][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][0], matrix[1][3][3]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][3][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][3][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][1], matrix[1][3][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][1], matrix[1][3][3]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][3][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][3][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][2], matrix[1][3][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][2], matrix[1][3][3]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][3][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][3][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][3], matrix[1][3][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][3], matrix[1][3][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][3][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][3][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][4], matrix[1][3][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][2][4], matrix[1][3][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][3][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][3][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][2][5], matrix[1][3][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][2][5], matrix[1][3][3]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][4]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][4]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][4]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
      }
      n_5_temp[0] = _mm256_add_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[8]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[0]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[1]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[2]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[3]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[4]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[5]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[6]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[7]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[8]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[0]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[1]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[2]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[3]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[4]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[5]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[6]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[7]));
      n_5_temp[10] = _mm256_add_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][1][2], n_4_temp[8]));
    }
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
        }
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][2]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][3]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][3]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][1][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][1][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][0], n_3_temp[6]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][1][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][1], n_3_temp[6]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][2], n_3_temp[6]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][3], n_3_temp[0]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][3], n_3_temp[1]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][3], n_3_temp[2]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][3], n_3_temp[3]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][3], n_3_temp[4]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][3], n_3_temp[5]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][1][3], n_3_temp[6]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][1][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][3], temp_3[4]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][4], temp_3[4]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][1]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][5]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][0], temp_3[7]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][1], temp_3[7]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][2]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][5]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][5]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][3][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][0], n_3_temp[8]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][1], n_3_temp[7]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][3][1], n_3_temp[8]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][1][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][0], temp_3[5]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][1], temp_3[5]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][2], temp_3[5]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][3], temp_3[5]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][4], temp_3[4]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][1][4], temp_3[5]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][1]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][5]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][0], temp_3[7]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][1], temp_3[7]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][2], temp_3[6]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][3][2], temp_3[7]));
        }
        {
          __m256d temp_1[10];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][3][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][3][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][0], matrix[1][3][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][0], matrix[1][3][3]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][3][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][3][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][1], matrix[1][3][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][1], matrix[1][3][3]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][3][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][3][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][2], matrix[1][3][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][2], matrix[1][3][3]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][3][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][3][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][3], matrix[1][3][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][3], matrix[1][3][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][3][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][3][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][4], matrix[1][3][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][4], matrix[1][3][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][3][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][3][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][5], matrix[1][3][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][5], matrix[1][3][3]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][3][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][3][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][6], matrix[1][3][2]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][1][6], matrix[1][3][3]));
          __m256d temp_2[10];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][5]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][5]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][4]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][5]));
          __m256d temp_3[10];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][4][0], n_3_temp[9]));
      }
      n_5_temp[0] = _mm256_sub_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_sub_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_sub_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_sub_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_sub_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_sub_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_sub_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_sub_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_sub_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[8]));
      n_5_temp[9] = _mm256_sub_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[9]));
      n_5_temp[1] = _mm256_sub_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[0]));
      n_5_temp[2] = _mm256_sub_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[1]));
      n_5_temp[3] = _mm256_sub_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[2]));
      n_5_temp[4] = _mm256_sub_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[3]));
      n_5_temp[5] = _mm256_sub_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[4]));
      n_5_temp[6] = _mm256_sub_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[5]));
      n_5_temp[7] = _mm256_sub_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[6]));
      n_5_temp[8] = _mm256_sub_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[7]));
      n_5_temp[9] = _mm256_sub_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[8]));
      n_5_temp[10] = _mm256_sub_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][2][1], n_4_temp[9]));
    }
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][2][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][3], temp_3[4]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][1]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][4]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][2]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][4]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][4]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][1][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][1][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][0], n_3_temp[7]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][1][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][1], n_3_temp[7]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][2], n_3_temp[6]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][1][2], n_3_temp[7]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][3], n_3_temp[0]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][3], n_3_temp[1]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][3], n_3_temp[2]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][3], n_3_temp[3]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][3], n_3_temp[4]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][3], n_3_temp[5]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][1][3], n_3_temp[6]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][1][3], n_3_temp[7]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][1][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][3], temp_3[4]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][4], temp_3[4]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][1]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][5]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][0], temp_3[7]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][1], temp_3[7]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][2]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][5]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][5]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][2][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][2][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][2][0], n_3_temp[8]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][2][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][2][1], n_3_temp[7]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][2][1], n_3_temp[8]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][2][2], n_3_temp[6]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][2][2], n_3_temp[7]));
        n_4_temp[10] = _mm256_add_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][2][2], n_3_temp[8]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][1]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][4]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][1][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][0], temp_3[6]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][1], temp_3[5]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][1], temp_3[6]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][2], temp_3[5]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][2], temp_3[6]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][3], temp_3[5]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][1][3], temp_3[6]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][4], temp_3[4]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][1][4], temp_3[5]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][1][4], temp_3[6]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][1]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][5]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][2][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][0], temp_3[7]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][1], temp_3[7]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][2], temp_3[6]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][2][2], temp_3[7]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][3], temp_3[0]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][3], temp_3[1]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][3], temp_3[2]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][3], temp_3[3]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][3], temp_3[4]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][3], temp_3[5]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][2][3], temp_3[6]));
          n_3_temp[10] = _mm256_sub_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][2][3], temp_3[7]));
        }
        {
          __m256d temp_1[11];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[10] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][2][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][2][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][0], matrix[1][2][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][0], matrix[1][2][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][0], matrix[1][2][4]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][2][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][2][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][1], matrix[1][2][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][1], matrix[1][2][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][1], matrix[1][2][4]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][2][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][2][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][2], matrix[1][2][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][2], matrix[1][2][3]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][2], matrix[1][2][4]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][2][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][2][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][3], matrix[1][2][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][3], matrix[1][2][3]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][3], matrix[1][2][4]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][2][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][2][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][4], matrix[1][2][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][4], matrix[1][2][3]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][4], matrix[1][2][4]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][2][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][2][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][5], matrix[1][2][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][5], matrix[1][2][3]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][1][5], matrix[1][2][4]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][2][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][2][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][6], matrix[1][2][2]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][1][6], matrix[1][2][3]));
          temp_1[10] = _mm256_add_pd(
              temp_1[10], _mm256_mul_pd(matrix[0][1][6], matrix[1][2][4]));
          __m256d temp_2[11];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[10] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][2][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][2][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][2][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][2], matrix[1][1][5]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][1][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][1][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][3], matrix[1][1][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][3], matrix[1][1][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][3], matrix[1][1][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][2][3], matrix[1][1][5]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][1][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][1][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][4], matrix[1][1][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][4], matrix[1][1][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][2][4], matrix[1][1][4]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][2][4], matrix[1][1][5]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][1][0]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][1][1]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][5], matrix[1][1][2]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][2][5], matrix[1][1][3]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][2][5], matrix[1][1][4]));
          temp_2[10] = _mm256_add_pd(
              temp_2[10], _mm256_mul_pd(matrix[0][2][5], matrix[1][1][5]));
          __m256d temp_3[11];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[10] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[10] = _mm256_add_pd(temp_3[10], temp_1[10]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          temp_3[10] = _mm256_sub_pd(temp_3[10], temp_2[10]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][5][0], temp_3[10]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][4][0], n_3_temp[9]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][4][0], n_3_temp[10]));
      }
      n_5_temp[0] = _mm256_add_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[8]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[9]));
      n_5_temp[10] = _mm256_add_pd(
          n_5_temp[10], _mm256_mul_pd(matrix[4][3][0], n_4_temp[10]));
    }
    n_6_temp[0] =
        _mm256_sub_pd(n_6_temp[0], _mm256_mul_pd(matrix[5][0][0], n_5_temp[0]));
    n_6_temp[1] =
        _mm256_sub_pd(n_6_temp[1], _mm256_mul_pd(matrix[5][0][0], n_5_temp[1]));
    n_6_temp[2] =
        _mm256_sub_pd(n_6_temp[2], _mm256_mul_pd(matrix[5][0][0], n_5_temp[2]));
    n_6_temp[3] =
        _mm256_sub_pd(n_6_temp[3], _mm256_mul_pd(matrix[5][0][0], n_5_temp[3]));
    n_6_temp[4] =
        _mm256_sub_pd(n_6_temp[4], _mm256_mul_pd(matrix[5][0][0], n_5_temp[4]));
    n_6_temp[5] =
        _mm256_sub_pd(n_6_temp[5], _mm256_mul_pd(matrix[5][0][0], n_5_temp[5]));
    n_6_temp[6] =
        _mm256_sub_pd(n_6_temp[6], _mm256_mul_pd(matrix[5][0][0], n_5_temp[6]));
    n_6_temp[7] =
        _mm256_sub_pd(n_6_temp[7], _mm256_mul_pd(matrix[5][0][0], n_5_temp[7]));
    n_6_temp[8] =
        _mm256_sub_pd(n_6_temp[8], _mm256_mul_pd(matrix[5][0][0], n_5_temp[8]));
    n_6_temp[9] =
        _mm256_sub_pd(n_6_temp[9], _mm256_mul_pd(matrix[5][0][0], n_5_temp[9]));
    n_6_temp[10] = _mm256_sub_pd(n_6_temp[10],
                                 _mm256_mul_pd(matrix[5][0][0], n_5_temp[10]));
    n_6_temp[1] =
        _mm256_sub_pd(n_6_temp[1], _mm256_mul_pd(matrix[5][0][1], n_5_temp[0]));
    n_6_temp[2] =
        _mm256_sub_pd(n_6_temp[2], _mm256_mul_pd(matrix[5][0][1], n_5_temp[1]));
    n_6_temp[3] =
        _mm256_sub_pd(n_6_temp[3], _mm256_mul_pd(matrix[5][0][1], n_5_temp[2]));
    n_6_temp[4] =
        _mm256_sub_pd(n_6_temp[4], _mm256_mul_pd(matrix[5][0][1], n_5_temp[3]));
    n_6_temp[5] =
        _mm256_sub_pd(n_6_temp[5], _mm256_mul_pd(matrix[5][0][1], n_5_temp[4]));
    n_6_temp[6] =
        _mm256_sub_pd(n_6_temp[6], _mm256_mul_pd(matrix[5][0][1], n_5_temp[5]));
    n_6_temp[7] =
        _mm256_sub_pd(n_6_temp[7], _mm256_mul_pd(matrix[5][0][1], n_5_temp[6]));
    n_6_temp[8] =
        _mm256_sub_pd(n_6_temp[8], _mm256_mul_pd(matrix[5][0][1], n_5_temp[7]));
    n_6_temp[9] =
        _mm256_sub_pd(n_6_temp[9], _mm256_mul_pd(matrix[5][0][1], n_5_temp[8]));
    n_6_temp[10] = _mm256_sub_pd(n_6_temp[10],
                                 _mm256_mul_pd(matrix[5][0][1], n_5_temp[9]));
    n_6_temp[11] = _mm256_sub_pd(n_6_temp[11],
                                 _mm256_mul_pd(matrix[5][0][1], n_5_temp[10]));
    n_6_temp[2] =
        _mm256_sub_pd(n_6_temp[2], _mm256_mul_pd(matrix[5][0][2], n_5_temp[0]));
    n_6_temp[3] =
        _mm256_sub_pd(n_6_temp[3], _mm256_mul_pd(matrix[5][0][2], n_5_temp[1]));
    n_6_temp[4] =
        _mm256_sub_pd(n_6_temp[4], _mm256_mul_pd(matrix[5][0][2], n_5_temp[2]));
    n_6_temp[5] =
        _mm256_sub_pd(n_6_temp[5], _mm256_mul_pd(matrix[5][0][2], n_5_temp[3]));
    n_6_temp[6] =
        _mm256_sub_pd(n_6_temp[6], _mm256_mul_pd(matrix[5][0][2], n_5_temp[4]));
    n_6_temp[7] =
        _mm256_sub_pd(n_6_temp[7], _mm256_mul_pd(matrix[5][0][2], n_5_temp[5]));
    n_6_temp[8] =
        _mm256_sub_pd(n_6_temp[8], _mm256_mul_pd(matrix[5][0][2], n_5_temp[6]));
    n_6_temp[9] =
        _mm256_sub_pd(n_6_temp[9], _mm256_mul_pd(matrix[5][0][2], n_5_temp[7]));
    n_6_temp[10] = _mm256_sub_pd(n_6_temp[10],
                                 _mm256_mul_pd(matrix[5][0][2], n_5_temp[8]));
    n_6_temp[11] = _mm256_sub_pd(n_6_temp[11],
                                 _mm256_mul_pd(matrix[5][0][2], n_5_temp[9]));
    n_6_temp[12] = _mm256_sub_pd(n_6_temp[12],
                                 _mm256_mul_pd(matrix[5][0][2], n_5_temp[10]));
  }
  {
    __m256d n_5_temp[17];
    n_5_temp[0] = _mm256_setzero_pd();
    n_5_temp[1] = _mm256_setzero_pd();
    n_5_temp[2] = _mm256_setzero_pd();
    n_5_temp[3] = _mm256_setzero_pd();
    n_5_temp[4] = _mm256_setzero_pd();
    n_5_temp[5] = _mm256_setzero_pd();
    n_5_temp[6] = _mm256_setzero_pd();
    n_5_temp[7] = _mm256_setzero_pd();
    n_5_temp[8] = _mm256_setzero_pd();
    n_5_temp[9] = _mm256_setzero_pd();
    n_5_temp[10] = _mm256_setzero_pd();
    n_5_temp[11] = _mm256_setzero_pd();
    n_5_temp[12] = _mm256_setzero_pd();
    n_5_temp[13] = _mm256_setzero_pd();
    n_5_temp[14] = _mm256_setzero_pd();
    n_5_temp[15] = _mm256_setzero_pd();
    n_5_temp[16] = _mm256_setzero_pd();
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
        }
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][2]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][3]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][3]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][2][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][2][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][0], n_3_temp[6]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][2][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][1], n_3_temp[6]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][2][2], n_3_temp[6]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][2][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][3], temp_3[4]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][1]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][4]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][2]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][4]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][4]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][3][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][0], n_3_temp[7]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][1], n_3_temp[7]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][2][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][0], temp_3[5]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][1], temp_3[5]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][2], temp_3[5]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][3], temp_3[5]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][1]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][4]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][0], temp_3[6]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][1], temp_3[6]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][2], temp_3[6]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][3][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][3][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][0], matrix[1][3][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][0], matrix[1][3][3]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][3][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][3][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][1], matrix[1][3][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][1], matrix[1][3][3]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][3][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][3][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][2], matrix[1][3][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][2], matrix[1][3][3]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][3][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][3][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][3], matrix[1][3][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][3], matrix[1][3][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][3][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][3][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][4], matrix[1][3][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][2][4], matrix[1][3][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][3][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][3][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][2][5], matrix[1][3][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][2][5], matrix[1][3][3]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][2], matrix[1][2][4]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][3], matrix[1][2][4]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][4], matrix[1][2][4]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
      }
      n_5_temp[0] = _mm256_add_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[8]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[0]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[1]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[2]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[3]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[4]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[5]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[6]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[7]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[8]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[0]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[1]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[2]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[3]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[4]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[5]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[6]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[7]));
      n_5_temp[10] = _mm256_add_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][0][2], n_4_temp[8]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[0]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[1]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[2]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[3]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[4]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[5]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[6]));
      n_5_temp[10] = _mm256_add_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][0][3], n_4_temp[7]));
      n_5_temp[11] = _mm256_add_pd(n_5_temp[11],
                                   _mm256_mul_pd(matrix[4][0][3], n_4_temp[8]));
    }
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
        }
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][2]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][3]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][3]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][0][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][0][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][0], n_3_temp[6]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][0][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][1], n_3_temp[6]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][2], n_3_temp[6]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][3], n_3_temp[0]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][3], n_3_temp[1]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][3], n_3_temp[2]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][3], n_3_temp[3]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][3], n_3_temp[4]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][3], n_3_temp[5]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][3], n_3_temp[6]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][4], n_3_temp[0]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][4], n_3_temp[1]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][4], n_3_temp[2]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][4], n_3_temp[3]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][4], n_3_temp[4]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][4], n_3_temp[5]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][0][4], n_3_temp[6]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][0][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][3], temp_3[4]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][4], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][5], temp_3[0]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][5], temp_3[1]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][5], temp_3[2]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][5], temp_3[3]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][5], temp_3[4]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][1]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][6]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][0], temp_3[7]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][0], temp_3[8]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][1], temp_3[7]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][4][1], temp_3[8]));
        }
        {
          __m256d temp_1[10];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][1]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][2]));
          __m256d temp_2[10];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][6]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][5]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][6]));
          __m256d temp_3[10];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][3][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][3][0], n_3_temp[9]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][1], n_3_temp[7]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][3][1], n_3_temp[8]));
        n_4_temp[10] = _mm256_add_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][3][1], n_3_temp[9]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][0][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][0], temp_3[5]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][1], temp_3[5]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][2], temp_3[5]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][3], temp_3[5]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][4], temp_3[4]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][4], temp_3[5]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][5], temp_3[0]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][5], temp_3[1]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][5], temp_3[2]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][5], temp_3[3]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][5], temp_3[4]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][0][5], temp_3[5]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][1]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][6]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][0], temp_3[7]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][0], temp_3[8]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][1], temp_3[7]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][3][1], temp_3[8]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][2], temp_3[6]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][3][2], temp_3[7]));
          n_3_temp[10] = _mm256_sub_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][3][2], temp_3[8]));
        }
        {
          __m256d temp_1[11];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[10] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][3][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][3][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][0], matrix[1][3][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][0], matrix[1][3][3]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][3][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][3][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][1], matrix[1][3][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][1], matrix[1][3][3]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][3][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][3][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][2], matrix[1][3][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][2], matrix[1][3][3]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][3][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][3][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][3], matrix[1][3][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][3], matrix[1][3][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][3][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][3][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][4], matrix[1][3][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][4], matrix[1][3][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][3][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][3][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][5], matrix[1][3][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][5], matrix[1][3][3]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][3][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][3][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][6], matrix[1][3][2]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][6], matrix[1][3][3]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][3][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][3][1]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][7], matrix[1][3][2]));
          temp_1[10] = _mm256_add_pd(
              temp_1[10], _mm256_mul_pd(matrix[0][0][7], matrix[1][3][3]));
          __m256d temp_2[11];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[10] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][6]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][5]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][6]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][4]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][5]));
          temp_2[10] = _mm256_add_pd(
              temp_2[10], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][6]));
          __m256d temp_3[11];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[10] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[10] = _mm256_add_pd(temp_3[10], temp_1[10]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          temp_3[10] = _mm256_sub_pd(temp_3[10], temp_2[10]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][5][0], temp_3[10]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][4][0], n_3_temp[9]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][4][0], n_3_temp[10]));
      }
      n_5_temp[0] = _mm256_sub_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_sub_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_sub_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_sub_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_sub_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_sub_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_sub_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_sub_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_sub_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[8]));
      n_5_temp[9] = _mm256_sub_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][2][0], n_4_temp[9]));
      n_5_temp[10] = _mm256_sub_pd(
          n_5_temp[10], _mm256_mul_pd(matrix[4][2][0], n_4_temp[10]));
      n_5_temp[1] = _mm256_sub_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[0]));
      n_5_temp[2] = _mm256_sub_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[1]));
      n_5_temp[3] = _mm256_sub_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[2]));
      n_5_temp[4] = _mm256_sub_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[3]));
      n_5_temp[5] = _mm256_sub_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[4]));
      n_5_temp[6] = _mm256_sub_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[5]));
      n_5_temp[7] = _mm256_sub_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[6]));
      n_5_temp[8] = _mm256_sub_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[7]));
      n_5_temp[9] = _mm256_sub_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][2][1], n_4_temp[8]));
      n_5_temp[10] = _mm256_sub_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][2][1], n_4_temp[9]));
      n_5_temp[11] = _mm256_sub_pd(
          n_5_temp[11], _mm256_mul_pd(matrix[4][2][1], n_4_temp[10]));
    }
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][2][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][3], temp_3[4]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][1]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][4]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][2][5], matrix[1][4][2]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][2][4]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][2][4]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][0][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][0][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][0], n_3_temp[7]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][0][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][1], n_3_temp[7]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][2], n_3_temp[6]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][2], n_3_temp[7]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][3], n_3_temp[0]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][3], n_3_temp[1]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][3], n_3_temp[2]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][3], n_3_temp[3]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][3], n_3_temp[4]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][3], n_3_temp[5]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][3], n_3_temp[6]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][0][3], n_3_temp[7]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][4], n_3_temp[0]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][4], n_3_temp[1]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][4], n_3_temp[2]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][4], n_3_temp[3]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][4], n_3_temp[4]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][4], n_3_temp[5]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][0][4], n_3_temp[6]));
        n_4_temp[11] = _mm256_sub_pd(
            n_4_temp[11], _mm256_mul_pd(matrix[3][0][4], n_3_temp[7]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][0][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][3], temp_3[4]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][4], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][5], temp_3[0]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][5], temp_3[1]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][5], temp_3[2]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][5], temp_3[3]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][5], temp_3[4]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][1]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][6]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][0], temp_3[7]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][0], temp_3[8]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][1], temp_3[7]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][4][1], temp_3[8]));
        }
        {
          __m256d temp_1[10];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][1]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][2]));
          __m256d temp_2[10];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][6]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][5]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][6]));
          __m256d temp_3[10];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][2][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][2][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][2][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][2][0], n_3_temp[9]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][2][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][2][1], n_3_temp[7]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][2][1], n_3_temp[8]));
        n_4_temp[10] = _mm256_add_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][2][1], n_3_temp[9]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][2][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][2][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][2][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][2][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][2][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][2][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][2][2], n_3_temp[6]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][2][2], n_3_temp[7]));
        n_4_temp[10] = _mm256_add_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][2][2], n_3_temp[8]));
        n_4_temp[11] = _mm256_add_pd(
            n_4_temp[11], _mm256_mul_pd(matrix[3][2][2], n_3_temp[9]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][5][1]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][2][4]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][2][4]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][2][4]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][0][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][0], temp_3[6]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][1], temp_3[5]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][1], temp_3[6]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][2], temp_3[5]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][2], temp_3[6]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][3], temp_3[5]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][3], temp_3[6]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][4], temp_3[4]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][4], temp_3[5]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][0][4], temp_3[6]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][5], temp_3[0]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][5], temp_3[1]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][5], temp_3[2]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][5], temp_3[3]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][5], temp_3[4]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][0][5], temp_3[5]));
          n_3_temp[11] = _mm256_add_pd(
              n_3_temp[11], _mm256_mul_pd(matrix[2][0][5], temp_3[6]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][1]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][6]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][2][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][0], temp_3[7]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][0], temp_3[8]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][2][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][1], temp_3[7]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][2][1], temp_3[8]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][2][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][2], temp_3[6]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][2][2], temp_3[7]));
          n_3_temp[10] = _mm256_sub_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][2][2], temp_3[8]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][2][3], temp_3[0]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][2][3], temp_3[1]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][2][3], temp_3[2]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][2][3], temp_3[3]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][2][3], temp_3[4]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][2][3], temp_3[5]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][2][3], temp_3[6]));
          n_3_temp[10] = _mm256_sub_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][2][3], temp_3[7]));
          n_3_temp[11] = _mm256_sub_pd(
              n_3_temp[11], _mm256_mul_pd(matrix[2][2][3], temp_3[8]));
        }
        {
          __m256d temp_1[12];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[10] = _mm256_setzero_pd();
          temp_1[11] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][2][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][2][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][0], matrix[1][2][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][0], matrix[1][2][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][0], matrix[1][2][4]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][2][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][2][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][1], matrix[1][2][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][1], matrix[1][2][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][1], matrix[1][2][4]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][2][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][2][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][2], matrix[1][2][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][2], matrix[1][2][3]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][2], matrix[1][2][4]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][2][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][2][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][3], matrix[1][2][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][3], matrix[1][2][3]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][3], matrix[1][2][4]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][2][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][2][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][4], matrix[1][2][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][4], matrix[1][2][3]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][4], matrix[1][2][4]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][2][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][2][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][5], matrix[1][2][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][5], matrix[1][2][3]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][5], matrix[1][2][4]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][2][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][2][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][6], matrix[1][2][2]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][6], matrix[1][2][3]));
          temp_1[10] = _mm256_add_pd(
              temp_1[10], _mm256_mul_pd(matrix[0][0][6], matrix[1][2][4]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][2][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][2][1]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][7], matrix[1][2][2]));
          temp_1[10] = _mm256_add_pd(
              temp_1[10], _mm256_mul_pd(matrix[0][0][7], matrix[1][2][3]));
          temp_1[11] = _mm256_add_pd(
              temp_1[11], _mm256_mul_pd(matrix[0][0][7], matrix[1][2][4]));
          __m256d temp_2[12];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[10] = _mm256_setzero_pd();
          temp_2[11] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][2][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][2][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][2][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][2][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][2][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][2][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][2][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][2][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][2][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][2][2], matrix[1][0][6]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][2][3], matrix[1][0][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][3], matrix[1][0][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][3], matrix[1][0][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][3], matrix[1][0][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][3], matrix[1][0][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][2][3], matrix[1][0][5]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][2][3], matrix[1][0][6]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][2][4], matrix[1][0][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][4], matrix[1][0][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][4], matrix[1][0][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][4], matrix[1][0][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][2][4], matrix[1][0][4]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][2][4], matrix[1][0][5]));
          temp_2[10] = _mm256_add_pd(
              temp_2[10], _mm256_mul_pd(matrix[0][2][4], matrix[1][0][6]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][2][5], matrix[1][0][0]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][2][5], matrix[1][0][1]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][2][5], matrix[1][0][2]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][2][5], matrix[1][0][3]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][2][5], matrix[1][0][4]));
          temp_2[10] = _mm256_add_pd(
              temp_2[10], _mm256_mul_pd(matrix[0][2][5], matrix[1][0][5]));
          temp_2[11] = _mm256_add_pd(
              temp_2[11], _mm256_mul_pd(matrix[0][2][5], matrix[1][0][6]));
          __m256d temp_3[12];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[10] = _mm256_setzero_pd();
          temp_3[11] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[10] = _mm256_add_pd(temp_3[10], temp_1[10]);
          temp_3[11] = _mm256_add_pd(temp_3[11], temp_1[11]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          temp_3[10] = _mm256_sub_pd(temp_3[10], temp_2[10]);
          temp_3[11] = _mm256_sub_pd(temp_3[11], temp_2[11]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][5][0], temp_3[10]));
          n_3_temp[11] = _mm256_add_pd(
              n_3_temp[11], _mm256_mul_pd(matrix[2][5][0], temp_3[11]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][4][0], n_3_temp[9]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][4][0], n_3_temp[10]));
        n_4_temp[11] = _mm256_sub_pd(
            n_4_temp[11], _mm256_mul_pd(matrix[3][4][0], n_3_temp[11]));
      }
      n_5_temp[0] = _mm256_add_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[8]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[9]));
      n_5_temp[10] = _mm256_add_pd(
          n_5_temp[10], _mm256_mul_pd(matrix[4][3][0], n_4_temp[10]));
      n_5_temp[11] = _mm256_add_pd(
          n_5_temp[11], _mm256_mul_pd(matrix[4][3][0], n_4_temp[11]));
    }
    n_6_temp[0] =
        _mm256_add_pd(n_6_temp[0], _mm256_mul_pd(matrix[5][1][0], n_5_temp[0]));
    n_6_temp[1] =
        _mm256_add_pd(n_6_temp[1], _mm256_mul_pd(matrix[5][1][0], n_5_temp[1]));
    n_6_temp[2] =
        _mm256_add_pd(n_6_temp[2], _mm256_mul_pd(matrix[5][1][0], n_5_temp[2]));
    n_6_temp[3] =
        _mm256_add_pd(n_6_temp[3], _mm256_mul_pd(matrix[5][1][0], n_5_temp[3]));
    n_6_temp[4] =
        _mm256_add_pd(n_6_temp[4], _mm256_mul_pd(matrix[5][1][0], n_5_temp[4]));
    n_6_temp[5] =
        _mm256_add_pd(n_6_temp[5], _mm256_mul_pd(matrix[5][1][0], n_5_temp[5]));
    n_6_temp[6] =
        _mm256_add_pd(n_6_temp[6], _mm256_mul_pd(matrix[5][1][0], n_5_temp[6]));
    n_6_temp[7] =
        _mm256_add_pd(n_6_temp[7], _mm256_mul_pd(matrix[5][1][0], n_5_temp[7]));
    n_6_temp[8] =
        _mm256_add_pd(n_6_temp[8], _mm256_mul_pd(matrix[5][1][0], n_5_temp[8]));
    n_6_temp[9] =
        _mm256_add_pd(n_6_temp[9], _mm256_mul_pd(matrix[5][1][0], n_5_temp[9]));
    n_6_temp[10] = _mm256_add_pd(n_6_temp[10],
                                 _mm256_mul_pd(matrix[5][1][0], n_5_temp[10]));
    n_6_temp[11] = _mm256_add_pd(n_6_temp[11],
                                 _mm256_mul_pd(matrix[5][1][0], n_5_temp[11]));
    n_6_temp[1] =
        _mm256_add_pd(n_6_temp[1], _mm256_mul_pd(matrix[5][1][1], n_5_temp[0]));
    n_6_temp[2] =
        _mm256_add_pd(n_6_temp[2], _mm256_mul_pd(matrix[5][1][1], n_5_temp[1]));
    n_6_temp[3] =
        _mm256_add_pd(n_6_temp[3], _mm256_mul_pd(matrix[5][1][1], n_5_temp[2]));
    n_6_temp[4] =
        _mm256_add_pd(n_6_temp[4], _mm256_mul_pd(matrix[5][1][1], n_5_temp[3]));
    n_6_temp[5] =
        _mm256_add_pd(n_6_temp[5], _mm256_mul_pd(matrix[5][1][1], n_5_temp[4]));
    n_6_temp[6] =
        _mm256_add_pd(n_6_temp[6], _mm256_mul_pd(matrix[5][1][1], n_5_temp[5]));
    n_6_temp[7] =
        _mm256_add_pd(n_6_temp[7], _mm256_mul_pd(matrix[5][1][1], n_5_temp[6]));
    n_6_temp[8] =
        _mm256_add_pd(n_6_temp[8], _mm256_mul_pd(matrix[5][1][1], n_5_temp[7]));
    n_6_temp[9] =
        _mm256_add_pd(n_6_temp[9], _mm256_mul_pd(matrix[5][1][1], n_5_temp[8]));
    n_6_temp[10] = _mm256_add_pd(n_6_temp[10],
                                 _mm256_mul_pd(matrix[5][1][1], n_5_temp[9]));
    n_6_temp[11] = _mm256_add_pd(n_6_temp[11],
                                 _mm256_mul_pd(matrix[5][1][1], n_5_temp[10]));
    n_6_temp[12] = _mm256_add_pd(n_6_temp[12],
                                 _mm256_mul_pd(matrix[5][1][1], n_5_temp[11]));
  }
  {
    __m256d n_5_temp[17];
    n_5_temp[0] = _mm256_setzero_pd();
    n_5_temp[1] = _mm256_setzero_pd();
    n_5_temp[2] = _mm256_setzero_pd();
    n_5_temp[3] = _mm256_setzero_pd();
    n_5_temp[4] = _mm256_setzero_pd();
    n_5_temp[5] = _mm256_setzero_pd();
    n_5_temp[6] = _mm256_setzero_pd();
    n_5_temp[7] = _mm256_setzero_pd();
    n_5_temp[8] = _mm256_setzero_pd();
    n_5_temp[9] = _mm256_setzero_pd();
    n_5_temp[10] = _mm256_setzero_pd();
    n_5_temp[11] = _mm256_setzero_pd();
    n_5_temp[12] = _mm256_setzero_pd();
    n_5_temp[13] = _mm256_setzero_pd();
    n_5_temp[14] = _mm256_setzero_pd();
    n_5_temp[15] = _mm256_setzero_pd();
    n_5_temp[16] = _mm256_setzero_pd();
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
        }
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][2]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][3]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][3]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][1][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][1][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][0], n_3_temp[6]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][1][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][1], n_3_temp[6]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][2], n_3_temp[6]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][3], n_3_temp[0]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][3], n_3_temp[1]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][3], n_3_temp[2]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][3], n_3_temp[3]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][3], n_3_temp[4]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][3], n_3_temp[5]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][1][3], n_3_temp[6]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][1][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][3], temp_3[4]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][4], temp_3[4]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][1]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][5]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][0], temp_3[7]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][1], temp_3[7]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][2]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][5]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][5]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][3][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][0], n_3_temp[8]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][1], n_3_temp[7]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][3][1], n_3_temp[8]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][1][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][0], temp_3[5]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][1], temp_3[5]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][2], temp_3[5]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][3], temp_3[5]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][4], temp_3[4]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][1][4], temp_3[5]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][1]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][5]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][0], temp_3[7]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][1], temp_3[7]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][2], temp_3[6]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][3][2], temp_3[7]));
        }
        {
          __m256d temp_1[10];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][3][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][3][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][0], matrix[1][3][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][0], matrix[1][3][3]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][3][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][3][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][1], matrix[1][3][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][1], matrix[1][3][3]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][3][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][3][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][2], matrix[1][3][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][2], matrix[1][3][3]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][3][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][3][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][3], matrix[1][3][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][3], matrix[1][3][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][3][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][3][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][4], matrix[1][3][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][4], matrix[1][3][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][3][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][3][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][5], matrix[1][3][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][5], matrix[1][3][3]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][3][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][3][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][6], matrix[1][3][2]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][1][6], matrix[1][3][3]));
          __m256d temp_2[10];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][2], matrix[1][1][5]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][3], matrix[1][1][5]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][4]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][3][4], matrix[1][1][5]));
          __m256d temp_3[10];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][4][0], n_3_temp[9]));
      }
      n_5_temp[0] = _mm256_add_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[8]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][0][0], n_4_temp[9]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[0]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[1]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[2]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[3]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[4]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[5]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[6]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[7]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][0][1], n_4_temp[8]));
      n_5_temp[10] = _mm256_add_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][0][1], n_4_temp[9]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[0]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[1]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[2]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[3]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[4]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[5]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[6]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][0][2], n_4_temp[7]));
      n_5_temp[10] = _mm256_add_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][0][2], n_4_temp[8]));
      n_5_temp[11] = _mm256_add_pd(n_5_temp[11],
                                   _mm256_mul_pd(matrix[4][0][2], n_4_temp[9]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[0]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[1]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[2]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[3]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[4]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[5]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][0][3], n_4_temp[6]));
      n_5_temp[10] = _mm256_add_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][0][3], n_4_temp[7]));
      n_5_temp[11] = _mm256_add_pd(n_5_temp[11],
                                   _mm256_mul_pd(matrix[4][0][3], n_4_temp[8]));
      n_5_temp[12] = _mm256_add_pd(n_5_temp[12],
                                   _mm256_mul_pd(matrix[4][0][3], n_4_temp[9]));
    }
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
        }
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
        }
        {
          __m256d temp_1[7];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][4][2]));
          __m256d temp_2[7];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][3][3]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][3][3]));
          __m256d temp_3[7];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][0][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][0][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][0], n_3_temp[6]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][0][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][1], n_3_temp[6]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][2], n_3_temp[6]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][3], n_3_temp[0]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][3], n_3_temp[1]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][3], n_3_temp[2]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][3], n_3_temp[3]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][3], n_3_temp[4]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][3], n_3_temp[5]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][3], n_3_temp[6]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][4], n_3_temp[0]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][4], n_3_temp[1]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][4], n_3_temp[2]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][4], n_3_temp[3]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][4], n_3_temp[4]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][4], n_3_temp[5]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][0][4], n_3_temp[6]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][0][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][3], temp_3[4]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][4], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][5], temp_3[0]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][5], temp_3[1]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][5], temp_3[2]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][5], temp_3[3]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][5], temp_3[4]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][1]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][6]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][0], temp_3[7]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][0], temp_3[8]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][1], temp_3[7]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][4][1], temp_3[8]));
        }
        {
          __m256d temp_1[10];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][1]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][2]));
          __m256d temp_2[10];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][6]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][5]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][6]));
          __m256d temp_3[10];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][3][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][3][0], n_3_temp[9]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][3][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][3][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][3][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][3][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][3][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][3][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][3][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][3][1], n_3_temp[7]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][3][1], n_3_temp[8]));
        n_4_temp[10] = _mm256_add_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][3][1], n_3_temp[9]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[6];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][5][1]));
          __m256d temp_2[6];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][3][3]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][3][3]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][3][3]));
          __m256d temp_3[6];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][0][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][0], temp_3[5]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][1], temp_3[5]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][2], temp_3[5]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][3], temp_3[5]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][4], temp_3[4]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][4], temp_3[5]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][5], temp_3[0]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][5], temp_3[1]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][5], temp_3[2]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][5], temp_3[3]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][5], temp_3[4]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][0][5], temp_3[5]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][1]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][6]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][3][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][0], temp_3[7]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][0], temp_3[8]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][3][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][1], temp_3[7]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][3][1], temp_3[8]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][3][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][3][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][3][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][3][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][3][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][3][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][3][2], temp_3[6]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][3][2], temp_3[7]));
          n_3_temp[10] = _mm256_sub_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][3][2], temp_3[8]));
        }
        {
          __m256d temp_1[11];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[10] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][3][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][3][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][0], matrix[1][3][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][0], matrix[1][3][3]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][3][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][3][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][1], matrix[1][3][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][1], matrix[1][3][3]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][3][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][3][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][2], matrix[1][3][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][2], matrix[1][3][3]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][3][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][3][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][3], matrix[1][3][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][3], matrix[1][3][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][3][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][3][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][4], matrix[1][3][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][4], matrix[1][3][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][3][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][3][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][5], matrix[1][3][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][5], matrix[1][3][3]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][3][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][3][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][6], matrix[1][3][2]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][6], matrix[1][3][3]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][3][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][3][1]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][7], matrix[1][3][2]));
          temp_1[10] = _mm256_add_pd(
              temp_1[10], _mm256_mul_pd(matrix[0][0][7], matrix[1][3][3]));
          __m256d temp_2[11];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[10] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][2], matrix[1][0][6]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][5]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][3][3], matrix[1][0][6]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][4]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][5]));
          temp_2[10] = _mm256_add_pd(
              temp_2[10], _mm256_mul_pd(matrix[0][3][4], matrix[1][0][6]));
          __m256d temp_3[11];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[10] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[10] = _mm256_add_pd(temp_3[10], temp_1[10]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          temp_3[10] = _mm256_sub_pd(temp_3[10], temp_2[10]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][5][0], temp_3[10]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][4][0], n_3_temp[9]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][4][0], n_3_temp[10]));
      }
      n_5_temp[0] = _mm256_sub_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_sub_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_sub_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_sub_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_sub_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_sub_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_sub_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_sub_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_sub_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[8]));
      n_5_temp[9] = _mm256_sub_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][1][0], n_4_temp[9]));
      n_5_temp[10] = _mm256_sub_pd(
          n_5_temp[10], _mm256_mul_pd(matrix[4][1][0], n_4_temp[10]));
      n_5_temp[1] = _mm256_sub_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[0]));
      n_5_temp[2] = _mm256_sub_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[1]));
      n_5_temp[3] = _mm256_sub_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[2]));
      n_5_temp[4] = _mm256_sub_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[3]));
      n_5_temp[5] = _mm256_sub_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[4]));
      n_5_temp[6] = _mm256_sub_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[5]));
      n_5_temp[7] = _mm256_sub_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[6]));
      n_5_temp[8] = _mm256_sub_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[7]));
      n_5_temp[9] = _mm256_sub_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][1][1], n_4_temp[8]));
      n_5_temp[10] = _mm256_sub_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][1][1], n_4_temp[9]));
      n_5_temp[11] = _mm256_sub_pd(
          n_5_temp[11], _mm256_mul_pd(matrix[4][1][1], n_4_temp[10]));
      n_5_temp[2] = _mm256_sub_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[0]));
      n_5_temp[3] = _mm256_sub_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[1]));
      n_5_temp[4] = _mm256_sub_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[2]));
      n_5_temp[5] = _mm256_sub_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[3]));
      n_5_temp[6] = _mm256_sub_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[4]));
      n_5_temp[7] = _mm256_sub_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[5]));
      n_5_temp[8] = _mm256_sub_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[6]));
      n_5_temp[9] = _mm256_sub_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][1][2], n_4_temp[7]));
      n_5_temp[10] = _mm256_sub_pd(n_5_temp[10],
                                   _mm256_mul_pd(matrix[4][1][2], n_4_temp[8]));
      n_5_temp[11] = _mm256_sub_pd(n_5_temp[11],
                                   _mm256_mul_pd(matrix[4][1][2], n_4_temp[9]));
      n_5_temp[12] = _mm256_sub_pd(
          n_5_temp[12], _mm256_mul_pd(matrix[4][1][2], n_4_temp[10]));
    }
    {
      __m256d n_4_temp[17];
      n_4_temp[0] = _mm256_setzero_pd();
      n_4_temp[1] = _mm256_setzero_pd();
      n_4_temp[2] = _mm256_setzero_pd();
      n_4_temp[3] = _mm256_setzero_pd();
      n_4_temp[4] = _mm256_setzero_pd();
      n_4_temp[5] = _mm256_setzero_pd();
      n_4_temp[6] = _mm256_setzero_pd();
      n_4_temp[7] = _mm256_setzero_pd();
      n_4_temp[8] = _mm256_setzero_pd();
      n_4_temp[9] = _mm256_setzero_pd();
      n_4_temp[10] = _mm256_setzero_pd();
      n_4_temp[11] = _mm256_setzero_pd();
      n_4_temp[12] = _mm256_setzero_pd();
      n_4_temp[13] = _mm256_setzero_pd();
      n_4_temp[14] = _mm256_setzero_pd();
      n_4_temp[15] = _mm256_setzero_pd();
      n_4_temp[16] = _mm256_setzero_pd();
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][1][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][3], temp_3[4]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][4], temp_3[4]));
        }
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][1]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][5]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][0], temp_3[7]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][1], temp_3[7]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][5], matrix[1][4][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][1][6], matrix[1][4][2]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][2], matrix[1][1][5]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][3], matrix[1][1][5]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][0][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][0][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][0], n_3_temp[8]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][0][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][1], n_3_temp[7]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][1], n_3_temp[8]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][0][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][2], n_3_temp[6]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][2], n_3_temp[7]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][0][2], n_3_temp[8]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][0][3], n_3_temp[0]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][3], n_3_temp[1]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][3], n_3_temp[2]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][3], n_3_temp[3]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][3], n_3_temp[4]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][3], n_3_temp[5]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][3], n_3_temp[6]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][0][3], n_3_temp[7]));
        n_4_temp[11] = _mm256_sub_pd(
            n_4_temp[11], _mm256_mul_pd(matrix[3][0][3], n_3_temp[8]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][0][4], n_3_temp[0]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][0][4], n_3_temp[1]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][0][4], n_3_temp[2]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][0][4], n_3_temp[3]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][0][4], n_3_temp[4]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][0][4], n_3_temp[5]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][0][4], n_3_temp[6]));
        n_4_temp[11] = _mm256_sub_pd(
            n_4_temp[11], _mm256_mul_pd(matrix[3][0][4], n_3_temp[7]));
        n_4_temp[12] = _mm256_sub_pd(
            n_4_temp[12], _mm256_mul_pd(matrix[3][0][4], n_3_temp[8]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[5];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][5][1]));
          __m256d temp_2[5];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][4][2]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][4][2]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][4][2]));
          __m256d temp_3[5];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][0][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][0], temp_3[4]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][1], temp_3[4]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][2], temp_3[4]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][3], temp_3[4]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][4], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][5], temp_3[0]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][5], temp_3[1]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][5], temp_3[2]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][5], temp_3[3]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][5], temp_3[4]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][1]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][6]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][4][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][0], temp_3[7]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][0], temp_3[8]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][4][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][4][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][4][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][4][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][4][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][4][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][4][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][4][1], temp_3[7]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][4][1], temp_3[8]));
        }
        {
          __m256d temp_1[10];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][0], matrix[1][4][2]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][1], matrix[1][4][2]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][2], matrix[1][4][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][3], matrix[1][4][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][4], matrix[1][4][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][5], matrix[1][4][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][6], matrix[1][4][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][1]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][7], matrix[1][4][2]));
          __m256d temp_2[10];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][2], matrix[1][0][6]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][5]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][4][3], matrix[1][0][6]));
          __m256d temp_3[10];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
        }
        n_4_temp[0] = _mm256_add_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][1][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][1][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][1][0], n_3_temp[9]));
        n_4_temp[1] = _mm256_add_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][1][1], n_3_temp[0]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][1], n_3_temp[1]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][1], n_3_temp[2]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][1], n_3_temp[3]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][1], n_3_temp[4]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][1], n_3_temp[5]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][1], n_3_temp[6]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][1], n_3_temp[7]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][1][1], n_3_temp[8]));
        n_4_temp[10] = _mm256_add_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][1][1], n_3_temp[9]));
        n_4_temp[2] = _mm256_add_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][1][2], n_3_temp[0]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][2], n_3_temp[1]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][2], n_3_temp[2]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][2], n_3_temp[3]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][2], n_3_temp[4]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][2], n_3_temp[5]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][2], n_3_temp[6]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][1][2], n_3_temp[7]));
        n_4_temp[10] = _mm256_add_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][1][2], n_3_temp[8]));
        n_4_temp[11] = _mm256_add_pd(
            n_4_temp[11], _mm256_mul_pd(matrix[3][1][2], n_3_temp[9]));
        n_4_temp[3] = _mm256_add_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][1][3], n_3_temp[0]));
        n_4_temp[4] = _mm256_add_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][1][3], n_3_temp[1]));
        n_4_temp[5] = _mm256_add_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][1][3], n_3_temp[2]));
        n_4_temp[6] = _mm256_add_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][1][3], n_3_temp[3]));
        n_4_temp[7] = _mm256_add_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][1][3], n_3_temp[4]));
        n_4_temp[8] = _mm256_add_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][1][3], n_3_temp[5]));
        n_4_temp[9] = _mm256_add_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][1][3], n_3_temp[6]));
        n_4_temp[10] = _mm256_add_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][1][3], n_3_temp[7]));
        n_4_temp[11] = _mm256_add_pd(
            n_4_temp[11], _mm256_mul_pd(matrix[3][1][3], n_3_temp[8]));
        n_4_temp[12] = _mm256_add_pd(
            n_4_temp[12], _mm256_mul_pd(matrix[3][1][3], n_3_temp[9]));
      }
      {
        __m256d n_3_temp[17];
        n_3_temp[0] = _mm256_setzero_pd();
        n_3_temp[1] = _mm256_setzero_pd();
        n_3_temp[2] = _mm256_setzero_pd();
        n_3_temp[3] = _mm256_setzero_pd();
        n_3_temp[4] = _mm256_setzero_pd();
        n_3_temp[5] = _mm256_setzero_pd();
        n_3_temp[6] = _mm256_setzero_pd();
        n_3_temp[7] = _mm256_setzero_pd();
        n_3_temp[8] = _mm256_setzero_pd();
        n_3_temp[9] = _mm256_setzero_pd();
        n_3_temp[10] = _mm256_setzero_pd();
        n_3_temp[11] = _mm256_setzero_pd();
        n_3_temp[12] = _mm256_setzero_pd();
        n_3_temp[13] = _mm256_setzero_pd();
        n_3_temp[14] = _mm256_setzero_pd();
        n_3_temp[15] = _mm256_setzero_pd();
        n_3_temp[16] = _mm256_setzero_pd();
        {
          __m256d temp_1[8];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][5][1]));
          __m256d temp_2[8];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][1][5]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][1][5]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][1][5]));
          __m256d temp_3[8];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][0][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][0], temp_3[7]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][0][1], temp_3[0]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][1], temp_3[1]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][1], temp_3[2]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][1], temp_3[3]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][1], temp_3[4]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][1], temp_3[5]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][1], temp_3[6]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][1], temp_3[7]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][0][2], temp_3[0]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][2], temp_3[1]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][2], temp_3[2]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][2], temp_3[3]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][2], temp_3[4]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][2], temp_3[5]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][2], temp_3[6]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][2], temp_3[7]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][0][3], temp_3[0]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][3], temp_3[1]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][3], temp_3[2]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][3], temp_3[3]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][3], temp_3[4]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][3], temp_3[5]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][3], temp_3[6]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][0][3], temp_3[7]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][0][4], temp_3[0]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][4], temp_3[1]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][4], temp_3[2]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][4], temp_3[3]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][4], temp_3[4]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][4], temp_3[5]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][0][4], temp_3[6]));
          n_3_temp[11] = _mm256_add_pd(
              n_3_temp[11], _mm256_mul_pd(matrix[2][0][4], temp_3[7]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][0][5], temp_3[0]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][0][5], temp_3[1]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][0][5], temp_3[2]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][0][5], temp_3[3]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][0][5], temp_3[4]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][0][5], temp_3[5]));
          n_3_temp[11] = _mm256_add_pd(
              n_3_temp[11], _mm256_mul_pd(matrix[2][0][5], temp_3[6]));
          n_3_temp[12] = _mm256_add_pd(
              n_3_temp[12], _mm256_mul_pd(matrix[2][0][5], temp_3[7]));
        }
        {
          __m256d temp_1[9];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][5][1]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][5][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][5][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][5][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][5][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][5][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][5][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][5][1]));
          __m256d temp_2[9];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][5][2], matrix[1][0][6]));
          __m256d temp_3[9];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          n_3_temp[0] = _mm256_sub_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][1][0], temp_3[0]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][0], temp_3[1]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][0], temp_3[2]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][0], temp_3[3]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][0], temp_3[4]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][0], temp_3[5]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][0], temp_3[6]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][0], temp_3[7]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][0], temp_3[8]));
          n_3_temp[1] = _mm256_sub_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][1][1], temp_3[0]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][1], temp_3[1]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][1], temp_3[2]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][1], temp_3[3]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][1], temp_3[4]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][1], temp_3[5]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][1], temp_3[6]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][1], temp_3[7]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][1][1], temp_3[8]));
          n_3_temp[2] = _mm256_sub_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][1][2], temp_3[0]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][2], temp_3[1]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][2], temp_3[2]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][2], temp_3[3]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][2], temp_3[4]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][2], temp_3[5]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][2], temp_3[6]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][1][2], temp_3[7]));
          n_3_temp[10] = _mm256_sub_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][1][2], temp_3[8]));
          n_3_temp[3] = _mm256_sub_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][1][3], temp_3[0]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][3], temp_3[1]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][3], temp_3[2]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][3], temp_3[3]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][3], temp_3[4]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][3], temp_3[5]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][1][3], temp_3[6]));
          n_3_temp[10] = _mm256_sub_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][1][3], temp_3[7]));
          n_3_temp[11] = _mm256_sub_pd(
              n_3_temp[11], _mm256_mul_pd(matrix[2][1][3], temp_3[8]));
          n_3_temp[4] = _mm256_sub_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][1][4], temp_3[0]));
          n_3_temp[5] = _mm256_sub_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][1][4], temp_3[1]));
          n_3_temp[6] = _mm256_sub_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][1][4], temp_3[2]));
          n_3_temp[7] = _mm256_sub_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][1][4], temp_3[3]));
          n_3_temp[8] = _mm256_sub_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][1][4], temp_3[4]));
          n_3_temp[9] = _mm256_sub_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][1][4], temp_3[5]));
          n_3_temp[10] = _mm256_sub_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][1][4], temp_3[6]));
          n_3_temp[11] = _mm256_sub_pd(
              n_3_temp[11], _mm256_mul_pd(matrix[2][1][4], temp_3[7]));
          n_3_temp[12] = _mm256_sub_pd(
              n_3_temp[12], _mm256_mul_pd(matrix[2][1][4], temp_3[8]));
        }
        {
          __m256d temp_1[13];
          temp_1[0] = _mm256_setzero_pd();
          temp_1[1] = _mm256_setzero_pd();
          temp_1[2] = _mm256_setzero_pd();
          temp_1[3] = _mm256_setzero_pd();
          temp_1[4] = _mm256_setzero_pd();
          temp_1[5] = _mm256_setzero_pd();
          temp_1[6] = _mm256_setzero_pd();
          temp_1[7] = _mm256_setzero_pd();
          temp_1[8] = _mm256_setzero_pd();
          temp_1[9] = _mm256_setzero_pd();
          temp_1[10] = _mm256_setzero_pd();
          temp_1[11] = _mm256_setzero_pd();
          temp_1[12] = _mm256_setzero_pd();
          temp_1[0] = _mm256_add_pd(
              temp_1[0], _mm256_mul_pd(matrix[0][0][0], matrix[1][1][0]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][0], matrix[1][1][1]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][0], matrix[1][1][2]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][0], matrix[1][1][3]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][0], matrix[1][1][4]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][0], matrix[1][1][5]));
          temp_1[1] = _mm256_add_pd(
              temp_1[1], _mm256_mul_pd(matrix[0][0][1], matrix[1][1][0]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][1], matrix[1][1][1]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][1], matrix[1][1][2]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][1], matrix[1][1][3]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][1], matrix[1][1][4]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][1], matrix[1][1][5]));
          temp_1[2] = _mm256_add_pd(
              temp_1[2], _mm256_mul_pd(matrix[0][0][2], matrix[1][1][0]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][2], matrix[1][1][1]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][2], matrix[1][1][2]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][2], matrix[1][1][3]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][2], matrix[1][1][4]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][2], matrix[1][1][5]));
          temp_1[3] = _mm256_add_pd(
              temp_1[3], _mm256_mul_pd(matrix[0][0][3], matrix[1][1][0]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][3], matrix[1][1][1]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][3], matrix[1][1][2]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][3], matrix[1][1][3]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][3], matrix[1][1][4]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][3], matrix[1][1][5]));
          temp_1[4] = _mm256_add_pd(
              temp_1[4], _mm256_mul_pd(matrix[0][0][4], matrix[1][1][0]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][4], matrix[1][1][1]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][4], matrix[1][1][2]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][4], matrix[1][1][3]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][4], matrix[1][1][4]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][4], matrix[1][1][5]));
          temp_1[5] = _mm256_add_pd(
              temp_1[5], _mm256_mul_pd(matrix[0][0][5], matrix[1][1][0]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][5], matrix[1][1][1]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][5], matrix[1][1][2]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][5], matrix[1][1][3]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][5], matrix[1][1][4]));
          temp_1[10] = _mm256_add_pd(
              temp_1[10], _mm256_mul_pd(matrix[0][0][5], matrix[1][1][5]));
          temp_1[6] = _mm256_add_pd(
              temp_1[6], _mm256_mul_pd(matrix[0][0][6], matrix[1][1][0]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][6], matrix[1][1][1]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][6], matrix[1][1][2]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][6], matrix[1][1][3]));
          temp_1[10] = _mm256_add_pd(
              temp_1[10], _mm256_mul_pd(matrix[0][0][6], matrix[1][1][4]));
          temp_1[11] = _mm256_add_pd(
              temp_1[11], _mm256_mul_pd(matrix[0][0][6], matrix[1][1][5]));
          temp_1[7] = _mm256_add_pd(
              temp_1[7], _mm256_mul_pd(matrix[0][0][7], matrix[1][1][0]));
          temp_1[8] = _mm256_add_pd(
              temp_1[8], _mm256_mul_pd(matrix[0][0][7], matrix[1][1][1]));
          temp_1[9] = _mm256_add_pd(
              temp_1[9], _mm256_mul_pd(matrix[0][0][7], matrix[1][1][2]));
          temp_1[10] = _mm256_add_pd(
              temp_1[10], _mm256_mul_pd(matrix[0][0][7], matrix[1][1][3]));
          temp_1[11] = _mm256_add_pd(
              temp_1[11], _mm256_mul_pd(matrix[0][0][7], matrix[1][1][4]));
          temp_1[12] = _mm256_add_pd(
              temp_1[12], _mm256_mul_pd(matrix[0][0][7], matrix[1][1][5]));
          __m256d temp_2[13];
          temp_2[0] = _mm256_setzero_pd();
          temp_2[1] = _mm256_setzero_pd();
          temp_2[2] = _mm256_setzero_pd();
          temp_2[3] = _mm256_setzero_pd();
          temp_2[4] = _mm256_setzero_pd();
          temp_2[5] = _mm256_setzero_pd();
          temp_2[6] = _mm256_setzero_pd();
          temp_2[7] = _mm256_setzero_pd();
          temp_2[8] = _mm256_setzero_pd();
          temp_2[9] = _mm256_setzero_pd();
          temp_2[10] = _mm256_setzero_pd();
          temp_2[11] = _mm256_setzero_pd();
          temp_2[12] = _mm256_setzero_pd();
          temp_2[0] = _mm256_add_pd(
              temp_2[0], _mm256_mul_pd(matrix[0][1][0], matrix[1][0][0]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][1][0], matrix[1][0][1]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][1][0], matrix[1][0][2]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][1][0], matrix[1][0][3]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][1][0], matrix[1][0][4]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][1][0], matrix[1][0][5]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][1][0], matrix[1][0][6]));
          temp_2[1] = _mm256_add_pd(
              temp_2[1], _mm256_mul_pd(matrix[0][1][1], matrix[1][0][0]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][1][1], matrix[1][0][1]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][1][1], matrix[1][0][2]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][1][1], matrix[1][0][3]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][1][1], matrix[1][0][4]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][1][1], matrix[1][0][5]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][1][1], matrix[1][0][6]));
          temp_2[2] = _mm256_add_pd(
              temp_2[2], _mm256_mul_pd(matrix[0][1][2], matrix[1][0][0]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][1][2], matrix[1][0][1]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][1][2], matrix[1][0][2]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][1][2], matrix[1][0][3]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][1][2], matrix[1][0][4]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][1][2], matrix[1][0][5]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][1][2], matrix[1][0][6]));
          temp_2[3] = _mm256_add_pd(
              temp_2[3], _mm256_mul_pd(matrix[0][1][3], matrix[1][0][0]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][1][3], matrix[1][0][1]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][1][3], matrix[1][0][2]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][1][3], matrix[1][0][3]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][1][3], matrix[1][0][4]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][1][3], matrix[1][0][5]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][1][3], matrix[1][0][6]));
          temp_2[4] = _mm256_add_pd(
              temp_2[4], _mm256_mul_pd(matrix[0][1][4], matrix[1][0][0]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][1][4], matrix[1][0][1]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][1][4], matrix[1][0][2]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][1][4], matrix[1][0][3]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][1][4], matrix[1][0][4]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][1][4], matrix[1][0][5]));
          temp_2[10] = _mm256_add_pd(
              temp_2[10], _mm256_mul_pd(matrix[0][1][4], matrix[1][0][6]));
          temp_2[5] = _mm256_add_pd(
              temp_2[5], _mm256_mul_pd(matrix[0][1][5], matrix[1][0][0]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][1][5], matrix[1][0][1]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][1][5], matrix[1][0][2]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][1][5], matrix[1][0][3]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][1][5], matrix[1][0][4]));
          temp_2[10] = _mm256_add_pd(
              temp_2[10], _mm256_mul_pd(matrix[0][1][5], matrix[1][0][5]));
          temp_2[11] = _mm256_add_pd(
              temp_2[11], _mm256_mul_pd(matrix[0][1][5], matrix[1][0][6]));
          temp_2[6] = _mm256_add_pd(
              temp_2[6], _mm256_mul_pd(matrix[0][1][6], matrix[1][0][0]));
          temp_2[7] = _mm256_add_pd(
              temp_2[7], _mm256_mul_pd(matrix[0][1][6], matrix[1][0][1]));
          temp_2[8] = _mm256_add_pd(
              temp_2[8], _mm256_mul_pd(matrix[0][1][6], matrix[1][0][2]));
          temp_2[9] = _mm256_add_pd(
              temp_2[9], _mm256_mul_pd(matrix[0][1][6], matrix[1][0][3]));
          temp_2[10] = _mm256_add_pd(
              temp_2[10], _mm256_mul_pd(matrix[0][1][6], matrix[1][0][4]));
          temp_2[11] = _mm256_add_pd(
              temp_2[11], _mm256_mul_pd(matrix[0][1][6], matrix[1][0][5]));
          temp_2[12] = _mm256_add_pd(
              temp_2[12], _mm256_mul_pd(matrix[0][1][6], matrix[1][0][6]));
          __m256d temp_3[13];
          temp_3[0] = _mm256_setzero_pd();
          temp_3[1] = _mm256_setzero_pd();
          temp_3[2] = _mm256_setzero_pd();
          temp_3[3] = _mm256_setzero_pd();
          temp_3[4] = _mm256_setzero_pd();
          temp_3[5] = _mm256_setzero_pd();
          temp_3[6] = _mm256_setzero_pd();
          temp_3[7] = _mm256_setzero_pd();
          temp_3[8] = _mm256_setzero_pd();
          temp_3[9] = _mm256_setzero_pd();
          temp_3[10] = _mm256_setzero_pd();
          temp_3[11] = _mm256_setzero_pd();
          temp_3[12] = _mm256_setzero_pd();
          temp_3[0] = _mm256_add_pd(temp_3[0], temp_1[0]);
          temp_3[1] = _mm256_add_pd(temp_3[1], temp_1[1]);
          temp_3[2] = _mm256_add_pd(temp_3[2], temp_1[2]);
          temp_3[3] = _mm256_add_pd(temp_3[3], temp_1[3]);
          temp_3[4] = _mm256_add_pd(temp_3[4], temp_1[4]);
          temp_3[5] = _mm256_add_pd(temp_3[5], temp_1[5]);
          temp_3[6] = _mm256_add_pd(temp_3[6], temp_1[6]);
          temp_3[7] = _mm256_add_pd(temp_3[7], temp_1[7]);
          temp_3[8] = _mm256_add_pd(temp_3[8], temp_1[8]);
          temp_3[9] = _mm256_add_pd(temp_3[9], temp_1[9]);
          temp_3[10] = _mm256_add_pd(temp_3[10], temp_1[10]);
          temp_3[11] = _mm256_add_pd(temp_3[11], temp_1[11]);
          temp_3[12] = _mm256_add_pd(temp_3[12], temp_1[12]);
          temp_3[0] = _mm256_sub_pd(temp_3[0], temp_2[0]);
          temp_3[1] = _mm256_sub_pd(temp_3[1], temp_2[1]);
          temp_3[2] = _mm256_sub_pd(temp_3[2], temp_2[2]);
          temp_3[3] = _mm256_sub_pd(temp_3[3], temp_2[3]);
          temp_3[4] = _mm256_sub_pd(temp_3[4], temp_2[4]);
          temp_3[5] = _mm256_sub_pd(temp_3[5], temp_2[5]);
          temp_3[6] = _mm256_sub_pd(temp_3[6], temp_2[6]);
          temp_3[7] = _mm256_sub_pd(temp_3[7], temp_2[7]);
          temp_3[8] = _mm256_sub_pd(temp_3[8], temp_2[8]);
          temp_3[9] = _mm256_sub_pd(temp_3[9], temp_2[9]);
          temp_3[10] = _mm256_sub_pd(temp_3[10], temp_2[10]);
          temp_3[11] = _mm256_sub_pd(temp_3[11], temp_2[11]);
          temp_3[12] = _mm256_sub_pd(temp_3[12], temp_2[12]);
          n_3_temp[0] = _mm256_add_pd(
              n_3_temp[0], _mm256_mul_pd(matrix[2][5][0], temp_3[0]));
          n_3_temp[1] = _mm256_add_pd(
              n_3_temp[1], _mm256_mul_pd(matrix[2][5][0], temp_3[1]));
          n_3_temp[2] = _mm256_add_pd(
              n_3_temp[2], _mm256_mul_pd(matrix[2][5][0], temp_3[2]));
          n_3_temp[3] = _mm256_add_pd(
              n_3_temp[3], _mm256_mul_pd(matrix[2][5][0], temp_3[3]));
          n_3_temp[4] = _mm256_add_pd(
              n_3_temp[4], _mm256_mul_pd(matrix[2][5][0], temp_3[4]));
          n_3_temp[5] = _mm256_add_pd(
              n_3_temp[5], _mm256_mul_pd(matrix[2][5][0], temp_3[5]));
          n_3_temp[6] = _mm256_add_pd(
              n_3_temp[6], _mm256_mul_pd(matrix[2][5][0], temp_3[6]));
          n_3_temp[7] = _mm256_add_pd(
              n_3_temp[7], _mm256_mul_pd(matrix[2][5][0], temp_3[7]));
          n_3_temp[8] = _mm256_add_pd(
              n_3_temp[8], _mm256_mul_pd(matrix[2][5][0], temp_3[8]));
          n_3_temp[9] = _mm256_add_pd(
              n_3_temp[9], _mm256_mul_pd(matrix[2][5][0], temp_3[9]));
          n_3_temp[10] = _mm256_add_pd(
              n_3_temp[10], _mm256_mul_pd(matrix[2][5][0], temp_3[10]));
          n_3_temp[11] = _mm256_add_pd(
              n_3_temp[11], _mm256_mul_pd(matrix[2][5][0], temp_3[11]));
          n_3_temp[12] = _mm256_add_pd(
              n_3_temp[12], _mm256_mul_pd(matrix[2][5][0], temp_3[12]));
        }
        n_4_temp[0] = _mm256_sub_pd(
            n_4_temp[0], _mm256_mul_pd(matrix[3][4][0], n_3_temp[0]));
        n_4_temp[1] = _mm256_sub_pd(
            n_4_temp[1], _mm256_mul_pd(matrix[3][4][0], n_3_temp[1]));
        n_4_temp[2] = _mm256_sub_pd(
            n_4_temp[2], _mm256_mul_pd(matrix[3][4][0], n_3_temp[2]));
        n_4_temp[3] = _mm256_sub_pd(
            n_4_temp[3], _mm256_mul_pd(matrix[3][4][0], n_3_temp[3]));
        n_4_temp[4] = _mm256_sub_pd(
            n_4_temp[4], _mm256_mul_pd(matrix[3][4][0], n_3_temp[4]));
        n_4_temp[5] = _mm256_sub_pd(
            n_4_temp[5], _mm256_mul_pd(matrix[3][4][0], n_3_temp[5]));
        n_4_temp[6] = _mm256_sub_pd(
            n_4_temp[6], _mm256_mul_pd(matrix[3][4][0], n_3_temp[6]));
        n_4_temp[7] = _mm256_sub_pd(
            n_4_temp[7], _mm256_mul_pd(matrix[3][4][0], n_3_temp[7]));
        n_4_temp[8] = _mm256_sub_pd(
            n_4_temp[8], _mm256_mul_pd(matrix[3][4][0], n_3_temp[8]));
        n_4_temp[9] = _mm256_sub_pd(
            n_4_temp[9], _mm256_mul_pd(matrix[3][4][0], n_3_temp[9]));
        n_4_temp[10] = _mm256_sub_pd(
            n_4_temp[10], _mm256_mul_pd(matrix[3][4][0], n_3_temp[10]));
        n_4_temp[11] = _mm256_sub_pd(
            n_4_temp[11], _mm256_mul_pd(matrix[3][4][0], n_3_temp[11]));
        n_4_temp[12] = _mm256_sub_pd(
            n_4_temp[12], _mm256_mul_pd(matrix[3][4][0], n_3_temp[12]));
      }
      n_5_temp[0] = _mm256_add_pd(n_5_temp[0],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[0]));
      n_5_temp[1] = _mm256_add_pd(n_5_temp[1],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[1]));
      n_5_temp[2] = _mm256_add_pd(n_5_temp[2],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[2]));
      n_5_temp[3] = _mm256_add_pd(n_5_temp[3],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[3]));
      n_5_temp[4] = _mm256_add_pd(n_5_temp[4],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[4]));
      n_5_temp[5] = _mm256_add_pd(n_5_temp[5],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[5]));
      n_5_temp[6] = _mm256_add_pd(n_5_temp[6],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[6]));
      n_5_temp[7] = _mm256_add_pd(n_5_temp[7],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[7]));
      n_5_temp[8] = _mm256_add_pd(n_5_temp[8],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[8]));
      n_5_temp[9] = _mm256_add_pd(n_5_temp[9],
                                  _mm256_mul_pd(matrix[4][3][0], n_4_temp[9]));
      n_5_temp[10] = _mm256_add_pd(
          n_5_temp[10], _mm256_mul_pd(matrix[4][3][0], n_4_temp[10]));
      n_5_temp[11] = _mm256_add_pd(
          n_5_temp[11], _mm256_mul_pd(matrix[4][3][0], n_4_temp[11]));
      n_5_temp[12] = _mm256_add_pd(
          n_5_temp[12], _mm256_mul_pd(matrix[4][3][0], n_4_temp[12]));
    }
    n_6_temp[0] =
        _mm256_sub_pd(n_6_temp[0], _mm256_mul_pd(matrix[5][2][0], n_5_temp[0]));
    n_6_temp[1] =
        _mm256_sub_pd(n_6_temp[1], _mm256_mul_pd(matrix[5][2][0], n_5_temp[1]));
    n_6_temp[2] =
        _mm256_sub_pd(n_6_temp[2], _mm256_mul_pd(matrix[5][2][0], n_5_temp[2]));
    n_6_temp[3] =
        _mm256_sub_pd(n_6_temp[3], _mm256_mul_pd(matrix[5][2][0], n_5_temp[3]));
    n_6_temp[4] =
        _mm256_sub_pd(n_6_temp[4], _mm256_mul_pd(matrix[5][2][0], n_5_temp[4]));
    n_6_temp[5] =
        _mm256_sub_pd(n_6_temp[5], _mm256_mul_pd(matrix[5][2][0], n_5_temp[5]));
    n_6_temp[6] =
        _mm256_sub_pd(n_6_temp[6], _mm256_mul_pd(matrix[5][2][0], n_5_temp[6]));
    n_6_temp[7] =
        _mm256_sub_pd(n_6_temp[7], _mm256_mul_pd(matrix[5][2][0], n_5_temp[7]));
    n_6_temp[8] =
        _mm256_sub_pd(n_6_temp[8], _mm256_mul_pd(matrix[5][2][0], n_5_temp[8]));
    n_6_temp[9] =
        _mm256_sub_pd(n_6_temp[9], _mm256_mul_pd(matrix[5][2][0], n_5_temp[9]));
    n_6_temp[10] = _mm256_sub_pd(n_6_temp[10],
                                 _mm256_mul_pd(matrix[5][2][0], n_5_temp[10]));
    n_6_temp[11] = _mm256_sub_pd(n_6_temp[11],
                                 _mm256_mul_pd(matrix[5][2][0], n_5_temp[11]));
    n_6_temp[12] = _mm256_sub_pd(n_6_temp[12],
                                 _mm256_mul_pd(matrix[5][2][0], n_5_temp[12]));
  };

  // packed res_poly to Resultant::UnivariatePolynomial

  std::vector<
      Resultant::UnivariatePolynomial>
      result;


  double unpacked_poly[17][4];

  _mm256_store_pd(&unpacked_poly[0][0], n_6_temp[0]);
  _mm256_store_pd(&unpacked_poly[1][0], n_6_temp[1]);
  _mm256_store_pd(&unpacked_poly[2][0], n_6_temp[2]);
  _mm256_store_pd(&unpacked_poly[3][0], n_6_temp[3]);
  _mm256_store_pd(&unpacked_poly[4][0], n_6_temp[4]);
  _mm256_store_pd(&unpacked_poly[5][0], n_6_temp[5]);
  _mm256_store_pd(&unpacked_poly[6][0], n_6_temp[6]);
  _mm256_store_pd(&unpacked_poly[7][0], n_6_temp[7]);
  _mm256_store_pd(&unpacked_poly[8][0], n_6_temp[8]);
  _mm256_store_pd(&unpacked_poly[9][0], n_6_temp[9]);
  _mm256_store_pd(&unpacked_poly[10][0], n_6_temp[10]);
  _mm256_store_pd(&unpacked_poly[11][0], n_6_temp[11]);
  _mm256_store_pd(&unpacked_poly[12][0], n_6_temp[12]);
  _mm256_store_pd(&unpacked_poly[13][0], n_6_temp[13]);
  _mm256_store_pd(&unpacked_poly[14][0], n_6_temp[14]);
  _mm256_store_pd(&unpacked_poly[15][0], n_6_temp[15]);
  _mm256_store_pd(&unpacked_poly[16][0], n_6_temp[16]);

  std::vector<double> poly_0 = {
      unpacked_poly[0][0],  unpacked_poly[1][0],  unpacked_poly[2][0],
      unpacked_poly[3][0],  unpacked_poly[4][0],  unpacked_poly[5][0],
      unpacked_poly[6][0],  unpacked_poly[7][0],  unpacked_poly[8][0],
      unpacked_poly[9][0],  unpacked_poly[10][0], unpacked_poly[11][0],
      unpacked_poly[12][0], unpacked_poly[13][0], unpacked_poly[14][0],
      unpacked_poly[15][0], unpacked_poly[16][0]};
  std::vector<double> poly_1 = {
      unpacked_poly[0][1],  unpacked_poly[1][1],  unpacked_poly[2][1],
      unpacked_poly[3][1],  unpacked_poly[4][1],  unpacked_poly[5][1],
      unpacked_poly[6][1],  unpacked_poly[7][1],  unpacked_poly[8][1],
      unpacked_poly[9][1],  unpacked_poly[10][1], unpacked_poly[11][1],
      unpacked_poly[12][1], unpacked_poly[13][1], unpacked_poly[14][1],
      unpacked_poly[15][1], unpacked_poly[16][1]};
  std::vector<double> poly_2 = {
      unpacked_poly[0][2],  unpacked_poly[1][2],  unpacked_poly[2][2],
      unpacked_poly[3][2],  unpacked_poly[4][2],  unpacked_poly[5][2],
      unpacked_poly[6][2],  unpacked_poly[7][2],  unpacked_poly[8][2],
      unpacked_poly[9][2],  unpacked_poly[10][2], unpacked_poly[11][2],
      unpacked_poly[12][2], unpacked_poly[13][2], unpacked_poly[14][2],
      unpacked_poly[15][2], unpacked_poly[16][2]};
  std::vector<double> poly_3 = {
      unpacked_poly[0][3],  unpacked_poly[1][3],  unpacked_poly[2][3],
      unpacked_poly[3][3],  unpacked_poly[4][3],  unpacked_poly[5][3],
      unpacked_poly[6][3],  unpacked_poly[7][3],  unpacked_poly[8][3],
      unpacked_poly[9][3],  unpacked_poly[10][3], unpacked_poly[11][3],
      unpacked_poly[12][3], unpacked_poly[13][3], unpacked_poly[14][3],
      unpacked_poly[15][3], unpacked_poly[16][3]};


    result.push_back(Resultant::UnivariatePolynomial(poly_0));
    result.push_back(Resultant::UnivariatePolynomial(poly_1));
    result.push_back(Resultant::UnivariatePolynomial(poly_2));
    result.push_back(Resultant::UnivariatePolynomial(poly_3));
//   res_0.push_back(std::make_pair(Resultant::UnivariatePolynomial(poly_0),
//                                  std::make_pair(0.0, 1.0)));
//   res_1.push_back(std::make_pair(Resultant::UnivariatePolynomial(poly_1),
//                                  std::make_pair(0.0, 1.0)));
//   res_2.push_back(std::make_pair(Resultant::UnivariatePolynomial(poly_2),
//                                  std::make_pair(0.0, 1.0)));
//   res_3.push_back(std::make_pair(Resultant::UnivariatePolynomial(poly_3),
//                                  std::make_pair(0.0, 1.0)));

//   result.emplace_back(res_0);
//   result.emplace_back(res_1);
//   result.emplace_back(res_2);
//   result.emplace_back(res_3);

  return result;
}
#else

template <>
std::vector<Resultant::UnivariatePolynomial>
UnivariatePolyMatrix<6ul>::determinant() const {

  __m256d res_poly[17];
  res_poly[0] = _mm256_setzero_pd();
  res_poly[1] = _mm256_setzero_pd();
  res_poly[2] = _mm256_setzero_pd();
  res_poly[3] = _mm256_setzero_pd();
  res_poly[4] = _mm256_setzero_pd();
  res_poly[5] = _mm256_setzero_pd();
  res_poly[6] = _mm256_setzero_pd();
  res_poly[7] = _mm256_setzero_pd();
  res_poly[8] = _mm256_setzero_pd();
  res_poly[9] = _mm256_setzero_pd();
  res_poly[10] = _mm256_setzero_pd();
  res_poly[11] = _mm256_setzero_pd();
  res_poly[12] = _mm256_setzero_pd();
  res_poly[13] = _mm256_setzero_pd();
  res_poly[14] = _mm256_setzero_pd();
  res_poly[15] = _mm256_setzero_pd();
  res_poly[16] = _mm256_setzero_pd();

  opt_onebounce_6x6::det6x6(matrix, res_poly);

  double unpacked_poly[17][4];

  std::vector<
      Resultant::UnivariatePolynomial>
      result;

  _mm256_store_pd(&unpacked_poly[0][0], res_poly[0]);
  _mm256_store_pd(&unpacked_poly[1][0], res_poly[1]);
  _mm256_store_pd(&unpacked_poly[2][0], res_poly[2]);
  _mm256_store_pd(&unpacked_poly[3][0], res_poly[3]);
  _mm256_store_pd(&unpacked_poly[4][0], res_poly[4]);
  _mm256_store_pd(&unpacked_poly[5][0], res_poly[5]);
  _mm256_store_pd(&unpacked_poly[6][0], res_poly[6]);
  _mm256_store_pd(&unpacked_poly[7][0], res_poly[7]);
  _mm256_store_pd(&unpacked_poly[8][0], res_poly[8]);
  _mm256_store_pd(&unpacked_poly[9][0], res_poly[9]);
  _mm256_store_pd(&unpacked_poly[10][0], res_poly[10]);
  _mm256_store_pd(&unpacked_poly[11][0], res_poly[11]);
  _mm256_store_pd(&unpacked_poly[12][0], res_poly[12]);
  _mm256_store_pd(&unpacked_poly[13][0], res_poly[13]);
  _mm256_store_pd(&unpacked_poly[14][0], res_poly[14]);
  _mm256_store_pd(&unpacked_poly[15][0], res_poly[15]);
  _mm256_store_pd(&unpacked_poly[16][0], res_poly[16]);

  std::vector<double> poly_0 = {
      unpacked_poly[0][0],  unpacked_poly[1][0],  unpacked_poly[2][0],
      unpacked_poly[3][0],  unpacked_poly[4][0],  unpacked_poly[5][0],
      unpacked_poly[6][0],  unpacked_poly[7][0],  unpacked_poly[8][0],
      unpacked_poly[9][0],  unpacked_poly[10][0], unpacked_poly[11][0],
      unpacked_poly[12][0], unpacked_poly[13][0], unpacked_poly[14][0],
      unpacked_poly[15][0], unpacked_poly[16][0]};
  std::vector<double> poly_1 = {
      unpacked_poly[0][1],  unpacked_poly[1][1],  unpacked_poly[2][1],
      unpacked_poly[3][1],  unpacked_poly[4][1],  unpacked_poly[5][1],
      unpacked_poly[6][1],  unpacked_poly[7][1],  unpacked_poly[8][1],
      unpacked_poly[9][1],  unpacked_poly[10][1], unpacked_poly[11][1],
      unpacked_poly[12][1], unpacked_poly[13][1], unpacked_poly[14][1],
      unpacked_poly[15][1], unpacked_poly[16][1]};
  std::vector<double> poly_2 = {
      unpacked_poly[0][2],  unpacked_poly[1][2],  unpacked_poly[2][2],
      unpacked_poly[3][2],  unpacked_poly[4][2],  unpacked_poly[5][2],
      unpacked_poly[6][2],  unpacked_poly[7][2],  unpacked_poly[8][2],
      unpacked_poly[9][2],  unpacked_poly[10][2], unpacked_poly[11][2],
      unpacked_poly[12][2], unpacked_poly[13][2], unpacked_poly[14][2],
      unpacked_poly[15][2], unpacked_poly[16][2]};
  std::vector<double> poly_3 = {
      unpacked_poly[0][3],  unpacked_poly[1][3],  unpacked_poly[2][3],
      unpacked_poly[3][3],  unpacked_poly[4][3],  unpacked_poly[5][3],
      unpacked_poly[6][3],  unpacked_poly[7][3],  unpacked_poly[8][3],
      unpacked_poly[9][3],  unpacked_poly[10][3], unpacked_poly[11][3],
      unpacked_poly[12][3], unpacked_poly[13][3], unpacked_poly[14][3],
      unpacked_poly[15][3], unpacked_poly[16][3]};

result.push_back(Resultant::UnivariatePolynomial(poly_0));
result.push_back(Resultant::UnivariatePolynomial(poly_1));
result.push_back(Resultant::UnivariatePolynomial(poly_2));
result.push_back(Resultant::UnivariatePolynomial(poly_3));
  return result;
}

#endif
// 

// clang-format on

std::atomic<double> coeff_time{0.0};
std::atomic<double> bezout_time{0.0};
std::atomic<double> det_time{0.0};
std::atomic<double> solve_time{0.0};
std::atomic<double> simd_time{0.0};
std::atomic<long long> simd_count{0};

void update_coeff(double d) {
  double current;
  do {
    current = coeff_time.load();

  } while (!coeff_time.compare_exchange_weak(current, current + d));
}

void update_bezout(double d) {
  double current;

  do {
    current = bezout_time.load();
  } while (!bezout_time.compare_exchange_weak(current, current + d));
}

void update_det(double d) {
  double current;

  do {
    current = det_time.load();
  } while (!det_time.compare_exchange_weak(current, current + d));
}

void update_count(int i) {
  long long current;
  do {
    current = simd_count.load();
  } while (!simd_count.compare_exchange_weak(current, current + i));
}

void update_solve(double d) {
  double current;

  do {
    current = solve_time.load();
  } while (!solve_time.compare_exchange_weak(current, current + d));
}

void update_simd(double d) {
  double current;

  do {
    current = simd_time.load();
  } while (!simd_time.compare_exchange_weak(current, current + d));
}


std::vector<std::vector<std::tuple<double, double, double, double>>>
solve(int chain_type,                 // 1R, 2T
      const std::vector<double> &pD_, /** Camera xyz */
      const std::vector<double> &pL_, /** Light xyz */
      const std::vector<double> &pX_, const std::vector<double> &pY_,
      const std::vector<double> &pZ_, const std::vector<double> &nX_,
      const std::vector<double> &nY_, const std::vector<double> &nZ_,
      bool use_fft, int cutoff_matrix, int cutoff_resultant,
      float cutoff_eps_resultant, int methodMask) {

  assert(chain_type == 1 || chain_type == 2);
  auto ___simd_begin = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
  update_count(4);
#endif
  //
  global_poly_cutoff_eps = cutoff_eps_resultant;
  global_poly_cutoff = cutoff_resultant;
  global_method_mask = methodMask;
    // std::cout << "Solve: " << pL_[0] << ", " <<  pL_[1] << ", " << pL_[2] << std::endl;
  auto ___coeff_begin = CHRONO_NOW;

  //* Directly initialize x1 and n1hat

  /**
   * | p10.x, p11.x | | p10.y, p11.y | | p10.z, p11.z |
   * | p12.x,       | | p12.y,       | | p12.z,       |
   */

  BVP3<2ul> x1(pX_.data(), pY_.data(), pZ_.data());

  /**
   * | n10.x, n11.x | | n10.y, n11.y | | n10.z, n11.z |
   * | n12.x,       | | n12.y,       | | n12.z,       |
   */

  BVP3<2ul> n1hat(nX_.data(), nY_.data(), nZ_.data());

  BVP3<1ul> xD((BVP<1ul>(pD_[0])), BVP<1ul>(pD_[1]), BVP<1ul>(pD_[2]));
  BVP3<1ul> xL((BVP<1ul>(pL_[0])), BVP<1ul>(pL_[1]), BVP<1ul>(pL_[2]));

  BVP3<1ul> p11(&pX_[8], &pY_[8], &pZ_[8]);
  BVP3<1ul> p12(&pX_[4], &pY_[4], &pZ_[4]);

  double valid_v_min = 0;
  double valid_v_max = 1;

  if (chain_type == 1) {
    BVP3 d0 = x1 - xD;
    BVP3 d1 = xL - x1;

    BVP d0_dot_n1hat = d0.dot(n1hat);
    BVP d1_dot_n1hat = d1.dot(n1hat);

    BVP3 t1hat2 = n1hat.cross(p12);

    BVP d0_dot_t1hat2 = d0.dot(t1hat2);
    BVP d1_dot_t1hat2 = d1.dot(t1hat2);

    BVP Czy = d0_dot_n1hat * d1_dot_t1hat2 + d0_dot_t1hat2 * d1_dot_n1hat;

    BVP3 s = xL - xD;
    BVP Cxz = (d0.cross(s)).dot(n1hat);

    // BVP to poly matrix

    auto ___coeff_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_coeff(CHRONO_DIFF(
                     ___coeff_end - ___coeff_begin)
                      *
                 1e-3);
#endif

    auto ___bezout_begin = CHRONO_NOW;
    UnivariatePolyMatrix<4ul> bezout = bezout_matrix<5ul, 3ul, 4ul>(Czy, Cxz);
    auto ___bezout_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_bezout(CHRONO_DIFF(
                      ___bezout_end - ___bezout_begin)
                       *
                  1e-3f);
#endif

    auto ___det_begin = CHRONO_NOW;
    auto dets = bezout.determinant();
    auto ___det_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_det(CHRONO_DIFF(
                   ___det_end - ___det_begin)
                    *
               1e-3f);
#endif

    std::vector<std::vector<std::tuple<double, double, double, double>>> res(4);
    Resultant::BivariatePolynomial Cxz_4[4];

    depack_bvp(Cxz, Cxz_4);

    //! SIMD Optimization only support m=0
    auto solve_time_begin = CHRONO_NOW;
    res[0] = Resultant::solve_equ(
        dets[0], Cxz_4[0], 1);
    res[1] = Resultant::solve_equ(
        dets[1], Cxz_4[1], 1);
    res[2] = Resultant::solve_equ(
        dets[2], Cxz_4[2], 1);
    res[3] = Resultant::solve_equ(
        dets[3], Cxz_4[3], 1);
    auto solve_time_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_solve(CHRONO_DIFF(
                     solve_time_end - solve_time_begin)
                      *
                 1e-3f);
    update_simd(CHRONO_DIFF(
                     solve_time_end - ___simd_begin)
                      *
                 1e-3f);
#endif
    return res;
  } else if (chain_type == 2) {
    // refraction
    constexpr double eta = 1.5041833;

    BVP3 d0 = x1 - xD;
    BVP3 d1 = xL - x1;

    BVP d0_norm2 = d0.dot(d0);
    BVP d1_norm2 = d1.dot(d1);

    BVP3 c0 = d0.cross(n1hat);
    BVP3 c1 = d1.cross(n1hat);

    BVP3 c = ((c0 * c0 * d1_norm2) * (eta * eta)) - c1 * c1 * d0_norm2;
    BVP Czy = c.x;

    BVP3 s = xL - xD;
    BVP3 cop = (d0.cross(s)).cross(n1hat.cross(s));
    BVP Cxz = cop.x;

    auto ___coeff_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_coeff(CHRONO_DIFF(
                     ___coeff_end - ___coeff_begin)
                      *
                 1e-3);
#endif

    auto ___bezout_begin = CHRONO_NOW;
    UnivariatePolyMatrix<6ul> bezout = bezout_matrix<7ul, 3ul, 6ul>(Czy, Cxz);
    auto ___bezout_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_bezout(CHRONO_DIFF(
                      ___bezout_end - ___bezout_begin)
                       *
                  1e-3f);
#endif

    auto ___det_begin = CHRONO_NOW;
    auto dets = bezout.determinant();
    auto ___det_end = CHRONO_NOW;
#ifdef ENABLE_TIME_COUNT
    update_det(CHRONO_DIFF(
                   ___det_end - ___det_begin)
                    *
               1e-3f);
#endif

    std::vector<std::vector<std::tuple<double, double, double, double>>> res(4);
    Resultant::BivariatePolynomial Cxz_4[4];

    depack_bvp(Cxz, Cxz_4);

    auto solve_time_begin = CHRONO_NOW;
    //  //! SIMD Optimization only support m=0
    res[0] = Resultant::solve_equ(
        dets[0], Cxz_4[0], 2);
    res[1] = Resultant::solve_equ(
        dets[1], Cxz_4[1], 2);
    res[2] = Resultant::solve_equ(
        dets[2], Cxz_4[2], 2);
    res[3] = Resultant::solve_equ(
        dets[3], Cxz_4[3], 2);
    auto solve_time_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_solve(CHRONO_DIFF(
                     solve_time_end - solve_time_begin)
                      *
                 1e-3f);
    update_simd(CHRONO_DIFF(
                     solve_time_end - ___simd_begin)
                      *
                 1e-3f);
#endif


    return res;

  } else if (chain_type == 11) {

    BVP3<1UL> p20(&pX_[12], &pY_[12], &pZ_[12]);
    BVP3<1UL> p22(&pX_[16], &pY_[16], &pZ_[16]);
    BVP3<1UL> p21(&pX_[16], &pY_[16], &pZ_[16]);

    BVP3<1UL> n20(&nX_[12], &nY_[12], &nZ_[12]);
    BVP3<1UL> n22(&nX_[16], &nY_[16], &nZ_[16]);
    BVP3<1UL> n21(&nX_[16], &nY_[16], &nZ_[16]);

    BVP3<2> d0 = x1 - xD;
    BVP3<4> omega1hat = d0 * (n1hat.dot(n1hat)) - n1hat * (n1hat.dot(d0)) * 2;

    BVP<5> u2hat = omega1hat.cross(p22).dot(x1 - p20);
    BVP<5> v2hat = (x1 - p20).cross(p21).dot(omega1hat);
    BVP<4> kappa2 = omega1hat.cross(p22).dot(p21);

    BVP3<5> x2hat = (p20 * kappa2) + (p21 * u2hat) + (p22 * v2hat);
    BVP3<5> d2hat = xL * kappa2 - x2hat;
    BVP3<5> n2hat = (n20 * kappa2) + (n21 * u2hat) + (n22 * v2hat);

    BVP3<5> t21hat = n2hat.cross(p21);
    BVP3<5> t22hat = n2hat.cross(p22);

    BVP<8> omega1hat_dot_n2hat = omega1hat.dot(n2hat);
    BVP<9> d2hat_dot_n2hat = d2hat.dot(n2hat);

    BVP<16> Czy1 =
        omega1hat_dot_n2hat * (d2hat.dot(t21hat)) +
        d2hat_dot_n2hat * (omega1hat.dot(t21hat)); // todo: change name
    BVP<16> Czy = omega1hat_dot_n2hat * (d2hat.dot(t22hat)) +
                  d2hat_dot_n2hat * (omega1hat.dot(t22hat));
    Czy = Czy + Czy1;

    BVP3<2> s = xL - x1;
    BVP3<11> cop = ((x2hat - x1 * kappa2).cross(s)).cross(n2hat.cross(s));
    BVP<11> Cxz = cop.y + cop.z;

    UnivariatePolyMatrix<15ul> matrix =
        bezout_matrix<16ul, 11ul, 15ul>(Czy, Cxz);

    //! bezout matrix is here

  } else {
    printf("ERROR : SIMD acceleraction only support one bounce specular\n");
    exit(1);
  }
}

std::tuple<std::array<Resultant::BivariatePolynomial, 4>,
           std::array<Resultant::BivariatePolynomial, 4>,
           std::array<Resultant::BivariatePolynomial, 4>,
           std::array<Resultant::BivariatePolynomial, 4>,
           std::array<Resultant::UnivariatePolynomialMatrix, 4>>
getBVPs(int chain_type,                 // 1R, 2T
        const std::vector<double> &pD_, /** Camera xyz */
        const std::vector<double> &pL_, /** Light xyz */
        const std::vector<double> &pX_, const std::vector<double> &pY_,
        const std::vector<double> &pZ_, const std::vector<double> &nX_,
        const std::vector<double> &nY_, const std::vector<double> &nZ_,
        bool use_fft, int cutoff_matrix, int cutoff_resultant,
        float cutoff_eps_resultant, int methodMask) {

  assert(chain_type == 1 || chain_type == 2 || chain_type == 11);

#ifdef ENABLE_TIME_COUNT
  update_count(4);
#endif
  //
  global_poly_cutoff_eps = cutoff_eps_resultant;
  global_poly_cutoff = cutoff_resultant;
  global_method_mask = methodMask;

  auto ___simd_begin = CHRONO_NOW;

  auto ___coeff_begin = CHRONO_NOW;

  //* Directly initialize x1 and n1hat

  /**
   * | p10.x, p11.x | | p10.y, p11.y | | p10.z, p11.z |
   * | p12.x,       | | p12.y,       | | p12.z,       |
   */

  BVP3<2ul> x1(pX_.data(), pY_.data(), pZ_.data());

  /**
   * | n10.x, n11.x | | n10.y, n11.y | | n10.z, n11.z |
   * | n12.x,       | | n12.y,       | | n12.z,       |
   */

  BVP3<2ul> n1hat(nX_.data(), nY_.data(), nZ_.data());

  BVP3<1ul> xD((BVP<1ul>(pD_[0])), BVP<1ul>(pD_[1]), BVP<1ul>(pD_[2]));
  BVP3<1ul> xL((BVP<1ul>(pL_[0])), BVP<1ul>(pL_[1]), BVP<1ul>(pL_[2]));

  BVP3<1ul> p11(&pX_[8], &pY_[8], &pZ_[8]);
  BVP3<1ul> p12(&pX_[4], &pY_[4], &pZ_[4]);

  double valid_v_min = 0;
  double valid_v_max = 1;

  std::array<Resultant::BivariatePolynomial, 4> Cxz_4;
  std::array<Resultant::BivariatePolynomial, 4> u2hat_4;
  std::array<Resultant::BivariatePolynomial, 4> v2hat_4;
  std::array<Resultant::BivariatePolynomial, 4> kappa2_4;
  std::array<Resultant::UnivariatePolynomialMatrix, 4> bezMat_4;

  if (chain_type == 1) {
    BVP3 d0 = x1 - xD;
    BVP3 d1 = xL - x1;

    BVP d0_dot_n1hat = d0.dot(n1hat);
    BVP d1_dot_n1hat = d1.dot(n1hat);

    BVP3 t1hat1 = n1hat.cross(p11);
    BVP3 t1hat2 = n1hat.cross(p12);

    BVP d0_dot_t1hat2 = d0.dot(t1hat2);
    BVP d1_dot_t1hat2 = d1.dot(t1hat2);

    BVP Czy = d0_dot_n1hat * d1_dot_t1hat2 + d0_dot_t1hat2 * d1_dot_n1hat;

    BVP3 s = xL - xD;
    BVP3 cop = (d0.cross(s)).cross(n1hat.cross(s));
    BVP Cxz = cop.x;

    // BVP to poly matrix

    auto ___coeff_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_coeff(CHRONO_DIFF(
                     ___coeff_end - ___coeff_begin)
                      *
                 1e-3);
#endif

    auto ___bezout_begin = CHRONO_NOW;
    UnivariatePolyMatrix<4ul> bezout = bezout_matrix<5ul, 3ul, 4ul>(Czy, Cxz);
    auto ___bezout_end = CHRONO_NOW;

    depack_uvpm(bezout, bezMat_4.data());

    depack_bvp(Cxz, Cxz_4.data());

    return std::make_tuple(Cxz_4, u2hat_4, v2hat_4, kappa2_4, bezMat_4);
  } else if (chain_type == 2) {
    // refraction
    constexpr double eta = 1.5041833;

    BVP3 d0 = x1 - xD;
    BVP3 d1 = xL - x1;

    BVP d0_norm2 = d0.dot(d0);
    BVP d1_norm2 = d1.dot(d1);

    BVP3 c0 = d0.cross(n1hat);
    BVP3 c1 = d1.cross(n1hat);

    BVP3 c = ((c0 * c0 * d1_norm2) * (eta * eta)) - c1 * c1 * d0_norm2;
    BVP Czy = c.x;

    BVP3 s = xL - xD;
    BVP3 cop = (d0.cross(s)).cross(n1hat.cross(s));
    BVP Cxz = cop.x + cop.y + cop.z;

    auto ___coeff_end = CHRONO_NOW;

#ifdef ENABLE_TIME_COUNT
    update_coeff(CHRONO_DIFF(
                     ___coeff_end - ___coeff_begin)
                      *
                 1e-3);
#endif

    auto ___bezout_begin = CHRONO_NOW;
    UnivariatePolyMatrix<6ul> bezout = bezout_matrix<7ul, 3ul, 6ul>(Czy, Cxz);
    auto ___bezout_end = CHRONO_NOW;

    depack_uvpm(bezout, bezMat_4.data());

#ifdef ENABLE_TIME_COUNT
    update_bezout(CHRONO_DIFF(
                      ___bezout_end - ___bezout_begin)
                       *
                  1e-3f);
#endif

    depack_bvp(Cxz, Cxz_4.data());

    return std::make_tuple(Cxz_4, u2hat_4, v2hat_4, kappa2_4, bezMat_4);

  } else if (chain_type == 11) {

    BVP3<1UL> p20(&pX_[12], &pY_[12], &pZ_[12]);
    BVP3<1UL> p22(&pX_[16], &pY_[16], &pZ_[16]);
    BVP3<1UL> p21(&pX_[16], &pY_[16], &pZ_[16]);

    BVP3<1UL> n20(&nX_[12], &nY_[12], &nZ_[12]);
    BVP3<1UL> n22(&nX_[16], &nY_[16], &nZ_[16]);
    BVP3<1UL> n21(&nX_[16], &nY_[16], &nZ_[16]);

    BVP3<2> d0 = x1 - xD;
    BVP3<4> omega1hat = d0 * (n1hat.dot(n1hat)) - n1hat * (n1hat.dot(d0)) * 2;

    BVP<5> u2hat = omega1hat.cross(p22).dot(x1 - p20);
    BVP<5> v2hat = (x1 - p20).cross(p21).dot(omega1hat);
    BVP<4> kappa2 = omega1hat.cross(p22).dot(p21);

    BVP3<5> x2hat = (p20 * kappa2) + (p21 * u2hat) + (p22 * v2hat);
    BVP3<5> d2hat = xL * kappa2 - x2hat;
    BVP3<5> n2hat = (n20 * kappa2) + (n21 * u2hat) + (n22 * v2hat);

    BVP3<5> t21hat = n2hat.cross(p21);
    BVP3<5> t22hat = n2hat.cross(p22);

    BVP<8> omega1hat_dot_n2hat = omega1hat.dot(n2hat);
    BVP<9> d2hat_dot_n2hat = d2hat.dot(n2hat);

    BVP<16> Czy1 =
        omega1hat_dot_n2hat * (d2hat.dot(t21hat)) +
        d2hat_dot_n2hat * (omega1hat.dot(t21hat)); // todo: change name
    BVP<16> Czy = omega1hat_dot_n2hat * (d2hat.dot(t22hat)) +
                  d2hat_dot_n2hat * (omega1hat.dot(t22hat));
    Czy = Czy + Czy1;

    BVP3<2> s = xL - x1;
    BVP3<11> cop = ((x2hat - x1 * kappa2).cross(s)).cross(n2hat.cross(s));
    BVP<11> Cxz = cop.y + cop.z;

    UnivariatePolyMatrix<15ul> matrix =
        bezout_matrix<16ul, 11ul, 15ul>(Czy, Cxz);

    depack_bvp(Cxz, Cxz_4.data());
    depack_bvp(u2hat, u2hat_4.data());
    depack_bvp(v2hat, v2hat_4.data());
    depack_bvp(kappa2, kappa2_4.data());

    depack_uvpm(matrix, bezMat_4.data());

    //! bezout matrix is here
    return std::make_tuple(Cxz_4, u2hat_4, v2hat_4, kappa2_4, bezMat_4);
  } else {
    printf("ERROR : SIMD acceleraction only support one bounce specular\n");
    exit(1);
  }
}

class LogHelper {
public:
  LogHelper() = default;

  ~LogHelper() {
#ifdef RESULTANT_SIMD
    std::cout << "Average : \n";

    long long count = simd_count.load();

    double t, ts = 0;

    t = coeff_time.load();
    ts += t;
    std::cout << "SIMD Coeff time : " << t / count << "us" << std::endl;

    t = bezout_time.load();
    ts += t;
    std::cout << "SIMD Bezout time : " << t / count << "us" << std::endl;

    t = det_time.load();
    ts += t;
    std::cout << "SIMD det time : " << t / count << "us" << std::endl;

    t = solve_time.load();
    ts += t;
    std::cout << "SIMD solve time : " << t / count << "us" << std::endl;

    t = simd_time.load();
    std::cout << "SIMD total time : " << ts / count << "us" << std::endl;

#endif
  }
} helper;

} // namespace resultant_simd